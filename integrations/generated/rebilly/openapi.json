{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "integrations@rebilly.com",
      "name": "Rebilly API Support",
      "url": "https://www.rebilly.com/contact/"
    },
    "description": "# Introduction\nThe Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nand [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).\n\nWe have other APIs that are also available.  Every action from our [app](https://app.rebilly.com)\nis supported by an API which is documented and available for use so that you\nmay automate any workflows necessary.  This document contains the most commonly\nintegrated resources.\n\n# Authentication\nWhen you sign up for an account, you are given your first secret API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  secret key, publishable key, JSON Web Tokens, and public signature key.\n- [Secret API key](#section/Authentication/SecretApiKey): used for requests made\n  from the server side. Never share these keys. Keep them guarded and secure.\n- [Publishable API key](#section/Authentication/PublishableApiKey): used for\n  requests from the client side. For now can only be used to create\n  a [Payment Token](#operation/PostToken) and\n  a [File token](#operation/PostFile).\n- [JWT](#section/Authentication/JWT): short lifetime tokens that can be assigned a specific expiration time.\n\nNever share your secret keys. Keep them guarded and secure.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# SDKs\n\nRebilly offers a Javascript SDK and a PHP SDK to help interact with\nthe API.  However, no SDK is required to use the API.\n\nRebilly also offers [FramePay](https://rebilly.github.io/framepay-docs/),\n a client-side iFrame-based solution to help\ncreate payment tokens while minimizing PCI DSS compliance burdens\nand maximizing the customizability. [FramePay](https://rebilly.github.io/framepay-docs/)\nis interacting with the [payment tokens creation operation](#operation/PostToken).\n\n## Javascript SDK\n\nThe [Javascript SDK](https://github.com/Rebilly/rebilly-js-sdk) is maintained\nwithin Github, and contains the installation and usage instructions.\n\n## PHP SDK\nFor all PHP SDK examples provided in these docs you will need to configure the `$client`.\nYou may do it like this:\n\n```php\n$client = new Rebilly\\Client([\n    'apiKey' => 'YourApiKeyHere',\n    'baseUrl' => 'https://api.rebilly.com',\n]);\n```\n\n# Using filter with Collections\nRebilly provides collections filtering. You can use `?filter` param on collection to define which records should be shown in the response.\n\nHere is filter format description:\n\n- Fields and values in filter are separated with `:`: `?filter=firstName:John`.\n\n- Fields in filter are separated with `;`: `?filter=firstName:John;lastName:Doe`.\n\n- You can use multiple values using `,` as values separator: `?filter=firstName:John,Bob`.\n\n- To negate the filter use `!`: `?filter=firstName:!John`. Note that you can negate multiple values like this: `?filter=firstName:!John,Bob`. This filter rule will exclude all Johns and Bobs from the response.\n\n- You can use range filters like this: `?filter=amount:1..10`.\n\n- You can use gte (greater than or equals) filter like this: `?filter=amount:1..`, or lte (less than or equals) than filter like this: `?filter=amount:..10`.\n\n- You can create some [predefined values lists](https://user-api-docs.rebilly.com/#tag/Lists) and use them in filter: `?filter=firstName:@yourListName`. You can also exclude list values: `?filter=firstName:!@yourListName`\n\n# Expand to Include Embedded Objects\nRebilly provides the ability to pre-load additional\nobjects with a request.\n\nYou can use `?expand` param on most requests to expand\nand include embedded objects within the\n`_embedded` property of the response.\n\nThe `_embedded` property contains an array of\nobjects keyed by the expand parameter value(s).\n\nYou may expand multiple objects by passing them\nas comma-separated to the expand value like so:\n\n```\n?expand=recentInvoice,customer\n```\n\nAnd in the response, you would see:\n\n```\n\"_embedded\": [\n    \"recentInvoice\": {...},\n    \"customer\": {...}\n]\n```\nExpand may be utilitized not only on `GET` requests but also on `PATCH`, `POST`, `PUT` requests too.\n\n\n# Getting Started Guide\n\nRebilly's API has over 300 operations.  That's more than you'll\nneed to implement your use cases.  If you have a use\ncase you would like to implement, please consult us for\nfeedback on the best API operations for the task.\n\nOur getting started guide will demonstrate a basic order form use\ncase.  It will allow us to highlight core resources\nin Rebilly that will be helpful for many other use cases\ntoo.\n\nWithin 25 minutes, you'll have sent API requests (via our console)\nto create a subscription order.\n\n[Click here to visit our API Guide Tutorial](https://api-guides.rebilly.com/).\n",
    "license": {
      "name": "Rebilly",
      "url": "https://www.rebilly.com/api-license/"
    },
    "termsOfService": "https://www.rebilly.com/terms-of-use/",
    "title": "Rebilly",
    "version": "2.1",
    "x-apisguru-categories": [
      "developer_tools"
    ],
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://api-reference.rebilly.com/openapi.json",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "rebilly.com",
    "x-datafire": {
      "name": "rebilly",
      "type": "openapi"
    }
  },
  "host": "api.rebilly.com",
  "basePath": "/v2.1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/3dsecure": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/ThreeDSecure"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "3D Secure"
        ],
        "operationId": "Get3DSecureCollection",
        "summary": "Retrieve a list of ThreeDSecure entries"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ThreeDSecure resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ThreeDSecure entry was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "3D Secure"
        ],
        "description": "Create a ThreeDSecure entry\n",
        "operationId": "Post3DSecure",
        "summary": "Create a ThreeDSecure entry"
      }
    },
    "/3dsecure/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "ThreeDSecure entry was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "3D Secure"
        ],
        "description": "Retrieve a ThreeDSecure entry with specified identifier string\n",
        "operationId": "Get3DSecure",
        "summary": "Retrieve a ThreeDSecure entry"
      }
    },
    "/attachments": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "The partial search of the text fields.",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nIt accepts a comma-separated list of objects to expand.\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
            "in": "query",
            "name": "expand",
            "type": "string"
          },
          {
            "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned.",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "relatedId",
                "-relatedId",
                "relatedType",
                "-relatedType",
                "fileId",
                "-fileId",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ],
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Attachments was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Attachment"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Retrieve a list of Attachments\n",
        "operationId": "GetAttachmentCollection",
        "summary": "Retrieve a list of Attachments",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachments = $client->attachments()->search([\n    'filter' => 'relatedType:customer',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Attachment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Attachment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Create an Attachment\n",
        "operationId": "PostAttachment",
        "summary": "Create an Attachment",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->create($attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/attachments/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Attachment was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Delete the Attachment with predefined identifier string\n",
        "operationId": "DeleteAttachment",
        "summary": "Delete an Attachment",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->attachments()->delete('attachmentId');\n"
          }
        ]
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Attachment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Retrieve a Attachment with specified identifier string\n",
        "operationId": "GetAttachment",
        "summary": "Retrieve an Attachment",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachment = $client->attachments()->load('attachmentId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Attachment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "201": {
            "description": "Attachment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Update the Attachment with predefined ID\n",
        "operationId": "PutAttachment",
        "summary": "Update the Attachment with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->update('attachmentId', $attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-options": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current authentication options was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthenticationOptions"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Read current authentication options\n",
        "operationId": "GetAuthenticationOption",
        "summary": "Read current authentication options",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationOptions = $client->authenticationOptions()->load();\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Authentication Options resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication Options were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationOptions"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Change options\n",
        "operationId": "PutAuthenticationOption",
        "summary": "Change authentication options",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationOptionsForm = new Rebilly\\Entities\\AuthenticationOptions();\n// Regular expression below matches any password with 6+ length that contains alphabet symbols and/or numbers.\n$authenticationOptionsForm->setPasswordPattern('/^[a-zA-Z0-9]{6,}$/');\n\ntry {\n    $authenticationOptions = $client->authenticationOptions()->update($authenticationOptionsForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-tokens": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of auth tokens was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthenticationToken"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Retrieve a list of auth tokens\n",
        "operationId": "GetAuthenticationTokenCollection",
        "summary": "Retrieve a list of auth tokens",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationTokens = $client->authenticationTokens()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "AuthenticationToken resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Login successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "tags": [
          "Customer Authentication"
        ],
        "description": "Login a customer\n",
        "operationId": "PostAuthenticationToken",
        "summary": "Login",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationForm = new Rebilly\\Entities\\AuthenticationToken();\n$authenticationForm->setUsername('username');\n$authenticationForm->setPassword('test123');\n\ntry {\n    $authenticationToken = $client->authenticationTokens()->login($authenticationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-tokens/{token}": {
      "parameters": [
        {
          "description": "The token identifier string",
          "in": "path",
          "name": "token",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Customer was logged out",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "tags": [
          "Customer Authentication"
        ],
        "description": "Logout a customer\n",
        "operationId": "DeleteAuthenticationToken",
        "summary": "Logout a customer",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->authenticationTokens()->logout('token');\n"
          }
        ]
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Authentication Token was verified",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "tags": [
          "Customer Authentication"
        ],
        "description": "Verify an authentication token\n",
        "operationId": "GetAuthenticationTokenVerification",
        "summary": "Verify",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$isVerified = $client->authenticationTokens()->verify('token');\n"
          }
        ]
      }
    },
    "/authentication-tokens/{token}/exchange": {
      "parameters": [
        {
          "description": "The token identifier string",
          "in": "path",
          "name": "token",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerJWT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication Token exchanged for JWT",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerJWT"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "tags": [
          "Customer Authentication"
        ],
        "description": "Exchange Authentication Token for JWT\n\nIt will also invalidate an Authentication Token by default (so it can only be exchanged once).\n",
        "operationId": "PostAuthenticationTokenExchange",
        "summary": "Exchange"
      }
    },
    "/bank-accounts": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Bank Accounts was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/BankAccount"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "description": "Retrieve a list of Bank Accounts\n",
        "operationId": "GetBankAccountCollection",
        "summary": "Retrieve a list of bank accounts",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccounts = $client->bankAccounts()->search([\n    'filter' => 'customerId:testId',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "BankAccount resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Bank Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "description": "Create a Bank Account\n",
        "operationId": "PostBankAccount",
        "summary": "Create a Bank Account",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n$bankAccountForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $bankAccount = $client->bankAccounts()->create($bankAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/bank-accounts/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bank Account was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "description": "Retrieve a Bank Account with specified identifier string\n",
        "operationId": "GetBankAccount",
        "summary": "Retrieve a Bank Account",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccount = $client->bankAccounts()->load('bankAccountId');\n"
          }
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Bank Account",
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "accountType": {
                  "description": "Bank's Account type.",
                  "enum": [
                    "checking",
                    "savings",
                    "other"
                  ],
                  "type": "string"
                },
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/ContactObject"
                    }
                  ],
                  "description": "The Address."
                },
                "bankName": {
                  "description": "Bank's name.",
                  "type": "string"
                },
                "customFields": {
                  "$ref": "#/definitions/ResourceCustomFields"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bank Account was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "description": "Update bank account's values except for the account number and routing number\n",
        "operationId": "PatchBankAccount",
        "summary": "Update a bank account's values"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "BankAccount resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "BankAccount was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "201": {
            "description": "BankAccount was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "description": "Create or update a BankAccount with predefined identifier string\n",
        "operationId": "PutBankAccount",
        "summary": "Create a Bank Account with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n$bankAccountForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $bankAccount = $client->customers()->create($bankAccountForm, 'bankAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/bank-accounts/{id}/deactivation": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Bank Account was deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "description": "Deactivate a Bank Account\n",
        "operationId": "PostBankAccountDeactivation",
        "summary": "Deactivate a Bank Account",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccount = $client->bankAccounts()->deactivate('bankAccountId');\n"
          }
        ]
      }
    },
    "/blacklists": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Blacklists was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Blacklist"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Blacklists"
        ],
        "description": "Retrieve a list of blacklists\n",
        "operationId": "GetBlacklistCollection",
        "summary": "Retrieve a list of blacklists",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklists = $client->blacklists()->search([\n    'filter' => 'value:testValue',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Blacklist resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Blacklists"
        ],
        "description": "Create a blacklist\n",
        "operationId": "PostBlacklist",
        "summary": "Create a blacklist",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklistForm = new Rebilly\\Entities\\Blacklist();\n$blacklistForm->setType($blacklistForm::TYPE_EMAIL);\n$blacklistForm->setValue('test@test.com');\n$blacklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blacklist = $client->blacklists()->create($blacklistForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/blacklists/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Blacklist was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Blacklists"
        ],
        "description": "Delete a blacklist with predefined identifier string\n",
        "operationId": "DeleteBlacklist",
        "summary": "Delete a blacklist",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->blacklists()->delete('blacklistId');\n"
          }
        ]
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Blacklist was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Blacklists"
        ],
        "description": "Retrieve a blacklist with specified identifier string\n",
        "operationId": "GetBlacklist",
        "summary": "Retrieve a blacklist",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklist = $client->blacklists()->load('blacklistId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Blacklist resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Blacklist exist and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Blacklists"
        ],
        "description": "Create a blacklist with predefined identifier string\n",
        "operationId": "PutBlacklist",
        "summary": "Create a blacklist with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklistForm = new Rebilly\\Entities\\Blacklist();\n$blacklistForm->setType($blacklistForm::TYPE_EMAIL);\n$blacklistForm->setValue('test@test.com');\n$blacklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blacklist = $client->blacklists()->create($blacklistForm, 'blacklistId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/contacts": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Contacts was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Contact"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Contacts"
        ],
        "deprecated": true,
        "description": "Retrieve a list of contacts.  This may be useful\nwhen giving the customer a choice between previous\naddresses they've used before.\n",
        "operationId": "GetContactCollection",
        "summary": "Retrieve a list of contacts",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contacts = $client->contacts()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Contact resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Contacts"
        ],
        "deprecated": true,
        "description": "Contacts are created automatically by data passed to the\ncontact-related hashes within the customer, invoice,\npayment instrument (like payment card), subscriptions,\nand more.\n<div class=\"alert alert-warning\">\n  Note: This method should almost never be used.\n  Please check with us on your use case before using it.\n</div>\n",
        "operationId": "PostContact",
        "summary": "Create a contact",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contactForm = new Rebilly\\Entities\\Contact();\n$contactForm->setFirstName('Sherlock');\n$contactForm->setLastName('Holmes');\n$contactForm->setOrganization('TestOrganization');\n$contactForm->setEmails(\n    [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ]\n);\n$contactForm->setPhoneNumbers(\n    [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ]\n);\n\ntry {\n    $contact = $client->contacts()->create($contactForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/contacts/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Contact was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "402": {
            "description": "Contact cannot be deleted"
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Contacts"
        ],
        "deprecated": true,
        "description": "Delete a contact with predefined identifier string\n",
        "operationId": "DeleteContact",
        "summary": "Delete a contact"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Contact was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Contacts"
        ],
        "deprecated": true,
        "description": "Retrieve a contact with specified identifier string\n",
        "operationId": "GetContact",
        "summary": "Retrieve a contact",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contact = $client->contacts()->load('contactId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Contact resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Contact exists and cannot be updated"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Contacts"
        ],
        "deprecated": true,
        "description": "Create or update a contact with predefined identifier string\n",
        "operationId": "PutContact",
        "summary": "Create or update a contact with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contactForm = new Rebilly\\Entities\\Contact();\n$contactForm->setFirstName('Sherlock');\n$contactForm->setLastName('Holmes');\n$contactForm->setOrganization('TestOrganization');\n$contactForm->setEmails(\n    [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ]\n);\n$contactForm->setPhoneNumbers(\n    [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ]\n);\n\ntry {\n    $contact = $client->contacts()->update('contactId', $contactForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "The partial search of the text fields.",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of coupons was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Coupon"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "description": "Retrieve a list of coupons\n",
        "operationId": "GetCouponCollection",
        "summary": "Retrieve a list of coupons",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$coupons = $client->coupons()->search([\n    'filter' => 'status:issued',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Coupon resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Coupon was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "description": "Create a coupon\n",
        "operationId": "PostCoupon",
        "summary": "Create a coupon",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new \\Rebilly\\Entities\\Coupons\\Discounts\\Fixed($discountArray);\n$couponForm->setDiscount($discountForm);\n// Coupon can be used right now\n$couponForm->setIssuedTime(date('Y-m-d H:i:s'));\n\n$restrictionArray = [\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restrictions\\DiscountsPerRedemption($restrictionArray);\n\n$couponForm->setRestrictions([$restrictionForm]);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons-redemptions": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "The partial search of the text fields.",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupons redemptions were retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/CouponRedemption"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "operationId": "GetCouponRedemptionCollection",
        "summary": "Retrieve a list of coupon redemptions",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponRedemptions = $client->couponsRedemptions()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Redeem a coupon",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CouponRedemption"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Coupon was redeemed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CouponRedemption"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "description": "Redeem a coupon\n",
        "operationId": "PostCouponRedemption",
        "summary": "Redeem a coupon",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$redemptionForm = new Rebilly\\Entities\\Coupons\\Redemption();\n$redemptionForm->setCustomerId('customerId');\n$redemptionForm->setRedemptionCode('redemptionCode');\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$redemptionForm->setAdditionalRestrictions($restrictionForm);\n\ntry {\n    $couponRedemption = $client->couponsRedemptions()->redeem($redemptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons-redemptions/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieve a coupon redemption with specified identifier string",
            "schema": {
              "$ref": "#/definitions/CouponRedemption"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "operationId": "GetCouponRedemption",
        "summary": "Retrieve a coupon redemption with specified identifier string",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponRedemption = $client->couponsRedemptions()->load('redemptionCode');\n"
          }
        ]
      }
    },
    "/coupons-redemptions/{id}/cancel": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Cancel a coupon redemption"
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "operationId": "PostCouponRedemptionCancellation",
        "summary": "Cancel a coupon redemption",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->couponsRedemptions()->cancel('id');\n"
          }
        ]
      }
    },
    "/coupons/{redemptionCode}": {
      "parameters": [
        {
          "description": "The Coupon's redemption code",
          "in": "path",
          "name": "redemptionCode",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Coupon was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "description": "Retrieve a coupon with specified redemption code string\n",
        "operationId": "GetCoupon",
        "summary": "Retrieve a coupon",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$coupon = $client->coupons()->load('redemptionCode');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Coupon resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "201": {
            "description": "Coupon was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "description": "Create or update a coupon with predefined redemption code\n",
        "operationId": "PutCoupon",
        "summary": "Create or update a coupon with predefined redemption code",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Discount::TYPE_FIXED,\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new Rebilly\\Entities\\Coupons\\Discount($discountArray);\n$couponForm->setDiscount($discountForm);\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$couponForm->setRestrictions($restrictionForm);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm, 'redemptionCode');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons/{redemptionCode}/expiration": {
      "parameters": [
        {
          "description": "The coupon's redemption code",
          "in": "path",
          "name": "redemptionCode",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Coupon resource",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CouponExpiration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Coupon expiration was successfully set",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "The coupon is already expired and has been redeemed, unable to reschedule expiration",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Coupons"
        ],
        "description": "Set a coupon's expiry time with the specified redemption code.\nThe expiredTime of a coupon must be greater than its issuedTime.\nThis cannot be performed on expired coupons.\n",
        "operationId": "PostCouponExpiration",
        "summary": "Set a coupon's expiration time."
      }
    },
    "/credentials": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Credentials was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Credential"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Retrieve a list of credentials\n",
        "operationId": "GetCredentialCollection",
        "summary": "Retrieve a list of credentials",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentials = $client->customerCredentials()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Credential resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Create a credential\n",
        "operationId": "PostCredential",
        "summary": "Create a credential",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->create($customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/credentials/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Credential was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Delete a credential with predefined identifier string\n",
        "operationId": "DeleteCredential",
        "summary": "Delete a credential",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->customerCredentials()->delete('credentialId');\n"
          }
        ]
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Retrieve a credential with specified identifier string\n",
        "operationId": "GetCredential",
        "summary": "Retrieve a credential",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredential = $client->customerCredentials()->load('credentialId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Credential resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credential was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Create or update a credential with predefined identifier string\n",
        "operationId": "PutCredential",
        "summary": "Create or update a credential with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->update('credentialId', $customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/custom-fields/{resource}": {
      "parameters": [
        {
          "description": "The resource type string",
          "enum": [
            "customers",
            "payment-cards",
            "subscriptions",
            "transactions",
            "websites",
            "contacts",
            "products",
            "plans"
          ],
          "in": "path",
          "name": "resource",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A schema of Custom Fields was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "description": "The list of custom fields",
              "items": {
                "$ref": "#/definitions/CustomField"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Custom Fields"
        ],
        "description": "Retrieve a schema of Custom Fields for the given resource type\n",
        "operationId": "GetCustomFieldCollection",
        "summary": "Retrieve Custom Fields",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customFields = $client->customFields()->search('customers', [\n    'filter' => 'type:boolean',\n]);\n"
          }
        ]
      }
    },
    "/custom-fields/{resource}/{name}": {
      "parameters": [
        {
          "description": "The resource type string",
          "enum": [
            "customers",
            "payment-cards",
            "subscriptions",
            "transactions",
            "websites",
            "contacts",
            "products",
            "plans"
          ],
          "in": "path",
          "name": "resource",
          "required": true,
          "type": "string"
        },
        {
          "description": "The custom field's identifier string",
          "in": "path",
          "maxLength": 60,
          "name": "name",
          "pattern": "^[\\w-]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A schema of the Custom Field was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Custom Fields"
        ],
        "description": "Retrieve a schema of the given Custom Field for the given resource type\n",
        "operationId": "GetCustomField",
        "summary": "Retrieve a Custom Field",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customField = $client->customFields()->load('customers', 'testFieldName');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Custom Fields schema of the given resource type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Custom Field was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "201": {
            "description": "The Custom Fields was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "The schema is in use: remove all the associated data in order to remove or alter the schema\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Custom Fields"
        ],
        "description": "Create or alter a schema of the given Custom Field for the given resource type.\n",
        "operationId": "PutCustomField",
        "summary": "Create or alter a Custom Field",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customFieldForm = new Rebilly\\Entities\\CustomField();\n$customFieldForm->setType($customFieldForm::TYPE_BOOLEAN);\n\ntry {\n    $customField = $client->customFields()->update('customers', 'testFieldName', $customFieldForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customer-timeline-custom-events": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer timeline custom event types was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomerTimelineCustomEvent"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers Timeline"
        ],
        "description": "Retrieve a list of customer timeline custom event types\n",
        "operationId": "GetCustomerTimelineCustomEventTypeCollection",
        "summary": "Retrieve a list of customer timeline custom event types"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer Timeline Custom Event Type resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerTimelineCustomEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Customer Timeline Custom Event Type was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerTimelineCustomEvent"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Create Customer Timeline custom event type\n",
        "operationId": "PostCustomerTimelineCustomEventType",
        "summary": "Create Customer Timeline custom event type"
      }
    },
    "/customer-timeline-custom-events/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Customer Timeline custom event type was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerTimelineCustomEvent"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers Timeline"
        ],
        "description": "Retrieve customer timeline custom event type\n",
        "operationId": "GetCustomerTimelineCustomEventType",
        "summary": "Retrieve customer timeline custom event type with specified identifier string"
      }
    },
    "/customer-timeline-events": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer timeline messages was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomerTimeline"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers Timeline"
        ],
        "description": "Retrieve a list of customer timeline messages for all customers\n",
        "operationId": "GetCustomerTimelineEventCollection",
        "summary": "Retrieve a list of customer timeline messages for all customers"
      }
    },
    "/customers": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "The partial search of the text fields.",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nIt accepts a comma-separated list of objects to expand.\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
            "in": "query",
            "name": "expand",
            "type": "string"
          },
          {
            "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned.",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "enum": [
                "id",
                "-id",
                "email",
                "-email",
                "averageValue",
                "-averageValue",
                "paymentCount",
                "-paymentCount",
                "lastPaymentTime",
                "-lastPaymentTime",
                "lifetimeRevenue",
                "-lifetimeRevenue",
                "invoiceCount",
                "-invoiceCount",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ],
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Customers was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Retrieve a list of customers\n",
        "operationId": "GetCustomerCollection",
        "summary": "Retrieve a list of customers",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customers = $client->customers()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Customer",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Create a customer without a predefined ID.\nThe customer's primary address\nwill be used as the default address for payment\ninstruments, subscriptions and invoices if none\nare provided.\n\nIf you wish to create the customer with a predefined\nID (which we recommend to prevent duplication), you\nmay use our `PUT` request described below.\n\nRead our guide to [preventing duplicates](https://api-guides.rebilly.com/core-concepts/preventing-duplicates)\nto understand more.\n",
        "operationId": "PostCustomer",
        "summary": "Create a customer (without an ID)",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setPrimaryAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $customer = $client->customers()->create($customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The customer idendifier to get the data of the deleted duplicate customer",
            "in": "query",
            "name": "targetCustomerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Customer has been merged and removed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Merge one duplicate customer to another target customer and delete the former.",
        "operationId": "DeleteCustomer",
        "summary": "Merge and delete a customer"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Customer was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Retrieve a customer with specified identifier string\n",
        "operationId": "GetCustomer",
        "summary": "Retrieve a customer",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customers = $client->customers()->load('myCustomerId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "201": {
            "description": "Customer",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Create or update (upsert) a customer with predefined identifier string.\nRead our guide to [preventing duplicates](https://api-guides.rebilly.com/core-concepts/preventing-duplicates)\nto understand more.\n",
        "operationId": "PutCustomer",
        "summary": "Upsert a customer with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setPrimaryAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $customer = $client->customers()->update('myCustomerId', $customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers/{id}/lead-source": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Delete a Lead Source that belongs to a certain customer\n",
        "operationId": "DeleteCustomerLeadSource",
        "summary": "Delete a Lead Source for a customer",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customer = $client->customers()->deleteLeadSource('myCustomerId');\n"
          }
        ]
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Retrieve a Lead Source of given customer\n",
        "operationId": "GetCustomerLeadSource",
        "summary": "Retrieve a customer's Lead Source",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customer = $client->customers()->load('myCustomerId');\n$leadSource = $customer->getLeadSource();\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Lead Source resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Customers"
        ],
        "description": "Create a Lead Source for a customer\n",
        "operationId": "PutCustomerLeadSource",
        "summary": "Create a Lead Source for a customer",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $customer = $client->customers()->updateLeadSource('myCustomerId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers/{id}/timeline": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of customer timeline messages was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomerTimeline"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers Timeline"
        ],
        "description": "Retrieve a list of customer timeline messages\n",
        "operationId": "GetCustomerTimelineCollection",
        "summary": "Retrieve a list of customer timeline messages"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Customer Timeline resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerTimeline"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Customer Timeline comment or custom defined event was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerTimeline"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Customers Timeline"
        ],
        "description": "Create a customer Timeline comment or custom defined event\n",
        "operationId": "PostCustomerTimeline",
        "summary": "Create a customer Timeline comment or custom defined event"
      }
    },
    "/customers/{id}/timeline/{messageId}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "The Customer Timeline message ID",
          "in": "path",
          "name": "messageId",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Customer Timeline message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers Timeline"
        ],
        "description": "Delete a Customer Timeline message with predefined identifier string\n",
        "operationId": "DeleteCustomerTimeline",
        "summary": "Delete a Customer Timeline message"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Customer message was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerTimeline"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customers Timeline"
        ],
        "description": "Retrieve a customer message with specified identifier string\n",
        "operationId": "GetCustomerTimeline",
        "summary": "Retrieve a customer Timeline message"
      }
    },
    "/customers/{id}/upcoming-invoices": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nIt accepts a comma-separated list of objects to expand.\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
            "in": "query",
            "name": "expand",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Upcoming invoices are retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Invoice"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Retrieve a list of upcoming invoices from the subscriptions which belong to the given customer.\nThe endpoint is temporary before upcoming invoices get a complete integration.\n",
        "operationId": "GetCustomerUpcomingInvoiceCollection",
        "summary": "Retrieve customer's upcoming invoices"
      }
    },
    "/disputes": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of disputes was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Dispute"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Disputes"
        ],
        "description": "Retrieve a list of disputes\n",
        "operationId": "GetDisputeCollection",
        "summary": "Retrieve a list of disputes",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputes = $client->disputes()->search([\n    'filter' => 'transactionId:testId',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Dispute resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Disputes"
        ],
        "description": "Create a dispute\n",
        "operationId": "PostDispute",
        "summary": "Create a dispute",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->create($disputeForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/disputes/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dispute was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Disputes"
        ],
        "description": "Retrieve a dispute with specified identifier string\n",
        "operationId": "GetDispute",
        "summary": "Retrieve a dispute",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$dispute = $client->disputes()->load('disputeId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Dispute resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Disputes"
        ],
        "description": "Create or update a Dispute with predefined identifier string\n",
        "operationId": "PutDispute",
        "summary": "Create or update a Dispute with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->update('disputeId', $dispute);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/disputes/{id}/matched-rules": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/MatchedRule"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Disputes"
        ],
        "description": "Get matched rules for the dispute",
        "operationId": "GetDisputeMatchedRuleCollection",
        "summary": "Get matched rules for the dispute"
      }
    },
    "/files": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "The partial search of the text fields.",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nIt accepts a comma-separated list of objects to expand.\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
            "in": "query",
            "name": "expand",
            "type": "string"
          },
          {
            "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned.",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "extension",
                "-extension",
                "size",
                "-size",
                "width",
                "-width",
                "height",
                "-height",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ],
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Files was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/File"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Retrieve a list of files\n",
        "operationId": "GetFileCollection",
        "summary": "Retrieve a list of files",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$files = $client->files()->search([\n    'filter' => 'name:TestFile',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "File was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "tags": [
          "Files"
        ],
        "description": "Additionally, a file can be sent with:\n - multipart/form-data POST request: in this case all property names are the same as the JSON ones (`file` is an uploaded file)\n - file body request: the file body is sent as the request body, with the appropriate `Content-Type`. No additional\n properties can be set along the request data\n\nThe following file types only are allowed:\n - jpg\n - png\n - gif\n - pdf\n - mp3\n\n\nIf using a Publishable Api Key, only private files can be created. The files can later on be modified or used using\n a secret API key.\n",
        "operationId": "PostFile",
        "summary": "Create a file",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setUrl('http://test.com/somefile.jpg');\n\ntry {\n    $file = $client->files()->create($fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/files/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "File was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Delete the File with predefined identifier string\n",
        "operationId": "DeleteFile",
        "summary": "Delete a File",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->files()->delete('fileId');\n"
          }
        ]
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "File was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Retrieve a File with specified identifier string\n",
        "operationId": "GetFile",
        "summary": "Retrieve a File Record",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$file = $client->files()->load('fileId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "File resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Update the File with predefined ID. Note that file can be uploaded with POST only.\n",
        "operationId": "PutFile",
        "summary": "Update the File with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setDescription('This is a test file');\n\ntry {\n    $file = $client->files()->update('fileId', $fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/files/{id}/download": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The file was retrieved successfully",
            "headers": {
              "Content-Length": {
                "description": "The number of bytes in the file",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The MIME type of the file",
                "type": "string"
              }
            },
            "schema": {
              "readOnly": true,
              "type": "string"
            }
          },
          "302": {
            "description": "Resource was moved",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Download a file\n",
        "operationId": "GetFileDownload",
        "summary": "Download a file"
      }
    },
    "/files/{id}/download{extension}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "File extension which also indicates the desired file format",
          "enum": [
            ".png",
            ".jpg",
            ".gif"
          ],
          "in": "path",
          "name": "extension",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The file was retrieved successfully",
            "headers": {
              "Content-Length": {
                "description": "The number of bytes in the file",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The MIME type of the file",
                "type": "string"
              }
            },
            "schema": {
              "readOnly": true,
              "type": "string"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Files"
        ],
        "description": "Download image in specific format. Images are converted server-side\n",
        "operationId": "GetFileDownloadExtension",
        "summary": "Download image in specific format"
      }
    },
    "/invoices": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of invoices was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Invoice"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Retrieve a list of invoices\n",
        "operationId": "GetInvoiceCollection",
        "summary": "Retrieve a list of invoices",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoices = $client->invoices()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Invoice resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Create an invoice\n",
        "operationId": "PostInvoice",
        "summary": "Create an invoice",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "<?\n$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n$invoiceForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $invoice = $client->invoices()->create($invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "parameters": [
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "application/pdf"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Retrieve an invoice with specified identifier string\n",
        "operationId": "GetInvoice",
        "summary": "Retrieve an invoice",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->load('invoiceId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Invoice resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Create or update an invoice with predefined identifier string\n",
        "operationId": "PutInvoice",
        "summary": "Create or update an invoice with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "<?\n$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n$invoiceForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $invoice = $client->invoices()->update('invoiceId', $invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}/abandon": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Invoice was abandoned successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Abandon an invoice with specified identifier string\n",
        "operationId": "PostInvoiceAbandonment",
        "summary": "Abandon an invoice",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->abandon('invoiceId');\n"
          }
        ]
      }
    },
    "/invoices/{id}/issue": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "InvoiceIssue resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceIssue"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was issued successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Issue an invoice with specified identifier string. It must be in `draft` status.\n",
        "operationId": "PostInvoiceIssuance",
        "summary": "Issue an invoice",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->issue('invoiceId', '2025-01-01 05:00:00');\n"
          }
        ]
      }
    },
    "/invoices/{id}/items": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice items were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/InvoiceItem"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Retrieve an invoice items with specified invoice identifier string\n",
        "operationId": "GetInvoiceItemCollection",
        "summary": "Retrieve invoice items",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceItems = $client->invoiceItems()->search('invoiceId', [\n    'filter' => 'quantity:5',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "InvoiceItem resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InvoiceItem was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InvoiceItem"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Create an invoice item\n",
        "operationId": "PostInvoiceItem",
        "summary": "Create an invoice item",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceItemForm = new Rebilly\\Entities\\InvoiceItem();\n$invoiceItemForm->setType($invoiceItemForm::TYPE_DEBIT);\n$invoiceItemForm->setUnitPrice(0.99);\n$invoiceItemForm->setQuantity(5);\n\ntry {\n    $invoiceItem = $client->invoiceItems()->create($invoiceItemForm, 'invoiceId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}/matched-rules": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/MatchedRule"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Get matched rules for the invoice",
        "operationId": "GetInvoiceMatchedRuleCollection",
        "summary": "Get matched rules for the invoice"
      }
    },
    "/invoices/{id}/recalculate": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Invoice was recalculated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Recalculate an invoice with specified identifier string.\nIt will recalculate shipping rates, taxes, discounts. It is useful when coupon was revoked or customer redeemed coupon after invoice was issued and you want to apply it to this invoice.\n",
        "operationId": "PostInvoiceRecalculation",
        "summary": "Recalculate an invoice"
      }
    },
    "/invoices/{id}/reissue": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "InvoiceReissue resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceReissue"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was reissued successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Reissue an invoice with specified identifier string. It must be issued (status must be `unpaid` or `past-due`).\n",
        "operationId": "PostInvoiceReissuance",
        "summary": "Reissue an invoice"
      }
    },
    "/invoices/{id}/timeline": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of invoice timeline messages was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/InvoiceTimeline"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Retrieve a list of invoice timeline messages\n",
        "operationId": "GetInvoiceTimelineCollection",
        "summary": "Retrieve a list of invoice timeline messages"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Invoice Timeline resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceTimeline"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice Timeline comment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InvoiceTimeline"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Create an invoice Timeline comment\n",
        "operationId": "PostInvoiceTimeline",
        "summary": "Create an invoice Timeline comment"
      }
    },
    "/invoices/{id}/timeline/{messageId}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "The Invoice Timeline message ID",
          "in": "path",
          "name": "messageId",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Invoice Timeline message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Delete an Invoice Timeline message with predefined identifier string\n",
        "operationId": "DeleteInvoiceTimeline",
        "summary": "Delete an Invoice Timeline message"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Invoice message was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InvoiceTimeline"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Retrieve a invoice message with specified identifier string\n",
        "operationId": "GetInvoiceTimeline",
        "summary": "Retrieve an Invoice Timeline message"
      }
    },
    "/invoices/{id}/transaction-allocations": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of allocations was retrieved successfully.",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/InvoiceTransactionAllocation"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Get the precise amounts from a transaction allocated as invoice payments",
        "operationId": "GetInvoiceTransactionAllocationCollection",
        "summary": "Get transaction amounts allocated to an invoice"
      }
    },
    "/invoices/{id}/void": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Invoice was voided successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Void an invoice with specified identifier string\n",
        "operationId": "PostInvoiceVoid",
        "summary": "Void an invoice",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->void('invoiceId');\n"
          }
        ]
      }
    },
    "/kyc-documents": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "enum": [
                "id",
                "-id",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ],
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of KYC documents was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/KycDocument"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "KYC Documents"
        ],
        "description": "Retrieve a list of KYC documents\n",
        "operationId": "GetKycDocumentCollection",
        "summary": "Retrieve a list of KYC documents"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Kyc document resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Kyc document was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "KYC Documents"
        ],
        "description": "Create a KYC Document\n",
        "operationId": "PostKycDocument",
        "summary": "Create a KYC Document"
      }
    },
    "/kyc-documents/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "KYC document was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "KYC Documents"
        ],
        "description": "Retrieve a KYC document with specified identifier string.",
        "operationId": "GetKycDocument",
        "summary": "Retrieve a KYC Document"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "KYC document resource.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "KYC document was updated.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "201": {
            "description": "KYC document was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "KYC Documents"
        ],
        "description": "Create or update a KYC document with predefined identifier string.",
        "operationId": "PutKycDocument",
        "summary": "Create or update a KYC document with predefined ID"
      }
    },
    "/kyc-documents/{id}/acceptance": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "KYC document acceptance was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "KYC Documents"
        ],
        "description": "Marks that status of the document as `accepted`. Updates the review time and reviewer information. Intended to be used for manual overrides.\n",
        "operationId": "PostKycDocumentAcceptance",
        "summary": "Accept a KYC document"
      }
    },
    "/kyc-documents/{id}/rejection": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "KYC document resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycDocumentRejection"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "KYC document rejection was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "KYC Documents"
        ],
        "description": "Marks that status of the document as `rejected`. Updates the review time and reviewer information. Intended to be used for manual overrides.\n",
        "operationId": "PostKycDocumentRejection",
        "summary": "Reject a KYC document"
      }
    },
    "/kyc-documents/{id}/review": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "KYC document was reviewed.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "KYC Documents"
        ],
        "description": "Mark the KYC document as reviewed. Updates the review time and reviewer information.",
        "operationId": "PostKycDocumentReview",
        "summary": "Review a KYC document"
      }
    },
    "/password-tokens": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Reset Password Tokens was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/ResetPasswordToken"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Retrieve a list of tokens\n",
        "operationId": "GetPasswordTokenCollection",
        "summary": "Retrieve a list of tokens"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ResetPasswordToken resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset Password Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Create a Reset Password Token\n",
        "operationId": "PostPasswordToken",
        "summary": "Create a Reset Password Token"
      }
    },
    "/password-tokens/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "ResetPasswordToken was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Delete a Reset Password Token with predefined identifier string\n",
        "operationId": "DeletePasswordToken",
        "summary": "Delete a Reset Password Token"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "ResetPasswordToken was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Customer Authentication"
        ],
        "description": "Retrieve a Reset Password Token with specified identifier string\n",
        "operationId": "GetPasswordToken",
        "summary": "Retrieve a Reset Password Token"
      }
    },
    "/payment-cards": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Payment Card was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentCard"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Payment Cards"
        ],
        "description": "Retrieve a list of Payments Cards\n",
        "operationId": "GetPaymentCardCollection",
        "summary": "Retrieve a list of Payment Cards",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCards = $client->paymentCards()->search([\n    'filter' => 'status:active',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "PaymentCard resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Card was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "201": {
            "description": "Payment Card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Payment Cards"
        ],
        "description": "Create a Payment Card\n",
        "operationId": "PostPaymentCard",
        "summary": "Create a Payment Card",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustomerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $paymentCard = $client->paymentCards()->create($paymentCardForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Payment card was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Payment Cards"
        ],
        "description": "Retrieve a Payment Card with specified identifier string\n",
        "operationId": "GetPaymentCard",
        "summary": "Retrieve a Payment Card",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCard = $client->paymentCards()->load('paymentCardId');\n"
          }
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Payment card",
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "billingAddress": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/ContactObject"
                    }
                  ],
                  "description": "Card's billing address"
                },
                "customFields": {
                  "$ref": "#/definitions/ResourceCustomFields"
                },
                "cvv": {
                  "description": "Card's cvv (card verification value).",
                  "type": "string"
                },
                "expMonth": {
                  "description": "Card's expiry month",
                  "type": "integer"
                },
                "expYear": {
                  "description": "Card's expiry year",
                  "type": "integer"
                },
                "stickyGatewayAccountId": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/ResourceId"
                    }
                  ],
                  "description": "Sticky Gateway Account ID"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment card was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Payment Cards"
        ],
        "description": "Update any of the payment card's values except for the pan\n",
        "operationId": "PatchPaymentCard",
        "summary": "Update a payment card's values"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Payment card",
            "in": "body",
            "name": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Payment card was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "201": {
            "description": "Payment card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Payment card already exists and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Payment Cards"
        ],
        "operationId": "PutPaymentCard",
        "summary": "Create a payment card with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustomerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $paymentCard = $client->paymentCards()->create($paymentCardForm, 'paymentCardId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/authorization": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Payment Card resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "amount": {
                  "description": "Amount",
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/CurrencyCode"
                    }
                  ]
                },
                "gatewayAccountId": {
                  "description": "The Gateway account ID",
                  "type": "string"
                },
                "redirectUrl": {
                  "description": "Redirect URL",
                  "type": "string"
                },
                "websiteId": {
                  "description": "The Website ID",
                  "type": "string"
                }
              },
              "required": [
                "websiteId",
                "currency"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment Card was authorized",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Payment Cards"
        ],
        "deprecated": true,
        "description": "Authorize a Payment Card\n\nInstead of using this endpoint a Payment Card will\nbe authorized on first usage (new transaction or order).\n",
        "operationId": "PostPaymentCardAuthorization",
        "summary": "Authorize a Payment Card",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardAuthorizationForm = new Rebilly\\Entities\\PaymentCardAuthorization();\n$paymentCardAuthorizationForm->setWebsiteId('websiteId');\n$paymentCardAuthorizationForm->setCurrency('USD');\n$paymentCardAuthorizationForm->setGatewayAccountId('gatewayAccountId');\n\ntry {\n    $paymentCard = $client->paymentCards()->authorize('paymentCardId', $paymentCardAuthorizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/deactivation": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Payment Card was deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Payment Cards"
        ],
        "description": "Deactivate a Payment Card\n",
        "operationId": "PostPaymentCardDeactivation",
        "summary": "Deactivate a Payment Card",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->paymentCards()->deactivate('paymentCardId');\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/matched-rules": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/MatchedRule"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Payment Cards"
        ],
        "description": "Get matched rules for the payment card",
        "operationId": "GetPaymentCardMatchedRuleCollection",
        "summary": "Get matched rules for the payment card"
      }
    },
    "/payment-instrument-validation": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved a payment instrument validation",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentInstrumentValidation"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Payment Instrument Validation"
        ],
        "description": "Retrieve a Payment Instrument validation with specified identifier string\n",
        "operationId": "GetPaymentInstrumentValidationCollection",
        "summary": "Retrieve a Payment Instrument validation"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Payment instrument",
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "method": {
                  "description": "Payment method",
                  "type": "string"
                },
                "paymentInstrumentId": {
                  "description": "Payment instrument ID",
                  "type": "string"
                }
              },
              "required": [
                "method",
                "paymentInstrumentId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Validation successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentValidation"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Payment Instrument Validation"
        ],
        "description": "Validate a payment instrument\n",
        "operationId": "PostPaymentInstrumentValidation",
        "summary": "Validate a payment instrument"
      }
    },
    "/payment-instrument-validation/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of validated payment instrument was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentValidation"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Payment Instrument Validation"
        ],
        "description": "Retrieve a list of validated payment instruments\n",
        "operationId": "GetPaymentInstrumentValidation",
        "summary": "Retrieve a list of validated payment instruments"
      }
    },
    "/payments": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment list was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Payment"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "deprecated": true,
        "description": "Retrieve a payment list\n",
        "operationId": "GetPaymentCollection",
        "summary": "Retrieve a payment list",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payments = $client->payments()->search([\n    'filter' => 'currency:USD',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Payment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment was processed",
            "schema": {
              "items": {
                "$ref": "#/definitions/Payment"
              },
              "type": "array"
            }
          },
          "202": {
            "description": "Payment was accepted",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "deprecated": true,
        "description": "Create a payment (deprecated).  Use create a transaction instead.\n",
        "operationId": "PostPayment",
        "summary": "Create a payment",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentForm = new Rebilly\\Entities\\Payment();\n\n$paymentForm->setWebsiteId('websiteId');\n$paymentForm->setCustomerId('customerId');\n$paymentForm->setCurrency('USD');\n$paymentForm->setAmount(1.99);\n\n$data = [\n    'method' => Rebilly\\Entities\\PaymentMethod::METHOD_CASH,\n];\n\n$paymentInstrumentForm = new Rebilly\\Entities\\PaymentMethodInstrument($data);\n\n$paymentForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $payment = $client->payments()->create($paymentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payments/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json; charset=utf-8",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Payment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "deprecated": true,
        "description": "Retrieve a payment with specified identifier string\n",
        "operationId": "GetPayment",
        "summary": "Retrieve a payment",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payment = $client->payments()->load('paymentId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json; charset=utf-8",
          "application/json"
        ],
        "parameters": [
          {
            "description": "Payment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment was processed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Payment"
              },
              "type": "array"
            }
          },
          "202": {
            "description": "Payment was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "deprecated": true,
        "description": "Make a payment with predefined identifier string\n",
        "operationId": "PutPayment",
        "summary": "Create a payment with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentForm = new Rebilly\\Entities\\Payment();\n\n$paymentForm->setWebsiteId('websiteId');\n$paymentForm->setCustomerId('customerId');\n$paymentForm->setCurrency('USD');\n$paymentForm->setAmount(1.99);\n\n$data = [\n    'method' => Rebilly\\Entities\\PaymentMethod::METHOD_CASH,\n];\n\n$paymentInstrumentForm = new Rebilly\\Entities\\PaymentMethodInstrument($data);\n\n$paymentForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $payment = $client->payments()->update('paymentId', $paymentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of PayPal Accounts was retrieved successfully",
            "schema": {
              "items": {
                "$ref": "#/definitions/PayPalAccount"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "PayPal Accounts"
        ],
        "description": "Retrieve a list of PayPal Accounts\n",
        "operationId": "GetPayPalAccountCollection",
        "summary": "Retrieve a list of PayPal accounts",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalAccounts = $client->payPalAccounts()->search([\n    'filter' => 'status:active',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "PayPalAccount resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "PayPal Account was created",
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "PayPal Accounts"
        ],
        "description": "Create a PayPal Account\n",
        "operationId": "PostPayPalAccount",
        "summary": "Create a PayPal Account",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalForm = new Rebilly\\Entities\\PayPalAccount();\n$payPalForm->setCustomerId('customerId');\n$payPalForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $payPalAccount = $client->payPalAccounts()->create($payPalForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "PayPal Account was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "PayPal Accounts"
        ],
        "description": "Retrieve a PayPal Account with specified identifier string\n",
        "operationId": "GetPayPalAccount",
        "summary": "Retrieve a PayPal Account",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalAccount = $client->payPalAccounts()->load('payPalAccountId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "PayPal Account",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "PayPal Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "PayPal Account exist and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "PayPal Accounts"
        ],
        "operationId": "PutPayPalAccount",
        "summary": "Create a PayPal account with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalForm = new Rebilly\\Entities\\PayPalAccount();\n$payPalForm->setCustomerId('customerId');\n$payPalForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $payPalAccount = $client->payPalAccounts()->create($payPalForm, 'payPalAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts/{id}/activation": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "PayPal Account resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayPalAccountAuthorization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "PayPal Account was activated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "PayPal Accounts"
        ],
        "deprecated": true,
        "description": "Activate a PayPal Account\n\nInstead of using this endpoint a PayPal Account will\nbe authorized on first usage (new transaction or order).\n",
        "operationId": "PostPayPalAccountActivation",
        "summary": "Activate a PayPal Account",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$activationData = [\n    'websiteId' => 'testWebsiteId',\n    'currency' => 'USD',\n];\n\ntry {\n    $client->payPalAccounts()->activate($activationData, 'payPalAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts/{id}/deactivation": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "PayPal Account was deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "PayPal Accounts"
        ],
        "description": "Deactivate a PayPal Account\n",
        "operationId": "PostPayPalAccountDeactivation",
        "summary": "Deactivate a PayPal Account",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->payPalAccounts()->deactivate('payPalAccountId');\n"
          }
        ]
      }
    },
    "/plans": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Plans was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Plan"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Plans"
        ],
        "description": "Retrieve a list of plans\n",
        "operationId": "GetPlanCollection",
        "summary": "Retrieve a list of plans",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$plans = $client->plans()->search([\n    'filter' => 'name:TestPlan',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Plan resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Plan was created",
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Plans"
        ],
        "description": "Create a plan\n",
        "operationId": "PostPlan",
        "summary": "Create a plan",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n$planForm->setProductId('test-product');\n\ntry {\n    $plan = $client->plans()->create($planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/plans/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Plan was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Plans"
        ],
        "description": "Delete a Plan with predefined identifier string\n",
        "operationId": "DeletePlan",
        "summary": "Delete a Plan",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->plans()->delete('planId');\n"
          }
        ]
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Plan was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Plans"
        ],
        "description": "Retrieve a plan with specified identifier string\n",
        "operationId": "GetPlan",
        "summary": "Retrieve a plan",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$plan = $client->plans()->load('planId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Plan resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "201": {
            "description": "Plan was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Plans"
        ],
        "description": "Create or update a Plan with predefined identifier string\n",
        "operationId": "PutPlan",
        "summary": "Create or update a Plan with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n\ntry {\n    $plan = $client->plans()->update('planId', $planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/products": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of products was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Retrieve a list of products\n",
        "operationId": "GetProductCollection",
        "summary": "Retrieve a list of products"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Create a Product\n",
        "operationId": "PostProduct",
        "summary": "Create a Product"
      }
    },
    "/products/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Product was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Delete a product with predefined identifier string\n",
        "operationId": "DeleteProduct",
        "summary": "Delete a product"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Product was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Retrieve a product with specified identifier string\n",
        "operationId": "GetProduct",
        "summary": "Retrieve a product"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Product resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Products"
        ],
        "description": "Create a product with predefined identifier string\n",
        "operationId": "PutProduct",
        "summary": "Create a product with predefined ID"
      }
    },
    "/search": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The default or \"global\" search. It will search all searchable resources across as many fields as possible.\n",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nUse one or more of the listed filter fields. i.e. `is:customer email:bob@test.com`.\nThe `date` value can be surrounded with quotes. Examples:\n`>2019-01-01`, `last month`, `yesterday`, `<=2019-04-30`.\n",
            "enum": [
              "is",
              "amount",
              "bin",
              "coupon",
              "currency",
              "date",
              "email",
              "last4",
              "name",
              "paypalUsername",
              "plan",
              "product",
              "tag"
            ],
            "in": "query",
            "name": "filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Results keyed by resource",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Search"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Search"
        ],
        "description": "Search merchant's data to return resources such as customers, invoices, orders, transactions\n",
        "operationId": "GetSearch",
        "summary": "Search merchant data"
      }
    },
    "/shipping-zones": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of shipping zones was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/ShippingZone"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Shipping Zones"
        ],
        "description": "Retrieve a list of shipping zones\n",
        "operationId": "GetShippingZoneCollection",
        "summary": "Retrieve a list of shipping zones"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Shipping Zone resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Shipping Zone was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Shipping Zones"
        ],
        "description": "Create a Shipping Zone\n",
        "operationId": "PostShippingZone",
        "summary": "Create a Shipping Zone"
      }
    },
    "/shipping-zones/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Shipping zone was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Shipping Zones"
        ],
        "description": "Delete a shipping zone with predefined identifier string\n",
        "operationId": "DeleteShippingZone",
        "summary": "Delete a shipping zone"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Shipping zone was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Shipping Zones"
        ],
        "description": "Retrieve a shipping zone with specified identifier string\n",
        "operationId": "GetShippingZone",
        "summary": "Retrieve a shipping zone"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Shipping zone resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shipping zone was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "201": {
            "description": "Shipping zone was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Shipping Zones"
        ],
        "description": "Create a shipping zone with predefined identifier string\n",
        "operationId": "PutShippingZone",
        "summary": "Create a shipping zone with predefined ID"
      }
    },
    "/subscription-cancellations": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cancellations was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/SubscriptionCancellation"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Retrieve a list of cancellations for all subscriptions",
        "operationId": "GetSubscriptionCancellationCollection",
        "summary": "Retrieve a list of cancellations"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Cancellation resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCancellation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Cancellation was created, subscription is or will be deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SubscriptionCancellation"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Cancel a subscription or preview the cancellation parameters before that",
        "operationId": "PostSubscriptionCancellation",
        "summary": "Cancel a subscription",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionCancelForm = new Rebilly\\Entities\\SubscriptionCancel();\n$subscriptionCancelForm->setEffectiveTime(new DateTime());\n\ntry {\n    $subscription = $client->subscriptions()->cancel('subscriptionId', $subscriptionCancelForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscription-cancellations/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Cancellaton was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Delete a subscription's cancellation. Only draft can be deleted.",
        "operationId": "DeleteSubscriptionCancellation",
        "summary": "Delete a cancellation"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cancellation was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SubscriptionCancellation"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Retrieve a subscription сancellation with specified identifier string",
        "operationId": "GetSubscriptionCancellation",
        "summary": "Retrieve a subscription сancellation"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Cancellation resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCancellation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cancellation was updated, subscription is or will be deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SubscriptionCancellation"
            }
          },
          "201": {
            "description": "Cancellation was created, subscription is or will be deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SubscriptionCancellation"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Cancel a subscription",
        "operationId": "PutSubscriptionCancellation",
        "summary": "Cancel a subscription"
      }
    },
    "/subscription-reactivations": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of reactivations was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/SubscriptionReactivation"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Retrieve a list of reactivations for all subscriptions",
        "operationId": "GetSubscriptionReactivationCollection",
        "summary": "Retrieve a list of reactivations"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Reactivation resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionReactivation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reactivation was created, subscription is active and won't be deactivated.\nIf there was a cancellation with status \"confirmed\", it is revoked.\n",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SubscriptionReactivation"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Reactivate a subscription",
        "operationId": "PostSubscriptionReactivation",
        "summary": "Reactivate a subscription"
      }
    },
    "/subscription-reactivations/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Reactivation was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SubscriptionReactivation"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Retrieve a subscription reactivation with specified identifier string",
        "operationId": "GetSubscriptionReactivation",
        "summary": "Retrieve a subscription reactivation"
      }
    },
    "/subscriptions": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nTo expand multiple objects, it accepts a comma-separated\nlist of objects (example: `expand=recentInvoice,initialInvoice`).\n\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
            "in": "query",
            "name": "expand",
            "type": "string"
          },
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of subscriptions was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Subscription"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Retrieve a list of subscriptions\n",
        "operationId": "GetSubscriptionCollection",
        "summary": "Retrieve a list of subscriptions",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptions = $client->subscriptions()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nTo expand multiple objects, it accepts a comma-separated\nlist of objects (example: `expand=recentInvoice,initialInvoice`).\n\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
            "in": "query",
            "name": "expand",
            "type": "string"
          },
          {
            "description": "Subscription resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Create a subscription. Consider using the upsert\noperation to accomplish this task.\n",
        "operationId": "PostSubscription",
        "summary": "Create a subscription",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setItems([\n    [\n        'planId' => 'my-plan',\n        'quantity' => 1,\n    ],\n]);\n$subscriptionForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $subscription = $client->subscriptions()->create($subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nTo expand multiple objects, it accepts a comma-separated\nlist of objects (example: `expand=recentInvoice,initialInvoice`).\n\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
            "in": "query",
            "name": "expand",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Retrieve a subscription with specified identifier string\n",
        "operationId": "GetSubscription",
        "summary": "Retrieve a subscription",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscription = $client->subscriptions()->load('subscriptionId');\n"
          }
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nTo expand multiple objects, it accepts a comma-separated\nlist of objects (example: `expand=recentInvoice,initialInvoice`).\n\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
            "in": "query",
            "name": "expand",
            "type": "string"
          },
          {
            "description": "Subscription resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Create or update a subscription with predefined identifier string\n",
        "operationId": "PutSubscription",
        "summary": "Upsert a subscription with predefined ID",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setItems($subscriptionForm->createItems([\n    'planId' => 'my-plan',\n    'quantity' => 1,\n]));\n$subscriptionForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $subscription = $client->subscriptions()->update('subscriptionId', $subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/change-plan": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Change the plan",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionChange"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription was changed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Change a subscription's plan and designate when and if there should be pro rata credits given.\nOnly active subscriptions with a single plan can be changed.\nEdit pending unpaid subscriptions directly regardless the number of plans.\n",
        "operationId": "PostSubscriptionPlanChange",
        "summary": "Change a subscription's plan",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionChangePlanForm = new Rebilly\\Entities\\SubscriptionChangePlan();\n$subscriptionChangePlanForm->setPlanId('newPlanId');\n$subscriptionChangePlanForm->setRenewalPolicy('retain');\n$subscriptionChangePlanForm->setPreview(true);\n$subscriptionChangePlanForm->setProrated(true);\n$subscriptionChangePlanForm->setEffectiveTime('2018-02-02 00:00:00');\n\ntry {\n    $subscription = $client->subscriptions()->changePlan('subscriptionId', $subscriptionChangePlanForm);\n    echo $subscription->getLineItemSubtotal();\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/interim-invoice": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Issue an interim invoice",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionInvoice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Issue an interim invoice for a subscription, typically used in conjunction with plan changes and pro rata adjustments.\nThis process creates an invoice, adds the subscription's line items to the invoice, and issues the invoice, and applies\npayment to it if a transaction id is supplied.\n",
        "operationId": "PostSubscriptionInterimInvoice",
        "summary": "Issue an interim invoice for a subscription"
      }
    },
    "/subscriptions/{id}/matched-rules": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/MatchedRule"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Get matched rules for the subscription",
        "operationId": "GetSubscriptionMatchedRuleCollection",
        "summary": "Get matched rules for the subscription"
      }
    },
    "/subscriptions/{id}/timeline": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of order timeline messages was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/OrderTimeline"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Retrieve a list of order timeline messages\n",
        "operationId": "GetSubscriptionTimelineCollection",
        "summary": "Retrieve a list of order timeline messages"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Order Timeline resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderTimeline"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order Timeline comment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/OrderTimeline"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Create an order Timeline comment\n",
        "operationId": "PostSubscriptionTimeline",
        "summary": "Create an order Timeline comment"
      }
    },
    "/subscriptions/{id}/timeline/{messageId}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "The Order Timeline message ID",
          "in": "path",
          "name": "messageId",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Order Timeline message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Delete an Order Timeline message with predefined identifier string\n",
        "operationId": "DeleteSubscriptionTimeline",
        "summary": "Delete an Order Timeline message"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Order message was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/OrderTimeline"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Retrieve a order message with specified identifier string\n",
        "operationId": "GetSubscriptionTimeline",
        "summary": "Retrieve an Order Timeline message"
      }
    },
    "/subscriptions/{id}/upcoming-invoices": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nIt accepts a comma-separated list of objects to expand.\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
            "in": "query",
            "name": "expand",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Upcoming invoices are retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Invoice"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "description": "Retrieve an upcoming invoice from the specified subscription.\nThe endpoint is temporary before upcoming invoices get a complete integration.\n",
        "operationId": "GetSubscriptionUpcomingInvoiceCollection",
        "summary": "Retrieve subscription's upcoming invoice"
      }
    },
    "/subscriptions/{id}/upcoming-invoices/{invoiceId}/issue": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "The Upcoming Invoice ID",
          "in": "path",
          "name": "invoiceId",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "InvoiceIssue resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceIssue"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upcoming Invoice was issued successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Issue an upcoming invoice with specified identifier string for early pay.\n",
        "operationId": "PostUpcomingInvoiceIssuance",
        "summary": "Issue an upcoming invoice for early pay"
      }
    },
    "/tags": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "The partial search of the text fields.",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ],
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tags was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Tag"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Retrieve a list of tags\n",
        "operationId": "GetTagCollection",
        "summary": "Retrieve a list of tags"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Tag resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Create a tag\n",
        "operationId": "PostTag",
        "summary": "Create a tag"
      }
    },
    "/tags/{tag}": {
      "parameters": [
        {
          "description": "The tag name",
          "in": "path",
          "name": "tag",
          "pattern": "^[@~\\-\\.\\w\\s]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Tag was deleted"
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Delete a tag.\nIt's an asynchronous operation.\n",
        "operationId": "DeleteTag",
        "summary": "Delete a tag"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tag with specified name was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Retrieve a tag\n",
        "operationId": "GetTag",
        "summary": "Retrieve a tag"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Tag resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag was updated",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Update a tag\n",
        "operationId": "PatchTag",
        "summary": "Update a tag"
      }
    },
    "/tags/{tag}/customers": {
      "parameters": [
        {
          "description": "The tag name",
          "in": "path",
          "name": "tag",
          "pattern": "^[@~\\-\\.\\w\\s]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "customerIds": {
                  "description": "The list of customer IDs",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 1000,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "customerIds"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Customers was untagged"
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Untag a list of customers.\nIf the customer from the list is already untagged it will be ignored.\nIt's an asynchronous operation.\n",
        "operationId": "DeleteTagCustomerCollection",
        "summary": "Untag a list of customers"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "customerIds": {
                  "description": "The list of customer IDs",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 1000,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "customerIds"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Customers was tagged"
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Tag a list of customers.\nIf the customer from the list is already tagged it will be ignored.\nIt's an asynchronous operation.\n",
        "operationId": "PostTagCustomerCollection",
        "summary": "Tag a list of customers"
      }
    },
    "/tags/{tag}/customers/{customerId}": {
      "parameters": [
        {
          "description": "The tag name",
          "in": "path",
          "name": "tag",
          "pattern": "^[@~\\-\\.\\w\\s]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "The customer identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "customerId",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Customer was untagged"
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Untag a customer\n",
        "operationId": "DeleteTagCustomer",
        "summary": "Untag a customer"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Customer was tagged"
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Tag a customer\n",
        "operationId": "PostTagCustomer",
        "summary": "Tag a customer"
      }
    },
    "/tokens": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tokens was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentToken"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Payment Tokens"
        ],
        "description": "Retrieve a list of tokens\n",
        "operationId": "GetTokenCollection",
        "summary": "Retrieve a list of tokens",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardTokens = $client->paymentCardTokens()->search([\n    'filter' => 'token:string',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "PaymentToken resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {}
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "security": [
          {
            "PublishableApiKey": []
          },
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          }
        ],
        "tags": [
          "Payment Tokens"
        ],
        "description": "[FramePay](https://rebilly.github.io/framepay-docs/)\nis the recommended way to\ncreate a payment token because it minimizes\nPCI DSS compliance.  Once a payment token\nis created, it can only be used once.\n\nA payment token expires upon first use\nor within 30 minutes of the token creation\n(whichever comes first).\n",
        "operationId": "PostToken",
        "summary": "Create a payment token",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardTokenForm = new Rebilly\\Entities\\PaymentCardToken();\n$paymentCardTokenForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\n$paymentInstrumentForm = new Entities\\PaymentInstruments\\PaymentCardPaymentInstrument();\n$paymentInstrumentForm->setPan('4111111111111111');\n$paymentInstrumentForm->setExpYear(2025);\n$paymentInstrumentForm->setExpMonth(8);\n$paymentInstrumentForm->setCvv(123);\n\n$paymentCardTokenForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $paymentCardToken = $client->paymentCardTokens()->create($paymentCardTokenForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/tokens/{token}": {
      "parameters": [
        {
          "description": "The token identifier string",
          "in": "path",
          "name": "token",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Token was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "PublishableApiKey": []
          }
        ],
        "tags": [
          "Payment Tokens"
        ],
        "description": "Retrieve a token with specified identifier string\n",
        "operationId": "GetToken",
        "summary": "Retrieve a token",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardToken = $client->paymentCardTokens()->load('tokenId');\n"
          }
        ]
      }
    },
    "/transactions": {
      "parameters": [
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "The partial search of the text fields.",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transactions was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Transaction"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Retrieve a list of transactions\n",
        "operationId": "GetTransactionCollection",
        "summary": "Retrieve a list of transactions",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transactions = $client->transactions()->search([\n    'filter' => 'result:approved',\n]);\n"
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Payment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction was created",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Create a transactions of type `sale`, `authorize`, or `credit`.\nThis endpoint supports two main styles of transactions:\n  1. A real-time decision and response.\n  2. User approval/interaction is required.\n\nA real-time decision is very familiar.  You send a request, and\ninspect the `result` of the response for `approved` or `declined`.\n\nHowever, many transactions, especially those for alternative\nmethods, require the user to interact with a 3rd party.  You\nmay be able to envision PayPal, for example, the user must\ngive permission to complete the payment (or accept the\nbilling agreement).\n\nEven payment cards may require user approval in the case of\n3D secure authentication.  In the event that approval is\nrequired, you will receive a response back and notice\nthat the `result` is `unknown`.  You will find that the\n`status` is `waiting-approval`. And you will find in the\n`_links` section of the response a link for the `approvalUrl`.\n\nIn this case you would either open the `approvalUrl` in an\niframe or in a pop (better workflow for mobile).\n",
        "operationId": "PostTransaction",
        "summary": "Create a transaction"
      }
    },
    "/transactions/{id}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Transaction was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Retrieve a Transaction with specified identifier string\n",
        "operationId": "GetTransaction",
        "summary": "Retrieve a Transaction",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transaction = $client->transactions()->load('transactionId');\n"
          }
        ]
      }
    },
    "/transactions/{id}/cancel": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Successful cancel the payment",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Cancel a scheduled transaction. Once handled a transaction cannot be canceled",
        "operationId": "PostTransactionCancellation",
        "summary": "Cancel a pending or suspended transaction",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $payment = $client->transactions()->cancel('transactionId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/transactions/{id}/gateway-logs": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logs were retrieved successfully",
            "schema": {
              "$ref": "#/definitions/TransactionGatewayLog"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Retrieve Gateway communication Logs for Transaction with specified identifier string",
        "operationId": "GetTransactionGatewayLogCollection",
        "summary": "Retrieve a Transaction Gateway Logs"
      }
    },
    "/transactions/{id}/matched-rules": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/MatchedRule"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Get matched rules for the transaction",
        "operationId": "GetTransactionMatchedRuleCollection",
        "summary": "Get matched rules for the transaction"
      }
    },
    "/transactions/{id}/refund": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Transaction resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRefund"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction was refunded successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Refund a Transaction with specified identifier string.\nNote that the refund will be in the same currency as the original transaction.\n",
        "operationId": "PostTransactionRefund",
        "summary": "Refund a Transaction",
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transaction = $client->transactions()->refund('transactionId', 1.99);\n"
          }
        ]
      }
    },
    "/transactions/{id}/timeline": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The collection items limit",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The collection items offset",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
            "in": "query",
            "name": "filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transaction timeline messages was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/TransactionTimeline"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Retrieve a list of transaction timeline messages\n",
        "operationId": "GetTransactionTimelineCollection",
        "summary": "Retrieve a list of transaction timeline messages"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Transaction Timeline resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionTimeline"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction Timeline comment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/TransactionTimeline"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Create a transaction Timeline comment\n",
        "operationId": "PostTransactionTimeline",
        "summary": "Create a transaction Timeline comment"
      }
    },
    "/transactions/{id}/timeline/{messageId}": {
      "parameters": [
        {
          "description": "The resource identifier string",
          "in": "path",
          "maxLength": 50,
          "name": "id",
          "pattern": "^[@~\\-\\.\\w]+$",
          "required": true,
          "type": "string"
        },
        {
          "description": "The Transaction Timeline message ID",
          "in": "path",
          "name": "messageId",
          "required": true,
          "type": "string"
        },
        {
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
          "in": "header",
          "maxLength": 50,
          "name": "Organization-Id",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Transaction Timeline message was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Delete a Transaction Timeline message with predefined identifier string\n",
        "operationId": "DeleteTransactionTimeline",
        "summary": "Delete a Transaction Timeline message"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Timeline message was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/TransactionTimeline"
            }
          },
          "401": {
            "description": "Access forbidden, invalid API-KEY was used",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Transactions"
        ],
        "description": "Retrieve a timeline message with specified identifier string\n",
        "operationId": "GetTransactionTimeline",
        "summary": "Retrieve a transaction Timeline message"
      }
    }
  },
  "definitions": {
    "A1Gateway": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "A1Gateway credentials object",
              "properties": {
                "accountId": {
                  "description": "A1Gateway account ID",
                  "type": "string"
                },
                "password": {
                  "description": "A1Gateway password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "password"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/A1GatewayMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "A1Gateway config",
      "x-discriminator-value": "A1Gateway",
      "x-ms-discriminator-value": "A1Gateway"
    },
    "A1GatewayMpis": {
      "description": "A1Gateway Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "AlipayInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "Alipay payment instrument object",
      "x-discriminator-value": "AlipayInstrument",
      "x-ms-discriminator-value": "AlipayInstrument"
    },
    "AmexVPC": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "AmexVPC credentials object",
              "properties": {
                "accessCode": {
                  "description": "Access Code",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Merchant ID",
                  "type": "string"
                },
                "password": {
                  "description": "Password (used for refund, void and capture)",
                  "format": "password",
                  "type": "string"
                },
                "user": {
                  "description": "User (used for refund, void and capture)",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "accessCode",
                "user",
                "password"
              ],
              "type": "object"
            },
            "settings": {
              "description": "AmexVPC settings object",
              "properties": {
                "url": {
                  "description": "Virtual Payment Client URL",
                  "type": "string"
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials",
            "settings"
          ],
          "type": "object"
        }
      ],
      "description": "AmexVPC config",
      "x-discriminator-value": "AmexVPC",
      "x-ms-discriminator-value": "AmexVPC"
    },
    "AmountAdjustment": {
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "none",
            "partial",
            "discount"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "ApcoPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "ApcoPay credentials object",
              "properties": {
                "MerchantID": {
                  "description": "ApcoPay merchant ID",
                  "type": "string"
                },
                "MerchantPassword": {
                  "description": "ApcoPay merchant password",
                  "format": "password",
                  "type": "string"
                },
                "profileID": {
                  "description": "ApcoPay profile ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "ApcoPay secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "profileID",
                "secretWord",
                "MerchantID",
                "MerchantPassword"
              ],
              "type": "object"
            },
            "settings": {
              "properties": {
                "method": {
                  "description": "ApcoPay's method",
                  "enum": [
                    "AFTERPAY",
                    "IDEAL",
                    "CREDITCLICK",
                    "BANCONTACT",
                    "ONLINEUBERWEISEN"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "method"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "ApcoPay config",
      "x-discriminator-value": "ApcoPay",
      "x-ms-discriminator-value": "ApcoPay"
    },
    "ApprovalUrlLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "approvalUrl"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "AsiaPaymentGateway": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "AsiaPaymentGateway credentials object",
              "properties": {
                "merchantNumber": {
                  "description": "AsiaPaymentGateway merchant number",
                  "type": "string"
                },
                "secretKey": {
                  "description": "AsiaPaymentGateway secret key for hash",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantNumber",
                "secretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "AsiaPaymentGateway config",
      "x-discriminator-value": "AsiaPaymentGateway",
      "x-ms-discriminator-value": "AsiaPaymentGateway"
    },
    "AstroPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "AstroPay credentials object",
              "properties": {
                "secret_key": {
                  "description": "AstroPay secret key",
                  "format": "password",
                  "type": "string"
                },
                "web_pay_login": {
                  "description": "AstroPay web pay status login",
                  "type": "string"
                },
                "web_pay_tran_key": {
                  "description": "AstroPay web pay status password",
                  "format": "password",
                  "type": "string"
                },
                "x_login": {
                  "description": "AstroPay login",
                  "type": "string"
                },
                "x_tran_key": {
                  "description": "AstroPay transaction key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "x_login",
                "x_tran_key",
                "secret_key",
                "web_pay_login",
                "web_pay_tran_key"
              ],
              "type": "object"
            },
            "settings": {
              "description": "AstroPay settings object",
              "properties": {
                "banks": {
                  "description": "list of banks which will show on hook page",
                  "items": {
                    "$ref": "#/definitions/AstroPayBanks"
                  },
                  "type": "array"
                },
                "skipStep": {
                  "description": "Skip step for user to enter their personal information.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "AstroPay config",
      "x-discriminator-value": "AstroPay",
      "x-ms-discriminator-value": "AstroPay"
    },
    "AstroPay-CardInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "AstroPay Card payment instrument object",
      "x-discriminator-value": "AstroPay-CardInstrument",
      "x-ms-discriminator-value": "AstroPay-CardInstrument"
    },
    "AstroPayBanks": {
      "enum": [
        "CU",
        "SE",
        "BV",
        "BM",
        "SM",
        "OX",
        "BQ",
        "EN",
        "FA",
        "BW",
        "SS",
        "SU",
        "WA",
        "FB",
        "TC",
        "I",
        "BB",
        "B",
        "CA",
        "SB",
        "BL",
        "NB",
        "UI"
      ],
      "type": "string"
    },
    "AstroPayCard": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "AstroPay Card credentials object",
              "properties": {
                "secret_key": {
                  "description": "AstroPay Card secret key",
                  "format": "password",
                  "type": "string"
                },
                "x_login": {
                  "description": "AstroPay Card login",
                  "type": "string"
                },
                "x_tran_key": {
                  "description": "AstroPay Card transaction key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "x_login",
                "x_tran_key",
                "secret_key"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "AstroPay Card config",
      "x-discriminator-value": "AstroPayCard",
      "x-ms-discriminator-value": "AstroPayCard"
    },
    "Attachment": {
      "properties": {
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 3,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Creation date/time"
        },
        "description": {
          "description": "The Attachment description",
          "type": "string"
        },
        "fileId": {
          "description": "Linked File object id",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "name": {
          "description": "The Original Attachment name",
          "type": "string"
        },
        "relatedId": {
          "description": "Linked object Id",
          "type": "string"
        },
        "relatedType": {
          "description": "Linked object type",
          "enum": [
            "customer",
            "dispute",
            "gateway-timeline-comment",
            "invoice",
            "organization",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction",
            "customer-timeline-comment",
            "transaction-timeline-comment",
            "order-timeline-comment"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Latest update date/time"
        }
      },
      "required": [
        "fileId",
        "relatedId",
        "relatedType"
      ],
      "type": "object"
    },
    "AttachmentResourceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "customer",
            "dispute",
            "invoice",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "AuthTransactionEmbed": {
      "description": "Auth Transaction object",
      "properties": {
        "authTransaction": {
          "$ref": "#/definitions/Transaction"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "AuthTransactionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "authTransaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "AuthenticationOptions": {
      "properties": {
        "authTokenTtl": {
          "description": "The default lifetime of the auth-token in seconds",
          "type": "integer"
        },
        "credentialTtl": {
          "description": "The default lifetime of the credential in seconds",
          "type": "integer"
        },
        "otpRequired": {
          "description": "Should OTP be required to exchange token",
          "type": "boolean"
        },
        "passwordPattern": {
          "description": "Allowed password pattern",
          "type": "string"
        },
        "resetTokenTtl": {
          "description": "The default lifetime of the reset-token in seconds",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AuthenticationToken": {
      "discriminator": "mode",
      "properties": {
        "credentialId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The credential's ID",
          "readOnly": true
        },
        "mode": {
          "default": "password",
          "description": "The token's generation mode",
          "enum": [
            "password",
            "passwordless"
          ],
          "type": "string"
        },
        "otpRequired": {
          "description": "Should OTP be required to exchange this token",
          "type": "boolean"
        },
        "token": {
          "description": "The token identifier string",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthenticationTokenMetadata": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "expiredTime": {
          "description": "Token's expired time",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthorizeNet": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiLoginId": {
                  "description": "AuthorizeNet Gateway api login ID",
                  "type": "string"
                },
                "transactionKey": {
                  "description": "AuthorizeNet Gateway Transaction Key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiLoginId",
                "transactionKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "AuthorizeNet Gateway config",
      "x-discriminator-value": "AuthorizeNet",
      "x-ms-discriminator-value": "AuthorizeNet"
    },
    "BBANInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/TokenBankAccountInstrument"
        },
        {
          "properties": {
            "accountNumber": {
              "description": "Bank Account Number",
              "pattern": "^[0-9]+$",
              "type": "string"
            },
            "accountType": {
              "description": "Bank Account Type",
              "enum": [
                "checking",
                "savings",
                "other"
              ],
              "type": "string"
            },
            "bankName": {
              "description": "Bank name",
              "type": "string"
            },
            "bic": {
              "description": "Bank Identifier Code",
              "type": "string"
            },
            "last4": {
              "description": "Bank Account Number's last 4 digits",
              "readOnly": true,
              "type": "string"
            },
            "routingNumber": {
              "description": "Bank Routing Number",
              "pattern": "^[0-9]+$",
              "type": "string"
            }
          },
          "required": [
            "accountNumber",
            "routingNumber",
            "accountType"
          ],
          "type": "object"
        }
      ],
      "description": "Payment Token instrument object",
      "x-discriminator-value": "BBAN",
      "x-ms-discriminator-value": "BBAN"
    },
    "BBANType": {
      "allOf": [
        {
          "$ref": "#/definitions/BankAccountCreatePlain"
        },
        {
          "properties": {
            "accountNumber": {
              "description": "Bank's Account Number.",
              "pattern": "^[0-9]+$",
              "type": "string"
            },
            "accountType": {
              "description": "Bank's Account type.",
              "enum": [
                "checking",
                "savings",
                "other"
              ],
              "type": "string"
            },
            "address": {
              "allOf": [
                {
                  "$ref": "#/definitions/ContactObject"
                }
              ],
              "description": "The Address."
            },
            "bankName": {
              "description": "Bank's name.",
              "type": "string"
            },
            "bic": {
              "description": "Bank Identifier Code.",
              "type": "string"
            },
            "customFields": {
              "$ref": "#/definitions/ResourceCustomFields"
            },
            "customerId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The Customer's ID."
            },
            "routingNumber": {
              "description": "Bank's Routing Number.",
              "pattern": "^[0-9]+$",
              "type": "string"
            }
          },
          "required": [
            "customerId",
            "accountNumber",
            "routingNumber",
            "accountType",
            "address"
          ],
          "type": "object"
        }
      ],
      "description": "BBAN type object",
      "x-discriminator-value": "BBAN",
      "x-ms-discriminator-value": "BBAN"
    },
    "Bambora": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiPasscode": {
                  "description": "Bambora Gateway API Passcode",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Bambora Gateway merchant ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "apiPasscode"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Bambora Gateway config",
      "x-discriminator-value": "Bambora",
      "x-ms-discriminator-value": "Bambora"
    },
    "BankAccount": {
      "properties": {
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "accountNumberType": {
          "default": "BBAN",
          "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
          "enum": [
            "BBAN",
            "IBAN"
          ],
          "type": "string"
        },
        "accountType": {
          "description": "Bank's Account type.",
          "enum": [
            "checking",
            "savings",
            "other"
          ],
          "type": "string"
        },
        "address": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "The Address."
        },
        "bankName": {
          "description": "Bank's name.",
          "type": "string"
        },
        "bic": {
          "description": "Bank Identifier Code",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Bank Account created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID."
        },
        "fingerprint": {
          "description": "A unique value to identify the Bank Account. It contains alphanumeric values.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The bank account identifier string",
          "readOnly": true
        },
        "last4": {
          "description": "The last 4 digits of the bank account",
          "readOnly": true,
          "type": "string"
        },
        "method": {
          "description": "The method of payment instrument",
          "enum": [
            "bank-account"
          ],
          "readOnly": true,
          "type": "string"
        },
        "routingNumber": {
          "description": "Bank's Routing Number.",
          "type": "string"
        },
        "status": {
          "description": "Bank Account status",
          "enum": [
            "active",
            "deactivated"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Bank Account updated time"
        }
      },
      "required": [
        "customerId"
      ],
      "type": "object"
    },
    "BankAccountCreatePlain": {
      "discriminator": "accountNumberType",
      "properties": {
        "accountNumberType": {
          "default": "BBAN",
          "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
          "enum": [
            "IBAN",
            "BBAN"
          ],
          "type": "string"
        }
      },
      "required": [
        "accountNumberType"
      ],
      "type": "object"
    },
    "BankAccountCreateToken": {
      "properties": {
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID."
        },
        "token": {
          "description": "BankAccountToken ID.",
          "type": "string"
        }
      },
      "required": [
        "customerId",
        "token"
      ],
      "type": "object"
    },
    "BankAccountEmbed": {
      "description": "Bank Account object",
      "properties": {
        "bankAccount": {
          "$ref": "#/definitions/BankAccount"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "BankAccountToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "The billing address object"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token created time"
        },
        "expirationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token expiration time"
        },
        "fingerprint": {
          "description": "Device fingerprint hash",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The token identifier string",
          "readOnly": true
        },
        "isUsed": {
          "default": false,
          "description": "Whether the token was already used",
          "readOnly": true,
          "type": "boolean"
        },
        "leadSource": {
          "allOf": [
            {
              "$ref": "#/definitions/LeadSource"
            }
          ]
        },
        "method": {
          "description": "The token payment method",
          "enum": [
            "ach"
          ],
          "type": "string"
        },
        "paymentInstrument": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenBankAccountInstrument"
            }
          ],
          "description": "The payment instrument details"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token updated time"
        },
        "usageTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token usage time"
        }
      },
      "required": [
        "method",
        "paymentInstrument",
        "billingAddress"
      ],
      "title": "Bank Account Token",
      "type": "object"
    },
    "BitPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "BitPay credentials object",
              "properties": {
                "token": {
                  "description": "BitPay merchant API token",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "token"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "BitPay Gateway config",
      "x-discriminator-value": "BitPay",
      "x-ms-discriminator-value": "BitPay"
    },
    "Blacklist": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The blacklist created time"
        },
        "expirationTime": {
          "description": "The blacklist expiration time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The blacklist identifier string",
          "readOnly": true
        },
        "type": {
          "description": "The blacklist type",
          "enum": [
            "payment-card",
            "bank-account",
            "customer-id",
            "email",
            "email-domain",
            "ip-address",
            "country",
            "fingerprint",
            "bin",
            "address"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The blacklist updated time"
        },
        "value": {
          "description": "The blacklist value",
          "type": "string"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "BlueSnap": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "BlueSnap credentials object",
              "properties": {
                "password": {
                  "description": "BlueSnap merchant's api password.",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "BlueSnap merchant's api username.",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "BlueSnap config",
      "x-discriminator-value": "BlueSnap",
      "x-ms-discriminator-value": "BlueSnap"
    },
    "BoletoInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "Boleto payment instrument object",
      "x-discriminator-value": "BoletoInstrument",
      "x-ms-discriminator-value": "BoletoInstrument"
    },
    "BraintreePayments": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "merchantAccountId": {
                  "description": "BraintreePayments merchant account ID",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "BraintreePayments merchant ID",
                  "format": "password",
                  "type": "string"
                },
                "privateKey": {
                  "description": "BraintreePayments Private Key",
                  "format": "password",
                  "type": "string"
                },
                "publicKey": {
                  "description": "BraintreePayments Public Key",
                  "type": "string"
                }
              },
              "required": [
                "publicKey",
                "privateKey",
                "merchantId",
                "merchantAccountId"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "BraintreePayments Gateway config",
      "x-discriminator-value": "BraintreePayments",
      "x-ms-discriminator-value": "BraintreePayments"
    },
    "CASHlib": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "CASHlib credentials object",
              "properties": {
                "apiKey": {
                  "description": "CASHlib API Key",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "CASHlib merchant id",
                  "type": "string"
                }
              },
              "required": [
                "apiKey",
                "merchantId"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "CASHlib config",
      "x-discriminator-value": "CASHlib",
      "x-ms-discriminator-value": "CASHlib"
    },
    "CODVoucher": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "COD Voucher credentials object",
              "properties": {
                "apiKey": {
                  "description": "COD Voucher API key",
                  "format": "password",
                  "type": "string"
                },
                "apiSecret": {
                  "description": "COD Voucher API secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey",
                "apiSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "COD Voucher config",
      "x-discriminator-value": "CODVoucher",
      "x-ms-discriminator-value": "CODVoucher"
    },
    "CancelUrlLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "cancelUrl"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "CardinalCommerce": {
      "allOf": [
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "properties": {
            "merchantId": {
              "description": "Cardinal MerchantId",
              "type": "string"
            },
            "processorId": {
              "description": "Cardinal ProcessorId",
              "type": "string"
            },
            "transactionPwd": {
              "description": "Cardinal TransactionPwd",
              "format": "password",
              "type": "string"
            }
          },
          "required": [
            "merchantId",
            "processorId",
            "transactionPwd"
          ],
          "type": "object"
        }
      ],
      "description": "CardinalCommerce Mpi Credentials",
      "x-discriminator-value": "CardinalCommerce",
      "x-ms-discriminator-value": "CardinalCommerce"
    },
    "Cardknox": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "xKey": {
                  "description": "Cardknox xKey",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "xKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Cardknox Gateway config",
      "x-discriminator-value": "Cardknox",
      "x-ms-discriminator-value": "Cardknox"
    },
    "CashToCode": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "CashToCode credentials object",
              "properties": {
                "cashToCodePassword": {
                  "description": "CashToCode credentials password",
                  "format": "password",
                  "type": "string"
                },
                "cashToCodeUsername": {
                  "description": "CashToCode credentials Username",
                  "type": "string"
                },
                "merchantPassword": {
                  "description": "Merchant credentials password",
                  "format": "password",
                  "type": "string"
                },
                "merchantUsername": {
                  "description": "Merchant credentials Username",
                  "type": "string"
                }
              },
              "required": [
                "cashToCodeUsername",
                "cashToCodePassword",
                "merchantUsername",
                "merchantPassword"
              ],
              "type": "object"
            },
            "settings": {
              "properties": {
                "skipAmountSelection": {
                  "default": false,
                  "description": "Skip amount selection screen",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "CashToCode config",
      "x-discriminator-value": "CashToCode",
      "x-ms-discriminator-value": "CashToCode"
    },
    "Cashflows": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "authId": {
                  "description": "Cashflows Gateway auth ID",
                  "type": "string"
                },
                "authPassword": {
                  "description": "Cashflows Gateway auth password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "authPassword",
                "authId"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Cashflows Gateway config",
      "x-discriminator-value": "Cashflows",
      "x-ms-discriminator-value": "Cashflows"
    },
    "CauriPayment": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "CauriPayment credentials object",
              "properties": {
                "privateKey": {
                  "description": "CauriPayment merchant's private key.",
                  "format": "password",
                  "type": "string"
                },
                "publicKey": {
                  "description": "CauriPayment merchant's public key.",
                  "type": "string"
                }
              },
              "required": [
                "publicKey",
                "privateKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "CauriPayment config",
      "x-discriminator-value": "CauriPayment",
      "x-ms-discriminator-value": "CauriPayment"
    },
    "Cayan": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "merchantKey": {
                  "description": "Cayan Gateway merchant key",
                  "format": "password",
                  "type": "string"
                },
                "merchantName": {
                  "description": "Cayan Gateway merchant name",
                  "type": "string"
                },
                "merchantSiteId": {
                  "description": "Cayan Gateway merchant site ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantSiteId",
                "merchantName",
                "merchantKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Cayan Gateway config",
      "x-discriminator-value": "Cayan",
      "x-ms-discriminator-value": "Cayan"
    },
    "Chase": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "coNumber": {
                  "description": "Chase Gateway CO Number used for delimited file reports",
                  "type": "string"
                },
                "divisionId": {
                  "description": "Chase Gateway division ID",
                  "type": "string"
                },
                "partialAuth": {
                  "default": false,
                  "description": "Support for Partial Auths",
                  "type": "boolean"
                },
                "password": {
                  "description": "Chase Gateway Net Connect password",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "Chase Gateway Net Connect username",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password",
                "coNumber",
                "divisionId",
                "partialAuth"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Chase Gateway config",
      "x-discriminator-value": "Chase",
      "x-ms-discriminator-value": "Chase"
    },
    "China-UnionPayInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "China UnionPay payment instrument object",
      "x-discriminator-value": "China-UnionPayInstrument",
      "x-ms-discriminator-value": "China-UnionPayInstrument"
    },
    "Citadel": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Citadel credentials object",
              "properties": {
                "password": {
                  "description": "Password",
                  "format": "password",
                  "type": "string"
                },
                "storeId": {
                  "description": "Store ID",
                  "type": "string"
                },
                "storeName": {
                  "description": "Store name",
                  "type": "string"
                },
                "username": {
                  "description": "Username",
                  "type": "string"
                }
              },
              "required": [
                "storeName",
                "storeId",
                "username",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Citadel config",
      "x-discriminator-value": "Citadel",
      "x-ms-discriminator-value": "Citadel"
    },
    "Clearhaus": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiKey": {
                  "description": "Clearhaus api key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/ClearhausMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Clearhaus Gateway config",
      "x-discriminator-value": "Clearhaus",
      "x-ms-discriminator-value": "Clearhaus"
    },
    "ClearhausMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/ClearhausMpis"
        },
        {
          "properties": {
            "acquirerBin": {
              "description": "Acquiring institution identification code.",
              "type": "string"
            },
            "apiKey": {
              "description": "Mpi Api key",
              "format": "password",
              "type": "string"
            },
            "merchantId": {
              "description": "Merchant account ID or Card Acceptor ID provided by the acquiring bank.",
              "type": "string"
            }
          },
          "required": [
            "merchantId",
            "acquirerBin",
            "apiKey"
          ],
          "type": "object"
        }
      ],
      "description": "Clearhaus Mpi Credentials",
      "x-discriminator-value": "ClearhausMpi",
      "x-ms-discriminator-value": "ClearhausMpi"
    },
    "ClearhausMpis": {
      "description": "Clearhaus Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "ClearhausMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CommonScheduleInstruction": {
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "auto",
            "intelligent",
            "immediately",
            "date-interval",
            "day-of-month",
            "day-of-week"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "Condition": {
      "discriminator": "op",
      "properties": {
        "op": {
          "description": "The condition operation",
          "enum": [
            "and",
            "or",
            "not",
            "between",
            "equals",
            "in",
            "gt",
            "gte",
            "lt",
            "lte"
          ],
          "type": "string"
        }
      },
      "required": [
        "op"
      ],
      "type": "object"
    },
    "Conekta": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Conekta credentials object",
              "properties": {
                "apiKey": {
                  "description": "Conekta private API key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Conekta config",
      "x-discriminator-value": "Conekta",
      "x-ms-discriminator-value": "Conekta"
    },
    "Contact": {
      "properties": {
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "address": {
          "description": "The contact street address",
          "maxLength": 60,
          "type": "string"
        },
        "address2": {
          "description": "The contact street address (second line)",
          "maxLength": 60,
          "type": "string"
        },
        "city": {
          "description": "The contact city",
          "maxLength": 45,
          "type": "string"
        },
        "country": {
          "description": "The contact country ISO Alpha-2 code",
          "pattern": "^[A-Z]{2}$",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The contact created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The contact customer ID"
        },
        "emails": {
          "$ref": "#/definitions/ContactEmails"
        },
        "firstName": {
          "description": "The contact first name",
          "type": "string"
        },
        "hash": {
          "description": "A hash that can be used to compare multiple contacts for identical attribute values, excluding id, customer id, createdTime, updatedTime.",
          "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
          "maxLength": 40,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The contact identifier string",
          "readOnly": true
        },
        "lastName": {
          "description": "The contact last name",
          "type": "string"
        },
        "organization": {
          "description": "The contact organization",
          "type": "string"
        },
        "phoneNumbers": {
          "$ref": "#/definitions/ContactPhoneNumbers"
        },
        "postalCode": {
          "description": "The contact postal code",
          "maxLength": 10,
          "type": "string"
        },
        "region": {
          "description": "The contact region (state)",
          "maxLength": 45,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The contact updated time"
        }
      },
      "type": "object"
    },
    "ContactEmails": {
      "description": "The list of emails",
      "items": {
        "properties": {
          "label": {
            "description": "The email label",
            "example": "main",
            "type": "string"
          },
          "primary": {
            "description": "True if email is primary",
            "example": true,
            "type": "boolean"
          },
          "value": {
            "description": "The email value",
            "example": "rebilly@example.com",
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "ContactObject": {
      "properties": {
        "address": {
          "description": "The contact street address",
          "example": "36 Craven St",
          "maxLength": 60,
          "type": "string",
          "x-nullable": true
        },
        "address2": {
          "description": "The contact street address (second line)",
          "maxLength": 60,
          "type": "string",
          "x-nullable": true
        },
        "city": {
          "description": "The contact city",
          "example": "London",
          "maxLength": 45,
          "type": "string",
          "x-nullable": true
        },
        "country": {
          "description": "The contact country ISO Alpha-2 code",
          "example": "GB",
          "pattern": "^[A-Z]{2}$",
          "type": "string",
          "x-nullable": true
        },
        "emails": {
          "$ref": "#/definitions/ContactEmails"
        },
        "firstName": {
          "description": "The contact first name",
          "example": "Benjamin",
          "type": "string",
          "x-nullable": true
        },
        "hash": {
          "description": "A hash that can be used to compare multiple contacts for identical attribute values",
          "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
          "maxLength": 40,
          "readOnly": true,
          "type": "string"
        },
        "lastName": {
          "description": "The contact last name",
          "example": "Franklin",
          "type": "string",
          "x-nullable": true
        },
        "organization": {
          "description": "The contact organization",
          "example": null,
          "type": "string",
          "x-nullable": true
        },
        "phoneNumbers": {
          "$ref": "#/definitions/ContactPhoneNumbers"
        },
        "postalCode": {
          "description": "The contact postal code",
          "example": "WC2N 5NF",
          "maxLength": 10,
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "description": "The contact region (state)",
          "example": "London",
          "maxLength": 45,
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ContactPhoneNumbers": {
      "description": "The list of phone numbers",
      "items": {
        "properties": {
          "label": {
            "description": "The phone label",
            "example": "main",
            "type": "string"
          },
          "primary": {
            "description": "True if phone is primary",
            "example": true,
            "type": "boolean"
          },
          "value": {
            "description": "The phone value",
            "example": "512-710-1640",
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "Coppr": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Coppr credentials object",
              "properties": {
                "apiKey": {
                  "description": "Coppr api key",
                  "format": "password",
                  "type": "string"
                },
                "organizationId": {
                  "description": "Coppr Organization's ID",
                  "type": "string"
                }
              },
              "required": [
                "organizationId",
                "apiKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Coppr config",
      "x-discriminator-value": "Coppr",
      "x-ms-discriminator-value": "Coppr"
    },
    "Coupon": {
      "description": "Coupons and Discounts",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon created time"
        },
        "description": {
          "description": "Your coupon description. When it is not empty this is used for invoice discount item description,\notherwise the item's description uses coupon's redemptionCode like 'Coupon \"redemptionCode\"'\n",
          "type": "string"
        },
        "discount": {
          "$ref": "#/definitions/Discount"
        },
        "expiredTime": {
          "description": "Coupon's expire time (end time)",
          "format": "date-time",
          "type": "string"
        },
        "issuedTime": {
          "description": "Coupon's issued time (start time)",
          "format": "date-time",
          "type": "string"
        },
        "redemptionCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Coupon's redemption code",
          "readOnly": true
        },
        "redemptionsCount": {
          "description": "Coupon's redemptions count",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "restrictions": {
          "description": "Coupon restrictions",
          "items": {
            "$ref": "#/definitions/CouponRestriction"
          },
          "type": "array"
        },
        "status": {
          "description": "If coupon enabled",
          "enum": [
            "draft",
            "issued",
            "expired"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon updated time."
        }
      },
      "required": [
        "discount",
        "issuedTime"
      ],
      "type": "object"
    },
    "CouponExpiration": {
      "properties": {
        "expiredTime": {
          "description": "The coupon's expiry time, must be greater than the issued time. Null or empty string will immediately expire the coupon.",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "expiredTime"
      ],
      "type": "object"
    },
    "CouponRedemption": {
      "description": "Coupons redemption log",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "additionalRestrictions": {
          "description": "Additional restrictions for coupon's redemptions",
          "items": {
            "$ref": "#/definitions/RedemptionRestriction"
          },
          "type": "array"
        },
        "canceledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon redemption canceled time",
          "readOnly": true
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon redeem time",
          "readOnly": true
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Customer's ID"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "redemptionCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Coupon's redemption code"
        }
      },
      "type": "object"
    },
    "CouponRestriction": {
      "description": "Coupon restrictions",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Coupon's restriction type",
          "enum": [
            "discounts-per-redemption",
            "minimum-order-amount",
            "redemptions-per-customer",
            "restrict-to-invoices",
            "restrict-to-plans",
            "restrict-to-subscriptions",
            "restrict-to-products",
            "total-redemptions",
            "paid-by-time"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Credential": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "customerId": {
          "description": "The credential's customer ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "The credential's expired time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The credential identifier string",
          "readOnly": true
        },
        "password": {
          "description": "The credential's password",
          "format": "password",
          "type": "string"
        },
        "username": {
          "description": "Credential's username",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password",
        "customerId"
      ],
      "type": "object"
    },
    "Credorax": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "merchantId": {
                  "description": "Credorax Gateway merchant ID",
                  "type": "string"
                },
                "merchantMd5Signature": {
                  "description": "Credorax Gateway md5 signature",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "merchantMd5Signature"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Credorax Gateway config",
      "x-discriminator-value": "Credorax",
      "x-ms-discriminator-value": "Credorax"
    },
    "Cryptonator": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Cryptonator credentials object",
              "properties": {
                "merchant_id": {
                  "description": "Cryptonator merchant ID",
                  "type": "string"
                },
                "secret": {
                  "description": "Cryptonator secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchant_id",
                "secret"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Cryptonator config",
      "x-discriminator-value": "Cryptonator",
      "x-ms-discriminator-value": "Cryptonator"
    },
    "CurrencyCode": {
      "description": "ISO 4217 alphabetic currency code",
      "example": "USD",
      "maxLength": 3,
      "minLength": 3,
      "type": "string"
    },
    "CustomEventScheduleInstruction": {
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "date-interval",
            "day-of-month",
            "day-of-week"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "CustomField": {
      "description": "A separate Custom Field schema",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "additionalSchema": {
          "description": "Additional parameters which can be added according to type:\n\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values\nmaxLength      | string        | Maximum allowed length for the string, 255 by default, up to 4000\n"
        },
        "description": {
          "description": "The custom field description",
          "type": "string"
        },
        "name": {
          "description": "The name of the custom field",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements\nboolean       | true or false\ndate          | String of format \"full-date\" (YYYY-MM-DD) from RFC-3339 (full-date)\ndatetime      | String of format \"date-time\" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)\ninteger       | Cardinal value of -2^31..2^31-1\nnumber        | Float value. It can take cardinal values also which are interpreted as float\nstring        | Regular string up to 255 characters\nmonetary      | A map of 3-letters currency code and amount, e.g. {\"currency\": \"EUR\", \"amount\": 25.30}\n",
          "enum": [
            "array",
            "boolean",
            "datetime",
            "integer",
            "number",
            "string",
            "monetary"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Customer": {
      "properties": {
        "tags": {
          "description": "A list of customer's tags",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "readOnly": true,
          "type": "array"
        },
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 3,
          "readOnly": true,
          "type": "array"
        },
        "averageValue": {
          "$ref": "#/definitions/CustomerAverageValue"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The customer created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "defaultPaymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer identifier string",
          "readOnly": true
        },
        "invoiceCount": {
          "description": "An auto-incrementing number based on the sequence of invoices. If set to 0, then this record is a Lead, otherwise is a Customer",
          "readOnly": true,
          "type": "integer"
        },
        "lastPaymentTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The most recent time of an approved payment for the customer"
        },
        "lifetimeRevenue": {
          "$ref": "#/definitions/CustomerLifetimeRevenue"
        },
        "paymentCount": {
          "description": "The number of approved payments for the customer",
          "readOnly": true,
          "type": "integer"
        },
        "paymentToken": {
          "description": "A write-only payment token; if supplied, it will be converted into a\npayment instrument and be set as the `defaultPaymentInstrument`. The\nvalue of this property will override the `defaultPaymentInstrument`\nin the case that both are supplied. The token may only be used once\nbefore it is expired.\n",
          "type": "string"
        },
        "primaryAddress": {
          "$ref": "#/definitions/ContactObject"
        },
        "revision": {
          "description": "The number of times the customer data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
          "readOnly": true,
          "type": "integer"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The customer updated time"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website's ID"
        }
      },
      "type": "object"
    },
    "CustomerAverageValue": {
      "properties": {
        "amount": {
          "description": "Average approved payment amount in Merchant's reporting currency",
          "format": "double",
          "type": "number"
        },
        "amountUsd": {
          "description": "Average approved payment amount in USD",
          "format": "double",
          "type": "number"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ],
          "description": "Merchant's reporting currency"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "CustomerEmbed": {
      "description": "Customer object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "CustomerJWT": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/CustomerLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "description": "Session created time",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer's ID",
          "readOnly": true
        },
        "expiredTime": {
          "description": "Session expired time. Defaults to one hour",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The session identifier string",
          "readOnly": true
        },
        "invalidate": {
          "default": true,
          "description": "Whether to invalidate token after exchange or not",
          "example": true,
          "type": "boolean"
        },
        "oneTimePassword": {
          "description": "The one time password sent via an email. Should contain digits only.",
          "example": "123456",
          "pattern": "^[0-9]{6}$",
          "type": "string"
        },
        "token": {
          "description": "The session's token used for authentication",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Session type",
          "enum": [
            "customer"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Session updated time"
        }
      },
      "type": "object"
    },
    "CustomerLifetimeRevenue": {
      "properties": {
        "amount": {
          "description": "Revenue amount in Merchant's reporting currency",
          "format": "double",
          "type": "number"
        },
        "amountUsd": {
          "description": "Revenue amount in USD",
          "format": "double",
          "type": "number"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ],
          "description": "Merchant's reporting currency"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "CustomerLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "customer"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "CustomerTimeline": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "customData": {
          "description": "Timeline custom event data. Used with `custom-event` type. Will be transformed to `extraData` two-column table in response",
          "example": {
            "customAttribute": "customValue",
            "otherAttribute": "otherValue"
          },
          "type": "object"
        },
        "customEventType": {
          "description": "Timeline custom event type. Used with `custom-event` type. Must be defined using [Customer Timeline custom event API](#operation/PostCustomerTimelineCustomEventType)",
          "maxLength": 255,
          "minLength": 1,
          "type": "string",
          "x-nullable": true
        },
        "extraData": {
          "$ref": "#/definitions/TimelineExtraData"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Timeline message identifier string",
          "readOnly": true
        },
        "message": {
          "description": "The message that describes the message details",
          "type": "string"
        },
        "occurredTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Timeline message time"
        },
        "triggeredBy": {
          "description": "Shows who or what triggered the Timeline message",
          "enum": [
            "rebilly",
            "app",
            "direct-api"
          ],
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Timeline message type",
          "enum": [
            "customer-comment-created",
            "customer-created",
            "primary-address-changed",
            "default-payment-instrument-changed",
            "lead-source-changed",
            "custom-fields-changed",
            "coupon-applied",
            "coupon-redeemed",
            "coupon-redemption-canceled",
            "kyc-document-created",
            "kyc-document-accepted",
            "kyc-document-manually-accepted",
            "kyc-document-rejected",
            "kyc-document-manually-rejected",
            "payment-card-expired",
            "payment-instrument-created",
            "payment-instrument-deactivated",
            "customer-blacklisted",
            "customer-payment-card-blacklisted",
            "invoice-created",
            "invoice-issued",
            "invoice-abandoned",
            "invoice-voided",
            "invoice-past-due",
            "invoice-paid",
            "invoice-partially-paid",
            "invoice-disputed",
            "invoice-refunded",
            "invoice-partially-refunded",
            "order-created",
            "order-renewed",
            "order-activated",
            "order-completed",
            "order-reactivated",
            "order-canceled",
            "order-upgraded",
            "order-downgraded",
            "order-churned",
            "order-paid-early",
            "transaction-approved",
            "transaction-canceled",
            "transaction-declined",
            "transaction-abandoned",
            "transaction-refunded",
            "transaction-voided",
            "transaction-discrepancy-found",
            "transaction-amount-discrepancy-found",
            "email-message-sent",
            "custom-event-processed",
            "custom-event",
            "transaction-waiting-gateway"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerTimelineCustomEvent": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Customer Timeline Custom event created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Customer Timeline Custom Event identifier string",
          "readOnly": true
        },
        "name": {
          "description": "Customer Timeline Custom Event type name. It must not be similar to any Rebilly system event.",
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Customer Timeline Custom event updated time"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "DataCash": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "client": {
                  "description": "DataCash Gateway client",
                  "type": "string"
                },
                "masterCardPayoutsClient": {
                  "description": "DataCash Gateway client for MasterCard payouts (OCT)",
                  "type": "string"
                },
                "masterCardPayoutsPassword": {
                  "description": "DataCash Gateway password for MasterCard payouts (OCT)",
                  "format": "password",
                  "type": "string"
                },
                "password": {
                  "description": "DataCash Gateway password",
                  "format": "password",
                  "type": "string"
                },
                "reportGroup": {
                  "description": "DataCash report group",
                  "type": "string"
                },
                "reportPassword": {
                  "description": "DataCash report password",
                  "format": "password",
                  "type": "string"
                },
                "reportUser": {
                  "description": "DataCash report user",
                  "type": "string"
                },
                "visaPayoutsClient": {
                  "description": "DataCash Gateway client for Visa payouts (OCT)",
                  "type": "string"
                },
                "visaPayoutsPassword": {
                  "description": "DataCash Gateway password for Visa payouts (OCT)",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "client",
                "password"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/DataCashMpis"
            },
            "settings": {
              "description": "Datacash settings object",
              "properties": {
                "delay": {
                  "default": 0,
                  "description": "Auto Capture delay (in hours)",
                  "minimum": 0,
                  "type": "integer"
                },
                "policy": {
                  "default": 2,
                  "description": "Policy",
                  "maximum": 7,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "DataCash Gateway config",
      "x-discriminator-value": "DataCash",
      "x-ms-discriminator-value": "DataCash"
    },
    "DataCashMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/DataCashMpis"
        }
      ],
      "description": "DataCash Integrated",
      "x-discriminator-value": "DataCashMpi",
      "x-ms-discriminator-value": "DataCashMpi"
    },
    "DataCashMpis": {
      "description": "DataCash Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "DataCashMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "DefaultPaymentInstrumentLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "defaultPaymentInstrument"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Dengi": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "projectId": {
                  "description": "Dengi Gateway project ID",
                  "type": "string"
                },
                "publicKey": {
                  "description": "Dengi Gateway public key",
                  "format": "password",
                  "type": "string"
                },
                "refundKey": {
                  "description": "Dengi Gateway refund key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "projectId",
                "publicKey",
                "refundKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Dengi Gateway config",
      "x-discriminator-value": "Dengi",
      "x-ms-discriminator-value": "Dengi"
    },
    "Discount": {
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Discount type",
          "enum": [
            "fixed",
            "percent"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Dispute": {
      "properties": {
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "acquirerReferenceNumber": {
          "description": "The dispute's acquirer reference number",
          "type": "string"
        },
        "amount": {
          "description": "The dispute amount",
          "format": "double",
          "type": "number"
        },
        "category": {
          "description": "The dispute's category",
          "enum": [
            "fraud",
            "unrecognized",
            "product-not-received",
            "product-unacceptable",
            "product-not-refunded",
            "duplicate",
            "subscription-canceled",
            "uncategorized"
          ],
          "readOnly": true,
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Dispute created time"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
        "customerId": {
          "description": "The dispute's customer ID",
          "readOnly": true,
          "type": "string"
        },
        "deadlineTime": {
          "description": "Dispute deadline time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The dispute identifier string",
          "readOnly": true
        },
        "postedTime": {
          "description": "Dispute posted time",
          "format": "date-time",
          "type": "string"
        },
        "rawResponse": {
          "description": "Dispute raw response from gateway",
          "readOnly": true,
          "type": "string"
        },
        "reasonCode": {
          "description": "The dispute's reason code",
          "enum": [
            "1000",
            "10.1",
            "10.2",
            "10.3",
            "10.4",
            "10.5",
            "11.1",
            "11.2",
            "11.3",
            "12",
            "12.1",
            "12.2",
            "12.3",
            "12.4",
            "12.5",
            "12.6",
            "12.7",
            "13.1",
            "13.2",
            "13.3",
            "13.4",
            "13.5",
            "13.6",
            "13.7",
            "13.8",
            "13.9",
            "2",
            "30",
            "31",
            "35",
            "37",
            "40",
            "41",
            "42",
            "46",
            "47",
            "49",
            "50",
            "53",
            "54",
            "55",
            "57",
            "59",
            "60",
            "62",
            "7",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "79",
            "8",
            "80",
            "81",
            "82",
            "83",
            "85",
            "86",
            "93",
            "00",
            "63",
            "A01",
            "A02",
            "A08",
            "F10",
            "F14",
            "F22",
            "F24",
            "F29",
            "C02",
            "C04",
            "C05",
            "C08",
            "C14",
            "C18",
            "C28",
            "C31",
            "C32",
            "M10",
            "M49",
            "P01",
            "P03",
            "P04",
            "P05",
            "P07",
            "P08",
            "P22",
            "P23",
            "R03",
            "R13",
            "M01",
            "FR1",
            "FR4",
            "FR6",
            "AL",
            "AP",
            "AW",
            "CA",
            "CD",
            "CR",
            "DA",
            "DP",
            "DP1",
            "EX",
            "IC",
            "IN",
            "IS",
            "LP",
            "N",
            "NA",
            "NC",
            "P",
            "RG",
            "RM",
            "RN1",
            "RN2",
            "SV",
            "TF",
            "TNM",
            "UA01",
            "UA02",
            "UA32",
            "UA99",
            "UA03",
            "UA10",
            "UA11",
            "UA12",
            "UA18",
            "UA20",
            "UA21",
            "UA22",
            "UA23",
            "UA28",
            "UA30",
            "UA31",
            "UA38",
            "duplicate",
            "fraudulent",
            "subscription_canceled",
            "product_unacceptable",
            "product_not_received",
            "unrecognized",
            "credit_not_processed",
            "customer_initiated",
            "incorrect_account_details",
            "insufficient_funds",
            "bank_cannot_process",
            "debit_not_authorized",
            "general"
          ],
          "type": "string"
        },
        "resolvedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Dispute resolved time"
        },
        "status": {
          "description": "The dispute's status",
          "enum": [
            "response-needed",
            "under-review",
            "forfeited",
            "won",
            "lost",
            "unknown"
          ],
          "type": "string"
        },
        "transactionId": {
          "description": "The dispute's transaction ID",
          "type": "string"
        },
        "type": {
          "description": "The dispute's type",
          "enum": [
            "information-request",
            "first-chargeback",
            "second-chargeback",
            "arbitration"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Dispute updated time"
        }
      },
      "required": [
        "currency",
        "transactionId",
        "postedTime",
        "type",
        "status",
        "reasonCode"
      ],
      "type": "object"
    },
    "DisputeLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "dispute"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "DueTimeShiftInstruction": {
      "default": {
        "duration": 1,
        "unit": "hour"
      },
      "description": "The calculation instruction of due time.\nThis is used in conjunction with the **billing anchor** to calculate due time of invoice.\nThe chronology of due time shift is always **after**.\n",
      "properties": {
        "duration": {
          "description": "The number of the units",
          "minimum": 1,
          "type": "integer"
        },
        "unit": {}
      },
      "required": [
        "duration",
        "unit"
      ],
      "type": "object"
    },
    "EPG": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "EPG credentials object",
              "properties": {
                "merchantId": {
                  "description": "Merchant ID",
                  "type": "string"
                },
                "merchantKey": {
                  "description": "Merchant key",
                  "format": "password",
                  "type": "string"
                },
                "merchantPassword": {
                  "description": "Merchant password",
                  "format": "password",
                  "type": "string"
                },
                "productId": {
                  "description": "Product ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "productId",
                "merchantPassword",
                "merchantKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "EPG config",
      "x-discriminator-value": "EPG",
      "x-ms-discriminator-value": "EPG"
    },
    "EPSInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "EPS payment instrument object",
      "x-discriminator-value": "EPSInstrument",
      "x-ms-discriminator-value": "EPSInstrument"
    },
    "EcorePay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "accountAuth": {
                  "description": "EcorePay Account Auth",
                  "format": "password",
                  "type": "string"
                },
                "accountId": {
                  "description": "EcorePay Account ID",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "accountAuth"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "EcorePay Gateway config",
      "x-discriminator-value": "EcorePay",
      "x-ms-discriminator-value": "EcorePay"
    },
    "Elavon": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Elavon credentials object",
              "properties": {
                "ssl_merchant_id": {
                  "description": "Elavon merchant ID",
                  "type": "string"
                },
                "ssl_pin": {
                  "description": "Elavon pin",
                  "format": "password",
                  "type": "string"
                },
                "ssl_user_id": {
                  "description": "Elavon user ID",
                  "type": "string"
                }
              },
              "required": [
                "ssl_merchant_id",
                "ssl_user_id",
                "ssl_pin"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Elavon config",
      "x-discriminator-value": "Elavon",
      "x-ms-discriminator-value": "Elavon"
    },
    "Error": {
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "description": "The HTTP status code.",
          "maximum": 600,
          "minimum": 100,
          "type": "integer"
        },
        "title": {
          "description": "A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "type": "string"
        },
        "type": {
          "description": "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventType": {
      "description": "Rebilly event type",
      "enum": [
        "dispute-created",
        "gateway-account-requested",
        "transaction-processed",
        "subscription-activated",
        "subscription-canceled",
        "subscription-created",
        "subscription-renewed",
        "payment-card-expired",
        "invoice-past-due",
        "invoice-paid",
        "transaction-declined",
        "transaction-process-requested",
        "risk-score-changed",
        "transaction-discrepancy-found"
      ],
      "readOnly": true,
      "type": "string"
    },
    "File": {
      "properties": {
        "tags": {
          "description": "The tags list",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 3,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The upload date/time"
        },
        "description": {
          "description": "The File description",
          "type": "string"
        },
        "extension": {
          "description": "The File extension",
          "type": "string"
        },
        "height": {
          "description": "Image height, applicable to images only",
          "readOnly": true,
          "type": "integer"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "isPublic": {
          "description": "Is the file available publicly (without authentication). If true, the permalink in the _links section contains the public URL.",
          "type": "boolean"
        },
        "mime": {
          "description": "The mime type",
          "enum": [
            "image/png",
            "image/jpeg",
            "image/gif",
            "application/pdf",
            "audio/mpeg"
          ],
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Original File name",
          "type": "string"
        },
        "sha1": {
          "description": "Hash sum of the file",
          "readOnly": true,
          "type": "string"
        },
        "size": {
          "description": "The File size in bytes",
          "readOnly": true,
          "type": "integer"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The latest update date/time"
        },
        "width": {
          "description": "Image width, applicable to images only",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "FileCreateFromInline": {
      "properties": {
        "tags": {
          "description": "The tags list",
          "example": [
            "test",
            "tags"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "The file description",
          "example": "My file description",
          "type": "string"
        },
        "file": {
          "description": "The file in base64 encoded format.",
          "example": "R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=",
          "type": "string"
        },
        "isPublic": {
          "description": "The File visibility. If public a permalink is provided.",
          "example": false,
          "type": "boolean"
        },
        "name": {
          "description": "The file name used for downloading",
          "example": "logo.png",
          "type": "string"
        }
      },
      "required": [
        "file"
      ],
      "type": "object"
    },
    "FileCreateFromUrl": {
      "properties": {
        "tags": {
          "description": "The tags list",
          "example": [
            "test",
            "tags"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "The file description",
          "example": "My file description",
          "type": "string"
        },
        "isPublic": {
          "description": "The File visibility. If public a permalink is provided.",
          "example": false,
          "type": "boolean"
        },
        "name": {
          "description": "The file name used for downloading",
          "example": "logo.png",
          "type": "string"
        },
        "url": {
          "description": "The URL of the file to upload.",
          "example": "https://blog.rebilly.com/wp-content/uploads/2017/09/rb_LogoInverted_Small.png",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "FileDownloadLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "download"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "FileEmbed": {
      "description": "File object",
      "properties": {
        "file": {
          "$ref": "#/definitions/File"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "FileLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "file"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "FinTecSystems": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "FinTecSystems credentials object",
              "properties": {
                "apiKey": {
                  "description": "FinTecSystems api key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey"
              ],
              "type": "object"
            },
            "settings": {
              "description": "FinTecSystems settings object",
              "properties": {
                "recipientBIC": {
                  "description": "BIC of the recipient account",
                  "type": "string"
                },
                "recipientCountry": {
                  "description": "Two letter country code",
                  "enum": [
                    "AT",
                    "CH",
                    "DE"
                  ],
                  "type": "string"
                },
                "recipientHolder": {
                  "description": "Account holder of the recipient account",
                  "type": "string"
                },
                "recipientIBAN": {
                  "description": "IBAN of the recipient account",
                  "type": "string"
                }
              },
              "required": [
                "recipientIBAN",
                "recipientBIC",
                "recipientHolder",
                "recipientCountry"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials",
            "settings"
          ],
          "type": "object"
        }
      ],
      "description": "FinTecSystems config",
      "x-discriminator-value": "FinTecSystems",
      "x-ms-discriminator-value": "FinTecSystems"
    },
    "Finrax": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Finrax credentials object",
              "properties": {
                "businessToken": {
                  "description": "Finrax business token",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "businessToken"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Finrax config",
      "x-discriminator-value": "Finrax",
      "x-ms-discriminator-value": "Finrax"
    },
    "Flexepin": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiKey": {
                  "description": "Flexepin API Key",
                  "type": "string"
                },
                "apiSecret": {
                  "description": "Flexepin API Secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey",
                "apiSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Flexepin Gateway config",
      "x-discriminator-value": "Flexepin",
      "x-ms-discriminator-value": "Flexepin"
    },
    "FlexepinInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "Flexepin payment instrument object",
      "x-discriminator-value": "FlexepinInstrument",
      "x-ms-discriminator-value": "FlexepinInstrument"
    },
    "Forte": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "accountId": {
                  "description": "Forte Gateway account ID",
                  "type": "string"
                },
                "apiAccessId": {
                  "description": "Forte Gateway api access ID",
                  "format": "password",
                  "type": "string"
                },
                "apiSecretKey": {
                  "description": "Forte Gateway api secret key",
                  "format": "password",
                  "type": "string"
                },
                "locationId": {
                  "description": "Forte Gateway location ID",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "locationId",
                "apiAccessId",
                "apiSecretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Forte Gateway config",
      "x-discriminator-value": "Forte",
      "x-ms-discriminator-value": "Forte"
    },
    "FundSend": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "clientId": {
                  "description": "FundSend Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "FundSend Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "FundSend Gateway config",
      "x-discriminator-value": "FundSend",
      "x-ms-discriminator-value": "FundSend"
    },
    "GET": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "accountId": {
                  "description": "GET Gateway account ID",
                  "type": "string"
                }
              },
              "required": [
                "accountId"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/GETMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "GET Gateway config",
      "x-discriminator-value": "GET",
      "x-ms-discriminator-value": "GET"
    },
    "GETMpis": {
      "description": "GET Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "GatewayAccount": {
      "discriminator": "gatewayName",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "acceptedCurrencies": {
          "description": "Accepted currencies (array of the currency three letter code)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "acquirerName": {
          "$ref": "#/definitions/acquirer-name"
        },
        "additionalCriteria": {
          "allOf": [
            {
              "$ref": "#/definitions/Condition"
            }
          ],
          "description": "The additional criteria that allows to check whether the gateway account can be selected for the transaction to be processed.\n"
        },
        "approvalWindowTtl": {
          "default": 3600,
          "description": "The time window (in seconds) allotted for approving a suspended transaction before it is automatically canceled",
          "maximum": 16777215,
          "minimum": 300,
          "type": "integer"
        },
        "cityField": {
          "description": "The gateway account's city field (also known as line 2 descriptor)",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Gateway Account created time"
        },
        "dccForceCurrency": {
          "description": "Force dynamic currency conversion to the specified currency on each sale.\nLeave it empty to disable force DCC.\n",
          "type": "string"
        },
        "dccMarkup": {
          "description": "Dynamic currency conversion markup in basis points",
          "maximum": 10000,
          "minimum": -10000,
          "type": "integer"
        },
        "descriptor": {
          "description": "The gateway account's descriptor",
          "type": "string"
        },
        "dynamicDescriptor": {
          "description": "True, if Gateway Account allows dynamic descriptor",
          "type": "boolean"
        },
        "excludedDccQuoteCurrencies": {
          "description": "Excluded Dynamic Currency Conversion Quote Currencies",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gatewayName": {
          "$ref": "#/definitions/gateway-name"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/schemas_ResourceId"
            }
          ],
          "description": "The gateway identifier string",
          "readOnly": true
        },
        "isDown": {
          "description": "True if gateway is currently in downtime period.",
          "readOnly": true,
          "type": "boolean"
        },
        "merchantCategoryCode": {
          "description": "The gateway account's merchant category code",
          "maximum": 9950,
          "minimum": 742,
          "type": "integer"
        },
        "method": {
          "$ref": "#/definitions/schemas_Method"
        },
        "monthlyLimit": {
          "description": "Monthly Limit",
          "format": "double",
          "minimum": 0,
          "type": "number"
        },
        "organizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/schemas_ResourceId"
            }
          ],
          "description": "Organization ID"
        },
        "paymentCardSchemes": {
          "description": "Accepted payment card brands",
          "items": {
            "$ref": "#/definitions/payment-card-brands"
          },
          "type": "array"
        },
        "status": {
          "description": "The gateway account's status",
          "enum": [
            "active",
            "inactive",
            "pending",
            "closed"
          ],
          "readOnly": true,
          "type": "string"
        },
        "threeDSecure": {
          "description": "True, if Gateway Account allows 3DSecure",
          "type": "boolean"
        },
        "timeout": {
          "description": "Gateway Account request timeout in seconds",
          "maximum": 120,
          "minimum": 10,
          "type": "integer",
          "x-nullable": true
        },
        "token": {
          "description": "Gateway Account token",
          "example": "TwiX3f92k4AiBE27BzTbQ38hHjicBz_w",
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Gateway Account updated time"
        }
      },
      "required": [
        "gatewayName",
        "acquirerName",
        "merchantCategoryCode",
        "websites",
        "acceptedCurrencies",
        "organizationId"
      ],
      "type": "object"
    },
    "GatewayAccountEmbed": {
      "description": "Gateway Account object",
      "properties": {
        "gatewayAccount": {
          "$ref": "#/definitions/GatewayAccount"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "GatewayAccountLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "gatewayAccount"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Gigadat": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Gigadat credentials object",
              "properties": {
                "accessToken": {
                  "description": "Gigadat access token",
                  "format": "password",
                  "type": "string"
                },
                "campaignId": {
                  "description": "Gigadat campaign ID",
                  "type": "string"
                },
                "securityToken": {
                  "description": "Gigadat security token",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "campaignId",
                "accessToken",
                "securityToken"
              ],
              "type": "object"
            },
            "settings": {
              "properties": {
                "sandbox": {
                  "default": false,
                  "description": "True if gateway account is in sandbox mode",
                  "type": "boolean"
                }
              },
              "required": [
                "sandbox"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Gigadat config",
      "x-discriminator-value": "Gigadat",
      "x-ms-discriminator-value": "Gigadat"
    },
    "GlobalOne": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "sharedSecret": {
                  "description": "GlobalOne Gateway shared secret",
                  "format": "password",
                  "type": "string"
                },
                "terminalId": {
                  "description": "GlobalOne Gateway terminal ID",
                  "type": "string"
                }
              },
              "required": [
                "terminalId",
                "sharedSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "GlobalOne Gateway config",
      "x-discriminator-value": "GlobalOne",
      "x-ms-discriminator-value": "GlobalOne"
    },
    "Gooney": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Gooney credentials object",
              "properties": {
                "apiKey": {
                  "description": "Gooney API key",
                  "type": "string"
                },
                "apiPassword": {
                  "description": "Gooney API password",
                  "format": "password",
                  "type": "string"
                },
                "apiSecret": {
                  "description": "Gooney API secret",
                  "format": "password",
                  "type": "string"
                },
                "apiUser": {
                  "description": "Gooney API user",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password",
                "apiKey",
                "apiSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Gooney config",
      "x-discriminator-value": "Gooney",
      "x-ms-discriminator-value": "Gooney"
    },
    "Gpaysafe": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiKey": {
                  "description": "Gpaysafe apiKey",
                  "type": "string"
                }
              },
              "required": [
                "apiKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Gpaysafe Gateway config",
      "x-discriminator-value": "Gpaysafe",
      "x-ms-discriminator-value": "Gpaysafe"
    },
    "Greenbox": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Greenbox credentials object",
              "properties": {
                "clientId": {
                  "description": "Greenbox client ID",
                  "type": "string"
                },
                "clientSecret": {
                  "description": "Greenbox client secret",
                  "format": "password",
                  "type": "string"
                },
                "locationId": {
                  "description": "Greenbox location ID",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "clientSecret",
                "locationId"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Greenbox config",
      "x-discriminator-value": "Greenbox",
      "x-ms-discriminator-value": "Greenbox"
    },
    "IBANInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/TokenBankAccountInstrument"
        },
        {
          "properties": {
            "accountNumber": {
              "description": "Bank Account Number. Detailed information about all ISO 13616-compliant national IBAN formats is available\nin [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n",
              "type": "string"
            },
            "bankName": {
              "description": "Bank name",
              "type": "string"
            },
            "bic": {
              "description": "Bank Identifier Code",
              "type": "string"
            },
            "last4": {
              "description": "Bank Account Number's last 4 digits",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "accountNumber"
          ],
          "type": "object"
        }
      ],
      "description": "Payment Token instrument object",
      "x-discriminator-value": "IBAN",
      "x-ms-discriminator-value": "IBAN"
    },
    "IBANType": {
      "allOf": [
        {
          "$ref": "#/definitions/BankAccountCreatePlain"
        },
        {
          "properties": {
            "accountNumber": {
              "description": "Bank's Account Number. Detailed information about all ISO 13616-compliant national IBAN formats is available\nin [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n",
              "type": "string"
            },
            "address": {
              "allOf": [
                {
                  "$ref": "#/definitions/ContactObject"
                }
              ],
              "description": "The Address."
            },
            "bankName": {
              "description": "Bank's name.",
              "type": "string"
            },
            "bic": {
              "description": "Bank Identifier Code.",
              "type": "string"
            },
            "customFields": {
              "$ref": "#/definitions/ResourceCustomFields"
            },
            "customerId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The Customer's ID."
            }
          },
          "required": [
            "customerId",
            "accountNumber",
            "address"
          ],
          "type": "object"
        }
      ],
      "description": "IBAN type object",
      "x-discriminator-value": "IBAN",
      "x-ms-discriminator-value": "IBAN"
    },
    "INOVAPAY": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "INOVAPAY credentials object",
              "properties": {
                "apiKey": {
                  "description": "INOVAPAY API key",
                  "type": "string"
                },
                "apiSecret": {
                  "description": "INOVAPAY API secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey",
                "apiSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "INOVAPAY config",
      "x-discriminator-value": "INOVAPAY",
      "x-ms-discriminator-value": "INOVAPAY"
    },
    "Ilixium": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Ilixium credentials object",
              "properties": {
                "accountId": {
                  "description": "Ilixium Gateway account ID",
                  "type": "string"
                },
                "digestPassword": {
                  "description": "Ilixium Gateway digest password",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Ilixium Gateway merchant ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "accountId",
                "digestPassword"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/IlixiumMpis"
            },
            "settings": {
              "description": "Ilixium settings object",
              "properties": {
                "useIpFrame": {
                  "description": "Force Ilixium to process via Ip Frame",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Ilixium Gateway config",
      "x-discriminator-value": "Ilixium",
      "x-ms-discriminator-value": "Ilixium"
    },
    "IlixiumMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/IlixiumMpis"
        }
      ],
      "description": "Ilixium Integrated",
      "x-discriminator-value": "IlixiumMpi",
      "x-ms-discriminator-value": "IlixiumMpi"
    },
    "IlixiumMpis": {
      "description": "IlixiumMpis Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "IlixiumMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Ingenico": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiKeyId": {
                  "description": "Ingenico Gateway api key ID",
                  "type": "string"
                },
                "apiSecretKey": {
                  "description": "Ingenico Gateway api secret key",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Ingenico Gateway merchant ID",
                  "type": "string"
                },
                "skipFraudService": {
                  "description": "Ingenico skip fraud service",
                  "type": "boolean"
                }
              },
              "required": [
                "merchantId",
                "apiKeyId",
                "apiSecretKey"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/IngenicoMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Ingenico Gateway config",
      "x-discriminator-value": "Ingenico",
      "x-ms-discriminator-value": "Ingenico"
    },
    "IngenicoMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/IngenicoMpis"
        }
      ],
      "description": "Ingenico Integrated",
      "x-discriminator-value": "IngenicoMpi",
      "x-ms-discriminator-value": "IngenicoMpi"
    },
    "IngenicoMpis": {
      "description": "Ingenico Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "IngenicoMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "InitialInvoiceEmbed": {
      "description": "Initial Invoice object",
      "properties": {
        "initialInvoice": {
          "$ref": "#/definitions/Invoice"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "InitialInvoiceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "initialInvoice"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Inovio": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Inovio credentials object",
              "properties": {
                "password": {
                  "description": "Inovio password",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "Inovio username",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/InovioMpis"
            },
            "settings": {
              "description": "Inovio settings object",
              "properties": {
                "merchantAccountId": {
                  "description": "Inovio merchant account ID",
                  "type": "string"
                },
                "productId": {
                  "description": "Inovio product ID",
                  "type": "string"
                },
                "websiteId": {
                  "description": "Inovio website ID",
                  "type": "string"
                }
              },
              "required": [
                "websiteId",
                "merchantAccountId",
                "productId"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials",
            "settings"
          ],
          "type": "object"
        }
      ],
      "description": "Inovio config",
      "x-discriminator-value": "Inovio",
      "x-ms-discriminator-value": "Inovio"
    },
    "InovioMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/InovioMpis"
        }
      ],
      "description": "Inovio Integrated",
      "x-discriminator-value": "InovioMpi",
      "x-ms-discriminator-value": "InovioMpi"
    },
    "InovioMpis": {
      "description": "Inovio Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "InovioMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "InstaDebit": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "InstaDebit credentials object",
              "properties": {
                "merchantId": {
                  "description": "InstaDebit merchant account number",
                  "type": "string"
                },
                "password": {
                  "description": "InstaDebit merchant account password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "InstaDebit config",
      "x-discriminator-value": "InstaDebit",
      "x-ms-discriminator-value": "InstaDebit"
    },
    "Intuit": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "clientId": {
                  "description": "The Intuit client_id key",
                  "type": "string"
                },
                "clientSecret": {
                  "description": "The Intuit client_secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "clientSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Intuit Gateway config",
      "x-discriminator-value": "Intuit",
      "x-ms-discriminator-value": "Intuit"
    },
    "InvalidError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "properties": {
            "invalidFields": {
              "example": [
                {
                  "field": "field1",
                  "message": "field1 is invalid"
                },
                {
                  "field": "subObject.field2",
                  "message": "field2 is invalid"
                },
                {
                  "field": "subObject.field2",
                  "message": "another error in the field2"
                }
              ],
              "items": {
                "properties": {
                  "field": {
                    "description": "The field name. Dot notation is used for nested object field names.",
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "description": "Invalid data was sent"
    },
    "Invoice": {
      "properties": {
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "abandonedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice abandoned time"
        },
        "amount": {
          "description": "The Invoice's amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "amountDue": {
          "description": "The Invoice's due amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "autopayRetryNumber": {
          "default": 0,
          "description": "Invoice autopay retry number",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "autopayScheduledTime": {
          "description": "Invoice autopay scheduled time",
          "format": "date-time",
          "type": "string"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "Invoice's billing address"
        },
        "collectionPeriod": {
          "description": "Collection Period - difference between paidTime and issuedTime in days.",
          "readOnly": true,
          "type": "integer"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice created time"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer's ID"
        },
        "delinquentCollectionPeriod": {
          "description": "Delinquent Collection Period - difference between paidTime and dueTime in days.",
          "readOnly": true,
          "type": "integer"
        },
        "deliveryAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "Invoice's delivery address"
        },
        "discountAmount": {
          "description": "The Invoice's discounts amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "discounts": {
          "description": "Discounts applied",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/InvoiceDiscount"
              }
            ]
          },
          "readOnly": true,
          "type": "array"
        },
        "dueReminderNumber": {
          "description": "Number of past due reminder events triggered",
          "readOnly": true,
          "type": "integer"
        },
        "dueReminderTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Time past due reminder event will be triggered",
          "x-nullable": true
        },
        "dueTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice due time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The invoice identifier string",
          "readOnly": true
        },
        "invoiceNumber": {
          "description": "An auto-incrementing number based on the sequence of invoices for any particular customer.",
          "readOnly": true,
          "type": "integer"
        },
        "issuedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice issued time"
        },
        "items": {
          "description": "Invoice Items array",
          "items": {
            "$ref": "#/definitions/InvoiceItem"
          },
          "readOnly": true,
          "type": "array"
        },
        "notes": {
          "description": "Notes for the customer which will be displayed on the invoice",
          "type": "string"
        },
        "organizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The organization's ID",
          "readOnly": true
        },
        "paidTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice paid time"
        },
        "poNumber": {
          "description": "Purchase order number which will be displayed on the invoice",
          "example": "PO123456",
          "type": "string",
          "x-nullable": true
        },
        "retryInstruction": {
          "description": "The invoice retry instruction",
          "properties": {
            "afterAttemptPolicies": {
              "description": "The policy on the attempt finishes",
              "items": {
                "enum": [
                  "change-subscription-renewal-time"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "afterRetryEndPolicies": {
              "description": "The policy on the retry ends",
              "items": {
                "enum": [
                  "abandon-invoice",
                  "cancel-subscription"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "attempts": {
              "items": {
                "properties": {
                  "scheduleInstruction": {
                    "$ref": "#/definitions/InvoiceRetryScheduleInstruction"
                  }
                },
                "required": [
                  "scheduleInstruction"
                ],
                "type": "object"
              },
              "minItems": 1,
              "type": "array"
            }
          },
          "required": [
            "attempts",
            "afterAttemptPolicies",
            "afterRetryEndPolicies"
          ],
          "type": "object"
        },
        "revision": {
          "description": "The number of times the invoice data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
          "readOnly": true,
          "type": "integer"
        },
        "shippingAmount": {
          "description": "The Invoice's shipping amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "status": {
          "description": "Invoice status.",
          "enum": [
            "draft",
            "unpaid",
            "paid",
            "past-due",
            "delinquent",
            "abandoned",
            "voided",
            "partially-paid",
            "partially-refunded",
            "refunded",
            "disputed"
          ],
          "readOnly": true,
          "type": "string"
        },
        "subscriptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The related Subscription's ID if available, otherwise null",
          "readOnly": true
        },
        "subtotalAmount": {
          "description": "The Invoice's subtotal amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "taxAmount": {
          "description": "The Invoice's taxes amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "taxes": {
          "description": "Taxes applied to this invoice",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/InvoiceTax"
              }
            ]
          },
          "readOnly": true,
          "type": "array"
        },
        "transactions": {
          "description": "Invoice transactions array",
          "items": {
            "$ref": "#/definitions/Transaction"
          },
          "readOnly": true,
          "type": "array"
        },
        "type": {
          "description": "Invoice type.",
          "enum": [
            "initial",
            "renewal",
            "interim",
            "cancellation",
            "one-time",
            "refund",
            "charge"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice updated time"
        },
        "voidedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice voided time"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website's ID"
        }
      },
      "required": [
        "customerId",
        "websiteId",
        "currency"
      ],
      "type": "object"
    },
    "InvoiceDiscount": {
      "properties": {
        "amount": {
          "description": "Total amount that was discounted by this Coupon",
          "format": "double",
          "type": "number"
        },
        "description": {
          "description": "Discount description",
          "type": "string"
        },
        "redemptionCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Coupon's redemption code"
        },
        "redemptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Redemption ID"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "InvoiceIssue": {
      "properties": {
        "dueTime": {
          "description": "Invoice due time. Will be set same as `issuedTime` if `null` or omitted.",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "issuedTime": {
          "description": "Invoice issued time. Will be issued immediately if `null` or omitted.",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "InvoiceItem": {
      "properties": {
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice item created time"
        },
        "description": {
          "description": "Invoice item's description",
          "type": "string"
        },
        "discountAmount": {
          "description": "Invoice item discount amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string",
          "readOnly": true
        },
        "periodEndTime": {
          "description": "End time",
          "format": "date-time",
          "type": "string"
        },
        "periodNumber": {
          "description": "Invoice item subscription period number",
          "type": "integer"
        },
        "periodStartTime": {
          "description": "Start time",
          "format": "date-time",
          "type": "string"
        },
        "price": {
          "description": "Invoice item's total price",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "productId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The product's ID"
        },
        "quantity": {
          "description": "Invoice item's quantity",
          "type": "integer"
        },
        "type": {
          "description": "Invoice item's type",
          "enum": [
            "debit",
            "credit"
          ],
          "type": "string"
        },
        "unitPrice": {
          "description": "Invoice item's price",
          "format": "double",
          "type": "number"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice item updated time"
        }
      },
      "required": [
        "type",
        "unitPrice"
      ],
      "type": "object"
    },
    "InvoiceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "invoice"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "InvoiceReissue": {
      "properties": {
        "dueTime": {
          "description": "Invoice due time. Will be set as current date-time if `null` or omitted.",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "InvoiceRetryScheduleInstruction": {
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "intelligent",
            "immediately",
            "date-interval",
            "day-of-month",
            "day-of-week"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "InvoiceTax": {
      "properties": {
        "amount": {
          "description": "Tax amount",
          "format": "double",
          "type": "number"
        },
        "description": {
          "description": "Tax description",
          "type": "string"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "InvoiceTimeShift": {
      "description": "The invoice time shift in conjunction with `billingTiming` allows to setup different billing use cases such as:\n\n- Bill immediately when the service period _starts_\n- Bill immediately after the service period _ends_\n- Bill _interval of time_ before the service period _starts_\n- Bill _interval of time_ after the service period _starts_\n- Bill _interval of time_ before the service period _ends_\n- Bill _interval of time_ after the service period _ends_\n",
      "properties": {
        "dueTimeShift": {
          "$ref": "#/definitions/DueTimeShiftInstruction"
        },
        "issueTimeShift": {
          "$ref": "#/definitions/IssueTimeShiftInstruction"
        }
      },
      "type": "object"
    },
    "InvoiceTimeline": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "extraData": {
          "$ref": "#/definitions/TimelineExtraData"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Timeline message identifier string",
          "readOnly": true
        },
        "message": {
          "description": "The message that describes the message details",
          "type": "string"
        },
        "occurredTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Timeline message time",
          "readOnly": true
        },
        "triggeredBy": {
          "description": "Shows who or what triggered the Timeline event",
          "enum": [
            "rebilly",
            "app",
            "direct-api"
          ],
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Timeline message type",
          "enum": [
            "timeline-comment-created",
            "invoice-created",
            "invoice-issued",
            "invoice-abandoned",
            "invoice-voided",
            "invoice-past-due",
            "invoice-paid",
            "invoice-partially-paid",
            "invoice-disputed",
            "invoice-refunded",
            "invoice-partially-refunded",
            "invoice-renewal-payment-declined",
            "email-message-sent",
            "coupon-applied",
            "transaction-approved",
            "transaction-abandoned",
            "transaction-canceled",
            "transaction-declined",
            "transaction-refunded",
            "transaction-voided"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceTransactionAllocation": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "maxItems": 2,
          "minItems": 2,
          "readOnly": true,
          "type": "array"
        },
        "amount": {
          "type": "number"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
        "invoiceId": {
          "$ref": "#/definitions/ResourceId"
        },
        "transactionId": {
          "$ref": "#/definitions/ResourceId"
        }
      },
      "type": "object"
    },
    "InvoicesEmbed": {
      "description": "Invoices collection",
      "properties": {
        "invoices": {
          "items": {
            "$ref": "#/definitions/Invoice"
          },
          "type": "array"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "InvoicesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "invoices"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "IpayOptions": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Ipay Options credentials object",
              "properties": {
                "rcode": {
                  "description": "Ipay Options rcode",
                  "format": "password",
                  "type": "string"
                },
                "sid": {
                  "description": "Ipay Options website ID",
                  "type": "string"
                }
              },
              "required": [
                "sid",
                "rcode"
              ],
              "type": "object"
            },
            "settings": {
              "description": "Ipay Options settings object",
              "properties": {
                "extraStep": {
                  "description": "Show extra step for user to enter their email and DNI number",
                  "type": "boolean"
                },
                "platform": {
                  "description": "Platform which IpayOptions will process.",
                  "enum": [
                    "SOAP",
                    "TxHandler"
                  ],
                  "type": "string"
                },
                "subdomain": {
                  "description": "Subdomain to use when sending request to IpayOptions.",
                  "enum": [
                    "miglite",
                    "w88asiapay"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "credentials",
            "settings"
          ],
          "type": "object"
        }
      ],
      "description": "Ipay Options config",
      "x-discriminator-value": "IpayOptions",
      "x-ms-discriminator-value": "IpayOptions"
    },
    "IssueTimeShiftInstruction": {
      "description": "The calculation instruction of billing time.\nThis is used in conjunction with the **service period anchor** to calculate the time the invoice is issued.\n",
      "properties": {
        "chronology": {
          "description": "The chronology of the billing time relatively to the service period start.",
          "enum": [
            "before"
          ],
          "type": "string"
        },
        "duration": {
          "description": "The number of the units",
          "minimum": 1,
          "type": "integer"
        },
        "unit": {}
      },
      "required": [
        "chronology",
        "duration",
        "unit"
      ],
      "type": "object"
    },
    "JetPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "TerminalID": {
                  "description": "JetPay Gateway terminal ID",
                  "type": "string"
                }
              },
              "required": [
                "TerminalID"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "JetPay Gateway config",
      "x-discriminator-value": "JetPay",
      "x-ms-discriminator-value": "JetPay"
    },
    "Jeton": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiKey": {
                  "description": "Jeton apiKey",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey"
              ],
              "type": "object"
            },
            "settings": {
              "properties": {
                "method": {
                  "description": "Jeton's method",
                  "enum": [
                    "CHECKOUT",
                    "DIRECT",
                    "QR",
                    "JETGO"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "method"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Jeton Gateway config",
      "x-discriminator-value": "Jeton",
      "x-ms-discriminator-value": "Jeton"
    },
    "KlarnaInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "Klarna payment instrument object",
      "x-discriminator-value": "KlarnaInstrument",
      "x-ms-discriminator-value": "KlarnaInstrument"
    },
    "KycDocument": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 3,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Creation date/time"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Linked Customer object id"
        },
        "documentMatches": {
          "$ref": "#/definitions/KycDocumentMatches"
        },
        "documentType": {
          "description": "Document type submitted for validation, only identity-proof type is analyzed in an automated manner.",
          "enum": [
            "identity-proof",
            "address-proof"
          ],
          "type": "string"
        },
        "fileId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Linked File object id"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "processedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Processing date/time"
        },
        "rejectionReason": {
          "$ref": "#/definitions/KycDocumentRejection"
        },
        "reviewTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Date and time of manual review.",
          "x-nullable": true
        },
        "reviewerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Reviewer's user ID.",
          "readOnly": true,
          "type": "string",
          "x-nullable": true
        },
        "reviewerName": {
          "description": "Reviewer's first and last name.",
          "readOnly": true,
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "description": "Status of the validation.",
          "enum": [
            "pending",
            "in-progress",
            "accepted",
            "rejected"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Latest update date/time"
        }
      },
      "required": [
        "fileId",
        "customerId",
        "documentType",
        "status"
      ],
      "type": "object"
    },
    "KycDocumentMatches": {
      "properties": {
        "data": {
          "properties": {
            "containsImage": {
              "description": "Flag that indicates if there is an image that contains a face on it",
              "example": true,
              "type": "boolean"
            },
            "dateOfBirth": {
              "allOf": [
                {
                  "$ref": "#/definitions/ServerTimestamp"
                }
              ],
              "description": "The date of birth found on the document, null if not found"
            },
            "expiryDate": {
              "allOf": [
                {
                  "$ref": "#/definitions/ServerTimestamp"
                }
              ],
              "description": "The expiry date found on the document, null if not found"
            },
            "firstName": {
              "description": "The customer first name if it was matched, null otherwise",
              "example": "John",
              "type": "string"
            },
            "hasMinimalAge": {
              "description": "Checks the minimal age, 21+ for USA and 18+ for all other countries. Null if dateOfBirth could not be determined.",
              "example": true,
              "type": "boolean"
            },
            "isIdentityDocument": {
              "description": "Flag that indicates if this looks like and ID",
              "example": true,
              "type": "boolean"
            },
            "isPublishedOnline": {
              "description": "If there is an exact match found online",
              "example": false,
              "type": "boolean"
            },
            "issueDate": {
              "allOf": [
                {
                  "$ref": "#/definitions/ServerTimestamp"
                }
              ],
              "description": "The issued date found on the document, null if not found"
            },
            "lastName": {
              "description": "The customer last name if it was matched, null otherwise",
              "example": "Doe",
              "type": "string"
            }
          },
          "type": "object"
        },
        "score": {
          "description": "The calculated score that represents the % of confidence that this ID represents the given customer",
          "example": 0.75,
          "format": "double",
          "type": "number"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "KycDocumentRejection": {
      "properties": {
        "message": {
          "description": "The rejection message",
          "example": "Provided document is unreadable",
          "type": "string"
        },
        "type": {
          "enum": [
            "document-unreadable",
            "document-expired",
            "document-not-matching",
            "underage-person",
            "other"
          ],
          "type": "string"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "LPG": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "LPG credentials object",
              "properties": {
                "payoutPassword": {
                  "description": "LPG payout account password",
                  "format": "password",
                  "type": "string"
                },
                "payoutUsername": {
                  "description": "LPG payout account username",
                  "format": "password",
                  "type": "string"
                },
                "publicKey": {
                  "description": "LPG public API key",
                  "type": "string"
                },
                "secureKey": {
                  "description": "LPG secure API key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "publicKey",
                "secureKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "LPG config",
      "x-discriminator-value": "LPG",
      "x-ms-discriminator-value": "LPG"
    },
    "LeadSource": {
      "allOf": [
        {
          "$ref": "#/definitions/LeadSourceData"
        },
        {
          "properties": {
            "original": {
              "allOf": [
                {
                  "$ref": "#/definitions/LeadSourceData"
                }
              ],
              "readOnly": true
            }
          },
          "type": "object"
        }
      ]
    },
    "LeadSourceData": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "affiliate": {
          "description": "Lead Source's affiliate (eg 123, Bob Smith)",
          "type": "string"
        },
        "campaign": {
          "description": "Lead Source's campaign (eg go-big-123)",
          "type": "string"
        },
        "clickId": {
          "description": "Lead Source's click id (may come from an ad server)",
          "type": "string"
        },
        "content": {
          "description": "Lead Source's content (eg smiley faces)",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "LeadSource created time"
        },
        "medium": {
          "description": "Lead Source's medium (eg search, display)",
          "type": "string"
        },
        "path": {
          "description": "Lead Source's path uri (eg www.example.com/some/landing/path)",
          "type": "string"
        },
        "salesAgent": {
          "description": "Lead Source's sales agent (eg James Bond)",
          "type": "string"
        },
        "source": {
          "description": "Lead Source's source (eg google, yahoo)",
          "type": "string"
        },
        "subAffiliate": {
          "description": "Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)",
          "type": "string"
        },
        "term": {
          "description": "Lead Source's term (eg salt shakers)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeadSourceEmbed": {
      "description": "Lead Source object",
      "properties": {
        "leadSource": {
          "$ref": "#/definitions/LeadSource"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "LeadSourceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "leadSource"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Link": {
      "properties": {
        "href": {
          "description": "The link URL",
          "type": "string"
        }
      },
      "required": [
        "href"
      ],
      "type": "object"
    },
    "MatchedRule": {
      "properties": {
        "context": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Event's context",
          "type": "object"
        },
        "description": {
          "description": "Rule's description",
          "type": "string"
        },
        "event": {
          "$ref": "#/definitions/EventType"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Event tracking id",
          "readOnly": true
        },
        "occurredTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Time when event occurred."
        },
        "processedRules": {
          "description": "Processed rules",
          "properties": {
            "actions": {
              "description": "Rule actions applied",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "name": {
              "description": "Rule name",
              "type": "string"
            },
            "result": {
              "description": "Rule result",
              "type": "string"
            }
          },
          "type": "object"
        },
        "rulesVersion": {
          "description": "Rule version",
          "type": "integer"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "Method": {
      "description": "The payment method",
      "enum": [
        "payment-card",
        "ach",
        "bank-account",
        "cash",
        "check",
        "paypal",
        "Alipay",
        "ApplePay",
        "AstroPay Card",
        "bank-transfer",
        "bitcoin",
        "Boleto",
        "cash-deposit",
        "CASHlib",
        "CashToCode",
        "China UnionPay",
        "CODVoucher",
        "Conekta-oxxo",
        "domestic-cards",
        "echeck",
        "ecoPayz",
        "ecoVoucher",
        "EPS",
        "ePay.bg",
        "Finrax",
        "Flexepin",
        "Giropay",
        "GooglePay",
        "Gpaysafe",
        "iDebit",
        "iDEAL",
        "INOVAPAY-pin",
        "INOVAPAY-wallet",
        "InstaDebit",
        "instant-bank-transfer",
        "Interac-online",
        "Interac-eTransfer",
        "Interac-express-connect",
        "Interac",
        "invoice",
        "Jeton",
        "Klarna",
        "LPG-online",
        "LPG-payment-card",
        "miscellaneous",
        "Netbanking",
        "Neteller",
        "Nordea-Solo",
        "OchaPay",
        "online-bank-transfer",
        "Onlineueberweisen",
        "Pagsmile-lottery",
        "Pagsmile-deposit-express",
        "PayCash",
        "Paysafecard",
        "Pay4Fun",
        "PinPay",
        "phone",
        "POLi",
        "Przelewy24",
        "QQPay",
        "Resurs",
        "SEPA",
        "Skrill",
        "Skrill Rapid Transfer",
        "SMSVoucher",
        "SparkPay",
        "swift-dbt",
        "ToditoCash-card",
        "Trustly",
        "UPayCard",
        "voucher",
        "WeChat Pay",
        "Zotapay"
      ],
      "type": "string"
    },
    "Moneris": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiToken": {
                  "description": "Moneris Gateway api token",
                  "format": "password",
                  "type": "string"
                },
                "storeId": {
                  "description": "Moneris Gateway store ID",
                  "type": "string"
                }
              },
              "required": [
                "storeId",
                "apiToken"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Moneris Gateway config",
      "x-discriminator-value": "Moneris",
      "x-ms-discriminator-value": "Moneris"
    },
    "MpiName": {
      "description": "The Merchant plug-in Name",
      "enum": [
        "PayvisionMpi",
        "WirecardMpi",
        "IlixiumMpi",
        "DataCashMpi",
        "OptimalMpi",
        "PaysafeMpi",
        "IngenicoMpi",
        "CardinalCommerce",
        "PaayMpi",
        "Panamerican",
        "eMerchantPayMpi",
        "SecureTradingMpi",
        "ClearhausMpi",
        "Other"
      ],
      "type": "string"
    },
    "MtaPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "accountId": {
                  "description": "MTA Pay Gateway account ID",
                  "type": "string"
                },
                "md5key": {
                  "description": "MTA Pay Gateway md5key",
                  "format": "password",
                  "type": "string"
                },
                "partyId": {
                  "description": "MTA Pay Gateway party ID",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "partyId",
                "md5key"
              ],
              "type": "object"
            },
            "settings": {
              "description": "MTA Pay settings object",
              "properties": {
                "goods": {
                  "description": "MTA Pay Gateway goods",
                  "type": "string"
                },
                "mobilePay": {
                  "description": "MTA Pay Gateway mobile pay param",
                  "type": "string"
                }
              },
              "required": [
                "mobilePay",
                "goods"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials",
            "settings"
          ],
          "type": "object"
        }
      ],
      "description": "MTA Pay Gateway config",
      "x-discriminator-value": "MtaPay",
      "x-ms-discriminator-value": "MtaPay"
    },
    "NMI": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "password": {
                  "description": "NMI Gateway store ID",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "NMI Gateway api token",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/NMIMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "NMI Gateway config",
      "x-discriminator-value": "NMI",
      "x-ms-discriminator-value": "NMI"
    },
    "NMIMpis": {
      "description": "NMI Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Netbanking": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Netbanking credentials object",
              "properties": {
                "midcode": {
                  "description": "Netbanking MID code",
                  "type": "string"
                },
                "midsecret": {
                  "description": "Netbanking MID secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "midcode",
                "midsecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Netbanking config",
      "x-discriminator-value": "Netbanking",
      "x-ms-discriminator-value": "Netbanking"
    },
    "Neteller": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Neteller credentials object",
              "properties": {
                "clientId": {
                  "description": "Neteller App Client ID",
                  "type": "string"
                },
                "clientSecret": {
                  "description": "Neteller App Client Secret",
                  "format": "password",
                  "type": "string"
                },
                "webhookSecretKey": {
                  "description": "Neteller Webhook Secret Key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "clientSecret",
                "webhookSecretKey"
              ],
              "type": "object"
            },
            "settings": {
              "description": "Neteller settings object",
              "properties": {
                "netellerGo": {
                  "description": "Enable NETELLERgo! payment flow",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Neteller Gateway config",
      "x-discriminator-value": "Neteller",
      "x-ms-discriminator-value": "Neteller"
    },
    "NinjaWallet": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "NinjaWallet credentials object",
              "properties": {
                "apiKey": {
                  "description": "NinjaWallet api key",
                  "format": "password",
                  "type": "string"
                },
                "passphrase": {
                  "description": "NinjaWallet passphrase",
                  "format": "password",
                  "type": "string"
                },
                "secret": {
                  "description": "NinjaWallet secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey",
                "secret",
                "passphrase"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "NinjaWallet config",
      "x-discriminator-value": "NinjaWallet",
      "x-ms-discriminator-value": "NinjaWallet"
    },
    "OchaPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiPassword": {
                  "description": "OchaPay Gateway api password",
                  "format": "password",
                  "type": "string"
                },
                "apiUsername": {
                  "description": "OchaPay Gateway username",
                  "type": "string"
                },
                "secretWord": {
                  "description": "OchaPay Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiUsername",
                "apiPassword",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "OchaPay Gateway config",
      "x-discriminator-value": "OchaPay",
      "x-ms-discriminator-value": "OchaPay"
    },
    "OnBoardingUrlLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "onBoardingUrl"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Onlineueberweisen": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Onlineueberweisen credentials object",
              "properties": {
                "apiKey": {
                  "description": "Onlineueberweisen API Key",
                  "format": "password",
                  "type": "string"
                },
                "nuaPayAccountId": {
                  "description": "NuaPay account ID for reconciliation",
                  "type": "string"
                },
                "nuaPayApiKey": {
                  "description": "NuaPay API Key for reconciliation",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey"
              ],
              "type": "object"
            },
            "settings": {
              "description": "Onlineueberweisen settings object",
              "properties": {
                "autoAbandonTtl": {
                  "description": "Auto-abandon if transaction is not reconciled after x hours",
                  "type": "integer"
                },
                "payformCode": {
                  "default": "default",
                  "description": "Onlineueberweisen payform code to use customized Payform template",
                  "type": "string"
                }
              },
              "required": [
                "autoAbandonTtl"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials",
            "settings"
          ],
          "type": "object"
        }
      ],
      "description": "Onlineueberweisen config",
      "x-discriminator-value": "Onlineueberweisen",
      "x-ms-discriminator-value": "Onlineueberweisen"
    },
    "Optimal": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "accountNum": {
                  "description": "Optimal Gateway account number",
                  "type": "string"
                },
                "storeId": {
                  "description": "Optimal Gateway store ID",
                  "type": "string"
                },
                "storePwd": {
                  "description": "Optimal Gateway store password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "storeId",
                "storePwd",
                "accountNum"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/OptimalMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Optimal Gateway config",
      "x-discriminator-value": "Optimal",
      "x-ms-discriminator-value": "Optimal"
    },
    "OptimalMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/OptimalMpis"
        }
      ],
      "description": "Optimal Integrated",
      "x-discriminator-value": "OptimalMpi",
      "x-ms-discriminator-value": "OptimalMpi"
    },
    "OptimalMpis": {
      "description": "Optimal Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "OptimalMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "OrderTimeline": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "extraData": {
          "$ref": "#/definitions/TimelineExtraData"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Timeline message identifier string",
          "readOnly": true
        },
        "message": {
          "description": "The message that describes the message details",
          "type": "string"
        },
        "occurredTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Timeline message time",
          "readOnly": true
        },
        "triggeredBy": {
          "description": "Shows who or what triggered the Timeline message",
          "enum": [
            "rebilly",
            "app",
            "direct-api"
          ],
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Timeline message type",
          "enum": [
            "timeline-comment-created",
            "order-renewed",
            "order-activated",
            "order-completed",
            "order-reactivated",
            "order-canceled",
            "order-upgraded",
            "order-downgraded",
            "order-billing-address-changed",
            "order-delivery-address-changed",
            "order-renewal-time-changed",
            "order-churned",
            "order-custom-fields-changed",
            "order-items-changed",
            "order-billing-anchor-changed",
            "order-recurring-interval-changed",
            "order-risk-metadata-changed",
            "order-paid-early",
            "order-quantity-changed",
            "email-message-sent",
            "coupon-applied",
            "invoice-created",
            "invoice-issued",
            "invoice-abandoned",
            "invoice-voided",
            "invoice-past-due",
            "invoice-paid",
            "invoice-partially-paid",
            "invoice-disputed",
            "invoice-refunded",
            "invoice-partially-refunded",
            "invoice-renewal-payment-declined"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "Organization": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/schemas_SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "address": {
          "description": "The organization street address",
          "maxLength": 60,
          "type": "string"
        },
        "address2": {
          "description": "The organization street address",
          "maxLength": 60,
          "type": "string"
        },
        "city": {
          "description": "The organization city",
          "maxLength": 45,
          "type": "string"
        },
        "country": {
          "description": "The organization country ISO Alpha-2 code",
          "pattern": "^[A-Z]{2}$",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The organization created time"
        },
        "emails": {
          "$ref": "#/definitions/schemas_ContactEmails"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/schemas_ResourceId"
            }
          ],
          "description": "The organization identifier string",
          "readOnly": true
        },
        "invoiceTimeZone": {
          "description": "Invoice will use this time zone to display time otherwise UTC will be used. Example \"America/New_York\"",
          "maxLength": 50,
          "type": "string"
        },
        "isPrimary": {
          "description": "True, if Organization is primary (available to set as true only, other organizations will become as isPrimary=false)",
          "type": "boolean"
        },
        "name": {
          "description": "The organization name",
          "maxLength": 60,
          "type": "string"
        },
        "phoneNumbers": {
          "$ref": "#/definitions/schemas_ContactPhoneNumbers"
        },
        "postalCode": {
          "description": "The organization postal code",
          "maxLength": 10,
          "type": "string"
        },
        "region": {
          "description": "The organization region (state)",
          "maxLength": 45,
          "type": "string"
        },
        "taxDescriptor": {
          "description": "The organization's tax label. This will be displayed on the invoice.",
          "maxLength": 255,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The organization updated time"
        }
      },
      "required": [
        "name",
        "country"
      ],
      "type": "object"
    },
    "OrganizationEmbed": {
      "description": "Organization object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/Organization"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "OrganizationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "organization"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Other": {
      "allOf": [
        {
          "$ref": "#/definitions/A1GatewayMpis"
        },
        {
          "$ref": "#/definitions/eMerchantPayMpis"
        },
        {
          "$ref": "#/definitions/GETMpis"
        },
        {
          "$ref": "#/definitions/NMIMpis"
        },
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "$ref": "#/definitions/VantivLitleMpis"
        },
        {
          "$ref": "#/definitions/WalpayMpis"
        },
        {
          "$ref": "#/definitions/WorldpayMpis"
        }
      ],
      "description": "Other",
      "x-discriminator-value": "Other",
      "x-ms-discriminator-value": "Other"
    },
    "PaayMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/A1GatewayMpis"
        },
        {
          "$ref": "#/definitions/eMerchantPayMpis"
        },
        {
          "$ref": "#/definitions/GETMpis"
        },
        {
          "$ref": "#/definitions/NMIMpis"
        },
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "$ref": "#/definitions/VantivLitleMpis"
        },
        {
          "$ref": "#/definitions/WalpayMpis"
        },
        {
          "$ref": "#/definitions/WorldpayMpis"
        },
        {
          "properties": {
            "apiKey": {
              "description": "Paay ApiKey",
              "type": "string"
            },
            "mpiUrl": {
              "description": "Paay MPI url",
              "type": "string"
            },
            "sandboxMpiUrl": {
              "description": "Paay sandbox MPI url",
              "type": "string"
            },
            "secret": {
              "description": "Paay secret",
              "format": "password",
              "type": "string"
            }
          },
          "required": [
            "apiKey",
            "secret",
            "mpiUrl",
            "sandboxMpiUrl"
          ],
          "type": "object"
        }
      ],
      "description": "Paay",
      "x-discriminator-value": "PaayMpi",
      "x-ms-discriminator-value": "PaayMpi"
    },
    "Pagsmile": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "appId": {
                  "description": "Pagsmile app ID",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Pagsmile merchant ID",
                  "type": "string"
                },
                "secretKey": {
                  "description": "Pagsmile secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "appId",
                "secretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Pagsmile Gateway config",
      "x-discriminator-value": "Pagsmile",
      "x-ms-discriminator-value": "Pagsmile"
    },
    "Panamerican": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Panamerican credentials object",
              "properties": {
                "key": {
                  "description": "Panamerican's key",
                  "type": "string"
                },
                "password": {
                  "description": "Panamerican's Password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "password"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/PanamericanMpis"
            },
            "settings": {
              "description": "Panamerican settings object",
              "properties": {
                "convertToAscii": {
                  "description": "Will convert all chars to ascii",
                  "type": "boolean"
                },
                "extraStep": {
                  "description": "Show extra step for user to enter their ID number",
                  "type": "boolean"
                }
              },
              "required": [
                "extraStep"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials",
            "settings"
          ],
          "type": "object"
        }
      ],
      "description": "Panamerican config",
      "x-discriminator-value": "Panamerican",
      "x-ms-discriminator-value": "Panamerican"
    },
    "PanamericanMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/PanamericanMpis"
        }
      ],
      "description": "Panamerican Integrated",
      "x-discriminator-value": "Panamerican",
      "x-ms-discriminator-value": "Panamerican"
    },
    "PanamericanMpis": {
      "description": "Panamerican Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Panamerican"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "PandaGateway": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiCode": {
                  "description": "Panda Gateway api code",
                  "type": "string"
                },
                "merchantCode": {
                  "description": "Panda Gateway merchant code",
                  "type": "string"
                },
                "signKey": {
                  "description": "Panda Gateway sign key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantCode",
                "apiCode",
                "signKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Panda Gateway config",
      "x-discriminator-value": "PandaGateway",
      "x-ms-discriminator-value": "PandaGateway"
    },
    "ParamountEft": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Paramount credentials object",
              "properties": {
                "merchant_id": {
                  "description": "Merchant account ID",
                  "type": "string"
                },
                "merchant_pass": {
                  "description": "Merchant account password",
                  "format": "password",
                  "type": "string"
                },
                "payee": {
                  "description": "Merchant name/descriptor",
                  "type": "string"
                }
              },
              "required": [
                "merchant_id",
                "merchant_pass",
                "payee"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Paramount config",
      "x-discriminator-value": "ParamountEft",
      "x-ms-discriminator-value": "ParamountEft"
    },
    "ParentTransactionEmbed": {
      "description": "Retried Transaction object",
      "properties": {
        "parentTransaction": {
          "$ref": "#/definitions/Transaction"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "ParentTransactionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "parentTransaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Pay4Fun": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Pay4Fun credentials object",
              "properties": {
                "merchantId": {
                  "description": "Pay4Fun merchant ID",
                  "type": "string"
                },
                "merchantKey": {
                  "description": "Pay4Fun merchant key",
                  "format": "password",
                  "type": "string"
                },
                "merchantSecret": {
                  "description": "Pay4Fun merchant secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "merchantSecret",
                "merchantKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Pay4Fun config",
      "x-discriminator-value": "Pay4Fun",
      "x-ms-discriminator-value": "Pay4Fun"
    },
    "PayCash": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "PayCash credentials object",
              "properties": {
                "emisor": {
                  "description": "Identify of the company",
                  "type": "string"
                },
                "token": {
                  "description": "Token",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "emisor",
                "token"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "PayCash config",
      "x-discriminator-value": "PayCash",
      "x-ms-discriminator-value": "PayCash"
    },
    "PayPal": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "merchantIdInPayPal": {
                  "description": "PayPal Gateway merchant id",
                  "type": "string"
                }
              },
              "required": [
                "merchantIdInPayPal"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "PayPal Gateway config",
      "x-discriminator-value": "PayPal",
      "x-ms-discriminator-value": "PayPal"
    },
    "PayPalAccount": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "The Customer's Billing Address."
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "PayPal Account created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID."
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The PayPal identifier string",
          "readOnly": true
        },
        "method": {
          "description": "The method of payment instrument.",
          "enum": [
            "paypal"
          ],
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "description": "PayPal Account status",
          "enum": [
            "inactive",
            "active",
            "deactivated"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "PayPal Account updated time"
        },
        "username": {
          "description": "PayPal username.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "customerId",
        "billingAddress"
      ],
      "type": "object"
    },
    "PayPalAccountAuthorization": {
      "properties": {
        "amount": {
          "default": 1,
          "description": "The amount to authorize",
          "format": "double",
          "type": "number"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
        "gatewayAccountId": {
          "description": "The Gateway Account ID which use to send transactions",
          "type": "string"
        },
        "redirectUrl": {
          "$ref": "#/definitions/TransactionRedirectUrl"
        },
        "websiteId": {
          "description": "The Website ID",
          "type": "string"
        }
      },
      "required": [
        "websiteId",
        "currency"
      ],
      "type": "object"
    },
    "Payeezy": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiKey": {
                  "description": "API Key",
                  "type": "string"
                },
                "apiSecret": {
                  "description": "API Secret",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Payeezy Merchant ID",
                  "type": "string"
                },
                "merchantToken": {
                  "description": "Merchant Token",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "merchantToken",
                "apiKey",
                "apiSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Payeezy Gateway config",
      "x-discriminator-value": "Payeezy",
      "x-ms-discriminator-value": "Payeezy"
    },
    "Payflow": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Payflow credentials object",
              "properties": {
                "password": {
                  "description": "The password you defined while registering for the account.",
                  "format": "password",
                  "type": "string"
                },
                "user": {
                  "description": "If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR",
                  "type": "string"
                },
                "vendor": {
                  "description": "Your merchant login ID created when you registered for the account.",
                  "type": "string"
                }
              },
              "required": [
                "user",
                "vendor",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Payflow config",
      "x-discriminator-value": "Payflow",
      "x-ms-discriminator-value": "Payflow"
    },
    "PaymenTechnologies": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "authenticateId": {
                  "description": "PaymenTechnologies Gateway authenticate ID",
                  "type": "string"
                },
                "authenticatePw": {
                  "description": "PaymenTechnologies Gateway authenticate password",
                  "format": "password",
                  "type": "string"
                },
                "publicKey": {
                  "description": "PaymenTechnologies Gateway API public key",
                  "type": "string"
                },
                "secretKey": {
                  "description": "PaymenTechnologies Gateway API secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "authenticateId",
                "authenticatePw",
                "publicKey",
                "secretKey"
              ],
              "type": "object"
            },
            "settings": {
              "properties": {
                "use3DSEndpoint": {
                  "description": "Use 3DS endpoint",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "PaymenTechnologies Gateway config",
      "x-discriminator-value": "PaymenTechnologies",
      "x-ms-discriminator-value": "PaymenTechnologies"
    },
    "Payment": {
      "properties": {
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "amount": {
          "description": "The payment amount",
          "format": "double",
          "type": "number"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "Billing Address"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Payment created time"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer identifier string"
        },
        "description": {
          "description": "The payment description",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The payment identifier string",
          "readOnly": true
        },
        "invoiceIds": {
          "description": "The array of invoice identifiers",
          "items": {
            "$ref": "#/definitions/ResourceId"
          },
          "type": "array"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "result": {
          "description": "Payment result",
          "enum": [
            "approved",
            "declined",
            "canceled",
            "abandoned",
            "unknown"
          ],
          "readOnly": true,
          "type": "string"
        },
        "retriedPaymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The retried payment ID",
          "readOnly": true
        },
        "retryInstruction": {
          "$ref": "#/definitions/PaymentRetry"
        },
        "retryNumber": {
          "description": "The position in the sequence of retries",
          "readOnly": true,
          "type": "integer"
        },
        "riskMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/RiskMetadata"
            }
          ],
          "description": "Risk metadata"
        },
        "scheduledTime": {
          "description": "The time the payment is scheduled for collection",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Payment status",
          "enum": [
            "scheduled",
            "queued",
            "in-progress",
            "incomplete",
            "waiting-gateway",
            "suspended",
            "completed"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Payment updated time"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string"
        }
      },
      "required": [
        "websiteId",
        "customerId",
        "currency",
        "amount"
      ],
      "type": "object"
    },
    "PaymentCard": {
      "properties": {
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "bankCountry": {
          "description": "Payment Card bank country",
          "readOnly": true,
          "type": "string"
        },
        "bankName": {
          "description": "Payment Card bank name",
          "readOnly": true,
          "type": "string"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "The Billing Address."
        },
        "bin": {
          "description": "The card's bin (the PAN's first 6 digits)",
          "format": "bin",
          "readOnly": true,
          "type": "string"
        },
        "brand": {
          "allOf": [
            {
              "$ref": "#/definitions/payment-card-brands"
            }
          ],
          "readOnly": true
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Card created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID."
        },
        "expMonth": {
          "description": "Card's expiry month.",
          "type": "integer"
        },
        "expYear": {
          "description": "Card's expiry year.",
          "type": "integer"
        },
        "expirationReminderNumber": {
          "description": "Number of expiration reminder events triggered",
          "readOnly": true,
          "type": "integer"
        },
        "expirationReminderTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Time expiration reminder event will be triggered",
          "x-nullable": true
        },
        "fingerprint": {
          "description": "A unique value to identify the PAN regardless of expiration dates.  It contains alphanumeric values.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The card identifier string",
          "readOnly": true
        },
        "last4": {
          "description": "The PAN's last 4 digits",
          "readOnly": true,
          "type": "string"
        },
        "method": {
          "description": "The method of payment instrument.",
          "enum": [
            "payment-card"
          ],
          "readOnly": true,
          "type": "string"
        },
        "panFingerprint": {
          "description": "A unique value to identify the PAN regardless of expiration dates.  It contains alphanumeric values. Use `fingerprint` instead.",
          "readOnly": true,
          "type": "string",
          "x-deprecated": true
        },
        "status": {
          "description": "Payment Card status.  When a card is `active` it means it has been used at least once for an approved transaction.\nTo remove a card from being in use, set it as `deactivated` (see the deactivation endpoint).\n",
          "enum": [
            "active",
            "expired",
            "inactive",
            "deactivated",
            "pending",
            "verification-needed"
          ],
          "readOnly": true,
          "type": "string"
        },
        "stickyGatewayAccountId": {
          "description": "Default Gateway Account ID used for transactions",
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Card updated time"
        }
      },
      "required": [
        "customerId"
      ],
      "type": "object"
    },
    "PaymentCardCreatePlain": {
      "properties": {
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "The Billing Address."
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID."
        },
        "cvv": {
          "description": "Card's cvv (card verification value).",
          "type": "string"
        },
        "expMonth": {
          "description": "Card's expiry month.",
          "type": "integer"
        },
        "expYear": {
          "description": "Card's expiry year.",
          "type": "integer"
        },
        "pan": {
          "description": "The card PAN (Primary Account Number).",
          "type": "string"
        }
      },
      "required": [
        "customerId",
        "pan",
        "expYear",
        "expMonth",
        "billingAddress"
      ],
      "type": "object"
    },
    "PaymentCardCreateToken": {
      "properties": {
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID."
        },
        "token": {
          "description": "PaymentCardToken ID.",
          "type": "string"
        }
      },
      "required": [
        "customerId",
        "token"
      ],
      "type": "object"
    },
    "PaymentCardEmbed": {
      "description": "Payment Card object",
      "properties": {
        "paymentCard": {
          "$ref": "#/definitions/PaymentCard"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "PaymentCardLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "paymentCard"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "PaymentCardToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "The billing address object"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token created time"
        },
        "expirationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token expiration time"
        },
        "fingerprint": {
          "description": "Device fingerprint hash",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The token identifier string",
          "readOnly": true
        },
        "isUsed": {
          "default": false,
          "description": "Whether the token was already used",
          "readOnly": true,
          "type": "boolean"
        },
        "leadSource": {
          "allOf": [
            {
              "$ref": "#/definitions/LeadSource"
            }
          ]
        },
        "method": {
          "description": "The token payment method",
          "enum": [
            "payment-card"
          ],
          "type": "string"
        },
        "paymentInstrument": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenPaymentCardInstrument"
            }
          ],
          "description": "The payment instrument details"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token updated time"
        },
        "usageTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token usage time"
        }
      },
      "required": [
        "method",
        "paymentInstrument",
        "billingAddress"
      ],
      "title": "Payment Card Token",
      "type": "object"
    },
    "PaymentInstrument": {
      "discriminator": "method",
      "properties": {
        "method": {
          "$ref": "#/definitions/Method"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "PaymentInstrumentValidation": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "actionCode": {
          "description": "Action code",
          "readOnly": true,
          "type": "string"
        },
        "avsResult": {
          "description": "Address verification result",
          "readOnly": true,
          "type": "string"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "Billing address."
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Payment instrument validation created time."
        },
        "cvvResult": {
          "description": "CVV result",
          "readOnly": true,
          "type": "string"
        },
        "expMonth": {
          "description": "Payment card's expiry month.",
          "readOnly": true,
          "type": "integer"
        },
        "expYear": {
          "description": "Payment card's expiry year.",
          "readOnly": true,
          "type": "integer"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Payment instrument validation ID",
          "readOnly": true
        },
        "method": {
          "description": "Payment method",
          "type": "string"
        },
        "paymentInstrumentId": {
          "description": "Payment instrument ID",
          "type": "string"
        },
        "responseCode": {
          "description": "Response code",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "method",
        "paymentInstrumentId"
      ],
      "type": "object"
    },
    "PaymentRetry": {
      "properties": {
        "afterAttemptPolicy": {
          "description": "The policy on the attempt finishes",
          "enum": [
            "none",
            "change-subscription-renewal-time"
          ],
          "type": "string"
        },
        "afterRetryEndPolicy": {
          "description": "The policy on the retry ends",
          "enum": [
            "none",
            "cancel-subscription"
          ],
          "type": "string"
        },
        "attempts": {
          "items": {
            "properties": {
              "paymentInstruction": {
                "$ref": "#/definitions/AmountAdjustment"
              },
              "scheduleInstruction": {
                "$ref": "#/definitions/CommonScheduleInstruction"
              }
            },
            "required": [
              "scheduleInstruction",
              "paymentInstruction"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "attempts",
        "afterAttemptPolicy",
        "afterRetryEndPolicy"
      ],
      "type": "object"
    },
    "PaymentToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "The billing address object"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token created time"
        },
        "expirationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token expiration time"
        },
        "fingerprint": {
          "description": "Device fingerprint hash",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The token identifier string",
          "readOnly": true
        },
        "isUsed": {
          "default": false,
          "description": "Whether the token was already used",
          "readOnly": true,
          "type": "boolean"
        },
        "leadSource": {
          "allOf": [
            {
              "$ref": "#/definitions/LeadSource"
            }
          ]
        },
        "method": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenMethod"
            }
          ]
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token updated time"
        },
        "usageTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Token usage time"
        }
      },
      "required": [
        "method",
        "billingAddress"
      ],
      "title": "Payment Token",
      "type": "object"
    },
    "Payr": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiSecurityToken": {
                  "description": "Hash of the password for the Alliance API (transaction reporting)",
                  "format": "password",
                  "type": "string"
                },
                "apiUserId": {
                  "description": "Username for the Alliance API (transaction reporting)",
                  "type": "string"
                },
                "clientId": {
                  "description": "Payr Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "Payr Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Payr Gateway config",
      "x-discriminator-value": "Payr",
      "x-ms-discriminator-value": "Payr"
    },
    "Paysafe": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "accountNum": {
                  "description": "Paysafe Gateway account number",
                  "type": "string"
                },
                "storeId": {
                  "description": "Paysafe Gateway store ID",
                  "type": "string"
                },
                "storePwd": {
                  "description": "Paysafe Gateway store password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "storeId",
                "storePwd",
                "accountNum"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/PaysafeMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Paysafe Gateway config",
      "x-discriminator-value": "Paysafe",
      "x-ms-discriminator-value": "Paysafe"
    },
    "PaysafeMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/PaysafeMpis"
        }
      ],
      "description": "Paysafe Integrated",
      "x-discriminator-value": "PaysafeMpi",
      "x-ms-discriminator-value": "PaysafeMpi"
    },
    "PaysafeMpis": {
      "description": "Paysafe Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaysafeMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Paysafecash": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiKey": {
                  "description": "Paysafecash API key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Paysafecash Gateway config",
      "x-discriminator-value": "Paysafecash",
      "x-ms-discriminator-value": "Paysafecash"
    },
    "Payvision": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "memberGuid": {
                  "description": "Payvision Gateway member guid",
                  "format": "password",
                  "type": "string"
                },
                "memberId": {
                  "description": "Payvision Gateway member id",
                  "type": "string"
                }
              },
              "required": [
                "memberId",
                "memberGuid"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/PayvisionMpis"
            },
            "settings": {
              "description": "Payvision settings object",
              "properties": {
                "avs": {
                  "description": "Payvision Gateway avs",
                  "type": "boolean"
                },
                "delay": {
                  "description": "Payvision Gateway delay",
                  "type": "integer"
                },
                "merchantAccountType": {
                  "description": "Payvision merchant account type",
                  "type": "integer"
                }
              },
              "required": [
                "merchantAccountType"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Payvision Gateway config",
      "x-discriminator-value": "Payvision",
      "x-ms-discriminator-value": "Payvision"
    },
    "PayvisionMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/PayvisionMpis"
        }
      ],
      "description": "Payvision Integrated",
      "x-discriminator-value": "PayvisionMpi",
      "x-ms-discriminator-value": "PayvisionMpi"
    },
    "PayvisionMpis": {
      "description": "Payvision Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PayvisionMpi",
            "Payvision3DS2",
            "CardinalCommerce",
            "PaayMpi",
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "PermalinkLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "permalink"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Plan": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Plan created time"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
        "currencySign": {
          "description": "Currency sign",
          "readOnly": true,
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The plan identifier string",
          "readOnly": true
        },
        "invoiceTimeShift": {
          "allOf": [
            {
              "$ref": "#/definitions/InvoiceTimeShift"
            }
          ],
          "description": "You can shift issue time and due time of invoices for this plan."
        },
        "isActive": {
          "description": "If the plan is not active, customers cannot subscribe to the plan.",
          "type": "boolean"
        },
        "name": {
          "description": "The plan name, displayed on invoices and receipts.",
          "type": "string"
        },
        "pricing": {
          "$ref": "#/definitions/PlanPriceFormula"
        },
        "productId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The related product identifier string"
        },
        "productOptions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Name-value pairs to specify the product options.",
          "example": {
            "color": "red",
            "size": "xxl"
          },
          "type": "object"
        },
        "recurringInterval": {
          "allOf": [
            {
              "$ref": "#/definitions/PlanPeriod"
            },
            {
              "properties": {
                "billingTiming": {
                  "$ref": "#/definitions/PlanBillingTiming"
                },
                "limit": {
                  "description": "The number of invoices this subscription will generate (if 1, it will not generate any beyond the initial subscription creation).  For example, set this property to `12`, when the `periodUnit` is month and the `periodLength` is 1, for a 1 year contract billed monthly.",
                  "type": "integer"
                },
                "periodAnchorInstruction": {
                  "$ref": "#/definitions/ServicePeriodAnchorInstruction"
                }
              },
              "type": "object"
            }
          ],
          "description": "The service interval. For a one-time item, use `null`."
        },
        "setup": {
          "description": "The setup. Set `null` if no setup.",
          "properties": {
            "price": {
              "description": "The price of a setup - 0 is a valid value (for free)",
              "format": "double",
              "type": "number"
            }
          },
          "required": [
            "price"
          ],
          "type": "object"
        },
        "subscriptionCount": {
          "description": "Number of subscriptions associated with this plan",
          "readOnly": true,
          "type": "integer"
        },
        "trial": {
          "description": "The trial. Set `null` if no trial.",
          "properties": {
            "period": {
              "$ref": "#/definitions/PlanPeriod"
            },
            "price": {
              "description": "The price of the trial. For a free trial, use `0`.",
              "format": "double",
              "type": "number"
            }
          },
          "required": [
            "price",
            "period"
          ],
          "type": "object"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Plan updated time"
        }
      },
      "required": [
        "name",
        "currency",
        "productId",
        "pricing"
      ],
      "type": "object"
    },
    "PlanBillingTiming": {
      "default": "prepaid",
      "description": "The billing timing in relation to the service period.\nFor `prepaid` plans the customer pays when the service period starts,\nwhereas, for `postpaid` plans, the customer pays when the service period ends.\n",
      "enum": [
        "prepaid",
        "postpaid"
      ],
      "type": "string"
    },
    "PlanEmbed": {
      "description": "Plan object",
      "properties": {
        "plan": {
          "$ref": "#/definitions/Plan"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "PlanPeriod": {
      "properties": {
        "length": {
          "description": "The length of time",
          "type": "integer"
        },
        "unit": {
          "description": "The unit of time",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ],
          "type": "string"
        }
      },
      "required": [
        "unit",
        "length"
      ],
      "type": "object"
    },
    "PlanPriceFormula": {
      "discriminator": "formula",
      "properties": {
        "formula": {
          "description": "The price formula determines what algorithm is used to calculate the invoice price based on a few factors,\n- the quantity in the subscription (which may be variable if usage pricing, otherwise determined when creating the subscription)\n- the price brackets data\n\nTo determine which formula is correct, please see the price formula documentation.\n",
          "enum": [
            "fixed-fee",
            "flat-rate",
            "stairstep",
            "tiered",
            "volume"
          ],
          "type": "string"
        }
      },
      "required": [
        "formula"
      ],
      "type": "object"
    },
    "Plugnpay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "publisher-name": {
                  "description": "Plugnpay Gateway member id",
                  "type": "string"
                },
                "publisher-password": {
                  "description": "Plugnpay Gateway avs",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "publisher-name",
                "publisher-password"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Plugnpay Gateway config",
      "x-discriminator-value": "Plugnpay",
      "x-ms-discriminator-value": "Plugnpay"
    },
    "PriceBasedShippingRate": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
        "maxOrderSubtotal": {
          "description": "Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum)",
          "format": "double",
          "type": "number"
        },
        "minOrderSubtotal": {
          "default": 0,
          "description": "Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00",
          "format": "double",
          "type": "number"
        },
        "name": {
          "description": "The shipping rate name",
          "maxLength": 255,
          "type": "string"
        },
        "price": {
          "description": "The shipping price - 0 is a valid value (for free)",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "name",
        "currency",
        "price"
      ],
      "type": "object"
    },
    "Product": {
      "description": "Products include digital goods, services, and physical goods.\nProducts appear on invoice line items. If you set a tax category identifier,\ntaxes will be calculated upon invoice generation.  If it is shippable,\nshipping will be calculated upon invoice generation.  Pricing and\nvariations are set within Plans.\n",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "accountingCode": {
          "description": "The product accounting code",
          "example": "4010",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The product created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "description": {
          "description": "The product description",
          "maxLength": 512,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The product identifier string",
          "example": "membership",
          "readOnly": true
        },
        "name": {
          "description": "The product name",
          "example": "Premium membership",
          "maxLength": 255,
          "type": "string"
        },
        "options": {
          "description": "The product options such as Color, Size, etc.  The product options definition does not include option values.  Those are defined within the Plans.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requiresShipping": {
          "description": "If the product requires shipping, shipping calculations will be applied",
          "example": false,
          "type": "boolean"
        },
        "taxCategoryId": {
          "description": "The product's tax category identifier string",
          "enum": [
            "00000",
            "99999",
            "20010",
            "40030",
            "51020",
            "51010",
            "31000",
            "30070"
          ],
          "type": "string"
        },
        "unitLabel": {
          "default": "unit",
          "description": "The unit label, such as per `seat` or per `unit`.",
          "example": "seat",
          "maxLength": 50,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The product updated time"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ProductEmbed": {
      "description": "Product object",
      "properties": {
        "product": {
          "$ref": "#/definitions/Product"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "ProductLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "product"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Prosa": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Prosa credentials object",
              "properties": {
                "accessToken": {
                  "description": "Access token",
                  "format": "password",
                  "type": "string"
                },
                "entityId": {
                  "description": "Entity ID",
                  "type": "string"
                }
              },
              "required": [
                "entityId",
                "accessToken"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Prosa config",
      "x-discriminator-value": "Prosa",
      "x-ms-discriminator-value": "Prosa"
    },
    "QQPayInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "QQPay payment instrument object",
      "x-discriminator-value": "QQPayInstrument",
      "x-ms-discriminator-value": "QQPayInstrument"
    },
    "RPN": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "key": {
                  "description": "RPN Key",
                  "format": "password",
                  "type": "string"
                },
                "mid": {
                  "description": "RPN MID",
                  "type": "string"
                }
              },
              "required": [
                "mid",
                "key"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "RPN Gateway config",
      "x-discriminator-value": "RPN",
      "x-ms-discriminator-value": "RPN"
    },
    "Realex": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "account": {
                  "description": "Realex Gateway account",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Realex Gateway merchant id",
                  "type": "string"
                },
                "rebatePassword": {
                  "description": "Realex Gateway rebate password",
                  "format": "password",
                  "type": "string"
                },
                "secretKey": {
                  "description": "Realex Gateway secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "secretKey",
                "rebatePassword",
                "account"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Realex Gateway config",
      "x-discriminator-value": "Realex",
      "x-ms-discriminator-value": "Realex"
    },
    "Realtime": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "clientId": {
                  "description": "Realtime Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "Realtime Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Realtime Gateway config",
      "x-discriminator-value": "Realtime",
      "x-ms-discriminator-value": "Realtime"
    },
    "RecalculateInvoiceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "recalculateInvoice"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "RecentInvoiceEmbed": {
      "description": "Recent Invoice object",
      "properties": {
        "recentInvoice": {
          "$ref": "#/definitions/Invoice"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "RecentInvoiceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "recentInvoice"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "RedemptionRestriction": {
      "description": "Redemption restrictions",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Redemption's additional restriction type",
          "enum": [
            "discounts-per-redemption",
            "minimum-order-amount",
            "restrict-to-invoices",
            "restrict-to-plans",
            "restrict-to-subscriptions",
            "restrict-to-products",
            "paid-by-time"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Redsys": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "merchantCode": {
                  "description": "Redsys Gateway merchant code",
                  "format": "password",
                  "type": "string"
                },
                "secretCode": {
                  "description": "Redsys Gateway secret code",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantCode",
                "secretCode"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Redsys Gateway config",
      "x-discriminator-value": "Redsys",
      "x-ms-discriminator-value": "Redsys"
    },
    "RefundUrlLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "refundUrl"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "ResetPasswordToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "credentialId": {
          "description": "Token's credential ID",
          "readOnly": true,
          "type": "string"
        },
        "expiredTime": {
          "description": "Password expired time",
          "format": "date-time",
          "type": "string"
        },
        "token": {
          "description": "The token's identifier string",
          "readOnly": true,
          "type": "string"
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "object"
    },
    "ResourceCustomFields": {
      "description": "\"Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}\"`.\nThe format must follow the saved format (see Custom Fields section for the formats).\n",
      "type": "object"
    },
    "ResourceId": {
      "description": "The resource ID. Defaults to UUID v4",
      "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
      "maxLength": 50,
      "type": "string"
    },
    "RetriedTransactionEmbed": {
      "description": "Parent Transaction object",
      "properties": {
        "retriedTransaction": {
          "$ref": "#/definitions/Transaction"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "RetriedTransactionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "retriedTransaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "RiskMetadata": {
      "properties": {
        "accuracyRadius": {
          "description": "Accuracy radius for specified ipAddress (kilometers)",
          "readOnly": true,
          "type": "integer"
        },
        "city": {
          "description": "City for specified ipAddress",
          "example": "New York",
          "readOnly": true,
          "type": "string"
        },
        "country": {
          "description": "Country ISO Alpha-2 code for specified ipAddress",
          "example": "US",
          "maxLength": 2,
          "readOnly": true,
          "type": "string"
        },
        "distance": {
          "description": "Distance between IP Address and Billing Address geolocation (kilometers)",
          "readOnly": true,
          "type": "integer"
        },
        "fingerprint": {
          "description": "The fingerprint",
          "type": "string"
        },
        "httpHeaders": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "HTTP headers",
          "example": {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "User-Agent": "Mozilla/5.0"
          },
          "type": "object"
        },
        "ipAddress": {
          "description": "The customer's IP",
          "format": "ipv4",
          "type": "string"
        },
        "isHosting": {
          "description": "True if customer's ip address is related to hosting",
          "readOnly": true,
          "type": "boolean"
        },
        "isProxy": {
          "description": "True if customer's ip address is related to proxy",
          "readOnly": true,
          "type": "boolean"
        },
        "isTor": {
          "description": "True if customer's ip address is related to TOR",
          "readOnly": true,
          "type": "boolean"
        },
        "isVpn": {
          "description": "True if customer's ip address is related to VPN",
          "readOnly": true,
          "type": "boolean"
        },
        "isp": {
          "description": "Internet Service Provider name, if available",
          "readOnly": true,
          "type": "string"
        },
        "latitude": {
          "description": "Latitude for specified ipAddress",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "longitude": {
          "description": "Longitude for specified ipAddress",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "postalCode": {
          "description": "Postal code for specified ipAddress",
          "maxLength": 10,
          "readOnly": true,
          "type": "string"
        },
        "region": {
          "description": "Region for specified ipAddress",
          "example": "NY",
          "readOnly": true,
          "type": "string"
        },
        "score": {
          "description": "Risk score computed per all the factors",
          "readOnly": true,
          "type": "integer"
        },
        "timeZone": {
          "description": "Time zone for specified ipAddress",
          "example": "America/New_York",
          "readOnly": true,
          "type": "string"
        },
        "vpnServiceName": {
          "description": "VPN service name, if available",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "Rotessa": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Rotessa credentials object",
              "properties": {
                "apiKey": {
                  "description": "Rotessa api key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey"
              ],
              "type": "object"
            },
            "settings": {
              "description": "Rotessa settings object",
              "properties": {
                "delay": {
                  "description": "Rotessa Gateway time delay for them to process transaction",
                  "type": "integer"
                }
              },
              "required": [
                "delay"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials",
            "settings"
          ],
          "type": "object"
        }
      ],
      "description": "Rotessa config",
      "x-discriminator-value": "Rotessa",
      "x-ms-discriminator-value": "Rotessa"
    },
    "SMSVoucher": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "AppId": {
                  "description": "SMSVoucher AppId",
                  "type": "string"
                }
              },
              "required": [
                "AppId"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "SMSVoucher Gateway config",
      "x-discriminator-value": "SMSVoucher",
      "x-ms-discriminator-value": "SMSVoucher"
    },
    "SMSVoucherInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "SMSVoucher payment instrument object",
      "x-discriminator-value": "SMSVoucherInstrument",
      "x-ms-discriminator-value": "SMSVoucherInstrument"
    },
    "Sagepay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "M_ID": {
                  "description": "Sagepay Gateway merchant ID",
                  "type": "string"
                },
                "M_KEY": {
                  "description": "Sagepay Gateway merchant key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "M_ID",
                "M_KEY"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Sagepay Gateway config",
      "x-discriminator-value": "Sagepay",
      "x-ms-discriminator-value": "Sagepay"
    },
    "SeamlessChex": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "SeamlessChex credentials object",
              "properties": {
                "publicKey": {
                  "description": "SeamlessChex publishable key",
                  "type": "string"
                },
                "secretKey": {
                  "description": "SeamlessChex secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "publicKey",
                "secretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "SeamlessChex config",
      "x-discriminator-value": "SeamlessChex",
      "x-ms-discriminator-value": "SeamlessChex"
    },
    "Search": {
      "properties": {
        "customers": {
          "description": "List of returned customers",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/Customer"
              }
            ]
          },
          "readOnly": true,
          "type": "array"
        },
        "invoices": {
          "description": "List of returned invoices",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/Invoice"
              }
            ]
          },
          "readOnly": true,
          "type": "array"
        },
        "orders": {
          "description": "List of returned orders",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/Subscription"
              }
            ]
          },
          "readOnly": true,
          "type": "array"
        },
        "searched": {
          "description": "Names of searched resources, even if they returned nothing",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "transactions": {
          "description": "List of returned transactions",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/Transaction"
              }
            ]
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "SecureTrading": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "SecureTrading credentials object",
              "properties": {
                "password": {
                  "description": "SecureTrading web service password",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "SecureTrading web service username",
                  "type": "string"
                },
                "websiteId": {
                  "description": "Website ID",
                  "type": "string"
                }
              },
              "required": [
                "websiteId",
                "username",
                "password"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/SecureTradingMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "SecureTrading config",
      "x-discriminator-value": "SecureTrading",
      "x-ms-discriminator-value": "SecureTrading"
    },
    "SecureTradingMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/SecureTradingMpis"
        }
      ],
      "description": "SecureTrading Mpi",
      "x-discriminator-value": "SecureTradingMpi",
      "x-ms-discriminator-value": "SecureTradingMpi"
    },
    "SecureTradingMpis": {
      "description": "SecureTrading Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "SecureTradingMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "SelfLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "self"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "ServerTimestamp": {
      "description": "Read-only timestamp, automatically assigned on back-end.",
      "format": "date-time",
      "readOnly": true,
      "type": "string"
    },
    "ServicePeriodAnchorInstruction": {
      "default": {
        "method": "immediately"
      },
      "description": "Instruction for calculating the service period anchor.\nThis is used in conjunction with the **subscription start** to calculate the time the service period starts and ends.\n",
      "discriminator": "method",
      "properties": {
        "method": {
          "default": "immediately",
          "enum": [
            "immediately",
            "day-of-month",
            "day-of-week"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "ShippingZone": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "countries": {
          "description": "Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).\nThis property can be empty or null to create a default shipping zone for countries that were not specified in other zones.\n",
          "items": {
            "description": "Country ISO Alpha-2 code",
            "pattern": "^[A-Z]{2}$",
            "type": "string"
          },
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The shipping zone created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The shipping zone identifier string",
          "readOnly": true
        },
        "isDefault": {
          "description": "Is this Shipping Zone default",
          "readOnly": true
        },
        "name": {
          "description": "The shipping zone name",
          "maxLength": 255,
          "type": "string"
        },
        "rates": {
          "description": "Price-based shipping rate instructions",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/PriceBasedShippingRate"
              }
            ],
            "description": "Price based shipping rate instruction"
          },
          "type": "array"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The shipping zone updated time"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "SignedLinkLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "signedLink"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Skrill": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Skrill credentials object",
              "properties": {
                "accountEmail": {
                  "description": "Email address of your Skrill merchant account",
                  "type": "string"
                },
                "mqiPassword": {
                  "description": "Password used during MQI/API requests",
                  "format": "password",
                  "type": "string"
                },
                "secretWord": {
                  "description": "Secret word used for MD5 signature verifications",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "accountEmail",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Skrill config",
      "x-discriminator-value": "Skrill",
      "x-ms-discriminator-value": "Skrill"
    },
    "Skrill-Rapid-TransferInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "Skrill Rapid Transfer payment instrument object",
      "x-discriminator-value": "Skrill-Rapid-TransferInstrument",
      "x-ms-discriminator-value": "Skrill-Rapid-TransferInstrument"
    },
    "SmartInvoice": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "SmartInvoice credentials object",
              "properties": {
                "applicationId": {
                  "description": "SmartInvoice application UID",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "SmartInvoice merchant account UID",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "applicationId"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/SmartInvoiceMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "SmartInvoice config",
      "x-discriminator-value": "SmartInvoice",
      "x-ms-discriminator-value": "SmartInvoice"
    },
    "SmartInvoiceMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/SmartInvoiceMpis"
        }
      ],
      "description": "SmartInvoice Integrated",
      "x-discriminator-value": "SmartInvoiceMpi",
      "x-ms-discriminator-value": "SmartInvoiceMpi"
    },
    "SmartInvoiceMpis": {
      "description": "SmartInvoice Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "SmartInvoiceMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Sofort": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Sofort credentials object",
              "properties": {
                "configKey": {
                  "description": "Sofort configuration key",
                  "type": "string"
                }
              },
              "required": [
                "configKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Sofort config",
      "x-discriminator-value": "Sofort",
      "x-ms-discriminator-value": "Sofort"
    },
    "SparkPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "SparkPay credentials object",
              "properties": {
                "secretKey": {
                  "description": "SparkPay secret key",
                  "format": "password",
                  "type": "string"
                },
                "shopId": {
                  "description": "SparkPay shop ID",
                  "type": "string"
                }
              },
              "required": [
                "shopId",
                "secretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "SparkPay config",
      "x-discriminator-value": "SparkPay",
      "x-ms-discriminator-value": "SparkPay"
    },
    "StaticGateway": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object"
        }
      ],
      "description": "StaticGateway Gateway config",
      "x-discriminator-value": "StaticGateway",
      "x-ms-discriminator-value": "StaticGateway"
    },
    "Stripe": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "redirectUrl": {
                  "description": "Stripe Gateway redirect url",
                  "format": "url",
                  "type": "string"
                }
              },
              "required": [
                "redirectUrl"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Stripe Gateway config",
      "x-discriminator-value": "Stripe",
      "x-ms-discriminator-value": "Stripe"
    },
    "Subscription": {
      "discriminator": "orderType",
      "properties": {
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "activationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription activation time"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "Billing address",
          "x-nullable": true
        },
        "billingStatus": {
          "description": "The billing status of the most recent invoice.  It may\nhelp you determine if you should change the service status\nsuch as suspending the service.\n",
          "enum": [
            "unpaid",
            "past-due",
            "delinquent",
            "paid",
            "voided",
            "refunded",
            "disputed",
            "voided"
          ],
          "readOnly": true,
          "type": "string"
        },
        "couponIds": {
          "description": "A list of coupons to redeem on the customer and restrict to this subscription.\nRead more about [coupons here](https://help.rebilly.com/invoices-and-subscriptions/coupons-discounts).\n\nThis parameter respects the following logic:\n\n- When not passed then applied coupons will not be changed.\n\n- When empty array passed then all applied coupon redemptions will be canceled.\n\n- When list of coupons is passed then not applied yet coupons will be applied, already applied coupons\nwill not change their state, applied coupons that are not presented in passed list will be canceled.\n\nIf list of applied coupons on pending subscription will be changed due to this param during update subscription,\n Invoice for the subscription will be reissued.\n",
          "items": {
            "description": "Coupon ID",
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each customer"
        },
        "deliveryAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "Delivery address",
          "x-nullable": true
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Subscription identifier string",
          "readOnly": true
        },
        "initialInvoiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for the initial invoice",
          "readOnly": true
        },
        "items": {
          "items": {
            "properties": {
              "planId": {
                "allOf": [
                  {
                    "$ref": "#/definitions/ResourceId"
                  }
                ],
                "description": "Unique id for each plan"
              },
              "quantity": {
                "description": "Number of units of the product on the given plan",
                "type": "integer"
              }
            },
            "required": [
              "planId"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        },
        "orderType": {
          "default": "subscription-order",
          "description": "Specifies the type of order, a subscription or a one-time purchase.\n",
          "enum": [
            "subscription-order",
            "one-time-order"
          ],
          "type": "string"
        },
        "poNumber": {
          "description": "Purchase order number, will be displayed on the issued invoices",
          "example": "PO123456",
          "type": "string",
          "x-nullable": true
        },
        "recentInvoiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for the most recently issued invoice. It might not be `paid` yet.",
          "readOnly": true
        },
        "revision": {
          "description": "The number of times the subscription data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
          "readOnly": true,
          "type": "integer"
        },
        "riskMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/RiskMetadata"
            }
          ],
          "description": "Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.",
          "example": null,
          "x-nullable": true
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each website"
        }
      },
      "required": [
        "orderType",
        "customerId",
        "websiteId",
        "items"
      ],
      "type": "object"
    },
    "SubscriptionCancellation": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "appliedInvoiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The identifier of the invoice where the cancellation fees or credits are applied.",
          "readOnly": true
        },
        "canceledBy": {
          "default": "customer",
          "description": "Who did the cancellation",
          "enum": [
            "merchant",
            "customer"
          ],
          "type": "string"
        },
        "canceledTime": {
          "description": "The cancellation time (when the status is confirmed which is by default unless specified \"draft\").",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "churnTime": {
          "description": "The time when the subscription will be deactivated.",
          "format": "date-time",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The time of resource creation (when it is posted)."
        },
        "description": {
          "description": "Cancel reason description in free form",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Cancellation identifier",
          "readOnly": true
        },
        "lineItemSubtotal": {
          "description": "Subtotal of the line items which will be added after the subscription's cancellation",
          "example": 49.95,
          "readOnly": true,
          "type": "number"
        },
        "lineItems": {
          "allOf": [
            {
              "$ref": "#/definitions/UpcomingInvoiceItemCollection"
            }
          ],
          "description": "Items to be added to the new invoice. Proration item is generated and added automatically."
        },
        "prorated": {
          "default": false,
          "description": "Defines if the customer gets a pro-rata credit for the time remaining between `churnTime` and\nsubscription's next renewal time.\n",
          "type": "boolean"
        },
        "proratedInvoiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Identifier of the invoice on which the cancellation proration is calculated.",
          "readOnly": true
        },
        "reason": {
          "default": "other",
          "description": "Cancellation reason",
          "enum": [
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "other",
            "billing-failure"
          ],
          "type": "string"
        },
        "status": {
          "default": "confirmed",
          "description": "\"draft\" defines that the cancellation isn't applied on an invoice and subscription but\ncan be inspected to see the charge.\n\"confirmed\" will set a subscription to be canceled when the `churnTime` is reached.\n\"completed\" is a read-only status which is set by the system when the churnTime is reached.\nThe cancellation may not be changed or deleted when the status is \"completed\".\n",
          "enum": [
            "draft",
            "confirmed",
            "completed",
            "revoked"
          ],
          "type": "string"
        },
        "subscriptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Identifier of the canceled subscription"
        }
      },
      "required": [
        "subscriptionId",
        "churnTime"
      ],
      "type": "object"
    },
    "SubscriptionCancellationState": {
      "properties": {
        "cancelCategory": {
          "description": "Cancel category",
          "enum": [
            "billing-failure",
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "never-started",
            "switched-plan",
            "other"
          ],
          "readOnly": true,
          "type": "string"
        },
        "cancelDescription": {
          "description": "Cancel reason description in free form",
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "canceledBy": {
          "description": "Canceled by",
          "enum": [
            "merchant",
            "customer",
            "rebilly"
          ],
          "readOnly": true,
          "type": "string"
        },
        "canceledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription canceled time"
        }
      },
      "type": "object"
    },
    "SubscriptionChange": {
      "properties": {
        "effectiveTime": {
          "description": "The date from which the renewal time (for `reset` operations) and proration calculations are made.  If omitted, it will default to the current time.",
          "format": "date-time",
          "type": "string"
        },
        "planId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The plan identifier string"
        },
        "preview": {
          "default": false,
          "description": "If set to true, it will not change the subscription.  It allows for a way to preview the changes that would be made to a subscription.",
          "type": "boolean"
        },
        "prorated": {
          "description": "Whether or not to give a pro rata credit for the amount of time remaining between the `effectiveTime` and the end of the current period.\nIn addition, if the `renewalTime` is retained (by setting the `renewalPolicy` to `retain`), then a pro rata debit will occur as well,\nfor the amount between the `effectiveTime` and the `renewalTime` as a percentage of the normal period size.\n",
          "type": "boolean"
        },
        "quantity": {
          "description": "Number of units of the product on the given plan. If null or omitted, current quantity will not be changed.",
          "type": "integer"
        },
        "renewalPolicy": {
          "description": "The value determines whether the subscription retains its current `renewalTime` or resets it to a newly calculated `renewalTime`.",
          "enum": [
            "reset",
            "retain"
          ],
          "type": "string"
        }
      },
      "required": [
        "planId",
        "renewalPolicy",
        "prorated"
      ],
      "type": "object"
    },
    "SubscriptionInvoice": {
      "properties": {
        "transactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "If present, applies a payment to the invoice created.  If the payment is for the invoice total, it would be marked as paid."
        }
      },
      "type": "object"
    },
    "SubscriptionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "subscription"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "SubscriptionMetadata": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription updated time"
        }
      },
      "type": "object"
    },
    "SubscriptionReactivation": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "cancellationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Identifier of the related cancellation",
          "readOnly": true
        },
        "createdTime": {
          "description": "The time of resource creation (when it is posted).",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Reactivation reason description in free form",
          "maxLength": 255,
          "type": "string"
        },
        "effectiveTime": {
          "description": "The date from which the service period would start, unless the subscription is canceled but still active.\nIn case the susbcription is still active, the subscription will continue the current service period.\nIf omitted, it will default to the current time.\n",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Reactivation identifier",
          "readOnly": true
        },
        "renewalTime": {
          "description": "The time of the next subscription renewal. If omitted then it is computed from the effective time.\nIf the subscription is canceled but active it is ignored, so the next renewal will happen as scheduled.\n",
          "format": "date-time",
          "type": "string"
        },
        "subscriptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Identifier of the reactivated subscription"
        }
      },
      "required": [
        "subscriptionId"
      ],
      "type": "object"
    },
    "Tag": {
      "description": "Tag",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The tag's created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The tag's identifier string",
          "readOnly": true
        },
        "name": {
          "description": "The tag's unique name, which is case-insensitive.",
          "example": "New",
          "maxLength": 255,
          "pattern": "^[@~\\-\\.\\w\\s]+$",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The tag's updated time"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "TestProcessor": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "mpi": {
              "$ref": "#/definitions/TestProcessorMpis"
            }
          },
          "type": "object"
        }
      ],
      "description": "TestProcessor Gateway config",
      "x-discriminator-value": "TestProcessor",
      "x-ms-discriminator-value": "TestProcessor"
    },
    "TestProcessorMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/TestProcessorMpis"
        }
      ],
      "description": "TestProcessor Integrated",
      "x-discriminator-value": "TestSandboxMpi",
      "x-ms-discriminator-value": "TestSandboxMpi"
    },
    "TestProcessorMpis": {
      "description": "TestProcessorMpis Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "TestSandboxMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ThreeDSecure": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "amount": {
          "description": "Transaction amount",
          "format": "double",
          "type": "number"
        },
        "cavv": {
          "description": "The 3D Secure entry cardholder authentication verification value",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The 3D Secure entry created time"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related customer ID"
        },
        "eci": {
          "description": "The 3D Secure entry electronic commerce indicator",
          "type": "integer"
        },
        "enrolled": {
          "description": "Is the cardholder enrolled in 3DSecure",
          "enum": [
            "Y",
            "N",
            "U"
          ],
          "type": "string"
        },
        "enrollmentEci": {
          "description": "The 3D Secure entry enrollment eci",
          "type": "string"
        },
        "gatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related gateway account ID"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The 3D Secure entry identifier string",
          "readOnly": true
        },
        "payerAuthResponseStatus": {
          "description": "The 3D Secure entry Auth Response Status",
          "enum": [
            "Y",
            "N",
            "U",
            "A"
          ],
          "type": "string"
        },
        "paymentCardId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related payment card ID"
        },
        "signatureVerification": {
          "description": "If signature was verified",
          "enum": [
            "Y",
            "N"
          ],
          "type": "string"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related Website ID"
        },
        "xid": {
          "description": "The 3D Secure entry transaction Id",
          "type": "string"
        }
      },
      "required": [
        "enrolled",
        "enrollmentEci",
        "customerId",
        "gatewayAccountId",
        "paymentCardId",
        "websiteId",
        "currency",
        "amount"
      ],
      "type": "object"
    },
    "ThreeDSecureResult": {
      "properties": {
        "authenticated": {
          "description": "The 3D Secure entry Auth Response Status",
          "enum": [
            "yes",
            "no",
            "not applicable",
            "attempted"
          ],
          "type": "string"
        },
        "enrolled": {
          "description": "Is the cardholder enrolled in 3D Secure",
          "enum": [
            "yes",
            "no",
            "invalid card/timeout",
            "unavailable"
          ],
          "type": "string"
        },
        "liability": {
          "enum": [
            "protected",
            "not protected",
            "protected (attempt)"
          ],
          "type": "string"
        }
      },
      "readOnly": true,
      "required": [
        "enrolled",
        "authenticated",
        "liability"
      ],
      "type": "object"
    },
    "TimelineAction": {
      "discriminator": "action",
      "properties": {
        "action": {
          "enum": [
            "resend-email",
            "redemption-cancel"
          ],
          "type": "string"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "TimelineExtraData": {
      "description": "Additional data",
      "properties": {
        "actions": {
          "description": "Actions available to a Timeline message. Can be empty in case no actions are available for a message",
          "items": {
            "$ref": "#/definitions/TimelineAction"
          },
          "minItems": 0,
          "type": "array"
        },
        "author": {
          "description": "Timeline comment author data",
          "properties": {
            "userFullName": {
              "type": "string"
            },
            "userId": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "links": {
          "items": {
            "properties": {
              "placeholder": {
                "example": "KYC Document",
                "type": "string"
              },
              "resourceId": {
                "$ref": "#/definitions/ResourceId"
              },
              "resourceType": {
                "enum": [
                  "kyc-document",
                  "invoice",
                  "subscription",
                  "transaction",
                  "email-message",
                  "dispute",
                  "credit-memo",
                  "coupon"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "mentions": {
          "additionalProperties": {
            "example": {
              "@test@mail.com": "userId-1"
            },
            "type": "string"
          },
          "type": "object"
        },
        "tables": {
          "items": {
            "$ref": "#/definitions/TimelineTable"
          },
          "minItems": 0,
          "type": "array"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "TimelineTable": {
      "description": "Additional information about Timeline message",
      "discriminator": "type",
      "properties": {
        "footer": {
          "description": "Data table footer",
          "type": "string"
        },
        "title": {
          "description": "Data table title",
          "type": "string"
        },
        "type": {
          "enum": [
            "two-columns",
            "three-columns"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToditoCash": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "ToditoCash credentials object",
              "properties": {
                "apiKey": {
                  "description": "ToditoCash API key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "ToditoCash config",
      "x-discriminator-value": "ToditoCash",
      "x-ms-discriminator-value": "ToditoCash"
    },
    "TokenBankAccountInstrument": {
      "discriminator": "accountNumberType",
      "properties": {
        "accountNumberType": {
          "default": "BBAN",
          "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
          "enum": [
            "IBAN",
            "BBAN"
          ],
          "type": "string"
        }
      },
      "required": [
        "accountNumberType"
      ],
      "type": "object"
    },
    "TokenMethod": {
      "description": "The token payment method",
      "enum": [
        "cash",
        "check",
        "paypal",
        "Alipay",
        "AstroPay Card",
        "bank-transfer",
        "bitcoin",
        "Boleto",
        "cash-deposit",
        "CASHlib",
        "CashToCode",
        "China UnionPay",
        "domestic-cards",
        "echeck",
        "ecoPayz",
        "ecoVoucher",
        "EPS",
        "ePay.bg",
        "Flexepin",
        "Giropay",
        "Gpaysafe",
        "iDebit",
        "iDEAL",
        "INOVAPAY-pin",
        "INOVAPAY-wallet",
        "InstaDebit",
        "instant-bank-transfer",
        "Interac-online",
        "Interac-eTransfer",
        "invoice",
        "Jeton",
        "Klarna",
        "miscellaneous",
        "Neteller",
        "Nordea-Solo",
        "OchaPay",
        "online-bank-transfer",
        "Onlineueberweisen",
        "Paysafecard",
        "Pay4Fun",
        "PinPay",
        "phone",
        "POLi",
        "Przelewy24",
        "QQPay",
        "Resurs",
        "SEPA",
        "Skrill",
        "Skrill Rapid Transfer",
        "SMSVoucher",
        "SparkPay",
        "Trustly",
        "UPayCard",
        "voucher",
        "WeChat Pay"
      ],
      "type": "string"
    },
    "TokenPaymentCardInstrument": {
      "description": "Payment Token instrument object",
      "properties": {
        "bin": {
          "description": "Payment Card BIN (the PAN's first 6 digits)",
          "format": "bin",
          "readOnly": true,
          "type": "string"
        },
        "brand": {
          "allOf": [
            {
              "$ref": "#/definitions/payment-card-brands"
            }
          ],
          "readOnly": true
        },
        "cvv": {
          "description": "Payment Card CVV/CVC",
          "type": "string"
        },
        "expMonth": {
          "description": "Payment Card expiry month",
          "type": "integer"
        },
        "expYear": {
          "description": "Payment Card expiry year",
          "type": "integer"
        },
        "last4": {
          "description": "Payment Card PAN's last 4 digits",
          "readOnly": true,
          "type": "string"
        },
        "pan": {
          "description": "Payment Card PAN (Primary Account Number)",
          "type": "string"
        }
      },
      "required": [
        "pan",
        "billingAddress",
        "expMonth",
        "expYear"
      ],
      "type": "object"
    },
    "Transaction": {
      "properties": {
        "3ds": {
          "allOf": [
            {
              "$ref": "#/definitions/ThreeDSecureResult"
            }
          ]
        },
        "_embedded": {
          "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "_links": {
          "description": "The links related to resource",
          "items": {},
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "acquirerName": {
          "allOf": [
            {
              "$ref": "#/definitions/acquirer-name"
            }
          ],
          "description": "Acquirer name, available only when transaction use gateway, else null",
          "readOnly": true
        },
        "amount": {
          "description": "The transactions's amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "Billing Address"
        },
        "billingDescriptor": {
          "description": "The billing descriptor that appears on the periodic billing statement. Commonly 12 or fewer characters for a credit card statement.",
          "readOnly": true,
          "type": "string"
        },
        "bin": {
          "description": "Payment Card BIN",
          "format": "bin",
          "readOnly": true,
          "type": "string"
        },
        "bumpOffer": {
          "description": "Bump offer information. Null if hasBumpOffer is false",
          "properties": {
            "bonus": {
              "description": "Bonus amount and currency",
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/CurrencyCode"
                    }
                  ]
                }
              },
              "type": "object"
            },
            "bump": {
              "description": "Bump amount and currency",
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/CurrencyCode"
                    }
                  ]
                }
              },
              "type": "object"
            },
            "language": {
              "description": "The language of the bump offer that was displayed to user (useful for finding any translation problems)",
              "type": "string"
            },
            "order": {
              "description": "Initial amount and currency",
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/CurrencyCode"
                    }
                  ]
                }
              },
              "type": "object"
            },
            "outcome": {
              "description": "Bump offer outcome",
              "enum": [
                "rejected",
                "selected",
                "unknown"
              ],
              "type": "string"
            },
            "usdBonus": {
              "description": "The amount of bonus amount translated to USD",
              "format": "double",
              "type": "number"
            },
            "usdBump": {
              "description": "The amount of bump amount translated to USD",
              "format": "double",
              "type": "number"
            },
            "usdOrder": {
              "description": "The amount of initial amount translated to USD",
              "format": "double",
              "type": "number"
            },
            "version": {
              "description": "The name of the version that was picked (useful for measuring split tests)",
              "type": "string"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "childTransactions": {
          "description": "The child transaction IDs",
          "items": {
            "$ref": "#/definitions/ResourceId"
          },
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Transaction created time"
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ],
          "readOnly": true
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Customer's ID",
          "readOnly": true
        },
        "dcc": {
          "description": "Dynamic Currency Conversion detailed information. Null if hasDcc is false",
          "properties": {
            "base": {
              "description": "Initial amount and currency to convert from",
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/CurrencyCode"
                    }
                  ]
                }
              },
              "type": "object"
            },
            "outcome": {
              "description": "Dynamic Currency Conversion outcome",
              "enum": [
                "rejected",
                "selected",
                "unknown"
              ],
              "type": "string"
            },
            "quote": {
              "description": "Suggested amount and currency to convert to",
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/CurrencyCode"
                    }
                  ]
                }
              },
              "type": "object"
            },
            "usdMarkup": {
              "description": "The amount of markup translated to USD",
              "format": "double",
              "type": "number"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "description": {
          "description": "The payment description",
          "maxLength": 255,
          "type": "string"
        },
        "gateway": {
          "description": "The related gateway information",
          "properties": {
            "avsResponse": {
              "description": "The AVS gateway's response",
              "properties": {
                "code": {
                  "description": "The response code",
                  "type": "string"
                },
                "message": {
                  "description": "The response message",
                  "type": "string"
                },
                "originalCode": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "originalMessage": {
                  "description": "The raw response message",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "cvvResponse": {
              "description": "The CVV gateway's response",
              "properties": {
                "code": {
                  "description": "The response code",
                  "type": "string"
                },
                "message": {
                  "description": "The response message",
                  "type": "string"
                },
                "originalCode": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "originalMessage": {
                  "description": "The raw response message",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "response": {
              "description": "The gateway's response",
              "properties": {
                "code": {
                  "description": "The gateway's response code",
                  "type": "string"
                },
                "message": {
                  "description": "The gateway's response message",
                  "type": "string"
                },
                "originalCode": {
                  "description": "The raw, unmapped gateway's response code",
                  "type": "string"
                },
                "originalMessage": {
                  "description": "The raw, unmapped gateway's response message",
                  "type": "string"
                },
                "type": {
                  "description": "The gateway's response type",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "gatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The transactions's Gateway Account ID",
          "readOnly": true
        },
        "gatewayName": {
          "allOf": [
            {
              "$ref": "#/definitions/gateway-name"
            }
          ],
          "description": "Payment Gateway name, available only when transaction use gateway, else null",
          "readOnly": true
        },
        "gatewayTransactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The gateway's transaction ID",
          "readOnly": true
        },
        "hadDiscrepancy": {
          "description": "True if the transaction has been updated due to a disprepancy with its source of truth",
          "readOnly": true,
          "type": "boolean"
        },
        "has3ds": {
          "readOnly": true,
          "type": "boolean"
        },
        "hasBumpOffer": {
          "description": "True if transaction has a Bump offer",
          "readOnly": true,
          "type": "boolean"
        },
        "hasDcc": {
          "description": "True if transaction has Dynamic Currency Conversion applied",
          "readOnly": true,
          "type": "boolean"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The transaction identifier string",
          "readOnly": true
        },
        "invoiceIds": {
          "description": "The invoice IDs related to transaction",
          "items": {
            "$ref": "#/definitions/ResourceId"
          },
          "readOnly": true,
          "type": "array"
        },
        "isDisputed": {
          "description": "True if transaction is disputed",
          "readOnly": true,
          "type": "boolean"
        },
        "isRebill": {
          "readOnly": true,
          "type": "boolean"
        },
        "isReconciled": {
          "description": "True if the transaction has been verified with gateway batch data",
          "readOnly": true,
          "type": "boolean"
        },
        "isRetry": {
          "description": "True if this transaction is retry.",
          "readOnly": true,
          "type": "boolean"
        },
        "method": {
          "allOf": [
            {
              "$ref": "#/definitions/Method"
            }
          ],
          "description": "Payment Method"
        },
        "notificationUrl": {
          "$ref": "#/definitions/TransactionNotificationUrl"
        },
        "orderId": {
          "description": "The transactions's order ID.  This ID must be unique within a 24 hour period. This field was renamed to the `requestId`.",
          "type": "string",
          "x-deprecated": true
        },
        "parentTransactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The transactions's parent ID",
          "readOnly": true
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "planIds": {
          "description": "The plan IDs related to transaction's subscription(s)",
          "items": {
            "$ref": "#/definitions/ResourceId"
          },
          "readOnly": true,
          "type": "array"
        },
        "processedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Transaction processed time"
        },
        "purchaseAmount": {
          "description": "The transactions's purchase amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "purchaseCurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ],
          "readOnly": true
        },
        "rebillNumber": {
          "description": "The transactions's rebill number",
          "readOnly": true,
          "type": "integer"
        },
        "redirectUrl": {
          "$ref": "#/definitions/TransactionRedirectUrl"
        },
        "referenceData": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Transaction reference data",
          "example": {
            "gatewayTransactionId": "GAT123"
          },
          "readOnly": true,
          "type": "object",
          "x-nullable": true
        },
        "reportAmount": {
          "description": "The transactions's amount to report",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "reportCurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ],
          "readOnly": true
        },
        "requestAmount": {
          "description": "The transactions's amount received in the payment request",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "requestCurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ],
          "readOnly": true
        },
        "requestId": {
          "description": "The transactions's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.",
          "type": "string"
        },
        "result": {
          "description": "Transaction result",
          "enum": [
            "abandoned",
            "approved",
            "canceled",
            "declined",
            "unknown"
          ],
          "readOnly": true,
          "type": "string"
        },
        "retriedTransactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The retried transaction ID",
          "readOnly": true
        },
        "retriesResult": {
          "description": "Retries sequence result",
          "enum": [
            "approved",
            "canceled",
            "declined",
            "scheduled"
          ],
          "readOnly": true,
          "type": "string"
        },
        "retryInstruction": {
          "$ref": "#/definitions/PaymentRetry"
        },
        "retryNumber": {
          "description": "The position in the sequence of retries",
          "readOnly": true,
          "type": "integer"
        },
        "revision": {
          "description": "The number of times the transaction data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
          "readOnly": true,
          "type": "integer"
        },
        "riskMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/RiskMetadata"
            }
          ],
          "description": "Risk metadata"
        },
        "riskScore": {
          "description": "The transactions's risk score",
          "readOnly": true,
          "type": "integer"
        },
        "scheduledTime": {
          "description": "The time the transaction is scheduled for collection",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Transaction status",
          "enum": [
            "completed",
            "conn-error",
            "disputed",
            "never-sent",
            "partially-refunded",
            "pending",
            "refunded",
            "sending",
            "timeout",
            "voided",
            "waiting-approval",
            "waiting-capture",
            "waiting-gateway",
            "waiting-refund"
          ],
          "readOnly": true,
          "type": "string"
        },
        "subscriptionIds": {
          "description": "The subscription IDs related to transaction's invoice(s)",
          "items": {
            "$ref": "#/definitions/ResourceId"
          },
          "readOnly": true,
          "type": "array"
        },
        "type": {
          "description": "Transaction type",
          "enum": [
            "authorize",
            "capture",
            "credit",
            "refund",
            "sale",
            "void"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Transaction updated time"
        },
        "velocity": {
          "description": "The number of transactions by the same customer in the past 24 hours",
          "type": "integer"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Website's ID",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "TransactionAllocationsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "transactionAllocations"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "TransactionEmbed": {
      "description": "Transaction object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/Transaction"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "TransactionGatewayLog": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/TransactionLink"
          },
          "minItems": 1,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The log entry created time"
        },
        "duration": {
          "description": "The request time, msec",
          "type": "integer"
        },
        "headers": {
          "description": "The request headers",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "request": {
          "description": "The request body",
          "type": "string"
        },
        "response": {
          "description": "The response body",
          "type": "string"
        },
        "url": {
          "description": "The request URL",
          "type": "string"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "TransactionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "transaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "TransactionNotificationUrl": {
      "description": "The URL where a server-to-server POST notification will be sent.  It  will be sent when the\ntransaction's result is finalized after a timeout or an offsite interaction. Do not trust the\nnotification; follow with a GET request to confirm the result of the transaction. Please\nrespond with a 2xx HTTP status code, or we will reattempt the request again.\nThe 2 placeholders are available to use in this URI: `{id}` and `{result}`.\n",
      "format": "uri",
      "type": "string"
    },
    "TransactionRedirectUrl": {
      "description": "The URL to redirect the end-user when an offsite transaction is completed.\nThe 2 placeholders are available to use in this URI: `{id}` and `{result}`.\nDefaults to the website's configured URL.\n",
      "format": "uri",
      "type": "string"
    },
    "TransactionRefund": {
      "properties": {
        "amount": {
          "description": "Refund amount",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "amount"
      ],
      "type": "object"
    },
    "TransactionRequest": {
      "properties": {
        "amount": {
          "description": "The transaction amount.  Use `0` for a zero dollar verification. This is important if\nyou want to authorize a payment instrument before giving access to a free trial, for example.\n",
          "example": 97.97,
          "format": "double",
          "type": "number"
        },
        "billingAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ],
          "description": "Billing Address. If not supplied, we use the billing address associated with the payment instrument, and then customer.",
          "x-nullable": true
        },
        "currency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer identifier string"
        },
        "description": {
          "description": "The payment description",
          "maxLength": 255,
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The payment identifier string",
          "readOnly": true
        },
        "invoiceIds": {
          "description": "The array of invoice identifiers.  It's important to note that the transaction\namount can be more or less than the combined invoice amounts.  If the transaction\nis a type `sale` and it is `approved` it will be applied to these invoices in\nthe order of the first issued invoice to the most recently issued invoice.  If\nthere are enough funds to fully pay an invoice, the invoice status will be marked\nas paid.\n",
          "items": {
            "$ref": "#/definitions/ResourceId"
          },
          "type": "array",
          "x-nullable": true
        },
        "isProcessedOutside": {
          "default": false,
          "description": "True if transaction was processed outside Rebilly",
          "type": "boolean"
        },
        "notificationUrl": {
          "description": "The URL where a server-to-server notification request type `POST` with a transaction payload will be sent\nwhen the transaction's result is finalized. Do not trust the notification;\nfollow with a `GET` request to confirm the result of the transaction.  Please respond with a `2xx`\nHTTP status code, or we will reattempt the request again.\n",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "processedTime": {
          "description": "The time the transaction was processed. Can be specified only if transaction was processed outside Rebilly.",
          "format": "date-time",
          "type": "string"
        },
        "redirectUrl": {
          "description": "The URL to redirect the end-user when an offsite transaction is completed.  Defaults to the website's configured URL.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "requestId": {
          "description": "The request id is **recommended**. It prevents duplicate transaction requests within a short period of time. If a duplicate request is sent with the same `requestId` it will be ignored to prevent double-billing anyone.  It must be unique within a 24-hour period.  We recommend generating a UUID v4 as its value.",
          "example": "44433322-2c4y-483z-a0a9-158621f77a21",
          "maxLength": 50,
          "pattern": "^[\\-\\w]+$",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "description": "The type of transaction requested.\nYou should always include the type within your API request.\nThis supports a limited subset of Transaction types.  To refund or void, use the refund endpoint.\nTo `capture` use the `sale` endpoint.  It will capture if there are any eligible\ntransactions of type `authorize` that can be captured.\n",
          "enum": [
            "sale",
            "authorize",
            "credit"
          ],
          "type": "string"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string"
        }
      },
      "required": [
        "websiteId",
        "customerId",
        "currency",
        "amount",
        "type"
      ],
      "type": "object"
    },
    "TransactionTimeline": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": {
            "$ref": "#/definitions/SelfLink"
          },
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "extraData": {
          "$ref": "#/definitions/TimelineExtraData"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Timeline message identifier string",
          "readOnly": true
        },
        "message": {
          "description": "The message that describes the message details",
          "type": "string"
        },
        "occurredTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Timeline message time",
          "readOnly": true
        },
        "triggeredBy": {
          "description": "Shows who or what triggered the Timeline message",
          "enum": [
            "rebilly",
            "app",
            "direct-api"
          ],
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Timeline message type",
          "enum": [
            "timeline-comment-created",
            "transaction-approved",
            "transaction-canceled",
            "transaction-declined",
            "transaction-abandoned",
            "transaction-refunded",
            "transaction-voided",
            "transaction-discrepancy-found",
            "transaction-amount-discrepancy-found",
            "transaction-reconciled",
            "transaction-initiated",
            "transaction-retried",
            "risk-score-changed",
            "transaction-timeout-resolved",
            "dispute-created",
            "dispute-won",
            "dispute-lost",
            "dispute-responded",
            "dispute-forfeited",
            "dispute-changed",
            "gateway-response-received",
            "transaction-scheduled-time-changed",
            "transaction-rules-processed",
            "transaction-capture-delayed",
            "transaction-captured",
            "transaction-waiting-gateway"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UPayCard": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "key": {
                  "description": "merchant key",
                  "format": "password",
                  "type": "string"
                },
                "receiver_account": {
                  "description": "merchant receiver account",
                  "type": "string"
                },
                "secret": {
                  "description": "merchant secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "receiver_account",
                "key",
                "secret"
              ],
              "type": "object"
            },
            "settings": {
              "description": "UpayCard settings object",
              "properties": {
                "tolerancePercentage": {
                  "description": "Tolerance paercentage for settled amount",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "UPayCard Gateway config",
      "x-discriminator-value": "UPayCard",
      "x-ms-discriminator-value": "UPayCard"
    },
    "UPayCardInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "SMSVoucher payment instrument object",
      "x-discriminator-value": "UPayCardInstrument",
      "x-ms-discriminator-value": "UPayCardInstrument"
    },
    "USAePay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "pin": {
                  "description": "USAePay Gateway pin",
                  "format": "password",
                  "type": "string"
                },
                "sourceKey": {
                  "description": "USAePay Gateway source key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "sourceKey",
                "pin"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "USAePay Gateway config",
      "x-discriminator-value": "USAePay",
      "x-ms-discriminator-value": "USAePay"
    },
    "UpcomingInvoiceItem": {
      "description": "Line item",
      "properties": {
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Date-time when the item was added to the subscription"
        },
        "description": {
          "description": "Description of line item",
          "type": "string"
        },
        "periodEndTime": {
          "description": "Date-time when the period ends for this item",
          "format": "date-time",
          "type": "string"
        },
        "periodStartTime": {
          "description": "Date-time when the period begins for this item",
          "format": "date-time",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity of line item",
          "example": 1,
          "type": "integer"
        },
        "type": {
          "description": "Type of line item",
          "enum": [
            "debit",
            "credit"
          ],
          "type": "string"
        },
        "unitPriceAmount": {
          "description": "Unit price of the line item",
          "example": 49.95,
          "format": "double",
          "type": "number"
        },
        "unitPriceCurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/CurrencyCode"
            }
          ]
        }
      },
      "required": [
        "type",
        "unitPriceAmount",
        "unitPriceCurrency",
        "quantity"
      ],
      "type": "object"
    },
    "UpcomingInvoiceItemCollection": {
      "items": {
        "$ref": "#/definitions/UpcomingInvoiceItem"
      },
      "type": "array"
    },
    "VantivLitle": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "merchantId": {
                  "description": "VantivLitle Gateway merchant ID",
                  "type": "string"
                },
                "password": {
                  "description": "VantivLitle Gateway password",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "VantivLitle Gateway username",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password",
                "merchantId"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/VantivLitleMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "VantivLitle Gateway config",
      "x-discriminator-value": "VantivLitle",
      "x-ms-discriminator-value": "VantivLitle"
    },
    "VantivLitleMpis": {
      "description": "VantivLitle Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Wallet88": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "Wallet88 credentials object",
              "properties": {
                "password": {
                  "description": "Wallet88 API password",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "Wallet88 API user",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Wallet88 config",
      "x-discriminator-value": "Wallet88",
      "x-ms-discriminator-value": "Wallet88"
    },
    "Walpay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "merchantName": {
                  "description": "Walpay Gateway merchant name",
                  "type": "string"
                },
                "merchantPin": {
                  "description": "Walpay Gateway merchant pin",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantName",
                "merchantPin"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/WalpayMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Walpay Gateway config",
      "x-discriminator-value": "Walpay",
      "x-ms-discriminator-value": "Walpay"
    },
    "WalpayMpis": {
      "description": "WalpayMpis Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "WeChat-PayInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "WeChat Pay payment instrument object",
      "x-discriminator-value": "WeChat-PayInstrument",
      "x-ms-discriminator-value": "WeChat-PayInstrument"
    },
    "WebsiteEmbed": {
      "description": "Website object",
      "properties": {
        "website": {
          "type": "object"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "WebsiteLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "website"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Wirecard": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "businessSignature": {
                  "description": "Wirecard Gateway merchant business case signature",
                  "format": "password",
                  "type": "string"
                },
                "delay": {
                  "description": "Wirecard Gateway delay",
                  "type": "integer"
                },
                "merchantPassword": {
                  "description": "Wirecard Gateway merchant password",
                  "format": "password",
                  "type": "string"
                },
                "merchantUsername": {
                  "description": "Wirecard Gateway merchant username",
                  "type": "string"
                },
                "sftpPrivateKey": {
                  "description": "Wirecard sftp private key.",
                  "format": "password",
                  "type": "string"
                },
                "sftpUsername": {
                  "description": "Wirecard sftp username.",
                  "type": "string"
                }
              },
              "required": [
                "merchantUsername",
                "merchantPassword",
                "businessSignature",
                "delay"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/WirecardMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Wirecard Gateway config",
      "x-discriminator-value": "Wirecard",
      "x-ms-discriminator-value": "Wirecard"
    },
    "WirecardMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/WirecardMpis"
        }
      ],
      "description": "Wirecard Integrated",
      "x-discriminator-value": "WirecardMpi",
      "x-ms-discriminator-value": "WirecardMpi"
    },
    "WirecardMpis": {
      "description": "Wirecard Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "WirecardMpi"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Worldpay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "merchantCode": {
                  "description": "Worldpay Gateway merchant code",
                  "format": "password",
                  "type": "string"
                },
                "merchantPassword": {
                  "description": "Worldpay Gateway merchant password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantCode",
                "merchantPassword"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/WorldpayMpis"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Worldpay Gateway config",
      "x-discriminator-value": "Worldpay",
      "x-ms-discriminator-value": "Worldpay"
    },
    "WorldpayMpis": {
      "description": "Worldpay Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Zotapay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "endpointId": {
                  "description": "Zotapay's endpoint ID",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Zotapay's merchant ID",
                  "type": "string"
                },
                "merchantSecretKey": {
                  "description": "Zotapay's merchant secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "endpointId",
                "merchantId",
                "merchantSecretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "Zotapay Gateway config",
      "x-discriminator-value": "Zotapay",
      "x-ms-discriminator-value": "Zotapay"
    },
    "achInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "bankAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The bank account identifier string"
            }
          },
          "required": [
            "bankAccountId"
          ],
          "type": "object"
        }
      ],
      "description": "ACH payment instrument object",
      "x-discriminator-value": "achInstrument",
      "x-ms-discriminator-value": "achInstrument"
    },
    "acquirer-name": {
      "description": "The acquirer name",
      "enum": [
        "Alipay",
        "AIB",
        "ApcoPay",
        "AsiaPaymentGateway",
        "AstroPay Card",
        "Ipay Options",
        "B+S",
        "Bambora",
        "BitPay",
        "Bank of America",
        "Bank of Moscow",
        "Bank of Rebilly",
        "Bank One",
        "BMO Harris Bank",
        "Borgun",
        "BraintreePayments",
        "Cardknox",
        "CASHlib",
        "Catalunya Caixa",
        "Chase",
        "ChinaUnionPay",
        "CIM",
        "Citadel",
        "Clearhaus",
        "CODVoucher",
        "Conekta",
        "Coppr",
        "Credorax",
        "Cryptonator",
        "ecoPayz",
        "EcorePay",
        "Elavon",
        "EMS",
        "EPG",
        "Fifth Third Bank",
        "Finrax",
        "First Data Buypass",
        "First Data Nashville",
        "First Data North",
        "First Data Omaha",
        "FinTecSystems",
        "Flexepin",
        "Forte",
        "FundSend",
        "Gigadat",
        "Global East",
        "Gooney",
        "Gpaysafe",
        "Heartland",
        "HSBC",
        "iCanPay",
        "iCheque",
        "Ilixium",
        "Ingenico",
        "INOVAPAY",
        "Intuit",
        "Jeton",
        "LPG",
        "Masapay",
        "Merrick",
        "Mission Valley Bank",
        "Moneris",
        "NATWEST",
        "Netbanking",
        "Neteller",
        "NinjaWallet",
        "NMI",
        "OchaPay",
        "Onlineueberweisen",
        "Other",
        "Panamerican",
        "Panda Bank",
        "Paramount",
        "ParamountEft",
        "Pay4fun",
        "PayCash",
        "PaymenTechnologies",
        "Paynetics",
        "PayPal",
        "Payr",
        "Payvision",
        "Peoples Trust Company",
        "Privatbank",
        "Prosa",
        "QQPay",
        "RBC",
        "RBS WorldPay",
        "RealTime",
        "Rotessa",
        "Skrill",
        "SmartInvoice",
        "SMSVoucher",
        "Sofort",
        "SparkPay",
        "State Bank of Mauritius",
        "Stripe",
        "TBI",
        "TestProcessor",
        "ToditoCash",
        "TrustPay",
        "TSYS",
        "UPayCard",
        "Vantiv",
        "VoicePay",
        "Wallet88",
        "WeChat Pay",
        "Wells Fargo",
        "Wing Hang Bank",
        "Wirecard",
        "WorldPay",
        "Zotapay"
      ],
      "type": "string"
    },
    "and": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ],
      "description": "Logical AND",
      "type": "object",
      "x-discriminator-value": "and",
      "x-ms-discriminator-value": "and"
    },
    "auto": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        }
      ],
      "x-discriminator-value": "auto",
      "x-ms-discriminator-value": "auto"
    },
    "bank-accountInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "bankAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The bank account identifier string"
            }
          },
          "required": [
            "bankAccountId"
          ],
          "type": "object"
        }
      ],
      "description": "ACH payment instrument object",
      "x-discriminator-value": "bank-accountInstrument",
      "x-ms-discriminator-value": "bank-accountInstrument"
    },
    "between": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "properties": {
            "max": {
              "type": "string"
            },
            "min": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path",
            "min",
            "max"
          ],
          "type": "object"
        }
      ],
      "description": "Between condition",
      "type": "object",
      "x-discriminator-value": "between",
      "x-ms-discriminator-value": "between"
    },
    "bitcoinInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "Bitcoin payment instrument object",
      "x-discriminator-value": "bitcoinInstrument",
      "x-ms-discriminator-value": "bitcoinInstrument"
    },
    "cashInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "receivedBy": {
              "description": "The receiver's name",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Cash payment instrument object",
      "x-discriminator-value": "cashInstrument",
      "x-ms-discriminator-value": "cashInstrument"
    },
    "checkInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "reference": {
              "description": "Reference data",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Check payment instrument object",
      "x-discriminator-value": "checkInstrument",
      "x-ms-discriminator-value": "checkInstrument"
    },
    "compare": {
      "properties": {
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "path",
        "value"
      ],
      "type": "object"
    },
    "date-interval": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "$ref": "#/definitions/InvoiceRetryScheduleInstruction"
        },
        {
          "properties": {
            "duration": {
              "description": "The number of the units",
              "minimum": 1,
              "type": "integer"
            },
            "unit": {}
          },
          "required": [
            "duration",
            "unit"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "date-interval",
      "x-ms-discriminator-value": "date-interval"
    },
    "day-of-month": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "$ref": "#/definitions/ServicePeriodAnchorInstruction"
        },
        {
          "$ref": "#/definitions/InvoiceRetryScheduleInstruction"
        },
        {
          "properties": {
            "day": {
              "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n",
              "maximum": 31,
              "minimum": 1,
              "type": "integer"
            },
            "time": {
              "$ref": "#/definitions/extended-time-iso8601"
            }
          },
          "required": [
            "day"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "day-of-month",
      "x-ms-discriminator-value": "day-of-month"
    },
    "day-of-week": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "$ref": "#/definitions/ServicePeriodAnchorInstruction"
        },
        {
          "$ref": "#/definitions/InvoiceRetryScheduleInstruction"
        },
        {
          "properties": {
            "day": {
              "$ref": "#/definitions/long-day-of-week"
            },
            "time": {
              "$ref": "#/definitions/extended-time-iso8601"
            },
            "week": {
              "default": "next",
              "enum": [
                "next",
                "first-in-month",
                "last-in-month"
              ],
              "type": "string"
            }
          },
          "required": [
            "day"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "day-of-week",
      "x-ms-discriminator-value": "day-of-week"
    },
    "discount": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "properties": {
            "type": {
              "description": "The payment amount discount type",
              "enum": [
                "percent",
                "fixed"
              ],
              "type": "string"
            },
            "value": {
              "description": "The payment amount discount",
              "format": "float",
              "type": "number"
            }
          },
          "required": [
            "value",
            "type"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "discount",
      "x-ms-discriminator-value": "discount"
    },
    "discounts-per-redemption": {
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "properties": {
            "quantity": {
              "description": "Restriction quantity",
              "type": "integer"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "description": "discounts-per-redemption restrictions",
      "x-discriminator-value": "discounts-per-redemption",
      "x-ms-discriminator-value": "discounts-per-redemption"
    },
    "eMerchantPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiKey": {
                  "description": "eMerchantPay Gateway api key",
                  "format": "password",
                  "type": "string"
                },
                "clientId": {
                  "description": "eMerchantPay Gateway client ID",
                  "type": "string"
                },
                "password": {
                  "description": "eMerchantPay password for Genesis platform",
                  "format": "password",
                  "type": "string"
                },
                "token": {
                  "description": "eMerchantPay token for Genesis platform",
                  "type": "string"
                },
                "username": {
                  "description": "eMerchantPay username for Genesis platform",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/eMerchantPayMpis"
            },
            "settings": {
              "description": "eMerchantPay settings object",
              "properties": {
                "platform": {
                  "description": "eMerchantPay platform to process payment. default to IPG",
                  "enum": [
                    "IPG",
                    "Genesis"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "eMerchantPay Gateway config",
      "x-discriminator-value": "eMerchantPay",
      "x-ms-discriminator-value": "eMerchantPay"
    },
    "eMerchantPayMpis": {
      "description": "eMerchantPay Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "eMerchantPayMpi",
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ePay-bgInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "ePay.bg payment instrument object",
      "x-discriminator-value": "ePay.bg",
      "x-ms-discriminator-value": "ePay.bg"
    },
    "ecoPayz": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "ecoPayz credentials object",
              "properties": {
                "merchantAccountNumber": {
                  "description": "ecoPayz merchant account number",
                  "type": "string"
                },
                "merchantPassword": {
                  "description": "ecoPayz merchant password",
                  "format": "password",
                  "type": "string"
                },
                "paymentPageId": {
                  "description": "ecoPayz payment page ID",
                  "type": "string"
                }
              },
              "required": [
                "paymentPageId",
                "merchantAccountNumber",
                "merchantPassword"
              ],
              "type": "object"
            },
            "settings": {
              "description": "ecoPayz settings object",
              "properties": {
                "validCurrency": {
                  "description": "Three letter currency code",
                  "enum": [
                    "CAD",
                    "EUR",
                    "GBP",
                    "USD"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "validCurrency"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "ecoPayz config",
      "x-discriminator-value": "ecoPayz",
      "x-ms-discriminator-value": "ecoPayz"
    },
    "equals": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Equals condition",
      "type": "object",
      "x-discriminator-value": "equals",
      "x-ms-discriminator-value": "equals"
    },
    "extended-time-iso8601": {
      "description": "Extended ISO-8601 format of time",
      "pattern": "^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$",
      "type": "string"
    },
    "fixed": {
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "properties": {
            "amount": {
              "description": "Discount amount",
              "exclusiveMinimum": true,
              "format": "double",
              "minimum": 0,
              "type": "number"
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/definitions/CurrencyCode"
                }
              ]
            }
          },
          "required": [
            "amount",
            "currency"
          ],
          "type": "object"
        }
      ],
      "description": "Coupon fixed amount discount",
      "x-discriminator-value": "fixed",
      "x-ms-discriminator-value": "fixed"
    },
    "fixed-fee": {
      "allOf": [
        {
          "$ref": "#/definitions/PlanPriceFormula"
        },
        {
          "properties": {
            "price": {
              "description": "For the very simple price when it's fixed and does not depend on the quantity chosen by customer.\n\nIf the price is 0, it's free.\n",
              "example": 99.95,
              "format": "double",
              "type": "number"
            }
          },
          "required": [
            "price"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "fixed-fee",
      "x-ms-discriminator-value": "fixed-fee"
    },
    "flat-rate": {
      "allOf": [
        {
          "$ref": "#/definitions/PlanPriceFormula"
        },
        {
          "properties": {
            "maxQuantity": {
              "description": "If the value is `null`, it's assumed to be infinite.",
              "example": 1,
              "type": "integer"
            },
            "price": {
              "description": "Flat-rate pricing is represented in a simple price per unit.\nSome examples:\n\n- $30 per unit\n- $0.10 per transaction\n- $50 per period\n\nIf the price is 0, it's free.\n",
              "example": 99.95,
              "format": "double",
              "type": "number"
            }
          },
          "required": [
            "price"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "flat-rate",
      "x-ms-discriminator-value": "flat-rate"
    },
    "gateway-name": {
      "description": "The payment gateway name",
      "enum": [
        "A1Gateway",
        "AmexVPC",
        "ApcoPay",
        "AsiaPaymentGateway",
        "AstroPay",
        "AstroPayCard",
        "AuthorizeNet",
        "Bambora",
        "BitPay",
        "BlueSnap",
        "BraintreePayments",
        "Cardknox",
        "Cashflows",
        "CASHlib",
        "CashToCode",
        "CauriPayment",
        "Cayan",
        "Chase",
        "Citadel",
        "Clearhaus",
        "CODVoucher",
        "Conekta",
        "Coppr",
        "Credorax",
        "Cryptonator",
        "DataCash",
        "Dengi",
        "ecoPayz",
        "EcorePay",
        "Elavon",
        "eMerchantPay",
        "EPG",
        "Finrax",
        "Flexepin",
        "FinTecSystems",
        "FundSend",
        "Forte",
        "GET",
        "Gigadat",
        "GlobalOnePay",
        "Gooney",
        "Gpaysafe",
        "Greenbox",
        "iCanPay",
        "iCheque",
        "iDebit",
        "Ilixium",
        "Ingenico",
        "INOVAPAY",
        "Inovio",
        "Intuit",
        "InstaDebit",
        "IpayOptions",
        "JetPay",
        "Jeton",
        "LPG",
        "Moneris",
        "MtaPay",
        "Netbanking",
        "Neteller",
        "NinjaWallet",
        "NMI",
        "OchaPay",
        "Onlineueberweisen",
        "Optimal",
        "Pagsmile",
        "Panamerican",
        "ParamountEft",
        "PandaGateway",
        "Pay4Fun",
        "PayCash",
        "Payeezy",
        "Payflow",
        "PaymenTechnologies",
        "PayPal",
        "Payr",
        "Paysafe",
        "Paysafecash",
        "Payvision",
        "Plugnpay",
        "Prosa",
        "Realex",
        "Realtime",
        "Redsys",
        "Rotessa",
        "RPN",
        "Sagepay",
        "SeamlessChex",
        "SecureTrading",
        "Skrill",
        "SmartInvoice",
        "SMSVoucher",
        "Sofort",
        "SparkPay",
        "StaticGateway",
        "Stripe",
        "TestProcessor",
        "ToditoCash",
        "UPayCard",
        "USAePay",
        "VantivLitle",
        "vegaaH",
        "Wallet88",
        "Walpay",
        "Wirecard",
        "WorldlineAtosFrankfurt",
        "Worldpay",
        "Zotapay"
      ],
      "type": "string"
    },
    "gt": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Greater than condition",
      "type": "object",
      "x-discriminator-value": "gt",
      "x-ms-discriminator-value": "gt"
    },
    "gte": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Greater than or equals condition",
      "type": "object",
      "x-discriminator-value": "gte",
      "x-ms-discriminator-value": "gte"
    },
    "iCanPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "authenticateId": {
                  "description": "iCanPay Gateway authenticate ID",
                  "type": "string"
                },
                "authenticatePw": {
                  "description": "iCanPay Gateway authenticate password",
                  "format": "password",
                  "type": "string"
                },
                "publicKey": {
                  "description": "iCanPay Gateway API public key",
                  "type": "string"
                },
                "secretKey": {
                  "description": "iCanPay Gateway API secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "authenticateId",
                "authenticatePw",
                "publicKey",
                "secretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "iCanPay Gateway config",
      "x-discriminator-value": "iCanPay",
      "x-ms-discriminator-value": "iCanPay"
    },
    "iCheque": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "apiSecurityToken": {
                  "description": "Hash of the password for the Alliance API (transaction reporting)",
                  "format": "password",
                  "type": "string"
                },
                "apiUserId": {
                  "description": "Username for the Alliance API (transaction reporting)",
                  "type": "string"
                },
                "clientId": {
                  "description": "iCheque Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "iCheque Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "iCheque Gateway config",
      "x-discriminator-value": "iCheque",
      "x-ms-discriminator-value": "iCheque"
    },
    "iDEALInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        }
      ],
      "description": "iDEAL payment instrument object",
      "x-discriminator-value": "iDEALInstrument",
      "x-ms-discriminator-value": "iDEALInstrument"
    },
    "iDebit": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "description": "iDebit credentials object",
              "properties": {
                "merchantId": {
                  "description": "iDebit merchant account number",
                  "type": "string"
                },
                "password": {
                  "description": "iDebit merchant account password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "iDebit config",
      "x-discriminator-value": "iDebit",
      "x-ms-discriminator-value": "iDebit"
    },
    "immediately": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/ServicePeriodAnchorInstruction"
        },
        {
          "$ref": "#/definitions/InvoiceRetryScheduleInstruction"
        }
      ],
      "x-discriminator-value": "immediately",
      "x-ms-discriminator-value": "immediately"
    },
    "in": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "properties": {
            "path": {
              "type": "string"
            },
            "values": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "path",
            "values"
          ],
          "type": "object"
        }
      ],
      "description": "In condition",
      "type": "object",
      "x-discriminator-value": "in",
      "x-ms-discriminator-value": "in"
    },
    "intelligent": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "$ref": "#/definitions/InvoiceRetryScheduleInstruction"
        },
        {
          "properties": {
            "duration": {
              "description": "The number of the units",
              "minimum": 1,
              "type": "integer"
            },
            "unit": {}
          },
          "required": [
            "duration",
            "unit"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "intelligent",
      "x-ms-discriminator-value": "intelligent"
    },
    "logical": {
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/Condition"
          },
          "minItems": 2,
          "type": "array"
        }
      },
      "required": [
        "conditions"
      ],
      "type": "object"
    },
    "logical-not": {
      "example": {
        "condition": {
          "operation": "equals",
          "path": "/name",
          "value": "John Dou"
        },
        "operation": "not"
      },
      "properties": {
        "condition": {
          "$ref": "#/definitions/Condition"
        }
      },
      "required": [
        "condition"
      ],
      "type": "object"
    },
    "long-day-of-week": {
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ],
      "type": "string"
    },
    "lt": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Less than condition",
      "type": "object",
      "x-discriminator-value": "lt",
      "x-ms-discriminator-value": "lt"
    },
    "lte": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Less than or equals condition",
      "type": "object",
      "x-discriminator-value": "lte",
      "x-ms-discriminator-value": "lte"
    },
    "minimum-order-amount": {
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "properties": {
            "amount": {
              "description": "Minimum order quantity",
              "type": "integer"
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/definitions/CurrencyCode"
                }
              ]
            }
          },
          "required": [
            "amount",
            "currency"
          ],
          "type": "object"
        }
      ],
      "description": "minimum-order-amount restrictions",
      "x-discriminator-value": "minimum-order-amount",
      "x-ms-discriminator-value": "minimum-order-amount"
    },
    "not": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical-not"
        }
      ],
      "description": "Logical NOT",
      "type": "object",
      "x-discriminator-value": "not",
      "x-ms-discriminator-value": "not"
    },
    "one-time-order": {
      "allOf": [
        {
          "$ref": "#/definitions/Subscription"
        },
        {
          "properties": {
            "status": {
              "description": "One-time order status",
              "enum": [
                "pending",
                "completed",
                "abandoned"
              ],
              "readOnly": true,
              "type": "string"
            }
          }
        },
        {
          "$ref": "#/definitions/SubscriptionMetadata"
        }
      ],
      "x-discriminator-value": "one-time-order",
      "x-ms-discriminator-value": "one-time-order"
    },
    "or": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ],
      "description": "Logical OR",
      "type": "object",
      "x-discriminator-value": "or",
      "x-ms-discriminator-value": "or"
    },
    "paid-by-time": {
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "properties": {
            "time": {
              "description": "The time when the coupon's redemption is no longer valid and removed from unpaid invoices if applied. Note that this datetime cannot be changed.",
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "time"
          ],
          "type": "object"
        }
      ],
      "description": "paid-by-time restrictions",
      "x-discriminator-value": "paid-by-time",
      "x-ms-discriminator-value": "paid-by-time"
    },
    "partial": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "properties": {
            "type": {
              "description": "The payment amount type",
              "enum": [
                "percent",
                "fixed"
              ],
              "type": "string"
            },
            "value": {
              "description": "The payment amount",
              "format": "float",
              "type": "number"
            }
          },
          "required": [
            "value",
            "type"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "partial",
      "x-ms-discriminator-value": "partial"
    },
    "password": {
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationToken"
        },
        {
          "properties": {
            "customerId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The token's customer ID",
              "readOnly": true
            },
            "password": {
              "description": "The token's password",
              "format": "password",
              "type": "string",
              "writeOnly": true
            },
            "username": {
              "description": "The token's username",
              "type": "string"
            }
          }
        },
        {
          "$ref": "#/definitions/AuthenticationTokenMetadata"
        }
      ],
      "required": [
        "username",
        "password"
      ],
      "x-discriminator-value": "password",
      "x-ms-discriminator-value": "password"
    },
    "passwordless": {
      "allOf": [
        {
          "$ref": "#/definitions/AuthenticationToken"
        },
        {
          "properties": {
            "customerId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The token's customer ID"
            }
          }
        },
        {
          "$ref": "#/definitions/AuthenticationTokenMetadata"
        }
      ],
      "required": [
        "customerId"
      ],
      "x-discriminator-value": "passwordless",
      "x-ms-discriminator-value": "passwordless"
    },
    "payment-card-brands": {
      "description": "Payment Card brand",
      "enum": [
        "Visa",
        "MasterCard",
        "American Express",
        "Discover",
        "Maestro",
        "Solo",
        "Electron",
        "JCB",
        "Voyager",
        "Diners Club",
        "Switch",
        "Laser",
        "China UnionPay",
        "AstroPay Card"
      ],
      "type": "string"
    },
    "payment-cardInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "paymentCardId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The payment card identifier string"
            }
          },
          "required": [
            "paymentCardId"
          ],
          "type": "object"
        }
      ],
      "description": "Payment card payment instrument object",
      "x-discriminator-value": "payment-cardInstrument",
      "x-ms-discriminator-value": "payment-cardInstrument"
    },
    "paypalInstrument": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "payPalAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The PayPal account identifier string"
            }
          },
          "required": [
            "payPalAccountId"
          ],
          "type": "object"
        }
      ],
      "description": "PayPal payment instrument object",
      "x-discriminator-value": "paypalInstrument",
      "x-ms-discriminator-value": "paypalInstrument"
    },
    "percent": {
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "properties": {
            "value": {
              "description": "Discount percent",
              "exclusiveMinimum": true,
              "format": "double",
              "maximum": 100,
              "minimum": 0,
              "type": "number"
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        }
      ],
      "description": "Coupon percent discount",
      "x-discriminator-value": "percent",
      "x-ms-discriminator-value": "percent"
    },
    "redemption-cancel": {
      "allOf": [
        {
          "$ref": "#/definitions/TimelineAction"
        },
        {
          "properties": {
            "redemptionId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          },
          "type": "object"
        }
      ],
      "description": "Cancel Redemption",
      "x-discriminator-value": "redemption-cancel",
      "x-ms-discriminator-value": "redemption-cancel"
    },
    "redemptions-per-customer": {
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "properties": {
            "quantity": {
              "description": "Restriction value",
              "type": "integer"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "description": "Quantity per Customer restrictions",
      "x-discriminator-value": "redemptions-per-customer",
      "x-ms-discriminator-value": "redemptions-per-customer"
    },
    "resend-email": {
      "allOf": [
        {
          "$ref": "#/definitions/TimelineAction"
        },
        {
          "properties": {
            "messageId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          },
          "type": "object"
        }
      ],
      "description": "Resend Email action",
      "x-discriminator-value": "resend-email",
      "x-ms-discriminator-value": "resend-email"
    },
    "restrict-to-invoices": {
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "properties": {
            "invoiceIds": {
              "description": "Invoice IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "invoiceIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-invoices restrictions",
      "x-discriminator-value": "restrict-to-invoices",
      "x-ms-discriminator-value": "restrict-to-invoices"
    },
    "restrict-to-plans": {
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "properties": {
            "planIds": {
              "description": "Plan IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "planIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-plans restrictions",
      "x-discriminator-value": "restrict-to-plans",
      "x-ms-discriminator-value": "restrict-to-plans"
    },
    "restrict-to-products": {
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "properties": {
            "productIds": {
              "description": "Product IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "productIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-products restrictions",
      "x-discriminator-value": "restrict-to-products",
      "x-ms-discriminator-value": "restrict-to-products"
    },
    "restrict-to-subscriptions": {
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "properties": {
            "subscriptionIds": {
              "description": "Subscription IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "subscriptionIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-subscriptions restrictions",
      "x-discriminator-value": "restrict-to-subscriptions",
      "x-ms-discriminator-value": "restrict-to-subscriptions"
    },
    "schemas_ContactEmails": {
      "description": "The list of emails",
      "items": {
        "properties": {
          "label": {
            "description": "The email label",
            "type": "string"
          },
          "primary": {
            "description": "True if email is primary",
            "type": "boolean"
          },
          "value": {
            "description": "The email value",
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "schemas_ContactPhoneNumbers": {
      "description": "The list of phone numbers",
      "items": {
        "properties": {
          "label": {
            "description": "The phone label",
            "type": "string"
          },
          "primary": {
            "description": "True if phone is primary",
            "type": "boolean"
          },
          "value": {
            "description": "The phone value",
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "schemas_Method": {
      "description": "The payment method",
      "enum": [
        "payment-card",
        "ach",
        "bank-account",
        "cash",
        "check",
        "paypal",
        "Alipay",
        "ApplePay",
        "AstroPay-Card",
        "bank-transfer",
        "bitcoin",
        "Boleto",
        "cash-deposit",
        "CASHlib",
        "CashToCode",
        "China-UnionPay",
        "Conekta-oxxo",
        "domestic-cards",
        "echeck",
        "ecoPayz",
        "ecoVoucher",
        "EPS",
        "ePay-bg",
        "Flexepin",
        "Giropay",
        "GooglePay",
        "Gpaysafe",
        "iDebit",
        "iDEAL",
        "INOVAPAY-pin",
        "INOVAPAY-wallet",
        "InstaDebit",
        "instant-bank-transfer",
        "Interac",
        "Interac-online",
        "Interac-eTransfer",
        "invoice",
        "Jeton",
        "Klarna",
        "LPG-online",
        "LPG-payment-card",
        "miscellaneous",
        "Netbanking",
        "Neteller",
        "Nordea-Solo",
        "OchaPay",
        "online-bank-transfer",
        "Onlineueberweisen",
        "Pagsmile-lottery",
        "Pagsmile-deposit-express",
        "Pagsmile-boleto",
        "PayCash",
        "Paysafecard",
        "Pay4Fun",
        "PinPay",
        "phone",
        "POLi",
        "Przelewy24",
        "QQPay",
        "Resurs",
        "SEPA",
        "Skrill",
        "Skrill-Rapid-Transfer",
        "SMSVoucher",
        "SparkPay",
        "swift-dbt",
        "ToditoCash-card",
        "Trustly",
        "UPayCard",
        "voucher",
        "WeChat-Pay",
        "Zotapay"
      ],
      "type": "string"
    },
    "schemas_ResourceId": {
      "description": "The resource ID. Defaults to UUID v4",
      "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
      "maxLength": 50,
      "pattern": "^[@~\\-\\.\\w\\d]+$",
      "type": "string"
    },
    "schemas_SelfLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "self"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "stairstep": {
      "allOf": [
        {
          "$ref": "#/definitions/PlanPriceFormula"
        },
        {
          "properties": {
            "brackets": {
              "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"stairstep\" example:\n\nPrice total | Max quantity | Description\n------------|--------------|------------\n$5          | 1            | 1\n$13         | 5            | 2 to 5\n$30         | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $13. For 2 to 5 apples, the price is $13 in any case.\n",
              "items": {
                "properties": {
                  "maxQuantity": {
                    "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                    "example": 1,
                    "type": "integer"
                  },
                  "price": {
                    "description": "If the price is 0, it's free.",
                    "example": 99.95,
                    "format": "double",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "minItems": 1,
              "type": "array"
            }
          },
          "required": [
            "brackets"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "stairstep",
      "x-ms-discriminator-value": "stairstep"
    },
    "subscription-order": {
      "allOf": [
        {
          "$ref": "#/definitions/Subscription"
        },
        {
          "properties": {
            "autopay": {
              "default": true,
              "description": "Autopay determines if a payment attempt will be automatic",
              "type": "boolean"
            },
            "endTime": {
              "allOf": [
                {
                  "$ref": "#/definitions/ServerTimestamp"
                }
              ],
              "description": "Subscription end time"
            },
            "inTrial": {
              "description": "True if the subscription is currently in a trial period",
              "readOnly": true,
              "type": "boolean"
            },
            "invoiceTimeShift": {
              "allOf": [
                {
                  "$ref": "#/definitions/InvoiceTimeShift"
                }
              ],
              "description": "You can shift issue time and due time of invoices for this subscription.\nThis setting overrides plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same billing period,\nthis property allows to subscribe to different plans.\n",
              "example": null,
              "nullable": true
            },
            "lineItemSubtotal": {
              "description": "Subtotal of line items in this subscription (signed value). If credits exceed debits, it will be a negative number.",
              "properties": {
                "amount": {
                  "example": 49.95,
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "$ref": "#/definitions/CurrencyCode"
                }
              },
              "readOnly": true,
              "type": "object"
            },
            "lineItems": {
              "allOf": [
                {
                  "$ref": "#/definitions/UpcomingInvoiceItemCollection"
                }
              ],
              "description": "Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.",
              "readOnly": true
            },
            "rebillNumber": {
              "description": "The current period number",
              "readOnly": true,
              "type": "integer"
            },
            "recurringInterval": {
              "description": "The recurring interval to override plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same recurring period length,\nthis property allows to subscribe to different plans.\n",
              "example": null,
              "nullable": true,
              "properties": {
                "periodAnchorInstruction": {
                  "$ref": "#/definitions/ServicePeriodAnchorInstruction"
                }
              },
              "type": "object"
            },
            "renewalReminderNumber": {
              "description": "Number of renewal reminder events triggered",
              "readOnly": true,
              "type": "integer"
            },
            "renewalReminderTime": {
              "allOf": [
                {
                  "$ref": "#/definitions/ServerTimestamp"
                }
              ],
              "description": "Time renewal reminder event will be triggered",
              "nullable": true
            },
            "renewalTime": {
              "description": "Subscription renewal time",
              "format": "date-time",
              "type": "string"
            },
            "startTime": {
              "description": "Subscription start time.  When the value is sent as null, it will use the current time. This value can't be in past more than one service period.",
              "example": null,
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "status": {
              "description": "The status of the subscription service. A subscription starts\nin the `pending` status, and will become `active` when the\nservice period begins.\n",
              "enum": [
                "pending",
                "active",
                "canceled",
                "churned",
                "suspended",
                "paused",
                "abandoned"
              ],
              "readOnly": true,
              "type": "string"
            },
            "trial": {
              "description": "To use plan defaults do not send the `trial` key, or send a `null` value with it.",
              "properties": {
                "enabled": {
                  "description": "Enable or disable the trial for this subscription. If enabled for plans without trial prices, the trial will be free.",
                  "type": "boolean"
                },
                "endTime": {
                  "description": "The time the trial should end",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "endTime"
              ],
              "type": "object"
            },
            "trialReminderNumber": {
              "description": "Number of renewal reminder events triggered",
              "readOnly": true,
              "type": "integer"
            },
            "trialReminderTime": {
              "allOf": [
                {
                  "$ref": "#/definitions/ServerTimestamp"
                }
              ],
              "description": "Time renewal reminder event will be triggered",
              "nullable": true
            }
          }
        },
        {
          "$ref": "#/definitions/SubscriptionMetadata"
        },
        {
          "$ref": "#/definitions/SubscriptionCancellationState"
        }
      ],
      "x-discriminator-value": "subscription-order",
      "x-ms-discriminator-value": "subscription-order"
    },
    "three-columns": {
      "allOf": [
        {
          "$ref": "#/definitions/TimelineTable"
        },
        {
          "properties": {
            "data": {
              "description": "Table data. Each array element represents a table row",
              "items": {
                "example": {
                  "attribute": "Descriptor",
                  "newValue": "new-test.com",
                  "previousValue": "test.com"
                },
                "properties": {
                  "attribute": {
                    "type": "string"
                  },
                  "newValue": {
                    "type": "string"
                  },
                  "previousValue": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "x-discriminator-value": "three-columns",
      "x-ms-discriminator-value": "three-columns"
    },
    "tiered": {
      "allOf": [
        {
          "$ref": "#/definitions/PlanPriceFormula"
        },
        {
          "properties": {
            "brackets": {
              "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"tiered\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $9. $5 per apple for the first apple, then $4 per apple for the 2nd to 5th apple.\n",
              "items": {
                "properties": {
                  "maxQuantity": {
                    "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                    "example": 1,
                    "type": "integer"
                  },
                  "price": {
                    "description": "If the price is 0, it's free.",
                    "example": 99.95,
                    "format": "double",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "minItems": 1,
              "type": "array"
            }
          },
          "required": [
            "brackets"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "tiered",
      "x-ms-discriminator-value": "tiered"
    },
    "time-plural-unit": {
      "enum": [
        "seconds",
        "minutes",
        "hours",
        "days",
        "months",
        "years"
      ],
      "type": "string"
    },
    "time-unit": {
      "enum": [
        "second",
        "minute",
        "hour",
        "day",
        "month",
        "year"
      ],
      "type": "string"
    },
    "total-redemptions": {
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "properties": {
            "quantity": {
              "description": "Total redemptions quantity",
              "type": "integer"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "description": "total-redemptions restrictions",
      "x-discriminator-value": "total-redemptions",
      "x-ms-discriminator-value": "total-redemptions"
    },
    "two-columns": {
      "allOf": [
        {
          "$ref": "#/definitions/TimelineTable"
        },
        {
          "properties": {
            "data": {
              "description": "Table data. Each array element represents a table row",
              "items": {
                "example": {
                  "attribute": "Who",
                  "value": "John Doe"
                },
                "properties": {
                  "attribute": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "x-discriminator-value": "two-columns",
      "x-ms-discriminator-value": "two-columns"
    },
    "vegaaH": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "credentials": {
              "properties": {
                "password": {
                  "description": "vegaaH Gateway password",
                  "format": "password",
                  "type": "string"
                },
                "terminalId": {
                  "description": "vegaaH Gateway terminal ID",
                  "type": "string"
                }
              },
              "required": [
                "terminalId",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "credentials"
          ],
          "type": "object"
        }
      ],
      "description": "vegaaH Gateway config",
      "x-discriminator-value": "vegaaH",
      "x-ms-discriminator-value": "vegaaH"
    },
    "volume": {
      "allOf": [
        {
          "$ref": "#/definitions/PlanPriceFormula"
        },
        {
          "properties": {
            "brackets": {
              "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"volume\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $8. For 2 to 5 apples, the price is $4 per apple.\n",
              "items": {
                "properties": {
                  "maxQuantity": {
                    "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                    "example": 1,
                    "type": "integer"
                  },
                  "price": {
                    "description": "If the price is 0, it's free.",
                    "example": 99.95,
                    "format": "double",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "minItems": 1,
              "type": "array"
            }
          },
          "required": [
            "brackets"
          ],
          "type": "object"
        }
      ],
      "x-discriminator-value": "volume",
      "x-ms-discriminator-value": "volume"
    }
  },
  "securityDefinitions": {
    "JWT": {
      "description": "You can create a JSON Web Token (JWT) via our [JWT Session resource](hhttps://user-api-docs.rebilly.com/#operation/PostSigninRequest).\nUsage format: `Bearer <JWT>`\n",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "PublishableApiKey": {
      "description": "Only for the Tokens resource.\nYou can create a Publishable API Key via our [API Keys resource](https://user-api-docs.rebilly.com/#tag/API-Keys), by specifying the type as `publishable`.\n",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "SecretApiKey": {
      "description": "When you sign up for an account, you are given your first secret API key.\nTo do so please [follow this link.](https://app.rebilly.com/signup)\nAlso you can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). All API keys can be restricted to a\nsmall set of permissions (restricted API keys).\n",
      "in": "header",
      "name": "REB-APIKEY",
      "type": "apiKey"
    }
  },
  "security": [
    {
      "SecretApiKey": []
    },
    {
      "JWT": []
    }
  ],
  "tags": [
    {
      "description": "3D Secure is a way to authenticate and protect transactions.  Typically,\nit's only possible to protect the initial transaction in a subscription\nwith 3D Secure.\n",
      "name": "3D Secure"
    },
    {
      "description": "Bank Accounts are a type of payment instrument used to collect\nACH (echeck) payments, similar to how a payment\ncard would be used to for a credit card payment.\n",
      "name": "Bank Accounts"
    },
    {
      "description": "Your blacklists contains values of customerIds, email addresses,\nipAddresses, bank identification numbers, countries or payment cards that\nyou do NOT want to do business with. They are a good tool for managing\nrisk. A blacklist entry that expires after a period of time we call a\ngreylist.\n",
      "name": "Blacklists"
    },
    {
      "description": "Contacts are Customer's address book.\nAll contact information used in Invoices, Subscriptions, Transactions, etc is enlisted here. Hovewer, changing a Contact won't change corresponding contact information in related resources\n",
      "name": "Contacts"
    },
    {
      "description": "Coupons allows to apply different types of discounts to Invoices, Subscriptions and Plans. Redeemed Coupons will be applied only to Invoices with the same currency.\n",
      "name": "Coupons"
    },
    {
      "description": "Customers are your customers, sometimes known as accounts, clients,\nmembers, patrons, or players in other systems.\n",
      "name": "Customers"
    },
    {
      "description": "The customers timeline keeps an audit trail of changes and activity for each customer.\n",
      "name": "Customers Timeline"
    },
    {
      "description": "Customer KYC files uploaded on behalf of a customer, tagged with a document type and submitted for validation.\n",
      "name": "KYC Documents"
    },
    {
      "description": "Create authentication credentials, login, logout, and verify your customers.\n",
      "name": "Customer Authentication"
    },
    {
      "description": "Create additional custom fields for particular resources.  You may name,\ndescribe, and determine the type of the schema.\n",
      "name": "Custom Fields"
    },
    {
      "description": "Handle disputes (chargebacks and retrievals).\n",
      "name": "Disputes"
    },
    {
      "description": "A File is an entity that can store a physical file and some metadata. It also provides an easy access to\nits size, mime-type, user-defined tags and description thus allowing easy sorting and searching among stored\nfiles.\nThere are several methods of file uploading available: multipart/form-data encoded form, RAW POST (by sending\nfile contents as POST body), fetching from URL (by providing the file URL via 'url' param)\nAttachment is an entity that is used to link a File to one or multiple objects like Customer, Dispute, Payment,\nTransaction, Subscription, Plan, Product, Invoice, Note. That allows to quickly find and use files related to\nthose specific entities.\n",
      "name": "Files"
    },
    {
      "description": "Invoices leave a record for both you and your customer of the products sold.\n",
      "name": "Invoices"
    },
    {
      "description": "Payments endpoints are deprecated.  Please use the transactions resource\ninstead.  A payment is a transaction with type `sale`.  The transactions\nresource is more robust and has withstood the test of time by enterprises.\n\nCollect money from your customers with payments.  You can schedule a payment\nto occur in the future.  You can assign a dunning schedule to a payment to collect\nin the case of a decline.\n\nSome payments may be, what we term, offsite payments.  These types of payments\nrequire user interaction.  For example, an initial PayPal purchase, a 3D Secure\npurchase, China Union Pay, and more require the customer's interaction to\ncomplete the payment.  We call these a \"offsite\" payment flow.\n",
      "name": "Payments"
    },
    {
      "description": "Payment cards are a type of payment instrument used for credit and debit card\nsales.  Rebilly securely vaults the full payment card number, and can pass it\nonward securely to any gateway account to transact business.\n",
      "name": "Payment Cards"
    },
    {
      "description": "PayPal Accounts are used for paying with PayPal.  We can generate a BAID (billing\nagreement id) which will allow for recurring billing.\n",
      "name": "PayPal Accounts"
    },
    {
      "description": "Payment tokens are used to reduce the scope of PCI DSS compliance.  A payment\ntoken can be made using a different authentication scheme (refer to the public key\nauthentication scheme in the Authentication section), which allows you to\ncreate a payment token directly from the browser, bypassing the need to send\nsensitive cardholder info to your servers.  We recommend using this with our\nRebilly.js library, which helps you wire a form into this API resource and create\npayment tokens.\n",
      "name": "Payment Tokens"
    },
    {
      "description": "Plans are a template for making a subscription.  For example, you may have a plan\nthat has a 30-day free trial followed by a recurring charge of $19.95 per month\nuntil canceled.  The combination of the plan and a request to make a subscription\nwill apply those instructions to create the invoices according to the plan's\nschedule.\n",
      "name": "Plans"
    },
    {
      "description": "A product describes what you sell (goods or services).\nA product determines how what you sell appears on invoices and receipts.\nThe pricing for products is set in Plans.  One product can have many\nplans.\n",
      "name": "Products"
    },
    {
      "description": "The Rebilly Reporting API is currently experimental. You may see\nthe [Reports API Documentation here](https://reports-api-docs.rebilly.com).\n",
      "name": "Reports"
    },
    {
      "description": "Search data including customers, invoices, orders, transactions and more.\n",
      "name": "Search"
    },
    {
      "description": "A shipping zone contains regions and countries that you ship to. Each shipping zone has its own shipping rates.\n",
      "name": "Shipping Zones"
    },
    {
      "description": "A subscription applies a plan's template to create invoices for a customer at the\nappropriate scheduled intervals.  A subscription may also determine if the payment\nis collected automatically (with autopay set true).\n",
      "name": "Subscriptions"
    },
    {
      "description": "You can map a product to a tax category.  The tax category is used by\ntax providers to calculate taxes for invoices.\n",
      "name": "Taxes"
    },
    {
      "description": "Get and refund transactions.\n",
      "name": "Transactions"
    },
    {
      "description": "The Rebilly User API is primarily for our GUI apps.  You may see\nthe [User API Documentation here](https://user-api-docs.rebilly.com).\nA User represents a person who can login to Rebilly, and take actions subject to\ntheir granted permissions.  It has resources less commonly integrated by\n3rd parties.\n",
      "name": "Users"
    }
  ],
  "x-components": {
    "parameters": {
      "collectionExpand": {
        "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nIt accepts a comma-separated list of objects to expand.\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
        "in": "query",
        "name": "expand",
        "type": "string"
      },
      "collectionFields": {
        "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned.",
        "in": "query",
        "name": "fields",
        "type": "string"
      },
      "collectionFilter": {
        "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](#section/Using-filter) for more options and examples about this format.\n",
        "in": "query",
        "name": "filter",
        "type": "string"
      },
      "collectionLimit": {
        "description": "The collection items limit",
        "in": "query",
        "maximum": 1000,
        "minimum": 0,
        "name": "limit",
        "type": "integer"
      },
      "collectionOffset": {
        "description": "The collection items offset",
        "in": "query",
        "minimum": 0,
        "name": "offset",
        "type": "integer"
      },
      "collectionQuery": {
        "description": "The partial search of the text fields.",
        "in": "query",
        "name": "q",
        "type": "string"
      },
      "collectionSort": {
        "collectionFormat": "multi",
        "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
        "in": "query",
        "items": {
          "type": "string"
        },
        "name": "sort",
        "type": "array"
      },
      "customFieldResource": {
        "description": "The resource type string",
        "enum": [
          "customers",
          "payment-cards",
          "subscriptions",
          "transactions",
          "websites",
          "contacts",
          "products",
          "plans"
        ],
        "in": "path",
        "name": "resource",
        "required": true,
        "type": "string"
      },
      "customerId": {
        "description": "The customer identifier string",
        "in": "path",
        "maxLength": 50,
        "name": "customerId",
        "pattern": "^[@~\\-\\.\\w]+$",
        "required": true,
        "type": "string"
      },
      "organizationId": {
        "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)",
        "in": "header",
        "maxLength": 50,
        "name": "Organization-Id",
        "required": false,
        "type": "string"
      },
      "resourceId": {
        "description": "The resource identifier string",
        "in": "path",
        "maxLength": 50,
        "name": "id",
        "pattern": "^[@~\\-\\.\\w]+$",
        "required": true,
        "type": "string"
      },
      "subscriptionExpand": {
        "description": "Expand a response to get a full related object included inside\nof the `_embedded` path in the response.\n\nTo expand multiple objects, it accepts a comma-separated\nlist of objects (example: `expand=recentInvoice,initialInvoice`).\n\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.\n",
        "in": "query",
        "name": "expand",
        "type": "string"
      },
      "tag": {
        "description": "The tag name",
        "in": "path",
        "name": "tag",
        "pattern": "^[@~\\-\\.\\w\\s]+$",
        "required": true,
        "type": "string"
      }
    },
    "responses": {
      "AccessForbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "description": "Access forbidden, invalid API-KEY was used"
      },
      "Conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "description": "Conflict"
      },
      "Customer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "description": "Customer",
        "headers": {
          "Rate-Limit-Limit": {
            "$ref": "#/x-components/headers/Rate-Limit-Limit"
          },
          "Rate-Limit-Remaining": {
            "$ref": "#/x-components/headers/Rate-Limit-Remaining"
          },
          "Rate-Limit-Reset": {
            "$ref": "#/x-components/headers/Rate-Limit-Reset"
          }
        }
      },
      "Found": {
        "description": "Resource was moved",
        "headers": {
          "Location": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "InvalidDataError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "description": "Invalid data was sent"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "description": "Resource was not found"
      }
    },
    "headers": {
      "Pagination-Limit": {
        "description": "Items per page limit",
        "schema": {
          "type": "integer"
        }
      },
      "Pagination-Offset": {
        "description": "Pagination offset",
        "schema": {
          "type": "integer"
        }
      },
      "Pagination-Total": {
        "description": "Total items count",
        "schema": {
          "type": "integer"
        }
      },
      "Rate-Limit-Limit": {
        "description": "The number of allowed requests in the current period",
        "schema": {
          "type": "integer"
        }
      },
      "Rate-Limit-Remaining": {
        "description": "The number of remaining requests in the current period",
        "schema": {
          "type": "integer"
        }
      },
      "Rate-Limit-Reset": {
        "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "Attachment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        },
        "description": "Attachment resource",
        "required": true
      },
      "Blacklist": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          }
        },
        "description": "Blacklist resource",
        "required": true
      },
      "Contact": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        },
        "description": "Contact resource",
        "required": true
      },
      "Coupon": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          }
        },
        "description": "Coupon resource",
        "required": true
      },
      "Credential": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        },
        "description": "Credential resource",
        "required": true
      },
      "Customer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "description": "Customer resource",
        "required": true
      },
      "Dispute": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          }
        },
        "description": "Dispute resource",
        "required": true
      },
      "Invoice": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        },
        "description": "Invoice resource",
        "required": true
      },
      "Payment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        },
        "description": "Payment resource",
        "required": true
      },
      "Plan": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          }
        },
        "description": "Plan resource",
        "required": true
      },
      "Product": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        },
        "description": "Product resource",
        "required": true
      },
      "Subscription": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "description": "Subscription resource",
        "required": true
      },
      "SubscriptionCancellation": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/SubscriptionCancellation"
            }
          }
        },
        "description": "Cancellation resource",
        "required": true
      },
      "Tag": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "description": "Tag resource",
        "required": true
      },
      "TransactionRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/TransactionRequest"
            }
          }
        },
        "description": "Payment resource",
        "required": true
      }
    }
  },
  "x-tagGroups": [
    {
      "tags": [
        "Customers",
        "Customer Authentication",
        "Custom Fields",
        "Contacts",
        "Files",
        "KYC Documents",
        "Tags",
        "Customers Timeline"
      ],
      "name": "Customers"
    },
    {
      "tags": [
        "Bank Accounts",
        "Payment Cards",
        "Payment Tokens",
        "PayPal Accounts",
        "Payment Instrument Validation"
      ],
      "name": "Payment Instruments"
    },
    {
      "tags": [
        "3D Secure",
        "Payments",
        "Transactions",
        "Disputes",
        "Blacklists"
      ],
      "name": "Payments"
    },
    {
      "tags": [
        "Coupons",
        "Invoices",
        "Plans",
        "Products",
        "Shipping Zones",
        "Subscriptions",
        "Taxes"
      ],
      "name": "Invoices & Subscriptions"
    },
    {
      "tags": [
        "Reports",
        "Search",
        "Users"
      ],
      "name": "Misc"
    }
  ]
}