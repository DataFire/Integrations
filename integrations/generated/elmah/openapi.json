{
  "swagger": "2.0",
  "info": {
    "contact": {
      "x-twitter": "elmah_io"
    },
    "description": "This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>",
    "title": "elmah.io API",
    "version": "v3",
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_elmah_io_profile_image.png"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://api.elmah.io/swagger/docs/v3",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "elmah.io",
    "x-datafire": {
      "name": "elmah",
      "type": "openapi"
    }
  },
  "paths": {
    "/v3/deployments": {
      "get": {
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request for deployments successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Deployment"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the deployment API without deployment tracking enabled or trial expired."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Deployments"
        ],
        "operationId": "Deployments_GetAll",
        "summary": "Fetch a list of deployments."
      },
      "post": {
        "consumes": [
          "application/json",
          "application/json-patch+json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "The deployment object to create.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateDeployment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Deployment was created.",
            "schema": {
              "$ref": "#/definitions/CreateDeploymentResult"
            }
          },
          "400": {
            "description": "Model not valid."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the deployment API without deployment tracking enabled or trial expired."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Deployments"
        ],
        "operationId": "Deployments_Create",
        "summary": "Create a new deployment."
      }
    },
    "/v3/deployments/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the deployment to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deployment was deleted."
          },
          "400": {
            "description": "Id not specified."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the deployment API without deployment tracking enabled or trial expired."
          },
          "404": {
            "description": "Deployment with specified id not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Deployments"
        ],
        "description": "This endpoint doesn't clear the version number of messages already annotated with this deployment version.",
        "operationId": "Deployments_Delete",
        "summary": "Delete a deployment by its ID."
      },
      "get": {
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "The ID of the deployment to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request for deployment successful.",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "description": "Id not specified."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Deployment with specified id not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Deployments"
        ],
        "operationId": "Deployments_Get",
        "summary": "Fetch a deployment by its ID."
      }
    },
    "/v3/heartbeats/{logId}/{id}": {
      "post": {
        "consumes": [
          "application/json",
          "application/json-patch+json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The ID of the heartbeat check.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the log containing the heartbeat check.",
            "in": "path",
            "name": "logId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The details of the heartbeat.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateHeartbeat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Heartbeat was created."
          },
          "400": {
            "description": "Model not valid."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the heartbeats API without heartbeats enabled or trial expired."
          },
          "404": {
            "description": "The specified log or heartbeat was not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Heartbeats"
        ],
        "operationId": "Heartbeats_Create",
        "summary": "Create a new heartbeat."
      }
    },
    "/v3/logs": {
      "get": {
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request for logs successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Log"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Logs"
        ],
        "operationId": "Logs_GetAll",
        "summary": "Fetch a list of logs."
      },
      "post": {
        "consumes": [
          "application/json",
          "application/json-patch+json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "The log object to create.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateLog"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Log where successfully created.",
            "schema": {
              "$ref": "#/definitions/CreateLogResult"
            }
          },
          "400": {
            "description": "Something wrong with the parameters."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Logs"
        ],
        "operationId": "Logs_Create",
        "summary": "Create a new log."
      }
    },
    "/v3/logs/{id}": {
      "get": {
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "The ID of the log to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request for log successful.",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "404": {
            "description": "Log not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Logs"
        ],
        "operationId": "Logs_Get",
        "summary": "Fetch a log by its ID."
      }
    },
    "/v3/messages/{logId}": {
      "delete": {
        "consumes": [
          "application/json",
          "application/json-patch+json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The ID of the log containing the message.",
            "in": "path",
            "name": "logId",
            "required": true,
            "type": "string"
          },
          {
            "description": "A search object containing query, time filters etc.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Search"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages where deleted."
          },
          "400": {
            "description": "Something wrong with the query parameters."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "404": {
            "description": "Log not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Messages"
        ],
        "operationId": "Messages_DeleteAll",
        "summary": "Deletes a list of messages by logid and query."
      },
      "get": {
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "The ID of the log containing the messages.",
            "in": "path",
            "name": "logId",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "The page number of the result.",
            "format": "int32",
            "in": "query",
            "name": "pageIndex",
            "type": "integer"
          },
          {
            "default": 15,
            "description": "The number of messages to load (max 100) or 15 if not set.",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "A full-text or Lucene query to limit the messages by.",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "A start date and time to search from (not included).",
            "format": "date-time",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "An end date and time to search to (not included).",
            "format": "date-time",
            "in": "query",
            "name": "to",
            "type": "string"
          },
          {
            "default": false,
            "description": "Include headers like server variables and cookies in the result (slower).",
            "in": "query",
            "name": "includeHeaders",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Log found and may contain messages.",
            "schema": {
              "$ref": "#/definitions/MessagesResult"
            }
          },
          "400": {
            "description": "Something wrong with the query parameters."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Messages"
        ],
        "operationId": "Messages_GetAll",
        "summary": "Fetch messages from a log."
      },
      "post": {
        "consumes": [
          "application/json",
          "application/json-patch+json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "The ID of the log which should contain the new message.",
            "in": "path",
            "name": "logId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The message object to create.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message was not created."
          },
          "201": {
            "description": "Message was successfully created.",
            "schema": {
              "$ref": "#/definitions/CreateMessageResult"
            }
          },
          "400": {
            "description": "Something wrong with the query parameters."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "404": {
            "description": "Log not found."
          },
          "413": {
            "description": "Message too large. Messages must not exceed 256 kb."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Messages"
        ],
        "operationId": "Messages_Create",
        "summary": "Create a new message."
      }
    },
    "/v3/messages/{logId}/_bulk": {
      "post": {
        "consumes": [
          "application/json",
          "application/json-patch+json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "The ID of the log which should contain the new messages.",
            "in": "path",
            "name": "logId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The messages to create.",
            "in": "body",
            "name": "body",
            "schema": {
              "description": "The messages to create.",
              "items": {
                "$ref": "#/definitions/CreateMessage"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Zero or more messages where successfully created. Check the response body for details.",
            "schema": {
              "items": {
                "$ref": "#/definitions/CreateBulkMessageResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Something wrong with the query parameters."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "404": {
            "description": "Log not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Messages"
        ],
        "operationId": "Messages_CreateBulk",
        "summary": "Create one or more new messages."
      }
    },
    "/v3/messages/{logId}/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The ID of the message to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the log containing the message.",
            "in": "path",
            "name": "logId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Message where deleted."
          },
          "400": {
            "description": "Something wrong with the query parameters."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "404": {
            "description": "Log or message not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Messages"
        ],
        "operationId": "Messages_Delete",
        "summary": "Delete a message by its ID."
      },
      "get": {
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "The ID of the message to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the log containing the message.",
            "in": "path",
            "name": "logId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Message found.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "description": "Something wrong with the query parameters."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "404": {
            "description": "Message not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Messages"
        ],
        "operationId": "Messages_Get",
        "summary": "Fetch a message by its ID."
      }
    },
    "/v3/messages/{logId}/{id}/_fix": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the message to fix.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the log containing the message.",
            "in": "path",
            "name": "logId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "If set to true, all instances of the log message are set to fixed.",
            "in": "query",
            "name": "markAllAsFixed",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Message was fixed."
          },
          "400": {
            "description": "Something wrong with the query parameters."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "404": {
            "description": "Message not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Messages"
        ],
        "operationId": "Messages_Fix",
        "summary": "Fix a message by its ID."
      }
    },
    "/v3/messages/{logId}/{id}/_hide": {
      "post": {
        "parameters": [
          {
            "description": "The ID of the message to hide.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the log containing the message.",
            "in": "path",
            "name": "logId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Message was hidden."
          },
          "400": {
            "description": "Something wrong with the query parameters."
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the logs API but the trial expired."
          },
          "404": {
            "description": "Message not found."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "Messages"
        ],
        "operationId": "Messages_Hide",
        "summary": "Hide a message by its ID."
      }
    },
    "/v3/uptimechecks": {
      "get": {
        "produces": [
          "application/json",
          "text/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request for uptime checks successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/UptimeCheck"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "API key not valid or no access to resource."
          },
          "402": {
            "description": "Tried to call the uptime checks API but the trial expired."
          },
          "429": {
            "description": "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "tags": [
          "UptimeChecks"
        ],
        "operationId": "UptimeChecks_GetAll",
        "summary": "Fetch a list of uptime checks. Currently in closed beta. Get in contact to get access to this endpoint."
      }
    }
  },
  "definitions": {
    "CreateBulkMessageResult": {
      "properties": {
        "location": {
          "description": "The location of the created message if StatusCode equals Created.",
          "format": "uri",
          "type": "string"
        },
        "statusCode": {
          "description": "Status code of the individual messages as if it were being created through the non-bulk endpoint.\r\nIf a message was succesfully created, the status code will be 201 and location will contain an URL.\r\nIf a message was ignored, the status code will be 200 and the location will be empty.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CreateDeployment": {
      "properties": {
        "created": {
          "description": "When was this deployment created in UTC. Defaults to current time if not specified.",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "Optional description of this deployment. Can be markdown or clear text.",
          "type": "string"
        },
        "logId": {
          "description": "As default, deployments are attached all logs of the organization. If you want a deployment to\r\nattach to a single log only, set this to the ID of that log.",
          "type": "string"
        },
        "userEmail": {
          "description": "The email of the person responsible for creating this deployment. This can be the email taken from\r\nyour deployment server (like VSTS or Octopus).",
          "format": "email",
          "type": "string"
        },
        "userName": {
          "description": "The name of the person responsible for creating this deployment. This can be the name taken from\r\nyour deployment server (like VSTS or Octopus).",
          "type": "string"
        },
        "version": {
          "description": "The version number of this deployment. The value of version can be a SemVer compliant string or any other\r\nsyntax that you are using as your version numbering scheme.",
          "type": "string"
        }
      },
      "required": [
        "version"
      ],
      "type": "object"
    },
    "CreateDeploymentResult": {
      "properties": {
        "location": {
          "description": "The location of the created deployment.",
          "format": "uri",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateHeartbeat": {
      "properties": {
        "application": {
          "description": "Optional string to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log.\r\nIf not set, the application name \"Heartbeats\" will be set on all log messages generated from this heartbeat.",
          "type": "string"
        },
        "reason": {
          "description": "If result is \"Degraded\" or \"Unhealthy\" you can use this property to specify why.",
          "type": "string"
        },
        "result": {
          "description": "The result of this heartbeat. Can be \"Healthy, \"Degraded\", or \"Unhealthy\". Defaults to \"Healthy\"",
          "type": "string"
        },
        "version": {
          "description": "Optional string to identify which version of your application logged this message. If not specified, any errors, warnings, or information messages will get\r\nthe newest version number created through deployment tracking as with normal log messages.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateLog": {
      "properties": {
        "name": {
          "description": "Name of the new log.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CreateLogResult": {
      "properties": {
        "location": {
          "description": "The location of the created log.",
          "format": "uri",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateMessage": {
      "properties": {
        "application": {
          "description": "Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log",
          "type": "string"
        },
        "cookies": {
          "description": "A key/value pair of cookies. This property only makes sense for logging messages related to web requests.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "data": {
          "description": "A key/value pair of user-defined fields and their values. When logging an exception, the Data dictionary of\r\nthe exception is copied to this property. You can add additional key/value pairs, by modifying the Data\r\ndictionary on the exception or by supplying additional key/values to this API.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "dateTime": {
          "description": "The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC.",
          "format": "date-time",
          "type": "string"
        },
        "detail": {
          "description": "A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there.",
          "type": "string"
        },
        "form": {
          "description": "A key/value pair of form fields and their values. This property makes sense if logging message related to users inputting data in a form.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "hostname": {
          "description": "The hostname of the server logging the message.",
          "type": "string"
        },
        "method": {
          "description": "If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables.",
          "type": "string"
        },
        "queryString": {
          "description": "A key/value pair of query string parameters. This property makes sense if logging message related to a HTTP request.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "serverVariables": {
          "description": "A key/value pair of server values. Server variables are typically related to handling requests in a webserver but could be used for other types of information as well.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "severity": {
          "description": "An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal",
          "type": "string"
        },
        "source": {
          "description": "The source of the code logging the message. This could be the assembly name.",
          "type": "string"
        },
        "statusCode": {
          "description": "If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors,\r\nbut could be used for logging successful status codes as well.",
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "description": "The textual title or headline of the message to log.",
          "type": "string"
        },
        "titleTemplate": {
          "description": "The title template of the message to log. This property can be used from logging frameworks that supports\r\nstructured logging like: \"{user} says {quote}\". In the example, titleTemplate will be this string and title\r\nwill be \"Gilfoyle says It's not magic. It's talent and sweat\".",
          "type": "string"
        },
        "type": {
          "description": "The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain.",
          "type": "string"
        },
        "url": {
          "description": "If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables.",
          "type": "string"
        },
        "user": {
          "description": "An identification of the user triggering this message. You can put the users email address or your user key into this property.",
          "type": "string"
        },
        "version": {
          "description": "Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other\r\nsyntax that you are using as your version numbering scheme.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateMessageResult": {
      "properties": {
        "location": {
          "description": "The location of the created message.",
          "format": "uri",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Deployment": {
      "properties": {
        "created": {
          "description": "When was this deployment created.",
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "description": "The elmah.io id of the user creating this deployment. Since deployments are created on a subscription,\r\nthe CreatedBy will contain the id of the user with the subscription.",
          "type": "string"
        },
        "description": {
          "description": "Sescription of this deployment in markdown or clear text.",
          "type": "string"
        },
        "id": {
          "description": "The ID of this deployment.",
          "type": "string"
        },
        "logId": {
          "description": "If the deployment is attached a single log, this property is set to the ID of that log.\r\nIf null, the deployment is attached all logs on the organization.",
          "type": "string"
        },
        "userEmail": {
          "description": "The email of the person responsible for creating this deployment.",
          "type": "string"
        },
        "userName": {
          "description": "The name of the person responsible for creating this deployment.",
          "type": "string"
        },
        "version": {
          "description": "The version number of this deployment. The value of version can be a SemVer compliant string or any other\r\nsyntax that you are using as your version numbering scheme.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Item": {
      "description": "Represents a key value pair.",
      "properties": {
        "key": {
          "description": "The key of the item.",
          "type": "string"
        },
        "value": {
          "description": "The value of the item.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Log": {
      "properties": {
        "color": {
          "description": "Color of the log. The color will always be one of the following (green being the default):\r\ngreen, lightgreen, lime, yellow, orange, deeporange, red, pink, purple, deeppurple, blue, lightblue",
          "type": "string"
        },
        "environmentName": {
          "description": "Environment name this log is in or \"Other\" if not in an environment.\r\n\"Other\" is chosen over null to mimic the experience in the elmah.io UI.",
          "type": "string"
        },
        "id": {
          "description": "ID of the log.",
          "type": "string"
        },
        "name": {
          "description": "Name of the log.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Message": {
      "properties": {
        "application": {
          "description": "Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log",
          "type": "string"
        },
        "cookies": {
          "description": "A key/value pair of cookies. This property only makes sense for logging messages related to web requests.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "data": {
          "description": "A key/value pair of user-defined fields and their values. When logging an exception, the Data dictionary of\r\nthe exception is copied to this property. You can add additional key/value pairs, by modifying the Data\r\ndictionary on the exception or by supplying additional key/values to this API.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "dateTime": {
          "description": "The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC.",
          "format": "date-time",
          "type": "string"
        },
        "detail": {
          "description": "A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there.",
          "type": "string"
        },
        "form": {
          "description": "A key/value pair of form fields and their values. This property makes sense if logging message related to users inputting data in a form.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "hostname": {
          "description": "The hostname of the server logging the message.",
          "type": "string"
        },
        "id": {
          "description": "The ID of this message.",
          "type": "string"
        },
        "method": {
          "description": "If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables.",
          "type": "string"
        },
        "queryString": {
          "description": "A key/value pair of query string parameters. This property makes sense if logging message related to a HTTP request.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "serverVariables": {
          "description": "A key/value pair of server values. Server variables are typically related to handling requests in a webserver but could be used for other types of information as well.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "severity": {
          "description": "An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal",
          "type": "string"
        },
        "source": {
          "description": "The source of the code logging the message. This could be the assembly name.",
          "type": "string"
        },
        "statusCode": {
          "description": "If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors,\r\nbut could be used for logging successful status codes as well.",
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "description": "The textual title or headline of the message to log.",
          "type": "string"
        },
        "titleTemplate": {
          "description": "The title template of the message to log. This property can be used from logging frameworks that supports\r\nstructured logging like: \"{user} says {quote}\". In the example, titleTemplate will be this string and title\r\nwill be \"Gilfoyle says It's not magic. It's talent and sweat\".",
          "type": "string"
        },
        "type": {
          "description": "The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain.",
          "type": "string"
        },
        "url": {
          "description": "If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables.",
          "type": "string"
        },
        "user": {
          "description": "An identification of the user triggering this message. You can put the users email address or your user key into this property.",
          "type": "string"
        },
        "version": {
          "description": "Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other\r\nsyntax that you are using as your version numbering scheme.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MessageOverview": {
      "properties": {
        "application": {
          "description": "Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log",
          "type": "string"
        },
        "cookies": {
          "description": "A key/value pair of cookies. This property only makes sense for logging messages related to web requests.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "data": {
          "description": "A key/value pair of user-defined fields and their values. When logging an exception, the Data dictionary of\r\nthe exception is copied to this property. You can add additional key/value pairs, by modifying the Data\r\ndictionary on the exception or by supplying additional key/values to this API.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "dateTime": {
          "description": "The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC.",
          "format": "date-time",
          "type": "string"
        },
        "detail": {
          "description": "A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there.",
          "type": "string"
        },
        "form": {
          "description": "A key/value pair of form fields and their values. This property makes sense if logging message related to users inputting data in a form.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "hostname": {
          "description": "The hostname of the server logging the message.",
          "type": "string"
        },
        "id": {
          "description": "The ID of this message.",
          "type": "string"
        },
        "method": {
          "description": "If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables.",
          "type": "string"
        },
        "queryString": {
          "description": "A key/value pair of query string parameters. This property makes sense if logging message related to a HTTP request.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "serverVariables": {
          "description": "A key/value pair of server values. Server variables are typically related to handling requests in a webserver but could be used for other types of information as well.",
          "items": {
            "$ref": "#/definitions/Item"
          },
          "type": "array"
        },
        "severity": {
          "description": "An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal",
          "type": "string"
        },
        "source": {
          "description": "The source of the code logging the message. This could be the assembly name.",
          "type": "string"
        },
        "statusCode": {
          "description": "If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors,\r\nbut could be used for logging successful status codes as well.",
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "description": "The textual title or headline of the message to log.",
          "type": "string"
        },
        "titleTemplate": {
          "description": "The title template of the message to log. This property can be used from logging frameworks that supports\r\nstructured logging like: \"{user} says {quote}\". In the example, titleTemplate will be this string and title\r\nwill be \"Gilfoyle says It's not magic. It's talent and sweat\".",
          "type": "string"
        },
        "type": {
          "description": "The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain.",
          "type": "string"
        },
        "url": {
          "description": "If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables.",
          "type": "string"
        },
        "user": {
          "description": "An identification of the user triggering this message. You can put the users email address or your user key into this property.",
          "type": "string"
        },
        "version": {
          "description": "Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other\r\nsyntax that you are using as your version numbering scheme.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MessagesResult": {
      "properties": {
        "messages": {
          "description": "Log messages.",
          "items": {
            "$ref": "#/definitions/MessageOverview"
          },
          "type": "array"
        },
        "total": {
          "description": "The total number of log messages found.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Search": {
      "properties": {
        "from": {
          "description": "Search from this date.",
          "format": "date-time",
          "type": "string"
        },
        "query": {
          "description": "Lucene query.",
          "type": "string"
        },
        "to": {
          "description": "Search to this date.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UptimeCheck": {
      "properties": {
        "id": {
          "description": "ID of the uptime check.",
          "type": "string"
        },
        "name": {
          "description": "Name of the uptime check.",
          "type": "string"
        },
        "status": {
          "description": "Current status of the uptime check.",
          "type": "string"
        },
        "url": {
          "description": "Url of the uptime check.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "api_key": {
      "description": "All requests on the elmah.io API needs to include an API key. The API key can be provided as part of the query string or as a request header. The name of the API key needs to be <code>api_key</code>.<br/><br/>Additional resources:<br/><ul><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>",
      "in": "query",
      "name": "api_key",
      "type": "apiKey"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "x-components": {}
}