{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Lambda</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Lambda API Reference</i>. The AWS Lambda Developer Guide provides additional information. For the service overview, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/welcome.html\">What is AWS Lambda</a>, and for information about how the service works, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html\">AWS Lambda: How it Works</a> in the <b>AWS Lambda Developer Guide</b>.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Lambda",
    "version": "2015-03-31",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lambda-2015-03-31.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "lambda",
    "x-datafire": {
      "name": "amazonaws_lambda",
      "type": "openapi"
    }
  },
  "host": "lambda.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/2014-11-13/functions/{FunctionName}/invoke-async/": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 170,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "InvokeArgs": {
                  "description": "The JSON that you want to provide to your Lambda function as input.",
                  "type": "string"
                }
              },
              "required": [
                "InvokeArgs"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InvokeAsyncResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidRequestContentException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestContentException"
            }
          },
          "483": {
            "description": "InvalidRuntimeException",
            "schema": {
              "$ref": "#/definitions/InvalidRuntimeException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "deprecated": true,
        "description": "<important> <p>For asynchronous function invocation, use <a>Invoke</a>.</p> </important> <p>Invokes a function asynchronously.</p>",
        "operationId": "InvokeAsync"
      }
    },
    "/2015-03-31/event-source-mappings/": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - The ARN of the cluster.</p> </li> </ul>",
            "in": "query",
            "name": "EventSourceArn",
            "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
            "required": false,
            "type": "string"
          },
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>",
            "in": "query",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": false,
            "type": "string"
          },
          {
            "description": "A pagination token returned by a previous call.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of event source mappings to return.",
            "in": "query",
            "maximum": 10000,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListEventSourceMappingsResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Lists event source mappings. Specify an <code>EventSourceArn</code> to only show event source mappings for a single event source.",
        "operationId": "ListEventSourceMappings"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "BatchSize": {
                  "description": "<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Self-Managed Apache Kafka</b> - Default 100. Max 10,000.</p> </li> </ul>",
                  "maximum": 10000,
                  "minimum": 1,
                  "type": "integer"
                },
                "BisectBatchOnFunctionError": {
                  "description": "(Streams) If the function returns an error, split the batch in two and retry.",
                  "type": "boolean"
                },
                "DestinationConfig": {
                  "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
                  "properties": {
                    "OnFailure": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OnFailure"
                        },
                        {
                          "description": "The destination configuration for failed invocations."
                        }
                      ]
                    },
                    "OnSuccess": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OnSuccess"
                        },
                        {
                          "description": "The destination configuration for successful invocations."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Enabled": {
                  "description": "If true, the event source mapping is active. Set to false to pause polling and invocation.",
                  "type": "boolean"
                },
                "EventSourceArn": {
                  "description": "<p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - The ARN of the cluster.</p> </li> </ul>",
                  "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
                  "type": "string"
                },
                "FunctionName": {
                  "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>",
                  "maxLength": 140,
                  "minLength": 1,
                  "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
                  "type": "string"
                },
                "FunctionResponseTypes": {
                  "description": "(Streams) A list of current response type enums applied to the event source mapping.",
                  "items": {
                    "$ref": "#/definitions/FunctionResponseType"
                  },
                  "maxItems": 1,
                  "minItems": 1,
                  "type": "array"
                },
                "MaximumBatchingWindowInSeconds": {
                  "description": "(Streams and SQS standard queues) The maximum amount of time to gather records before invoking the function, in seconds.",
                  "maximum": 300,
                  "minimum": 0,
                  "type": "integer"
                },
                "MaximumRecordAgeInSeconds": {
                  "description": "(Streams) Discard records older than the specified age. The default value is infinite (-1).",
                  "maximum": 604800,
                  "minimum": -1,
                  "type": "integer"
                },
                "MaximumRetryAttempts": {
                  "description": "(Streams) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records will be retried until the record expires.",
                  "maximum": 10000,
                  "minimum": -1,
                  "type": "integer"
                },
                "ParallelizationFactor": {
                  "description": "(Streams) The number of batches to process from each shard concurrently.",
                  "maximum": 10,
                  "minimum": 1,
                  "type": "integer"
                },
                "Queues": {
                  "description": " (MQ) The name of the Amazon MQ broker destination queue to consume. ",
                  "items": {
                    "$ref": "#/definitions/Queue"
                  },
                  "maxItems": 1,
                  "minItems": 1,
                  "type": "array"
                },
                "SelfManagedEventSource": {
                  "description": "The Self-Managed Apache Kafka cluster for your event source.",
                  "properties": {
                    "Endpoints": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Endpoints"
                        },
                        {
                          "description": "The list of bootstrap servers for your Kafka brokers in the following format: <code>\"KAFKA_BOOTSTRAP_SERVERS\": [\"abc.xyz.com:xxxx\",\"abc2.xyz.com:xxxx\"]</code>."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "SourceAccessConfigurations": {
                  "description": "An array of the authentication protocol, or the VPC components to secure your event source.",
                  "items": {
                    "$ref": "#/definitions/SourceAccessConfiguration"
                  },
                  "maxItems": 22,
                  "minItems": 1,
                  "type": "array"
                },
                "StartingPosition": {
                  "description": "The position in a stream from which to start reading. Required for Amazon Kinesis, Amazon DynamoDB, and Amazon MSK Streams sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams.",
                  "enum": [
                    "TRIM_HORIZON",
                    "LATEST",
                    "AT_TIMESTAMP"
                  ],
                  "type": "string"
                },
                "StartingPositionTimestamp": {
                  "description": "With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start reading.",
                  "format": "date-time",
                  "type": "string"
                },
                "Topics": {
                  "description": "The name of the Kafka topic.",
                  "items": {
                    "$ref": "#/definitions/Topic"
                  },
                  "maxItems": 1,
                  "minItems": 1,
                  "type": "array"
                },
                "TumblingWindowInSeconds": {
                  "description": "(Streams) The duration of a processing window in seconds. The range is between 1 second up to 15 minutes.",
                  "maximum": 900,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "FunctionName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventSourceMappingConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "<p>Creates a mapping between an event source and an AWS Lambda function. Lambda reads items from the event source and triggers the function.</p> <p>For details about each event source type, see the following topics.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html\">Using AWS Lambda with Amazon DynamoDB</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html\">Using AWS Lambda with Amazon Kinesis</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html\">Using AWS Lambda with Amazon SQS</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html\">Using AWS Lambda with Amazon MQ</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html\">Using AWS Lambda with Amazon MSK</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html\">Using AWS Lambda with Self-Managed Apache Kafka</a> </p> </li> </ul> <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p> <ul> <li> <p> <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p> </li> <li> <p> <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p> </li> <li> <p> <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p> </li> <li> <p> <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p> </li> <li> <p> <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p> </li> </ul>",
        "operationId": "CreateEventSourceMapping"
      }
    },
    "/2015-03-31/event-source-mappings/{UUID}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The identifier of the event source mapping.",
            "in": "path",
            "name": "UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventSourceMappingConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Deletes an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html\">event source mapping</a>. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.</p> <p>When you delete an event source mapping, it enters a <code>Deleting</code> state and might not be completely deleted for several seconds.</p>",
        "operationId": "DeleteEventSourceMapping"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The identifier of the event source mapping.",
            "in": "path",
            "name": "UUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventSourceMappingConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Returns details about an event source mapping. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.",
        "operationId": "GetEventSourceMapping"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The identifier of the event source mapping.",
            "in": "path",
            "name": "UUID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "BatchSize": {
                  "description": "<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Self-Managed Apache Kafka</b> - Default 100. Max 10,000.</p> </li> </ul>",
                  "maximum": 10000,
                  "minimum": 1,
                  "type": "integer"
                },
                "BisectBatchOnFunctionError": {
                  "description": "(Streams) If the function returns an error, split the batch in two and retry.",
                  "type": "boolean"
                },
                "DestinationConfig": {
                  "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
                  "properties": {
                    "OnFailure": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OnFailure"
                        },
                        {
                          "description": "The destination configuration for failed invocations."
                        }
                      ]
                    },
                    "OnSuccess": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OnSuccess"
                        },
                        {
                          "description": "The destination configuration for successful invocations."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Enabled": {
                  "description": "If true, the event source mapping is active. Set to false to pause polling and invocation.",
                  "type": "boolean"
                },
                "FunctionName": {
                  "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>",
                  "maxLength": 140,
                  "minLength": 1,
                  "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
                  "type": "string"
                },
                "FunctionResponseTypes": {
                  "description": "(Streams) A list of current response type enums applied to the event source mapping.",
                  "items": {
                    "$ref": "#/definitions/FunctionResponseType"
                  },
                  "maxItems": 1,
                  "minItems": 1,
                  "type": "array"
                },
                "MaximumBatchingWindowInSeconds": {
                  "description": "(Streams and SQS standard queues) The maximum amount of time to gather records before invoking the function, in seconds.",
                  "maximum": 300,
                  "minimum": 0,
                  "type": "integer"
                },
                "MaximumRecordAgeInSeconds": {
                  "description": "(Streams) Discard records older than the specified age. The default value is infinite (-1).",
                  "maximum": 604800,
                  "minimum": -1,
                  "type": "integer"
                },
                "MaximumRetryAttempts": {
                  "description": "(Streams) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records will be retried until the record expires.",
                  "maximum": 10000,
                  "minimum": -1,
                  "type": "integer"
                },
                "ParallelizationFactor": {
                  "description": "(Streams) The number of batches to process from each shard concurrently.",
                  "maximum": 10,
                  "minimum": 1,
                  "type": "integer"
                },
                "SourceAccessConfigurations": {
                  "description": "An array of the authentication protocol, or the VPC components to secure your event source.",
                  "items": {
                    "$ref": "#/definitions/SourceAccessConfiguration"
                  },
                  "maxItems": 22,
                  "minItems": 1,
                  "type": "array"
                },
                "TumblingWindowInSeconds": {
                  "description": "(Streams) The duration of a processing window in seconds. The range is between 1 second up to 15 minutes.",
                  "maximum": 900,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EventSourceMappingConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "485": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Updates an event source mapping. You can change the function that AWS Lambda invokes, or pause invocation and resume later from the same location.</p> <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p> <ul> <li> <p> <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p> </li> <li> <p> <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p> </li> <li> <p> <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p> </li> <li> <p> <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p> </li> <li> <p> <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p> </li> </ul>",
        "operationId": "UpdateEventSourceMapping"
      }
    },
    "/2015-03-31/functions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Code": {
                  "description": "The code for the Lambda function. You can specify either an object in Amazon S3, upload a .zip file archive deployment package directly, or specify the URI of a container image.",
                  "properties": {
                    "ImageUri": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/String"
                        },
                        {
                          "description": "URI of a container image in the Amazon ECR registry."
                        }
                      ]
                    },
                    "S3Bucket": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/S3Bucket"
                        },
                        {
                          "description": "An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account."
                        }
                      ]
                    },
                    "S3Key": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/S3Key"
                        },
                        {
                          "description": "The Amazon S3 key of the deployment package."
                        }
                      ]
                    },
                    "S3ObjectVersion": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/S3ObjectVersion"
                        },
                        {
                          "description": "For versioned objects, the version of the deployment package object to use."
                        }
                      ]
                    },
                    "ZipFile": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Blob"
                        },
                        {
                          "description": "The base64-encoded contents of the deployment package. AWS SDK and AWS CLI clients handle the encoding for you."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "CodeSigningConfigArn": {
                  "description": "To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.",
                  "maxLength": 200,
                  "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
                  "type": "string"
                },
                "DeadLetterConfig": {
                  "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">dead-letter queue</a> for failed asynchronous invocations.",
                  "properties": {
                    "TargetArn": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/ResourceArn"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Description": {
                  "description": "A description of the function.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                },
                "Environment": {
                  "description": "A function's environment variable settings.",
                  "properties": {
                    "Variables": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/EnvironmentVariables"
                        },
                        {
                          "description": "Environment variable key-value pairs."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "FileSystemConfigs": {
                  "description": "Connection settings for an Amazon EFS file system.",
                  "items": {
                    "$ref": "#/definitions/FileSystemConfig"
                  },
                  "maxItems": 1,
                  "type": "array"
                },
                "FunctionName": {
                  "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
                  "maxLength": 140,
                  "minLength": 1,
                  "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
                  "type": "string"
                },
                "Handler": {
                  "description": "The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html\">Programming Model</a>.",
                  "maxLength": 128,
                  "pattern": "[^\\s]+",
                  "type": "string"
                },
                "ImageConfig": {
                  "description": "Configuration values that override the container image Dockerfile settings. See <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/images-parms.html\">Container settings</a>. ",
                  "properties": {
                    "Command": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/StringList"
                        },
                        {
                          "description": "Specifies parameters that you want to pass in with ENTRYPOINT. "
                        }
                      ]
                    },
                    "EntryPoint": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/StringList"
                        },
                        {
                          "description": "Specifies the entry point to their application, which is typically the location of the runtime executable."
                        }
                      ]
                    },
                    "WorkingDirectory": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/WorkingDirectory"
                        },
                        {
                          "description": "Specifies the working directory."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "KMSKeyArn": {
                  "description": "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.",
                  "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()",
                  "type": "string"
                },
                "Layers": {
                  "description": "A list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version.",
                  "items": {
                    "$ref": "#/definitions/LayerVersionArn"
                  },
                  "type": "array"
                },
                "MemorySize": {
                  "description": "The amount of memory available to the function at runtime. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB.",
                  "maximum": 10240,
                  "minimum": 128,
                  "type": "integer"
                },
                "PackageType": {
                  "description": "The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for ZIP archive.",
                  "enum": [
                    "Zip",
                    "Image"
                  ],
                  "type": "string"
                },
                "Publish": {
                  "description": "Set to true to publish the first version of the function during creation.",
                  "type": "boolean"
                },
                "Role": {
                  "description": "The Amazon Resource Name (ARN) of the function's execution role.",
                  "pattern": "arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
                  "type": "string"
                },
                "Runtime": {
                  "description": "The identifier of the function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime</a>.",
                  "enum": [
                    "nodejs",
                    "nodejs4.3",
                    "nodejs6.10",
                    "nodejs8.10",
                    "nodejs10.x",
                    "nodejs12.x",
                    "java8",
                    "java8.al2",
                    "java11",
                    "python2.7",
                    "python3.6",
                    "python3.7",
                    "python3.8",
                    "dotnetcore1.0",
                    "dotnetcore2.0",
                    "dotnetcore2.1",
                    "dotnetcore3.1",
                    "nodejs4.3-edge",
                    "go1.x",
                    "ruby2.5",
                    "ruby2.7",
                    "provided",
                    "provided.al2"
                  ],
                  "type": "string"
                },
                "Tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/TagValue"
                  },
                  "description": "A list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a> to apply to the function.",
                  "type": "object"
                },
                "Timeout": {
                  "description": "The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.",
                  "minimum": 1,
                  "type": "integer"
                },
                "TracingConfig": {
                  "description": "The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.",
                  "properties": {
                    "Mode": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TracingMode"
                        },
                        {
                          "description": "The tracing mode."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "VpcConfig": {
                  "description": "The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\">VPC Settings</a>.",
                  "properties": {
                    "SecurityGroupIds": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SecurityGroupIds"
                        },
                        {
                          "description": "A list of VPC security groups IDs."
                        }
                      ]
                    },
                    "SubnetIds": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SubnetIds"
                        },
                        {
                          "description": "A list of VPC subnet IDs."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "FunctionName",
                "Role",
                "Code"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "CodeStorageExceededException",
            "schema": {
              "$ref": "#/definitions/CodeStorageExceededException"
            }
          },
          "486": {
            "description": "CodeVerificationFailedException",
            "schema": {
              "$ref": "#/definitions/CodeVerificationFailedException"
            }
          },
          "487": {
            "description": "InvalidCodeSignatureException",
            "schema": {
              "$ref": "#/definitions/InvalidCodeSignatureException"
            }
          },
          "488": {
            "description": "CodeSigningConfigNotFoundException",
            "schema": {
              "$ref": "#/definitions/CodeSigningConfigNotFoundException"
            }
          }
        },
        "description": "<p>Creates a Lambda function. To create a function, you need a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html\">deployment package</a> and an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role\">execution role</a>. The deployment package is a .zip file archive or container image that contains your function code. The execution role grants the function permission to use AWS services, such as Amazon CloudWatch Logs for log streaming and AWS X-Ray for request tracing.</p> <p>When you create a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or modify the function. The <code>State</code>, <code>StateReason</code>, and <code>StateReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a> indicate when the function is ready to invoke. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html\">Function States</a>.</p> <p>A function has an unpublished version, and can have published versions and aliases. The unpublished version changes when you update your function's code and configuration. A published version is a snapshot of your function code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be changed to map to a different version. Use the <code>Publish</code> parameter to create version <code>1</code> of your function from its initial configuration.</p> <p>The other parameters let you configure version-specific and function-level settings. You can modify version-specific settings later with <a>UpdateFunctionConfiguration</a>. Function-level settings apply to both the unpublished and published versions of the function, and include tags (<a>TagResource</a>) and per-function concurrency limits (<a>PutFunctionConcurrency</a>).</p> <p>You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function, specify the ARN of a code-signing configuration. When a user attempts to deploy a code package with <a>UpdateFunctionCode</a>, Lambda checks that the code package has a valid signature from a trusted publisher. The code-signing configuration includes set set of signing profiles, which define the trusted publishers for this function.</p> <p>If another account or an AWS service invokes your function, use <a>AddPermission</a> to grant permission by creating a resource-based IAM policy. You can grant permissions at the function level, on a version, or on an alias.</p> <p>To invoke your function directly, use <a>Invoke</a>. To invoke your function in response to events in other AWS services, create an event source mapping (<a>CreateEventSourceMapping</a>), or configure a function trigger in the other service. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html\">Invoking Functions</a>.</p>",
        "operationId": "CreateFunction"
      }
    },
    "/2015-03-31/functions/": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "For Lambda@Edge functions, the AWS Region of the master function. For example, <code>us-east-1</code> filters the list of functions to only include Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set <code>FunctionVersion</code> to <code>ALL</code>.",
            "in": "query",
            "name": "MasterRegion",
            "pattern": "ALL|[a-z]{2}(-gov)?-[a-z]+-\\d{1}",
            "required": false,
            "type": "string"
          },
          {
            "description": "Set to <code>ALL</code> to include entries for all published versions of each function.",
            "enum": [
              "ALL"
            ],
            "in": "query",
            "name": "FunctionVersion",
            "required": false,
            "type": "string"
          },
          {
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of functions to return.",
            "in": "query",
            "maximum": 10000,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFunctionsResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        },
        "description": "<p>Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50 functions per call.</p> <p>Set <code>FunctionVersion</code> to <code>ALL</code> to include all published versions of each function in addition to the unpublished version. To get more information about a function or version, use <a>GetFunction</a>.</p>",
        "operationId": "ListFunctions"
      }
    },
    "/2015-03-31/functions/{FunctionName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function or version.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:1</code> (with version).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify a version to delete. You can't delete a version that's referenced by an alias.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "description": "<p>Deletes a Lambda function. To delete a specific function version, use the <code>Qualifier</code> parameter. Otherwise, all versions and aliases are deleted.</p> <p>To delete Lambda event source mappings that invoke a function, use <a>DeleteEventSourceMapping</a>. For AWS services and resources that invoke your function directly, delete the trigger in the service where you originally configured it.</p>",
        "operationId": "DeleteFunction"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 170,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify a version or alias to get details about a published version of the function.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetFunctionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        },
        "description": "Returns information about the function or function version, with a link to download the deployment package that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are returned.",
        "operationId": "GetFunction"
      }
    },
    "/2015-03-31/functions/{FunctionName}/aliases": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify a function version to only list aliases that invoke that version.",
            "in": "query",
            "maxLength": 1024,
            "minLength": 1,
            "name": "FunctionVersion",
            "pattern": "(\\$LATEST|[0-9]+)",
            "required": false,
            "type": "string"
          },
          {
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit the number of aliases returned.",
            "in": "query",
            "maximum": 10000,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAliasesResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Returns a list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">aliases</a> for a Lambda function.",
        "operationId": "ListAliases"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Description": {
                  "description": "A description of the alias.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                },
                "FunctionVersion": {
                  "description": "The function version that the alias invokes.",
                  "maxLength": 1024,
                  "minLength": 1,
                  "pattern": "(\\$LATEST|[0-9]+)",
                  "type": "string"
                },
                "Name": {
                  "description": "The name of the alias.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
                  "type": "string"
                },
                "RoutingConfig": {
                  "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">traffic-shifting</a> configuration of a Lambda function alias.",
                  "properties": {
                    "AdditionalVersionWeights": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AdditionalVersionWeights"
                        },
                        {
                          "description": "The second version, and the percentage of traffic that's routed to it."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "Name",
                "FunctionVersion"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AliasConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "<p>Creates an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a> for a Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a different version.</p> <p>You can also map an alias to split invocation requests between two versions. Use the <code>RoutingConfig</code> parameter to specify a second version and the percentage of invocation requests that it receives.</p>",
        "operationId": "CreateAlias"
      }
    },
    "/2015-03-31/functions/{FunctionName}/aliases/{Name}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the alias.",
            "in": "path",
            "maxLength": 128,
            "minLength": 1,
            "name": "Name",
            "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Deletes a Lambda function <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a>.",
        "operationId": "DeleteAlias"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the alias.",
            "in": "path",
            "maxLength": 128,
            "minLength": 1,
            "name": "Name",
            "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AliasConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Returns details about a Lambda function <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a>.",
        "operationId": "GetAlias"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the alias.",
            "in": "path",
            "maxLength": 128,
            "minLength": 1,
            "name": "Name",
            "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Description": {
                  "description": "A description of the alias.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                },
                "FunctionVersion": {
                  "description": "The function version that the alias invokes.",
                  "maxLength": 1024,
                  "minLength": 1,
                  "pattern": "(\\$LATEST|[0-9]+)",
                  "type": "string"
                },
                "RevisionId": {
                  "description": "Only update the alias if the revision ID matches the ID that's specified. Use this option to avoid modifying an alias that has changed since you last read it.",
                  "type": "string"
                },
                "RoutingConfig": {
                  "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">traffic-shifting</a> configuration of a Lambda function alias.",
                  "properties": {
                    "AdditionalVersionWeights": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AdditionalVersionWeights"
                        },
                        {
                          "description": "The second version, and the percentage of traffic that's routed to it."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AliasConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          },
          "485": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "description": "Updates the configuration of a Lambda function <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a>.",
        "operationId": "UpdateAlias"
      }
    },
    "/2015-03-31/functions/{FunctionName}/code": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DryRun": {
                  "description": "Set to true to validate the request parameters and access permissions without modifying the function code.",
                  "type": "boolean"
                },
                "ImageUri": {
                  "description": "URI of a container image in the Amazon ECR registry.",
                  "type": "string"
                },
                "Publish": {
                  "description": "Set to true to publish a new version of the function after updating the code. This has the same effect as calling <a>PublishVersion</a> separately.",
                  "type": "boolean"
                },
                "RevisionId": {
                  "description": "Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.",
                  "type": "string"
                },
                "S3Bucket": {
                  "description": "An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.",
                  "maxLength": 63,
                  "minLength": 3,
                  "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
                  "type": "string"
                },
                "S3Key": {
                  "description": "The Amazon S3 key of the deployment package.",
                  "maxLength": 1024,
                  "minLength": 1,
                  "type": "string"
                },
                "S3ObjectVersion": {
                  "description": "For versioned objects, the version of the deployment package object to use.",
                  "maxLength": 1024,
                  "minLength": 1,
                  "type": "string"
                },
                "ZipFile": {
                  "description": "The base64-encoded contents of the deployment package. AWS SDK and AWS CLI clients handle the encoding for you.",
                  "format": "password",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "CodeStorageExceededException",
            "schema": {
              "$ref": "#/definitions/CodeStorageExceededException"
            }
          },
          "485": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          },
          "486": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "487": {
            "description": "CodeVerificationFailedException",
            "schema": {
              "$ref": "#/definitions/CodeVerificationFailedException"
            }
          },
          "488": {
            "description": "InvalidCodeSignatureException",
            "schema": {
              "$ref": "#/definitions/InvalidCodeSignatureException"
            }
          },
          "489": {
            "description": "CodeSigningConfigNotFoundException",
            "schema": {
              "$ref": "#/definitions/CodeSigningConfigNotFoundException"
            }
          }
        },
        "description": "<p>Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed by a trusted publisher. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html\">Configuring code signing</a>.</p> <p>The function's code is locked when you publish a version. You can't modify the code of a published version, only the unpublished version.</p> <note> <p>For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if you update the image tag to a new image, Lambda does not automatically update the function.</p> </note>",
        "operationId": "UpdateFunctionCode"
      }
    },
    "/2015-03-31/functions/{FunctionName}/configuration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 170,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify a version or alias to get details about a published version of the function.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        },
        "description": "<p>Returns the version-specific settings of a Lambda function or version. The output includes only options that can vary between versions of a function. To modify these settings, use <a>UpdateFunctionConfiguration</a>.</p> <p>To get all of a function's details, including function-level settings, use <a>GetFunction</a>.</p>",
        "operationId": "GetFunctionConfiguration"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DeadLetterConfig": {
                  "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">dead-letter queue</a> for failed asynchronous invocations.",
                  "properties": {
                    "TargetArn": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/ResourceArn"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Description": {
                  "description": "A description of the function.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                },
                "Environment": {
                  "description": "A function's environment variable settings.",
                  "properties": {
                    "Variables": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/EnvironmentVariables"
                        },
                        {
                          "description": "Environment variable key-value pairs."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "FileSystemConfigs": {
                  "description": "Connection settings for an Amazon EFS file system.",
                  "items": {
                    "$ref": "#/definitions/FileSystemConfig"
                  },
                  "maxItems": 1,
                  "type": "array"
                },
                "Handler": {
                  "description": "The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html\">Programming Model</a>.",
                  "maxLength": 128,
                  "pattern": "[^\\s]+",
                  "type": "string"
                },
                "ImageConfig": {
                  "description": "Configuration values that override the container image Dockerfile settings. See <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/images-parms.html\">Container settings</a>. ",
                  "properties": {
                    "Command": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/StringList"
                        },
                        {
                          "description": "Specifies parameters that you want to pass in with ENTRYPOINT. "
                        }
                      ]
                    },
                    "EntryPoint": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/StringList"
                        },
                        {
                          "description": "Specifies the entry point to their application, which is typically the location of the runtime executable."
                        }
                      ]
                    },
                    "WorkingDirectory": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/WorkingDirectory"
                        },
                        {
                          "description": "Specifies the working directory."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "KMSKeyArn": {
                  "description": "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.",
                  "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()",
                  "type": "string"
                },
                "Layers": {
                  "description": "A list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version.",
                  "items": {
                    "$ref": "#/definitions/LayerVersionArn"
                  },
                  "type": "array"
                },
                "MemorySize": {
                  "description": "The amount of memory available to the function at runtime. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB.",
                  "maximum": 10240,
                  "minimum": 128,
                  "type": "integer"
                },
                "RevisionId": {
                  "description": "Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.",
                  "type": "string"
                },
                "Role": {
                  "description": "The Amazon Resource Name (ARN) of the function's execution role.",
                  "pattern": "arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
                  "type": "string"
                },
                "Runtime": {
                  "description": "The identifier of the function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime</a>.",
                  "enum": [
                    "nodejs",
                    "nodejs4.3",
                    "nodejs6.10",
                    "nodejs8.10",
                    "nodejs10.x",
                    "nodejs12.x",
                    "java8",
                    "java8.al2",
                    "java11",
                    "python2.7",
                    "python3.6",
                    "python3.7",
                    "python3.8",
                    "dotnetcore1.0",
                    "dotnetcore2.0",
                    "dotnetcore2.1",
                    "dotnetcore3.1",
                    "nodejs4.3-edge",
                    "go1.x",
                    "ruby2.5",
                    "ruby2.7",
                    "provided",
                    "provided.al2"
                  ],
                  "type": "string"
                },
                "Timeout": {
                  "description": "The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.",
                  "minimum": 1,
                  "type": "integer"
                },
                "TracingConfig": {
                  "description": "The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.",
                  "properties": {
                    "Mode": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/TracingMode"
                        },
                        {
                          "description": "The tracing mode."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "VpcConfig": {
                  "description": "The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\">VPC Settings</a>.",
                  "properties": {
                    "SecurityGroupIds": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SecurityGroupIds"
                        },
                        {
                          "description": "A list of VPC security groups IDs."
                        }
                      ]
                    },
                    "SubnetIds": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SubnetIds"
                        },
                        {
                          "description": "A list of VPC subnet IDs."
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "485": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          },
          "486": {
            "description": "CodeVerificationFailedException",
            "schema": {
              "$ref": "#/definitions/CodeVerificationFailedException"
            }
          },
          "487": {
            "description": "InvalidCodeSignatureException",
            "schema": {
              "$ref": "#/definitions/InvalidCodeSignatureException"
            }
          },
          "488": {
            "description": "CodeSigningConfigNotFoundException",
            "schema": {
              "$ref": "#/definitions/CodeSigningConfigNotFoundException"
            }
          }
        },
        "description": "<p>Modify the version-specific settings of a Lambda function.</p> <p>When you update a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute. During this time, you can't modify the function, but you can still invoke it. The <code>LastUpdateStatus</code>, <code>LastUpdateStatusReason</code>, and <code>LastUpdateStatusReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a> indicate when the update is complete and the function is processing events with the new configuration. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html\">Function States</a>.</p> <p>These settings can vary between versions of a function and are locked when you publish a version. You can't modify the configuration of a published version, only the unpublished version.</p> <p>To configure function concurrency, use <a>PutFunctionConcurrency</a>. To grant invoke permissions to an account or AWS service, use <a>AddPermission</a>.</p>",
        "operationId": "UpdateFunctionConfiguration"
      }
    },
    "/2015-03-31/functions/{FunctionName}/invocations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 170,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p>Choose from the following options.</p> <ul> <li> <p> <code>RequestResponse</code> (default) - Invoke the function synchronously. Keep the connection open until the function returns a response or times out. The API response includes the function response and additional data.</p> </li> <li> <p> <code>Event</code> - Invoke the function asynchronously. Send events that fail multiple times to the function's dead-letter queue (if it's configured). The API response only includes a status code.</p> </li> <li> <p> <code>DryRun</code> - Validate parameter values and verify that the user or role has permission to invoke the function.</p> </li> </ul>",
            "enum": [
              "Event",
              "RequestResponse",
              "DryRun"
            ],
            "in": "header",
            "name": "X-Amz-Invocation-Type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Set to <code>Tail</code> to include the execution log in the response.",
            "enum": [
              "None",
              "Tail"
            ],
            "in": "header",
            "name": "X-Amz-Log-Type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Up to 3583 bytes of base64-encoded data about the invoking client to pass to the function in the context object.",
            "in": "header",
            "name": "X-Amz-Client-Context",
            "required": false,
            "type": "string"
          },
          {
            "description": "Specify a version or alias to invoke a published version of the function.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Payload": {
                  "description": "The JSON that you want to provide to your Lambda function as input.",
                  "format": "password",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InvocationResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidRequestContentException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestContentException"
            }
          },
          "483": {
            "description": "RequestTooLargeException",
            "schema": {
              "$ref": "#/definitions/RequestTooLargeException"
            }
          },
          "484": {
            "description": "UnsupportedMediaTypeException",
            "schema": {
              "$ref": "#/definitions/UnsupportedMediaTypeException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "486": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "487": {
            "description": "EC2UnexpectedException",
            "schema": {
              "$ref": "#/definitions/EC2UnexpectedException"
            }
          },
          "488": {
            "description": "SubnetIPAddressLimitReachedException",
            "schema": {
              "$ref": "#/definitions/SubnetIPAddressLimitReachedException"
            }
          },
          "489": {
            "description": "ENILimitReachedException",
            "schema": {
              "$ref": "#/definitions/ENILimitReachedException"
            }
          },
          "490": {
            "description": "EFSMountConnectivityException",
            "schema": {
              "$ref": "#/definitions/EFSMountConnectivityException"
            }
          },
          "491": {
            "description": "EFSMountFailureException",
            "schema": {
              "$ref": "#/definitions/EFSMountFailureException"
            }
          },
          "492": {
            "description": "EFSMountTimeoutException",
            "schema": {
              "$ref": "#/definitions/EFSMountTimeoutException"
            }
          },
          "493": {
            "description": "EFSIOException",
            "schema": {
              "$ref": "#/definitions/EFSIOException"
            }
          },
          "494": {
            "description": "EC2ThrottledException",
            "schema": {
              "$ref": "#/definitions/EC2ThrottledException"
            }
          },
          "495": {
            "description": "EC2AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EC2AccessDeniedException"
            }
          },
          "496": {
            "description": "InvalidSubnetIDException",
            "schema": {
              "$ref": "#/definitions/InvalidSubnetIDException"
            }
          },
          "497": {
            "description": "InvalidSecurityGroupIDException",
            "schema": {
              "$ref": "#/definitions/InvalidSecurityGroupIDException"
            }
          },
          "498": {
            "description": "InvalidZipFileException",
            "schema": {
              "$ref": "#/definitions/InvalidZipFileException"
            }
          },
          "499": {
            "description": "KMSDisabledException",
            "schema": {
              "$ref": "#/definitions/KMSDisabledException"
            }
          },
          "500": {
            "description": "KMSInvalidStateException",
            "schema": {
              "$ref": "#/definitions/KMSInvalidStateException"
            }
          },
          "501": {
            "description": "KMSAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/KMSAccessDeniedException"
            }
          },
          "502": {
            "description": "KMSNotFoundException",
            "schema": {
              "$ref": "#/definitions/KMSNotFoundException"
            }
          },
          "503": {
            "description": "InvalidRuntimeException",
            "schema": {
              "$ref": "#/definitions/InvalidRuntimeException"
            }
          },
          "504": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "505": {
            "description": "ResourceNotReadyException",
            "schema": {
              "$ref": "#/definitions/ResourceNotReadyException"
            }
          }
        },
        "description": "<p>Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or asynchronously. To invoke a function asynchronously, set <code>InvocationType</code> to <code>Event</code>.</p> <p>For <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-sync.html\">synchronous invocation</a>, details about the function response, including errors, are included in the response body and headers. For either invocation type, you can find more information in the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html\">execution log</a> and <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html\">trace</a>.</p> <p>When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type, client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an error, Lambda executes the function up to two more times. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html\">Retry Behavior</a>.</p> <p>For <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html\">asynchronous invocation</a>, Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple times, even if no error occurs. To retain events that were not processed, configure your function with a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">dead-letter queue</a>.</p> <p>The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that prevent your function from executing, such as permissions errors, <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/limits.html\">limit errors</a>, or issues with your function's code and configuration. For example, Lambda returns <code>TooManyRequestsException</code> if executing the function would cause you to exceed a concurrency limit at either the account level (<code>ConcurrentInvocationLimitExceeded</code>) or function level (<code>ReservedFunctionConcurrentInvocationLimitExceeded</code>).</p> <p>For functions with a long timeout, your client might be disconnected during synchronous invocation while it waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long connections with timeout or keep-alive settings.</p> <p>This operation requires permission for the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html\">lambda:InvokeFunction</a> action.</p>",
        "operationId": "Invoke"
      }
    },
    "/2015-03-31/functions/{FunctionName}/policy": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 170,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify a version or alias to get the policy for that resource.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPolicyResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        },
        "description": "Returns the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html\">resource-based IAM policy</a> for a function, version, or alias.",
        "operationId": "GetPolicy"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify a version or alias to add permissions to a published version of the function.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Action": {
                  "description": "The action that the principal can use on the function. For example, <code>lambda:InvokeFunction</code> or <code>lambda:GetFunction</code>.",
                  "pattern": "(lambda:[*]|lambda:[a-zA-Z]+|[*])",
                  "type": "string"
                },
                "EventSourceToken": {
                  "description": "For Alexa Smart Home functions, a token that must be supplied by the invoker.",
                  "maxLength": 256,
                  "minLength": 0,
                  "pattern": "[a-zA-Z0-9._\\-]+",
                  "type": "string"
                },
                "Principal": {
                  "description": "The AWS service or account that invokes the function. If you specify a service, use <code>SourceArn</code> or <code>SourceAccount</code> to limit who can invoke the function through that service.",
                  "pattern": ".*",
                  "type": "string"
                },
                "RevisionId": {
                  "description": "Only update the policy if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.",
                  "type": "string"
                },
                "SourceAccount": {
                  "description": "For Amazon S3, the ID of the account that owns the resource. Use this together with <code>SourceArn</code> to ensure that the resource is owned by the specified account. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.",
                  "pattern": "\\d{12}",
                  "type": "string"
                },
                "SourceArn": {
                  "description": "For AWS services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.",
                  "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
                  "type": "string"
                },
                "StatementId": {
                  "description": "A statement identifier that differentiates the statement from others in the same policy.",
                  "maxLength": 100,
                  "minLength": 1,
                  "pattern": "([a-zA-Z0-9-_]+)",
                  "type": "string"
                }
              },
              "required": [
                "StatementId",
                "Action",
                "Principal"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddPermissionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "484": {
            "description": "PolicyLengthExceededException",
            "schema": {
              "$ref": "#/definitions/PolicyLengthExceededException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "486": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        },
        "description": "<p>Grants an AWS service or another account permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.</p> <p>To grant permission to another account, specify the account ID as the <code>Principal</code>. For AWS services, the principal is a domain-style identifier defined by the service, like <code>s3.amazonaws.com</code> or <code>sns.amazonaws.com</code>. For AWS services, you can also specify the ARN of the associated resource as the <code>SourceArn</code>. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function.</p> <p>This action adds a statement to a resource-based permissions policy for the function. For more information about function policies, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html\">Lambda Function Policies</a>. </p>",
        "operationId": "AddPermission"
      }
    },
    "/2015-03-31/functions/{FunctionName}/policy/{StatementId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Statement ID of the permission to remove.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "StatementId",
            "pattern": "([a-zA-Z0-9-_.]+)",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify a version or alias to remove permissions from a published version of the function.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only update the policy if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.",
            "in": "query",
            "name": "RevisionId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        },
        "description": "Revokes function-use permission from an AWS service or another account. You can get the ID of the statement from the output of <a>GetPolicy</a>.",
        "operationId": "RemovePermission"
      }
    },
    "/2015-03-31/functions/{FunctionName}/versions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 170,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of versions to return.",
            "in": "query",
            "maximum": 10000,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListVersionsByFunctionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Returns a list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">versions</a>, with the version-specific configuration of each. Lambda returns up to 50 versions per call.",
        "operationId": "ListVersionsByFunction"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "CodeSha256": {
                  "description": "Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a version if the function code has changed since you last updated it. You can get the hash for the version that you uploaded from the output of <a>UpdateFunctionCode</a>.",
                  "type": "string"
                },
                "Description": {
                  "description": "A description for the version to override the description in the function configuration.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                },
                "RevisionId": {
                  "description": "Only update the function if the revision ID matches the ID that's specified. Use this option to avoid publishing a version if the function configuration has changed since you last updated it.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionConfiguration"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "CodeStorageExceededException",
            "schema": {
              "$ref": "#/definitions/CodeStorageExceededException"
            }
          },
          "485": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          },
          "486": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "description": "<p>Creates a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">version</a> from the current code and configuration of a function. Use versions to create a snapshot of your function code and configuration that doesn't change.</p> <p>AWS Lambda doesn't publish a version if the function's configuration and code haven't changed since the last version. Use <a>UpdateFunctionCode</a> or <a>UpdateFunctionConfiguration</a> to update the function before publishing a version.</p> <p>Clients can invoke versions directly or with an alias. To create an alias, use <a>CreateAlias</a>.</p>",
        "operationId": "PublishVersion"
      }
    },
    "/2016-08-19/account-settings/": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAccountSettingsResponse"
            }
          },
          "480": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "481": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Retrieves details about your account's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/limits.html\">limits</a> and usage in an AWS Region.",
        "operationId": "GetAccountSettings"
      }
    },
    "/2017-03-31/tags/{ARN}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The function's Amazon Resource Name (ARN).",
            "in": "path",
            "name": "ARN",
            "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Returns a function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a>. You can also view tags with <a>GetFunction</a>.",
        "operationId": "ListTags"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The function's Amazon Resource Name (ARN).",
            "in": "path",
            "name": "ARN",
            "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/TagValue"
                  },
                  "description": "A list of tags to apply to the function.",
                  "type": "object"
                }
              },
              "required": [
                "Tags"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "description": "Adds <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a> to a function.",
        "operationId": "TagResource"
      }
    },
    "/2017-03-31/tags/{ARN}#tagKeys": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The function's Amazon Resource Name (ARN).",
            "in": "path",
            "name": "ARN",
            "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "A list of tag keys to remove from the function.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/TagKey"
            },
            "name": "tagKeys",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "description": "Removes <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a> from a function.",
        "operationId": "UntagResource"
      }
    },
    "/2017-10-31/functions/{FunctionName}/concurrency": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "description": "Removes a concurrent execution limit from a function.",
        "operationId": "DeleteFunctionConcurrency"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "ReservedConcurrentExecutions": {
                  "description": "The number of simultaneous executions to reserve for the function.",
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "ReservedConcurrentExecutions"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Concurrency"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "description": "<p>Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency level.</p> <p>Concurrency settings apply to the function as a whole, including all published versions and the unpublished version. Reserving concurrency both ensures that your function has capacity to process the specified number of events simultaneously, and prevents it from scaling beyond that level. Use <a>GetFunction</a> to see the current setting for a function.</p> <p>Use <a>GetAccountSettings</a> to see your Regional concurrency limit. You can reserve concurrency for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for functions that aren't configured with a per-function limit. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">Managing Concurrency</a>.</p>",
        "operationId": "PutFunctionConcurrency"
      }
    },
    "/2018-10-31/layers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A runtime identifier. For example, <code>go1.x</code>.",
            "enum": [
              "nodejs",
              "nodejs4.3",
              "nodejs6.10",
              "nodejs8.10",
              "nodejs10.x",
              "nodejs12.x",
              "java8",
              "java8.al2",
              "java11",
              "python2.7",
              "python3.6",
              "python3.7",
              "python3.8",
              "dotnetcore1.0",
              "dotnetcore2.0",
              "dotnetcore2.1",
              "dotnetcore3.1",
              "nodejs4.3-edge",
              "go1.x",
              "ruby2.5",
              "ruby2.7",
              "provided",
              "provided.al2"
            ],
            "in": "query",
            "name": "CompatibleRuntime",
            "required": false,
            "type": "string"
          },
          {
            "description": "A pagination token returned by a previous call.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of layers to return.",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLayersResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Lists <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layers</a> and shows information about the latest version of each. Specify a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime identifier</a> to list only layers that indicate that they're compatible with that runtime.",
        "operationId": "ListLayers"
      }
    },
    "/2018-10-31/layers#find=LayerVersion&Arn": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ARN of the layer version.",
            "in": "query",
            "maxLength": 140,
            "minLength": 1,
            "name": "Arn",
            "pattern": "arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "LayerVersion"
            ],
            "in": "query",
            "name": "find",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLayerVersionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Returns information about a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>, with a link to download the layer archive that's valid for 10 minutes.",
        "operationId": "GetLayerVersionByArn"
      }
    },
    "/2018-10-31/layers/{LayerName}/versions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A runtime identifier. For example, <code>go1.x</code>.",
            "enum": [
              "nodejs",
              "nodejs4.3",
              "nodejs6.10",
              "nodejs8.10",
              "nodejs10.x",
              "nodejs12.x",
              "java8",
              "java8.al2",
              "java11",
              "python2.7",
              "python3.6",
              "python3.7",
              "python3.8",
              "dotnetcore1.0",
              "dotnetcore2.0",
              "dotnetcore2.1",
              "dotnetcore3.1",
              "nodejs4.3-edge",
              "go1.x",
              "ruby2.5",
              "ruby2.7",
              "provided",
              "provided.al2"
            ],
            "in": "query",
            "name": "CompatibleRuntime",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "LayerName",
            "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "A pagination token returned by a previous call.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of versions to return.",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLayerVersionsResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Lists the versions of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. Versions that have been deleted aren't listed. Specify a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime identifier</a> to list only versions that indicate that they're compatible with that runtime.",
        "operationId": "ListLayerVersions"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "LayerName",
            "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "CompatibleRuntimes": {
                  "description": "A list of compatible <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">function runtimes</a>. Used for filtering with <a>ListLayers</a> and <a>ListLayerVersions</a>.",
                  "items": {
                    "$ref": "#/definitions/Runtime"
                  },
                  "maxItems": 15,
                  "type": "array"
                },
                "Content": {
                  "description": "A ZIP archive that contains the contents of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly.",
                  "properties": {
                    "S3Bucket": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/S3Bucket"
                        },
                        {
                          "description": "The Amazon S3 bucket of the layer archive."
                        }
                      ]
                    },
                    "S3Key": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/S3Key"
                        },
                        {
                          "description": "The Amazon S3 key of the layer archive."
                        }
                      ]
                    },
                    "S3ObjectVersion": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/S3ObjectVersion"
                        },
                        {
                          "description": "For versioned objects, the version of the layer archive object to use."
                        }
                      ]
                    },
                    "ZipFile": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/Blob"
                        },
                        {
                          "description": "The base64-encoded contents of the layer archive. AWS SDK and AWS CLI clients handle the encoding for you."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Description": {
                  "description": "The description of the version.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                },
                "LicenseInfo": {
                  "description": "<p>The layer's software license. It can be any of the following:</p> <ul> <li> <p>An <a href=\"https://spdx.org/licenses/\">SPDX license identifier</a>. For example, <code>MIT</code>.</p> </li> <li> <p>The URL of a license hosted on the internet. For example, <code>https://opensource.org/licenses/MIT</code>.</p> </li> <li> <p>The full text of the license.</p> </li> </ul>",
                  "maxLength": 512,
                  "type": "string"
                }
              },
              "required": [
                "Content"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PublishLayerVersionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "484": {
            "description": "CodeStorageExceededException",
            "schema": {
              "$ref": "#/definitions/CodeStorageExceededException"
            }
          }
        },
        "description": "<p>Creates an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a> from a ZIP archive. Each time you call <code>PublishLayerVersion</code> with the same layer name, a new version is created.</p> <p>Add layers to your function with <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>",
        "operationId": "PublishLayerVersion"
      }
    },
    "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "LayerName",
            "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number.",
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Deletes a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. Deleted versions can no longer be viewed or added to functions. To avoid breaking functions, a copy of the version remains in Lambda until no functions refer to it.",
        "operationId": "DeleteLayerVersion"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "LayerName",
            "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number.",
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLayerVersionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Returns information about a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>, with a link to download the layer archive that's valid for 10 minutes.",
        "operationId": "GetLayerVersion"
      }
    },
    "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "LayerName",
            "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number.",
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLayerVersionPolicyResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        },
        "description": "Returns the permission policy for a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. For more information, see <a>AddLayerVersionPermission</a>.",
        "operationId": "GetLayerVersionPolicy"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "LayerName",
            "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number.",
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.",
            "in": "query",
            "name": "RevisionId",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Action": {
                  "description": "The API action that grants access to the layer. For example, <code>lambda:GetLayerVersion</code>.",
                  "pattern": "lambda:GetLayerVersion",
                  "type": "string"
                },
                "OrganizationId": {
                  "description": "With the principal set to <code>*</code>, grant permission to all accounts in the specified organization.",
                  "pattern": "o-[a-z0-9]{10,32}",
                  "type": "string"
                },
                "Principal": {
                  "description": "An account ID, or <code>*</code> to grant permission to all AWS accounts.",
                  "pattern": "\\d{12}|\\*|arn:(aws[a-zA-Z-]*):iam::\\d{12}:root",
                  "type": "string"
                },
                "StatementId": {
                  "description": "An identifier that distinguishes the policy from others on the same layer version.",
                  "maxLength": 100,
                  "minLength": 1,
                  "pattern": "([a-zA-Z0-9-_]+)",
                  "type": "string"
                }
              },
              "required": [
                "StatementId",
                "Action",
                "Principal"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddLayerVersionPermissionResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "485": {
            "description": "PolicyLengthExceededException",
            "schema": {
              "$ref": "#/definitions/PolicyLengthExceededException"
            }
          },
          "486": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        },
        "description": "<p>Adds permissions to the resource-based policy of a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. Use this action to grant layer usage permission to other accounts. You can grant permission to a single account, all AWS accounts, or all accounts in an organization.</p> <p>To revoke permission, call <a>RemoveLayerVersionPermission</a> with the statement ID that you specified when you added it.</p>",
        "operationId": "AddLayerVersionPermission"
      }
    },
    "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "LayerName",
            "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number.",
            "in": "path",
            "name": "VersionNumber",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The identifier that was specified when the statement was added.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "StatementId",
            "pattern": "([a-zA-Z0-9-_]+)",
            "required": true,
            "type": "string"
          },
          {
            "description": "Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.",
            "in": "query",
            "name": "RevisionId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          }
        },
        "description": "Removes a statement from the permissions policy for a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. For more information, see <a>AddLayerVersionPermission</a>.",
        "operationId": "RemoveLayerVersionPermission"
      }
    },
    "/2019-09-25/functions/{FunctionName}/event-invoke-config": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "A version number or alias name.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "<p>Deletes the configuration for asynchronous invocation for a function, version, or alias.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>",
        "operationId": "DeleteFunctionEventInvokeConfig"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "A version number or alias name.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionEventInvokeConfig"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "<p>Retrieves the configuration for asynchronous invocation for a function, version, or alias.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>",
        "operationId": "GetFunctionEventInvokeConfig"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "A version number or alias name.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DestinationConfig": {
                  "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
                  "properties": {
                    "OnFailure": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OnFailure"
                        },
                        {
                          "description": "The destination configuration for failed invocations."
                        }
                      ]
                    },
                    "OnSuccess": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OnSuccess"
                        },
                        {
                          "description": "The destination configuration for successful invocations."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "MaximumEventAgeInSeconds": {
                  "description": "The maximum age of a request that Lambda sends to a function for processing.",
                  "maximum": 21600,
                  "minimum": 60,
                  "type": "integer"
                },
                "MaximumRetryAttempts": {
                  "description": "The maximum number of times to retry when the function returns an error.",
                  "maximum": 2,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionEventInvokeConfig"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "<p>Updates the configuration for asynchronous invocation for a function, version, or alias.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>",
        "operationId": "UpdateFunctionEventInvokeConfig"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "A version number or alias name.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DestinationConfig": {
                  "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
                  "properties": {
                    "OnFailure": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OnFailure"
                        },
                        {
                          "description": "The destination configuration for failed invocations."
                        }
                      ]
                    },
                    "OnSuccess": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OnSuccess"
                        },
                        {
                          "description": "The destination configuration for successful invocations."
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "MaximumEventAgeInSeconds": {
                  "description": "The maximum age of a request that Lambda sends to a function for processing.",
                  "maximum": 21600,
                  "minimum": 60,
                  "type": "integer"
                },
                "MaximumRetryAttempts": {
                  "description": "The maximum number of times to retry when the function returns an error.",
                  "maximum": 2,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FunctionEventInvokeConfig"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "<p>Configures options for <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html\">asynchronous invocation</a> on a function, version, or alias. If a configuration already exists for a function, version, or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without affecting existing settings for other options, use <a>UpdateFunctionEventInvokeConfig</a>.</p> <p>By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with <a>UpdateFunctionConfiguration</a>.</p> <p>To send an invocation record to a queue, topic, function, or event bus, specify a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations\">destination</a>. You can configure separate destinations for successful invocations (on-success) and events that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a dead-letter queue.</p>",
        "operationId": "PutFunctionEventInvokeConfig"
      }
    },
    "/2019-09-25/functions/{FunctionName}/event-invoke-config/list": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "The maximum number of configurations to return.",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFunctionEventInvokeConfigsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Retrieves a list of configurations for asynchronous invocation for a function.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>",
        "operationId": "ListFunctionEventInvokeConfigs"
      }
    },
    "/2019-09-30/functions/{FunctionName}/concurrency": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetFunctionConcurrencyResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a function, use <a>PutFunctionConcurrency</a>.",
        "operationId": "GetFunctionConcurrency"
      }
    },
    "/2019-09-30/functions/{FunctionName}/provisioned-concurrency#List=ALL": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "Specify a number to limit the number of configurations returned.",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "ALL"
            ],
            "in": "query",
            "name": "List",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListProvisionedConcurrencyConfigsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Retrieves a list of provisioned concurrency configurations for a function.",
        "operationId": "ListProvisionedConcurrencyConfigs"
      }
    },
    "/2019-09-30/functions/{FunctionName}/provisioned-concurrency#Qualifier": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number or alias name.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Deletes the provisioned concurrency configuration for a function.",
        "operationId": "DeleteProvisionedConcurrencyConfig"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number or alias name.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetProvisionedConcurrencyConfigResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "484": {
            "description": "ProvisionedConcurrencyConfigNotFoundException",
            "schema": {
              "$ref": "#/definitions/ProvisionedConcurrencyConfigNotFoundException"
            }
          }
        },
        "description": "Retrieves the provisioned concurrency configuration for a function's alias or version.",
        "operationId": "GetProvisionedConcurrencyConfig"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number or alias name.",
            "in": "query",
            "maxLength": 128,
            "minLength": 1,
            "name": "Qualifier",
            "pattern": "(|[a-zA-Z0-9$_-]+)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "ProvisionedConcurrentExecutions": {
                  "description": "The amount of provisioned concurrency to allocate for the version or alias.",
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": [
                "ProvisionedConcurrentExecutions"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutProvisionedConcurrencyConfigResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Adds a provisioned concurrency configuration to a function's alias or version.",
        "operationId": "PutProvisionedConcurrencyConfig"
      }
    },
    "/2020-04-22/code-signing-configs/": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of items to return.",
            "in": "query",
            "maximum": 10000,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCodeSigningConfigsResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        },
        "description": "Returns a list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuring-codesigning.html\">code signing configurations</a>. A request returns up to 10,000 configurations per call. You can use the <code>MaxItems</code> parameter to return fewer configurations per call. ",
        "operationId": "ListCodeSigningConfigs"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AllowedPublishers": {
                  "description": "List of signing profiles that can sign a code package. ",
                  "properties": {
                    "SigningProfileVersionArns": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SigningProfileVersionArns"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package. "
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "CodeSigningPolicies": {
                  "description": "Code signing configuration policies specifies the validation failure action for signature mismatch or expiry.",
                  "properties": {
                    "UntrustedArtifactOnDeployment": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/CodeSigningPolicy"
                        },
                        {
                          "description": "<p>Code signing configuration policy for deployment validation failure. If you set the policy to <code>Enforce</code>, Lambda blocks the deployment request if signature validation checks fail. If you set the policy to <code>Warn</code>, Lambda allows the deployment and creates a CloudWatch log. </p> <p>Default value: <code>Warn</code> </p>"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Description": {
                  "description": "Descriptive name for this code signing configuration.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "required": [
                "AllowedPublishers"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateCodeSigningConfigResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          }
        },
        "description": "Creates a code signing configuration. A <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html\">code signing configuration</a> defines a list of allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment validation checks fail). ",
        "operationId": "CreateCodeSigningConfig"
      }
    },
    "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The The Amazon Resource Name (ARN) of the code signing configuration.",
            "in": "path",
            "maxLength": 200,
            "name": "CodeSigningConfigArn",
            "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteCodeSigningConfigResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "description": "Deletes the code signing configuration. You can delete the code signing configuration only if no function is using it. ",
        "operationId": "DeleteCodeSigningConfig"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The The Amazon Resource Name (ARN) of the code signing configuration. ",
            "in": "path",
            "maxLength": 200,
            "name": "CodeSigningConfigArn",
            "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCodeSigningConfigResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Returns information about the specified code signing configuration.",
        "operationId": "GetCodeSigningConfig"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The The Amazon Resource Name (ARN) of the code signing configuration.",
            "in": "path",
            "maxLength": 200,
            "name": "CodeSigningConfigArn",
            "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "AllowedPublishers": {
                  "description": "List of signing profiles that can sign a code package. ",
                  "properties": {
                    "SigningProfileVersionArns": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SigningProfileVersionArns"
                        },
                        {
                          "description": "The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package. "
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "CodeSigningPolicies": {
                  "description": "Code signing configuration policies specifies the validation failure action for signature mismatch or expiry.",
                  "properties": {
                    "UntrustedArtifactOnDeployment": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/CodeSigningPolicy"
                        },
                        {
                          "description": "<p>Code signing configuration policy for deployment validation failure. If you set the policy to <code>Enforce</code>, Lambda blocks the deployment request if signature validation checks fail. If you set the policy to <code>Warn</code>, Lambda allows the deployment and creates a CloudWatch log. </p> <p>Default value: <code>Warn</code> </p>"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Description": {
                  "description": "Descriptive name for this code signing configuration.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateCodeSigningConfigResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Update the code signing configuration. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function. ",
        "operationId": "UpdateCodeSigningConfig"
      }
    },
    "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The The Amazon Resource Name (ARN) of the code signing configuration.",
            "in": "path",
            "maxLength": 200,
            "name": "CodeSigningConfigArn",
            "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "in": "query",
            "name": "Marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of items to return.",
            "in": "query",
            "maximum": 10000,
            "minimum": 1,
            "name": "MaxItems",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFunctionsByCodeSigningConfigResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "List the functions that use the specified code signing configuration. You can use this method prior to deleting a code signing configuration, to verify that no functions are using it.",
        "operationId": "ListFunctionsByCodeSigningConfig"
      }
    },
    "/2020-06-30/functions/{FunctionName}/code-signing-config": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "CodeSigningConfigNotFoundException",
            "schema": {
              "$ref": "#/definitions/CodeSigningConfigNotFoundException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          }
        },
        "description": "Removes the code signing configuration from the function.",
        "operationId": "DeleteFunctionCodeSigningConfig"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetFunctionCodeSigningConfigResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Returns the code signing configuration for the specified function.",
        "operationId": "GetFunctionCodeSigningConfig"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "in": "path",
            "maxLength": 140,
            "minLength": 1,
            "name": "FunctionName",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "CodeSigningConfigArn": {
                  "description": "The The Amazon Resource Name (ARN) of the code signing configuration.",
                  "maxLength": 200,
                  "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
                  "type": "string"
                }
              },
              "required": [
                "CodeSigningConfigArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutFunctionCodeSigningConfigResponse"
            }
          },
          "480": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "485": {
            "description": "CodeSigningConfigNotFoundException",
            "schema": {
              "$ref": "#/definitions/CodeSigningConfigNotFoundException"
            }
          }
        },
        "description": "Update the code signing configuration for the function. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function. ",
        "operationId": "PutFunctionCodeSigningConfig"
      }
    }
  },
  "definitions": {
    "AccountLimit": {
      "description": "Limits that are related to concurrency and storage. All file and storage sizes are in bytes.",
      "properties": {
        "CodeSizeUnzipped": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The maximum size of a function's deployment package and layers when they're extracted."
            }
          ]
        },
        "CodeSizeZipped": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The maximum size of a deployment package when it's uploaded directly to AWS Lambda. Use Amazon S3 for larger files."
            }
          ]
        },
        "ConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The maximum number of simultaneous function executions."
            }
          ]
        },
        "TotalCodeSize": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The amount of storage space that you can use for all deployment packages and layer archives."
            }
          ]
        },
        "UnreservedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/UnreservedConcurrentExecutions"
            },
            {
              "description": "The maximum number of simultaneous function executions, minus the capacity that's reserved for individual functions with <a>PutFunctionConcurrency</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "AccountUsage": {
      "description": "The number of functions and amount of storage in use.",
      "properties": {
        "FunctionCount": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The number of Lambda functions."
            }
          ]
        },
        "TotalCodeSize": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The amount of storage space, in bytes, that's being used by deployment packages and layer archives."
            }
          ]
        }
      },
      "type": "object"
    },
    "Action": {
      "pattern": "(lambda:[*]|lambda:[a-zA-Z]+|[*])",
      "type": "string"
    },
    "AddLayerVersionPermissionRequest": {
      "properties": {
        "Action": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerPermissionAllowedAction"
            },
            {
              "description": "The API action that grants access to the layer. For example, <code>lambda:GetLayerVersion</code>."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "With the principal set to <code>*</code>, grant permission to all accounts in the specified organization."
            }
          ]
        },
        "Principal": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerPermissionAllowedPrincipal"
            },
            {
              "description": "An account ID, or <code>*</code> to grant permission to all AWS accounts."
            }
          ]
        },
        "StatementId": {
          "allOf": [
            {
              "$ref": "#/definitions/StatementId"
            },
            {
              "description": "An identifier that distinguishes the policy from others on the same layer version."
            }
          ]
        }
      },
      "required": [
        "StatementId",
        "Action",
        "Principal"
      ],
      "title": "AddLayerVersionPermissionRequest",
      "type": "object"
    },
    "AddLayerVersionPermissionResponse": {
      "example": {
        "RevisionId": "35d87451-f796-4a3f-a618-95a3671b0a0c",
        "Statement": "{\"Sid\":\"xaccount\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::223456789012:root\"},\"Action\":\"lambda:GetLayerVersion\",\"Resource\":\"arn:aws:lambda:us-east-2:123456789012:layer:my-layer:1\"}"
      },
      "properties": {
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A unique identifier for the current revision of the policy."
            }
          ]
        },
        "Statement": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The permission statement."
            }
          ]
        }
      },
      "type": "object"
    },
    "AddPermissionRequest": {
      "properties": {
        "Action": {
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            },
            {
              "description": "The action that the principal can use on the function. For example, <code>lambda:InvokeFunction</code> or <code>lambda:GetFunction</code>."
            }
          ]
        },
        "EventSourceToken": {
          "allOf": [
            {
              "$ref": "#/definitions/EventSourceToken"
            },
            {
              "description": "For Alexa Smart Home functions, a token that must be supplied by the invoker."
            }
          ]
        },
        "Principal": {
          "allOf": [
            {
              "$ref": "#/definitions/Principal"
            },
            {
              "description": "The AWS service or account that invokes the function. If you specify a service, use <code>SourceArn</code> or <code>SourceAccount</code> to limit who can invoke the function through that service."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Only update the policy if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it."
            }
          ]
        },
        "SourceAccount": {
          "allOf": [
            {
              "$ref": "#/definitions/SourceOwner"
            },
            {
              "description": "For Amazon S3, the ID of the account that owns the resource. Use this together with <code>SourceArn</code> to ensure that the resource is owned by the specified account. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account."
            }
          ]
        },
        "SourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "For AWS services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic."
            }
          ]
        },
        "StatementId": {
          "allOf": [
            {
              "$ref": "#/definitions/StatementId"
            },
            {
              "description": "A statement identifier that differentiates the statement from others in the same policy."
            }
          ]
        }
      },
      "required": [
        "StatementId",
        "Action",
        "Principal"
      ],
      "title": "AddPermissionRequest",
      "type": "object"
    },
    "AddPermissionResponse": {
      "example": {
        "Statement": "{\"Sid\":\"xaccount\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::223456789012:root\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:us-east-2:123456789012:function:my-function\"}"
      },
      "properties": {
        "Statement": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The permission statement that's added to the function policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "AdditionalVersion": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "[0-9]+",
      "type": "string"
    },
    "AdditionalVersionWeights": {
      "additionalProperties": {
        "$ref": "#/definitions/Weight"
      },
      "type": "object"
    },
    "Alias": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
      "type": "string"
    },
    "AliasConfiguration": {
      "description": "Provides configuration information about a Lambda function <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a>.",
      "example": {
        "AliasArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function:BLUE",
        "Description": "Production environment BLUE.",
        "FunctionVersion": "2",
        "Name": "BLUE",
        "RevisionId": "594f41fb-xmpl-4c20-95c7-6ca5f2a92c93",
        "RoutingConfig": {
          "AdditionalVersionWeights": {
            "1": 0.7
          }
        }
      },
      "properties": {
        "AliasArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the alias."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description of the alias."
            }
          ]
        },
        "FunctionVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/Version"
            },
            {
              "description": "The function version that the alias invokes."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/Alias"
            },
            {
              "description": "The name of the alias."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A unique identifier that changes when you update the alias."
            }
          ]
        },
        "RoutingConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasRoutingConfiguration"
            },
            {
              "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">routing configuration</a> of the alias."
            }
          ]
        }
      },
      "type": "object"
    },
    "AliasList": {
      "items": {
        "$ref": "#/definitions/AliasConfiguration"
      },
      "type": "array"
    },
    "AliasRoutingConfiguration": {
      "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">traffic-shifting</a> configuration of a Lambda function alias.",
      "properties": {
        "AdditionalVersionWeights": {
          "allOf": [
            {
              "$ref": "#/definitions/AdditionalVersionWeights"
            },
            {
              "description": "The second version, and the percentage of traffic that's routed to it."
            }
          ]
        }
      },
      "type": "object"
    },
    "AllowedPublishers": {
      "description": "List of signing profiles that can sign a code package. ",
      "properties": {
        "SigningProfileVersionArns": {
          "allOf": [
            {
              "$ref": "#/definitions/SigningProfileVersionArns"
            },
            {
              "description": "The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package. "
            }
          ]
        }
      },
      "required": [
        "SigningProfileVersionArns"
      ],
      "type": "object"
    },
    "Arn": {
      "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
      "type": "string"
    },
    "BatchSize": {
      "maximum": 10000,
      "minimum": 1,
      "type": "integer"
    },
    "BisectBatchOnFunctionError": {
      "type": "boolean"
    },
    "Blob": {
      "format": "password",
      "type": "string"
    },
    "BlobStream": {
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "CodeSigningConfig": {
      "description": "Details about a Code signing configuration. ",
      "properties": {
        "AllowedPublishers": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedPublishers"
            },
            {
              "description": "List of allowed publishers."
            }
          ]
        },
        "CodeSigningConfigArn": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfigArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the Code signing configuration."
            }
          ]
        },
        "CodeSigningConfigId": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfigId"
            },
            {
              "description": "Unique identifer for the Code signing configuration."
            }
          ]
        },
        "CodeSigningPolicies": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningPolicies"
            },
            {
              "description": "The code signing policy controls the validation failure action for signature mismatch or expiry."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "Code signing configuration description."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the Code signing configuration was last modified, in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sTZD). "
            }
          ]
        }
      },
      "required": [
        "CodeSigningConfigId",
        "CodeSigningConfigArn",
        "AllowedPublishers",
        "CodeSigningPolicies",
        "LastModified"
      ],
      "type": "object"
    },
    "CodeSigningConfigArn": {
      "maxLength": 200,
      "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
      "type": "string"
    },
    "CodeSigningConfigId": {
      "pattern": "csc-[a-zA-Z0-9-_\\.]{17}",
      "type": "string"
    },
    "CodeSigningConfigList": {
      "items": {
        "$ref": "#/definitions/CodeSigningConfig"
      },
      "type": "array"
    },
    "CodeSigningConfigNotFoundException": {},
    "CodeSigningPolicies": {
      "description": "Code signing configuration policies specifies the validation failure action for signature mismatch or expiry.",
      "properties": {
        "UntrustedArtifactOnDeployment": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningPolicy"
            },
            {
              "description": "<p>Code signing configuration policy for deployment validation failure. If you set the policy to <code>Enforce</code>, Lambda blocks the deployment request if signature validation checks fail. If you set the policy to <code>Warn</code>, Lambda allows the deployment and creates a CloudWatch log. </p> <p>Default value: <code>Warn</code> </p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "CodeSigningPolicy": {
      "enum": [
        "Warn",
        "Enforce"
      ],
      "type": "string"
    },
    "CodeStorageExceededException": {},
    "CodeVerificationFailedException": {},
    "CompatibleRuntimes": {
      "items": {
        "$ref": "#/definitions/Runtime"
      },
      "maxItems": 15,
      "type": "array"
    },
    "Concurrency": {
      "example": {
        "ReservedConcurrentExecutions": 100
      },
      "properties": {
        "ReservedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/ReservedConcurrentExecutions"
            },
            {
              "description": "The number of concurrent executions that are reserved for this function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">Managing Concurrency</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateAliasRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description of the alias."
            }
          ]
        },
        "FunctionVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/Version"
            },
            {
              "description": "The function version that the alias invokes."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/Alias"
            },
            {
              "description": "The name of the alias."
            }
          ]
        },
        "RoutingConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasRoutingConfiguration"
            },
            {
              "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html#configuring-alias-routing\">routing configuration</a> of the alias."
            }
          ]
        }
      },
      "required": [
        "Name",
        "FunctionVersion"
      ],
      "title": "CreateAliasRequest",
      "type": "object"
    },
    "CreateCodeSigningConfigRequest": {
      "properties": {
        "AllowedPublishers": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedPublishers"
            },
            {
              "description": "Signing profiles for this code signing configuration."
            }
          ]
        },
        "CodeSigningPolicies": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningPolicies"
            },
            {
              "description": "The code signing policies define the actions to take if the validation checks fail. "
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "Descriptive name for this code signing configuration."
            }
          ]
        }
      },
      "required": [
        "AllowedPublishers"
      ],
      "title": "CreateCodeSigningConfigRequest",
      "type": "object"
    },
    "CreateCodeSigningConfigResponse": {
      "properties": {
        "CodeSigningConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfig"
            },
            {
              "description": "The code signing configuration."
            }
          ]
        }
      },
      "required": [
        "CodeSigningConfig"
      ],
      "type": "object"
    },
    "CreateEventSourceMappingRequest": {
      "properties": {
        "BatchSize": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchSize"
            },
            {
              "description": "<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Self-Managed Apache Kafka</b> - Default 100. Max 10,000.</p> </li> </ul>"
            }
          ]
        },
        "BisectBatchOnFunctionError": {
          "allOf": [
            {
              "$ref": "#/definitions/BisectBatchOnFunctionError"
            },
            {
              "description": "(Streams) If the function returns an error, split the batch in two and retry."
            }
          ]
        },
        "DestinationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DestinationConfig"
            },
            {
              "description": "(Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records."
            }
          ]
        },
        "Enabled": {
          "allOf": [
            {
              "$ref": "#/definitions/Enabled"
            },
            {
              "description": "If true, the event source mapping is active. Set to false to pause polling and invocation."
            }
          ]
        },
        "EventSourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "<p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - The ARN of the cluster.</p> </li> </ul>"
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionName"
            },
            {
              "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>"
            }
          ]
        },
        "FunctionResponseTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionResponseTypeList"
            },
            {
              "description": "(Streams) A list of current response type enums applied to the event source mapping."
            }
          ]
        },
        "MaximumBatchingWindowInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumBatchingWindowInSeconds"
            },
            {
              "description": "(Streams and SQS standard queues) The maximum amount of time to gather records before invoking the function, in seconds."
            }
          ]
        },
        "MaximumRecordAgeInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumRecordAgeInSeconds"
            },
            {
              "description": "(Streams) Discard records older than the specified age. The default value is infinite (-1)."
            }
          ]
        },
        "MaximumRetryAttempts": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumRetryAttemptsEventSourceMapping"
            },
            {
              "description": "(Streams) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records will be retried until the record expires."
            }
          ]
        },
        "ParallelizationFactor": {
          "allOf": [
            {
              "$ref": "#/definitions/ParallelizationFactor"
            },
            {
              "description": "(Streams) The number of batches to process from each shard concurrently."
            }
          ]
        },
        "Queues": {
          "allOf": [
            {
              "$ref": "#/definitions/Queues"
            },
            {
              "description": " (MQ) The name of the Amazon MQ broker destination queue to consume. "
            }
          ]
        },
        "SelfManagedEventSource": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfManagedEventSource"
            },
            {
              "description": "The Self-Managed Apache Kafka cluster to send records."
            }
          ]
        },
        "SourceAccessConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/SourceAccessConfigurations"
            },
            {
              "description": "An array of the authentication protocol, or the VPC components to secure your event source."
            }
          ]
        },
        "StartingPosition": {
          "allOf": [
            {
              "$ref": "#/definitions/EventSourcePosition"
            },
            {
              "description": "The position in a stream from which to start reading. Required for Amazon Kinesis, Amazon DynamoDB, and Amazon MSK Streams sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams."
            }
          ]
        },
        "StartingPositionTimestamp": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start reading."
            }
          ]
        },
        "Topics": {
          "allOf": [
            {
              "$ref": "#/definitions/Topics"
            },
            {
              "description": "The name of the Kafka topic."
            }
          ]
        },
        "TumblingWindowInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/TumblingWindowInSeconds"
            },
            {
              "description": "(Streams) The duration of a processing window in seconds. The range is between 1 second up to 15 minutes."
            }
          ]
        }
      },
      "required": [
        "FunctionName"
      ],
      "title": "CreateEventSourceMappingRequest",
      "type": "object"
    },
    "CreateFunctionRequest": {
      "properties": {
        "Code": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionCode"
            },
            {
              "description": "The code for the function."
            }
          ]
        },
        "CodeSigningConfigArn": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfigArn"
            },
            {
              "description": "To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function."
            }
          ]
        },
        "DeadLetterConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DeadLetterConfig"
            },
            {
              "description": "A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">Dead Letter Queues</a>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description of the function."
            }
          ]
        },
        "Environment": {
          "allOf": [
            {
              "$ref": "#/definitions/Environment"
            },
            {
              "description": "Environment variables that are accessible from function code during execution."
            }
          ]
        },
        "FileSystemConfigs": {
          "allOf": [
            {
              "$ref": "#/definitions/FileSystemConfigList"
            },
            {
              "description": "Connection settings for an Amazon EFS file system."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionName"
            },
            {
              "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"
            }
          ]
        },
        "Handler": {
          "allOf": [
            {
              "$ref": "#/definitions/Handler"
            },
            {
              "description": "The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html\">Programming Model</a>."
            }
          ]
        },
        "ImageConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/ImageConfig"
            },
            {
              "description": "Configuration values that override the container image Dockerfile."
            }
          ]
        },
        "KMSKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KMSKeyArn"
            },
            {
              "description": "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key."
            }
          ]
        },
        "Layers": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerList"
            },
            {
              "description": "A list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version."
            }
          ]
        },
        "MemorySize": {
          "allOf": [
            {
              "$ref": "#/definitions/MemorySize"
            },
            {
              "description": "The amount of memory available to the function at runtime. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB."
            }
          ]
        },
        "PackageType": {
          "allOf": [
            {
              "$ref": "#/definitions/PackageType"
            },
            {
              "description": "The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for ZIP archive."
            }
          ]
        },
        "Publish": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Set to true to publish the first version of the function during creation."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the function's execution role."
            }
          ]
        },
        "Runtime": {
          "allOf": [
            {
              "$ref": "#/definitions/Runtime"
            },
            {
              "description": "The identifier of the function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime</a>."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "A list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a> to apply to the function."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds."
            }
          ]
        },
        "TracingConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/TracingConfig"
            },
            {
              "description": "Set <code>Mode</code> to <code>Active</code> to sample and trace a subset of incoming requests with AWS X-Ray."
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\">VPC Settings</a>."
            }
          ]
        }
      },
      "required": [
        "FunctionName",
        "Role",
        "Code"
      ],
      "title": "CreateFunctionRequest",
      "type": "object"
    },
    "Date": {
      "format": "date-time",
      "type": "string"
    },
    "DeadLetterConfig": {
      "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">dead-letter queue</a> for failed asynchronous invocations.",
      "properties": {
        "TargetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteAliasRequest": {
      "properties": {},
      "title": "DeleteAliasRequest",
      "type": "object"
    },
    "DeleteCodeSigningConfigRequest": {
      "properties": {},
      "title": "DeleteCodeSigningConfigRequest",
      "type": "object"
    },
    "DeleteCodeSigningConfigResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteEventSourceMappingRequest": {
      "properties": {},
      "title": "DeleteEventSourceMappingRequest",
      "type": "object"
    },
    "DeleteFunctionCodeSigningConfigRequest": {
      "properties": {},
      "title": "DeleteFunctionCodeSigningConfigRequest",
      "type": "object"
    },
    "DeleteFunctionConcurrencyRequest": {
      "properties": {},
      "title": "DeleteFunctionConcurrencyRequest",
      "type": "object"
    },
    "DeleteFunctionEventInvokeConfigRequest": {
      "properties": {},
      "title": "DeleteFunctionEventInvokeConfigRequest",
      "type": "object"
    },
    "DeleteFunctionRequest": {
      "properties": {},
      "title": "DeleteFunctionRequest",
      "type": "object"
    },
    "DeleteLayerVersionRequest": {
      "properties": {},
      "title": "DeleteLayerVersionRequest",
      "type": "object"
    },
    "DeleteProvisionedConcurrencyConfigRequest": {
      "properties": {},
      "title": "DeleteProvisionedConcurrencyConfigRequest",
      "type": "object"
    },
    "Description": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "DestinationArn": {
      "maxLength": 350,
      "minLength": 0,
      "pattern": "^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
      "type": "string"
    },
    "DestinationConfig": {
      "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
      "properties": {
        "OnFailure": {
          "allOf": [
            {
              "$ref": "#/definitions/OnFailure"
            },
            {
              "description": "The destination configuration for failed invocations."
            }
          ]
        },
        "OnSuccess": {
          "allOf": [
            {
              "$ref": "#/definitions/OnSuccess"
            },
            {
              "description": "The destination configuration for successful invocations."
            }
          ]
        }
      },
      "type": "object"
    },
    "EC2AccessDeniedException": {},
    "EC2ThrottledException": {},
    "EC2UnexpectedException": {},
    "EFSIOException": {},
    "EFSMountConnectivityException": {},
    "EFSMountFailureException": {},
    "EFSMountTimeoutException": {},
    "ENILimitReachedException": {},
    "Enabled": {
      "type": "boolean"
    },
    "EndPointType": {
      "enum": [
        "KAFKA_BOOTSTRAP_SERVERS"
      ],
      "type": "string"
    },
    "Endpoint": {
      "maxLength": 300,
      "minLength": 1,
      "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):[0-9]{1,5}",
      "type": "string"
    },
    "EndpointLists": {
      "items": {
        "$ref": "#/definitions/Endpoint"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "Endpoints": {
      "additionalProperties": {
        "$ref": "#/definitions/EndpointLists"
      },
      "maxProperties": 2,
      "minProperties": 1,
      "type": "object"
    },
    "Environment": {
      "description": "A function's environment variable settings.",
      "properties": {
        "Variables": {
          "allOf": [
            {
              "$ref": "#/definitions/EnvironmentVariables"
            },
            {
              "description": "Environment variable key-value pairs."
            }
          ]
        }
      },
      "type": "object"
    },
    "EnvironmentError": {
      "description": "Error messages for environment variables that couldn't be applied.",
      "properties": {
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The error code."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/SensitiveString"
            },
            {
              "description": "The error message."
            }
          ]
        }
      },
      "type": "object"
    },
    "EnvironmentResponse": {
      "description": "The results of an operation to update or read environment variables. If the operation is successful, the response contains the environment variables. If it failed, the response contains details about the error.",
      "properties": {
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/EnvironmentError"
            },
            {
              "description": "Error messages for environment variables that couldn't be applied."
            }
          ]
        },
        "Variables": {
          "allOf": [
            {
              "$ref": "#/definitions/EnvironmentVariables"
            },
            {
              "description": "Environment variable key-value pairs."
            }
          ]
        }
      },
      "type": "object"
    },
    "EnvironmentVariableName": {
      "format": "password",
      "pattern": "[a-zA-Z]([a-zA-Z0-9_])+",
      "type": "string"
    },
    "EnvironmentVariableValue": {
      "format": "password",
      "type": "string"
    },
    "EnvironmentVariables": {
      "additionalProperties": {
        "$ref": "#/definitions/EnvironmentVariableValue"
      },
      "type": "object"
    },
    "EventSourceMappingConfiguration": {
      "description": "A mapping between an AWS resource and an AWS Lambda function. See <a>CreateEventSourceMapping</a> for details.",
      "example": {
        "BatchSize": 123,
        "EventSourceArn": "arn:aws:s3:::examplebucket/*",
        "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:myFunction",
        "LastModified": "2016-11-21T19:49:20.006+0000",
        "LastProcessingResult": "",
        "State": "",
        "StateTransitionReason": "",
        "UUID": "1234xCy789012"
      },
      "properties": {
        "BatchSize": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchSize"
            },
            {
              "description": "The maximum number of items to retrieve in a single batch."
            }
          ]
        },
        "BisectBatchOnFunctionError": {
          "allOf": [
            {
              "$ref": "#/definitions/BisectBatchOnFunctionError"
            },
            {
              "description": "(Streams) If the function returns an error, split the batch in two and retry. The default value is false."
            }
          ]
        },
        "DestinationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DestinationConfig"
            },
            {
              "description": "(Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records."
            }
          ]
        },
        "EventSourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the event source."
            }
          ]
        },
        "FunctionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionArn"
            },
            {
              "description": "The ARN of the Lambda function."
            }
          ]
        },
        "FunctionResponseTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionResponseTypeList"
            },
            {
              "description": "(Streams) A list of current response type enums applied to the event source mapping."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date that the event source mapping was last updated, or its state changed."
            }
          ]
        },
        "LastProcessingResult": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The result of the last AWS Lambda invocation of your Lambda function."
            }
          ]
        },
        "MaximumBatchingWindowInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumBatchingWindowInSeconds"
            },
            {
              "description": "(Streams and SQS standard queues) The maximum amount of time to gather records before invoking the function, in seconds. The default value is zero."
            }
          ]
        },
        "MaximumRecordAgeInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumRecordAgeInSeconds"
            },
            {
              "description": "(Streams) Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires."
            }
          ]
        },
        "MaximumRetryAttempts": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumRetryAttemptsEventSourceMapping"
            },
            {
              "description": "(Streams) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires."
            }
          ]
        },
        "ParallelizationFactor": {
          "allOf": [
            {
              "$ref": "#/definitions/ParallelizationFactor"
            },
            {
              "description": "(Streams) The number of batches to process from each shard concurrently. The default value is 1."
            }
          ]
        },
        "Queues": {
          "allOf": [
            {
              "$ref": "#/definitions/Queues"
            },
            {
              "description": " (MQ) The name of the Amazon MQ broker destination queue to consume. "
            }
          ]
        },
        "SelfManagedEventSource": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfManagedEventSource"
            },
            {
              "description": "The Self-Managed Apache Kafka cluster for your event source."
            }
          ]
        },
        "SourceAccessConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/SourceAccessConfigurations"
            },
            {
              "description": "An array of the authentication protocol, or the VPC components to secure your event source."
            }
          ]
        },
        "StartingPosition": {
          "allOf": [
            {
              "$ref": "#/definitions/EventSourcePosition"
            },
            {
              "description": "The position in a stream from which to start reading. Required for Amazon Kinesis, Amazon DynamoDB, and Amazon MSK Streams sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams."
            }
          ]
        },
        "StartingPositionTimestamp": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start reading."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The state of the event source mapping. It can be one of the following: <code>Creating</code>, <code>Enabling</code>, <code>Enabled</code>, <code>Disabling</code>, <code>Disabled</code>, <code>Updating</code>, or <code>Deleting</code>."
            }
          ]
        },
        "StateTransitionReason": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Indicates whether the last change to the event source mapping was made by a user, or by the Lambda service."
            }
          ]
        },
        "Topics": {
          "allOf": [
            {
              "$ref": "#/definitions/Topics"
            },
            {
              "description": "The name of the Kafka topic."
            }
          ]
        },
        "TumblingWindowInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/TumblingWindowInSeconds"
            },
            {
              "description": "(Streams) The duration of a processing window in seconds. The range is between 1 second up to 15 minutes."
            }
          ]
        },
        "UUID": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier of the event source mapping."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventSourceMappingsList": {
      "items": {
        "$ref": "#/definitions/EventSourceMappingConfiguration"
      },
      "type": "array"
    },
    "EventSourcePosition": {
      "enum": [
        "TRIM_HORIZON",
        "LATEST",
        "AT_TIMESTAMP"
      ],
      "type": "string"
    },
    "EventSourceToken": {
      "maxLength": 256,
      "minLength": 0,
      "pattern": "[a-zA-Z0-9._\\-]+",
      "type": "string"
    },
    "FileSystemArn": {
      "maxLength": 200,
      "pattern": "arn:aws[a-zA-Z-]*:elasticfilesystem:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:access-point/fsap-[a-f0-9]{17}",
      "type": "string"
    },
    "FileSystemConfig": {
      "description": "Details about the connection between a Lambda function and an Amazon EFS file system.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/FileSystemArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system."
            }
          ]
        },
        "LocalMountPath": {
          "allOf": [
            {
              "$ref": "#/definitions/LocalMountPath"
            },
            {
              "description": "The path where the function can access the file system, starting with <code>/mnt/</code>."
            }
          ]
        }
      },
      "required": [
        "Arn",
        "LocalMountPath"
      ],
      "type": "object"
    },
    "FileSystemConfigList": {
      "items": {
        "$ref": "#/definitions/FileSystemConfig"
      },
      "maxItems": 1,
      "type": "array"
    },
    "FunctionArn": {
      "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
      "type": "string"
    },
    "FunctionArnList": {
      "items": {
        "$ref": "#/definitions/FunctionArn"
      },
      "type": "array"
    },
    "FunctionCode": {
      "description": "The code for the Lambda function. You can specify either an object in Amazon S3, upload a .zip file archive deployment package directly, or specify the URI of a container image.",
      "properties": {
        "ImageUri": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "URI of a container image in the Amazon ECR registry."
            }
          ]
        },
        "S3Bucket": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Bucket"
            },
            {
              "description": "An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account."
            }
          ]
        },
        "S3Key": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Key"
            },
            {
              "description": "The Amazon S3 key of the deployment package."
            }
          ]
        },
        "S3ObjectVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/S3ObjectVersion"
            },
            {
              "description": "For versioned objects, the version of the deployment package object to use."
            }
          ]
        },
        "ZipFile": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "The base64-encoded contents of the deployment package. AWS SDK and AWS CLI clients handle the encoding for you."
            }
          ]
        }
      },
      "type": "object"
    },
    "FunctionCodeLocation": {
      "description": "Details about a function's deployment package.",
      "properties": {
        "ImageUri": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "URI of a container image in the Amazon ECR registry."
            }
          ]
        },
        "Location": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A presigned URL that you can use to download the deployment package."
            }
          ]
        },
        "RepositoryType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The service that's hosting the file."
            }
          ]
        },
        "ResolvedImageUri": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The resolved URI for the image."
            }
          ]
        }
      },
      "type": "object"
    },
    "FunctionConfiguration": {
      "description": "Details about a function's configuration.",
      "example": {
        "CodeSha256": "PFn4S+er27qk+UuZSTKEQfNKG/XNn7QJs90mJgq6oH8=",
        "CodeSize": 308,
        "Description": "",
        "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function",
        "FunctionName": "my-function",
        "Handler": "index.handler",
        "LastModified": "2019-08-14T22:26:11.234+0000",
        "MemorySize": 256,
        "RevisionId": "873282ed-xmpl-4dc8-a069-d0c647e470c6",
        "Role": "arn:aws:iam::123456789012:role/lambda-role",
        "Runtime": "nodejs12.x",
        "Timeout": 3,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Version": "$LATEST"
      },
      "properties": {
        "CodeSha256": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The SHA256 hash of the function's deployment package."
            }
          ]
        },
        "CodeSize": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The size of the function's deployment package, in bytes."
            }
          ]
        },
        "DeadLetterConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DeadLetterConfig"
            },
            {
              "description": "The function's dead letter queue."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The function's description."
            }
          ]
        },
        "Environment": {
          "allOf": [
            {
              "$ref": "#/definitions/EnvironmentResponse"
            },
            {
              "description": "The function's environment variables."
            }
          ]
        },
        "FileSystemConfigs": {
          "allOf": [
            {
              "$ref": "#/definitions/FileSystemConfigList"
            },
            {
              "description": "Connection settings for an Amazon EFS file system."
            }
          ]
        },
        "FunctionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/NameSpacedFunctionArn"
            },
            {
              "description": "The function's Amazon Resource Name (ARN)."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespacedFunctionName"
            },
            {
              "description": "The name of the function."
            }
          ]
        },
        "Handler": {
          "allOf": [
            {
              "$ref": "#/definitions/Handler"
            },
            {
              "description": "The function that Lambda calls to begin executing your function."
            }
          ]
        },
        "ImageConfigResponse": {
          "allOf": [
            {
              "$ref": "#/definitions/ImageConfigResponse"
            },
            {
              "description": "The function's image configuration values."
            }
          ]
        },
        "KMSKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KMSKeyArn"
            },
            {
              "description": "The KMS key that's used to encrypt the function's environment variables. This key is only returned if you've configured a customer managed CMK."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the function was last updated, in <a href=\"https://www.w3.org/TR/NOTE-datetime\">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD)."
            }
          ]
        },
        "LastUpdateStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/LastUpdateStatus"
            },
            {
              "description": "The status of the last update that was performed on the function. This is first set to <code>Successful</code> after function creation completes."
            }
          ]
        },
        "LastUpdateStatusReason": {
          "allOf": [
            {
              "$ref": "#/definitions/LastUpdateStatusReason"
            },
            {
              "description": "The reason for the last update that was performed on the function."
            }
          ]
        },
        "LastUpdateStatusReasonCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LastUpdateStatusReasonCode"
            },
            {
              "description": "The reason code for the last update that was performed on the function."
            }
          ]
        },
        "Layers": {
          "allOf": [
            {
              "$ref": "#/definitions/LayersReferenceList"
            },
            {
              "description": "The function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\"> layers</a>."
            }
          ]
        },
        "MasterArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionArn"
            },
            {
              "description": "For Lambda@Edge functions, the ARN of the master function."
            }
          ]
        },
        "MemorySize": {
          "allOf": [
            {
              "$ref": "#/definitions/MemorySize"
            },
            {
              "description": "The amount of memory available to the function at runtime. "
            }
          ]
        },
        "PackageType": {
          "allOf": [
            {
              "$ref": "#/definitions/PackageType"
            },
            {
              "description": "The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for .zip file archive."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The latest updated revision of the function or alias."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The function's execution role."
            }
          ]
        },
        "Runtime": {
          "allOf": [
            {
              "$ref": "#/definitions/Runtime"
            },
            {
              "description": "The runtime environment for the Lambda function."
            }
          ]
        },
        "SigningJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the signing job."
            }
          ]
        },
        "SigningProfileVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the signing profile version."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/State"
            },
            {
              "description": "The current state of the function. When the state is <code>Inactive</code>, you can reactivate the function by invoking it."
            }
          ]
        },
        "StateReason": {
          "allOf": [
            {
              "$ref": "#/definitions/StateReason"
            },
            {
              "description": "The reason for the function's current state."
            }
          ]
        },
        "StateReasonCode": {
          "allOf": [
            {
              "$ref": "#/definitions/StateReasonCode"
            },
            {
              "description": "The reason code for the function's current state. When the code is <code>Creating</code>, you can't invoke or modify the function."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The amount of time in seconds that Lambda allows a function to run before stopping it."
            }
          ]
        },
        "TracingConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/TracingConfigResponse"
            },
            {
              "description": "The function's AWS X-Ray tracing configuration."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/Version"
            },
            {
              "description": "The version of the Lambda function."
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfigResponse"
            },
            {
              "description": "The function's networking configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "FunctionEventInvokeConfig": {
      "example": {
        "DestinationConfig": {
          "OnFailure": {
            "Destination": "arn:aws:sqs:us-east-2:123456789012:destination"
          },
          "OnSuccess": {}
        },
        "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:$LATEST",
        "LastModified": 1573687896.493,
        "MaximumEventAgeInSeconds": 3600,
        "MaximumRetryAttempts": 0
      },
      "properties": {
        "DestinationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DestinationConfig"
            },
            {
              "description": "<p>A destination for events after they have been sent to a function for processing.</p> <p class=\"title\"> <b>Destinations</b> </p> <ul> <li> <p> <b>Function</b> - The Amazon Resource Name (ARN) of a Lambda function.</p> </li> <li> <p> <b>Queue</b> - The ARN of an SQS queue.</p> </li> <li> <p> <b>Topic</b> - The ARN of an SNS topic.</p> </li> <li> <p> <b>Event Bus</b> - The ARN of an Amazon EventBridge event bus.</p> </li> </ul>"
            }
          ]
        },
        "FunctionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the function."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time that the configuration was last updated."
            }
          ]
        },
        "MaximumEventAgeInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumEventAgeInSeconds"
            },
            {
              "description": "The maximum age of a request that Lambda sends to a function for processing."
            }
          ]
        },
        "MaximumRetryAttempts": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumRetryAttempts"
            },
            {
              "description": "The maximum number of times to retry when the function returns an error."
            }
          ]
        }
      },
      "type": "object"
    },
    "FunctionEventInvokeConfigList": {
      "items": {
        "$ref": "#/definitions/FunctionEventInvokeConfig"
      },
      "type": "array"
    },
    "FunctionList": {
      "items": {
        "$ref": "#/definitions/FunctionConfiguration"
      },
      "type": "array"
    },
    "FunctionName": {
      "maxLength": 140,
      "minLength": 1,
      "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
      "type": "string"
    },
    "FunctionResponseType": {
      "enum": [
        "ReportBatchItemFailures"
      ],
      "type": "string"
    },
    "FunctionResponseTypeList": {
      "items": {
        "$ref": "#/definitions/FunctionResponseType"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "FunctionVersion": {
      "enum": [
        "ALL"
      ],
      "type": "string"
    },
    "GetAccountSettingsRequest": {
      "properties": {},
      "title": "GetAccountSettingsRequest",
      "type": "object"
    },
    "GetAccountSettingsResponse": {
      "example": {
        "AccountLimit": {
          "CodeSizeUnzipped": 262144000,
          "CodeSizeZipped": 52428800,
          "ConcurrentExecutions": 1000,
          "TotalCodeSize": 80530636800,
          "UnreservedConcurrentExecutions": 1000
        },
        "AccountUsage": {
          "FunctionCount": 4,
          "TotalCodeSize": 9426
        }
      },
      "properties": {
        "AccountLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountLimit"
            },
            {
              "description": "Limits that are related to concurrency and code storage."
            }
          ]
        },
        "AccountUsage": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountUsage"
            },
            {
              "description": "The number of functions and amount of storage in use."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetAliasRequest": {
      "properties": {},
      "title": "GetAliasRequest",
      "type": "object"
    },
    "GetCodeSigningConfigRequest": {
      "properties": {},
      "title": "GetCodeSigningConfigRequest",
      "type": "object"
    },
    "GetCodeSigningConfigResponse": {
      "properties": {
        "CodeSigningConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfig"
            },
            {
              "description": "The code signing configuration"
            }
          ]
        }
      },
      "required": [
        "CodeSigningConfig"
      ],
      "type": "object"
    },
    "GetEventSourceMappingRequest": {
      "properties": {},
      "title": "GetEventSourceMappingRequest",
      "type": "object"
    },
    "GetFunctionCodeSigningConfigRequest": {
      "properties": {},
      "title": "GetFunctionCodeSigningConfigRequest",
      "type": "object"
    },
    "GetFunctionCodeSigningConfigResponse": {
      "properties": {
        "CodeSigningConfigArn": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfigArn"
            },
            {
              "description": "The The Amazon Resource Name (ARN) of the code signing configuration."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionName"
            },
            {
              "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"
            }
          ]
        }
      },
      "required": [
        "CodeSigningConfigArn",
        "FunctionName"
      ],
      "type": "object"
    },
    "GetFunctionConcurrencyRequest": {
      "properties": {},
      "title": "GetFunctionConcurrencyRequest",
      "type": "object"
    },
    "GetFunctionConcurrencyResponse": {
      "example": {
        "ReservedConcurrentExecutions": 250
      },
      "properties": {
        "ReservedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/ReservedConcurrentExecutions"
            },
            {
              "description": "The number of simultaneous executions that are reserved for the function."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetFunctionConfigurationRequest": {
      "properties": {},
      "title": "GetFunctionConfigurationRequest",
      "type": "object"
    },
    "GetFunctionEventInvokeConfigRequest": {
      "properties": {},
      "title": "GetFunctionEventInvokeConfigRequest",
      "type": "object"
    },
    "GetFunctionRequest": {
      "properties": {},
      "title": "GetFunctionRequest",
      "type": "object"
    },
    "GetFunctionResponse": {
      "example": {
        "Code": {
          "Location": "https://awslambda-us-west-2-tasks.s3.us-west-2.amazonaws.com/snapshots/123456789012/my-function-e7d9d1ed-xmpl-4f79-904a-4b87f2681f30?versionId=sH3TQwBOaUy...",
          "RepositoryType": "S3"
        },
        "Configuration": {
          "CodeSha256": "YFgDgEKG3ugvF1+pX64gV6tu9qNuIYNUdgJm8nCxsm4=",
          "CodeSize": 5797206,
          "Description": "Process image objects from Amazon S3.",
          "Environment": {
            "Variables": {
              "BUCKET": "my-bucket-1xpuxmplzrlbh",
              "PREFIX": "inbound"
            }
          },
          "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
          "FunctionName": "my-function",
          "Handler": "index.handler",
          "KMSKeyArn": "arn:aws:kms:us-west-2:123456789012:key/b0844d6c-xmpl-4463-97a4-d49f50839966",
          "LastModified": "2020-04-10T19:06:32.563+0000",
          "LastUpdateStatus": "Successful",
          "MemorySize": 256,
          "RevisionId": "b75dcd81-xmpl-48a8-a75a-93ba8b5b9727",
          "Role": "arn:aws:iam::123456789012:role/lambda-role",
          "Runtime": "nodejs12.x",
          "State": "Active",
          "Timeout": 15,
          "TracingConfig": {
            "Mode": "Active"
          },
          "Version": "$LATEST"
        },
        "Tags": {
          "DEPARTMENT": "Assets"
        }
      },
      "properties": {
        "Code": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionCodeLocation"
            },
            {
              "description": "The deployment package of the function or version."
            }
          ]
        },
        "Concurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/Concurrency"
            },
            {
              "description": "The function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">reserved concurrency</a>."
            }
          ]
        },
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionConfiguration"
            },
            {
              "description": "The configuration of the function or version."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "The function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetLayerVersionByArnRequest": {
      "properties": {},
      "title": "GetLayerVersionByArnRequest",
      "type": "object"
    },
    "GetLayerVersionPolicyRequest": {
      "properties": {},
      "title": "GetLayerVersionPolicyRequest",
      "type": "object"
    },
    "GetLayerVersionPolicyResponse": {
      "properties": {
        "Policy": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The policy document."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A unique identifier for the current revision of the policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetLayerVersionRequest": {
      "properties": {},
      "title": "GetLayerVersionRequest",
      "type": "object"
    },
    "GetLayerVersionResponse": {
      "example": {
        "CompatibleRuntimes": [
          "python3.8"
        ],
        "Content": {
          "CodeSha256": "6x+xmpl/M3BnQUk7gS9sGmfeFsR/npojXoA3fZUv4eU=",
          "CodeSize": 9529009,
          "Location": "https://awslambda-us-east-2-layers.s3.us-east-2.amazonaws.com/snapshots/123456789012/blank-python-lib-e5212378-xmpl-44ee-8398-9d8ec5113949?versionId=WbZnvf..."
        },
        "CreatedDate": "2020-03-31T00:35:18.949+0000",
        "Description": "Dependencies for the blank-python sample app.",
        "LayerArn": "arn:aws:lambda:us-east-2:123456789012:layer:blank-python-lib",
        "LayerVersionArn": "arn:aws:lambda:us-east-2:123456789012:layer:blank-python-lib:3",
        "Version": 3
      },
      "properties": {
        "CompatibleRuntimes": {
          "allOf": [
            {
              "$ref": "#/definitions/CompatibleRuntimes"
            },
            {
              "description": "The layer's compatible runtimes."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionContentOutput"
            },
            {
              "description": "Details about the layer version."
            }
          ]
        },
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date that the layer version was created, in <a href=\"https://www.w3.org/TR/NOTE-datetime\">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD)."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The description of the version."
            }
          ]
        },
        "LayerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerArn"
            },
            {
              "description": "The ARN of the layer."
            }
          ]
        },
        "LayerVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionArn"
            },
            {
              "description": "The ARN of the layer version."
            }
          ]
        },
        "LicenseInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseInfo"
            },
            {
              "description": "The layer's software license."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionNumber"
            },
            {
              "description": "The version number."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetPolicyRequest": {
      "properties": {},
      "title": "GetPolicyRequest",
      "type": "object"
    },
    "GetPolicyResponse": {
      "example": {
        "Policy": "{\"Version\":\"2012-10-17\",\"Id\":\"default\",\"Statement\":[{\"Sid\":\"xaccount\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::123456789012:root\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"}]}",
        "RevisionId": "4843f2f6-7c59-4fda-b484-afd0bc0e22b8"
      },
      "properties": {
        "Policy": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The resource-based policy."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A unique identifier for the current revision of the policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetProvisionedConcurrencyConfigRequest": {
      "properties": {},
      "title": "GetProvisionedConcurrencyConfigRequest",
      "type": "object"
    },
    "GetProvisionedConcurrencyConfigResponse": {
      "example": {
        "AllocatedProvisionedConcurrentExecutions": 100,
        "AvailableProvisionedConcurrentExecutions": 100,
        "LastModified": "2019-12-31T20:28:49+0000",
        "RequestedProvisionedConcurrentExecutions": 100,
        "Status": "READY"
      },
      "properties": {
        "AllocatedProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The amount of provisioned concurrency allocated."
            }
          ]
        },
        "AvailableProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The amount of provisioned concurrency available."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that a user last updated the configuration, in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601 format</a>."
            }
          ]
        },
        "RequestedProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/PositiveInteger"
            },
            {
              "description": "The amount of provisioned concurrency requested."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ProvisionedConcurrencyStatusEnum"
            },
            {
              "description": "The status of the allocation process."
            }
          ]
        },
        "StatusReason": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "For failed allocations, the reason that provisioned concurrency could not be allocated."
            }
          ]
        }
      },
      "type": "object"
    },
    "Handler": {
      "maxLength": 128,
      "pattern": "[^\\s]+",
      "type": "string"
    },
    "HttpStatus": {
      "type": "integer"
    },
    "ImageConfig": {
      "description": "Configuration values that override the container image Dockerfile settings. See <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/images-parms.html\">Container settings</a>. ",
      "properties": {
        "Command": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "Specifies parameters that you want to pass in with ENTRYPOINT. "
            }
          ]
        },
        "EntryPoint": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "Specifies the entry point to their application, which is typically the location of the runtime executable."
            }
          ]
        },
        "WorkingDirectory": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkingDirectory"
            },
            {
              "description": "Specifies the working directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "ImageConfigError": {
      "description": "Error response to GetFunctionConfiguration.",
      "properties": {
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Error code."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/SensitiveString"
            },
            {
              "description": "Error message."
            }
          ]
        }
      },
      "type": "object"
    },
    "ImageConfigResponse": {
      "description": "Response to GetFunctionConfiguration request.",
      "properties": {
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/ImageConfigError"
            },
            {
              "description": "Error response to GetFunctionConfiguration."
            }
          ]
        },
        "ImageConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/ImageConfig"
            },
            {
              "description": "Configuration values that override the container image Dockerfile."
            }
          ]
        }
      },
      "type": "object"
    },
    "Integer": {
      "type": "integer"
    },
    "InvalidCodeSignatureException": {},
    "InvalidParameterValueException": {},
    "InvalidRequestContentException": {},
    "InvalidRuntimeException": {},
    "InvalidSecurityGroupIDException": {},
    "InvalidSubnetIDException": {},
    "InvalidZipFileException": {},
    "InvocationRequest": {
      "properties": {
        "Payload": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "The JSON that you want to provide to your Lambda function as input."
            }
          ]
        }
      },
      "title": "InvocationRequest",
      "type": "object"
    },
    "InvocationResponse": {
      "example": {
        "Payload": "",
        "StatusCode": 202
      },
      "properties": {
        "Payload": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "The response from the function, or an error object."
            }
          ]
        },
        "StatusCode": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The HTTP status code is in the 200 range for a successful request. For the <code>RequestResponse</code> invocation type, this status code is 200. For the <code>Event</code> invocation type, this status code is 202. For the <code>DryRun</code> invocation type, the status code is 204."
            }
          ]
        }
      },
      "type": "object"
    },
    "InvocationType": {
      "enum": [
        "Event",
        "RequestResponse",
        "DryRun"
      ],
      "type": "string"
    },
    "InvokeAsyncRequest": {
      "properties": {
        "InvokeArgs": {
          "allOf": [
            {
              "$ref": "#/definitions/BlobStream"
            },
            {
              "description": "The JSON that you want to provide to your Lambda function as input."
            }
          ]
        }
      },
      "required": [
        "InvokeArgs"
      ],
      "title": "InvokeAsyncRequest",
      "type": "object",
      "x-deprecated": true
    },
    "InvokeAsyncResponse": {
      "description": "A success response (<code>202 Accepted</code>) indicates that the request is queued for invocation. ",
      "example": {
        "Status": 202
      },
      "properties": {
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpStatus"
            },
            {
              "description": "The status code."
            }
          ]
        }
      },
      "type": "object",
      "x-deprecated": true
    },
    "KMSAccessDeniedException": {},
    "KMSDisabledException": {},
    "KMSInvalidStateException": {},
    "KMSKeyArn": {
      "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()",
      "type": "string"
    },
    "KMSNotFoundException": {},
    "LastUpdateStatus": {
      "enum": [
        "Successful",
        "Failed",
        "InProgress"
      ],
      "type": "string"
    },
    "LastUpdateStatusReason": {
      "type": "string"
    },
    "LastUpdateStatusReasonCode": {
      "enum": [
        "EniLimitExceeded",
        "InsufficientRolePermissions",
        "InvalidConfiguration",
        "InternalError",
        "SubnetOutOfIPAddresses",
        "InvalidSubnet",
        "InvalidSecurityGroup",
        "ImageDeleted",
        "ImageAccessDenied",
        "InvalidImage"
      ],
      "type": "string"
    },
    "Layer": {
      "description": "An <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the function layer."
            }
          ]
        },
        "CodeSize": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The size of the layer archive in bytes."
            }
          ]
        },
        "SigningJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of a signing job."
            }
          ]
        },
        "SigningProfileVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for a signing profile version."
            }
          ]
        }
      },
      "type": "object"
    },
    "LayerArn": {
      "maxLength": 140,
      "minLength": 1,
      "pattern": "arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+",
      "type": "string"
    },
    "LayerList": {
      "items": {
        "$ref": "#/definitions/LayerVersionArn"
      },
      "type": "array"
    },
    "LayerName": {
      "maxLength": 140,
      "minLength": 1,
      "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
      "type": "string"
    },
    "LayerPermissionAllowedAction": {
      "pattern": "lambda:GetLayerVersion",
      "type": "string"
    },
    "LayerPermissionAllowedPrincipal": {
      "pattern": "\\d{12}|\\*|arn:(aws[a-zA-Z-]*):iam::\\d{12}:root",
      "type": "string"
    },
    "LayerVersionArn": {
      "maxLength": 140,
      "minLength": 1,
      "pattern": "arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+",
      "type": "string"
    },
    "LayerVersionContentInput": {
      "description": "A ZIP archive that contains the contents of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly.",
      "properties": {
        "S3Bucket": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Bucket"
            },
            {
              "description": "The Amazon S3 bucket of the layer archive."
            }
          ]
        },
        "S3Key": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Key"
            },
            {
              "description": "The Amazon S3 key of the layer archive."
            }
          ]
        },
        "S3ObjectVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/S3ObjectVersion"
            },
            {
              "description": "For versioned objects, the version of the layer archive object to use."
            }
          ]
        },
        "ZipFile": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "The base64-encoded contents of the layer archive. AWS SDK and AWS CLI clients handle the encoding for you."
            }
          ]
        }
      },
      "type": "object"
    },
    "LayerVersionContentOutput": {
      "description": "Details about a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>.",
      "properties": {
        "CodeSha256": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The SHA-256 hash of the layer archive."
            }
          ]
        },
        "CodeSize": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The size of the layer archive in bytes."
            }
          ]
        },
        "Location": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A link to the layer archive in Amazon S3 that is valid for 10 minutes."
            }
          ]
        },
        "SigningJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of a signing job."
            }
          ]
        },
        "SigningProfileVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) for a signing profile version."
            }
          ]
        }
      },
      "type": "object"
    },
    "LayerVersionNumber": {
      "type": "integer"
    },
    "LayerVersionsList": {
      "items": {
        "$ref": "#/definitions/LayerVersionsListItem"
      },
      "type": "array"
    },
    "LayerVersionsListItem": {
      "description": "Details about a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>.",
      "properties": {
        "CompatibleRuntimes": {
          "allOf": [
            {
              "$ref": "#/definitions/CompatibleRuntimes"
            },
            {
              "description": "The layer's compatible runtimes."
            }
          ]
        },
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date that the version was created, in ISO 8601 format. For example, <code>2018-11-27T15:10:45.123+0000</code>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The description of the version."
            }
          ]
        },
        "LayerVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionArn"
            },
            {
              "description": "The ARN of the layer version."
            }
          ]
        },
        "LicenseInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseInfo"
            },
            {
              "description": "The layer's open-source license."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionNumber"
            },
            {
              "description": "The version number."
            }
          ]
        }
      },
      "type": "object"
    },
    "LayersList": {
      "items": {
        "$ref": "#/definitions/LayersListItem"
      },
      "type": "array"
    },
    "LayersListItem": {
      "description": "Details about an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>.",
      "properties": {
        "LatestMatchingVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionsListItem"
            },
            {
              "description": "The newest version of the layer."
            }
          ]
        },
        "LayerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the function layer."
            }
          ]
        },
        "LayerName": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerName"
            },
            {
              "description": "The name of the layer."
            }
          ]
        }
      },
      "type": "object"
    },
    "LayersReferenceList": {
      "items": {
        "$ref": "#/definitions/Layer"
      },
      "type": "array"
    },
    "LicenseInfo": {
      "maxLength": 512,
      "type": "string"
    },
    "ListAliasesRequest": {
      "properties": {},
      "title": "ListAliasesRequest",
      "type": "object"
    },
    "ListAliasesResponse": {
      "example": {
        "Aliases": [
          {
            "AliasArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function:BETA",
            "Description": "Production environment BLUE.",
            "FunctionVersion": "2",
            "Name": "BLUE",
            "RevisionId": "a410117f-xmpl-494e-8035-7e204bb7933b",
            "RoutingConfig": {
              "AdditionalVersionWeights": {
                "1": 0.7
              }
            }
          },
          {
            "AliasArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function:LIVE",
            "Description": "Production environment GREEN.",
            "FunctionVersion": "1",
            "Name": "GREEN",
            "RevisionId": "21d40116-xmpl-40ba-9360-3ea284da1bb5"
          }
        ]
      },
      "properties": {
        "Aliases": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasList"
            },
            {
              "description": "A list of aliases."
            }
          ]
        },
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The pagination token that's included if more results are available."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListCodeSigningConfigsRequest": {
      "properties": {},
      "title": "ListCodeSigningConfigsRequest",
      "type": "object"
    },
    "ListCodeSigningConfigsResponse": {
      "properties": {
        "CodeSigningConfigs": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfigList"
            },
            {
              "description": "The code signing configurations"
            }
          ]
        },
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The pagination token that's included if more results are available."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListEventSourceMappingsRequest": {
      "properties": {},
      "title": "ListEventSourceMappingsRequest",
      "type": "object"
    },
    "ListEventSourceMappingsResponse": {
      "example": {
        "EventSourceMappings": [
          {
            "BatchSize": 5,
            "EventSourceArn": "arn:aws:sqs:us-west-2:123456789012:mySQSqueue",
            "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
            "LastModified": 1569284520.333,
            "State": "Enabled",
            "StateTransitionReason": "USER_INITIATED",
            "UUID": "a1b2c3d4-5678-90ab-cdef-11111EXAMPLE"
          }
        ]
      },
      "properties": {
        "EventSourceMappings": {
          "allOf": [
            {
              "$ref": "#/definitions/EventSourceMappingsList"
            },
            {
              "description": "A list of event source mappings."
            }
          ]
        },
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token that's returned when the response doesn't contain all event source mappings."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListFunctionEventInvokeConfigsRequest": {
      "properties": {},
      "title": "ListFunctionEventInvokeConfigsRequest",
      "type": "object"
    },
    "ListFunctionEventInvokeConfigsResponse": {
      "example": {
        "FunctionEventInvokeConfigs": [
          {
            "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:GREEN",
            "LastModified": 1577824406.719,
            "MaximumEventAgeInSeconds": 1800,
            "MaximumRetryAttempts": 2
          },
          {
            "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:BLUE",
            "LastModified": 1577824396.653,
            "MaximumEventAgeInSeconds": 3600,
            "MaximumRetryAttempts": 0
          }
        ]
      },
      "properties": {
        "FunctionEventInvokeConfigs": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionEventInvokeConfigList"
            },
            {
              "description": "A list of configurations."
            }
          ]
        },
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The pagination token that's included if more results are available."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListFunctionsByCodeSigningConfigRequest": {
      "properties": {},
      "title": "ListFunctionsByCodeSigningConfigRequest",
      "type": "object"
    },
    "ListFunctionsByCodeSigningConfigResponse": {
      "properties": {
        "FunctionArns": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionArnList"
            },
            {
              "description": "The function ARNs. "
            }
          ]
        },
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The pagination token that's included if more results are available."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListFunctionsRequest": {
      "properties": {},
      "title": "ListFunctionsRequest",
      "type": "object"
    },
    "ListFunctionsResponse": {
      "description": "A list of Lambda functions.",
      "example": {
        "Functions": [
          {
            "CodeSha256": "dBG9m8SGdmlEjw/JYXlhhvCrAv5TxvXsbL/RMr0fT/I=",
            "CodeSize": 294,
            "Description": "",
            "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:helloworld",
            "FunctionName": "helloworld",
            "Handler": "helloworld.handler",
            "LastModified": "2019-09-23T18:32:33.857+0000",
            "MemorySize": 128,
            "RevisionId": "1718e831-badf-4253-9518-d0644210af7b",
            "Role": "arn:aws:iam::123456789012:role/service-role/MyTestFunction-role-zgur6bf4",
            "Runtime": "nodejs10.x",
            "Timeout": 3,
            "TracingConfig": {
              "Mode": "PassThrough"
            },
            "Version": "$LATEST"
          },
          {
            "CodeSha256": "sU0cJ2/hOZevwV/lTxCuQqK3gDZP3i8gUoqUUVRmY6E=",
            "CodeSize": 266,
            "Description": "",
            "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
            "FunctionName": "my-function",
            "Handler": "index.handler",
            "LastModified": "2019-10-01T16:47:28.490+0000",
            "MemorySize": 256,
            "RevisionId": "93017fc9-59cb-41dc-901b-4845ce4bf668",
            "Role": "arn:aws:iam::123456789012:role/service-role/helloWorldPython-role-uy3l9qyq",
            "Runtime": "nodejs10.x",
            "Timeout": 3,
            "TracingConfig": {
              "Mode": "PassThrough"
            },
            "Version": "$LATEST",
            "VpcConfig": {
              "SecurityGroupIds": [],
              "SubnetIds": [],
              "VpcId": ""
            }
          }
        ],
        "NextMarker": ""
      },
      "properties": {
        "Functions": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionList"
            },
            {
              "description": "A list of Lambda functions."
            }
          ]
        },
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The pagination token that's included if more results are available."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListLayerVersionsRequest": {
      "properties": {},
      "title": "ListLayerVersionsRequest",
      "type": "object"
    },
    "ListLayerVersionsResponse": {
      "example": {
        "LayerVersions": [
          {
            "CompatibleRuntimes": [
              "java8"
            ],
            "CreatedDate": "2020-03-18T23:38:42.284+0000",
            "Description": "Dependencies for the blank-java sample app.",
            "LayerVersionArn": "arn:aws:lambda:us-east-2:123456789012:layer:blank-java-lib:7",
            "Version": 7
          },
          {
            "CompatibleRuntimes": [
              "java8"
            ],
            "CreatedDate": "2020-03-17T07:24:21.960+0000",
            "Description": "Dependencies for the blank-java sample app.",
            "LayerVersionArn": "arn:aws:lambda:us-east-2:123456789012:layer:blank-java-lib:6",
            "Version": 6
          }
        ]
      },
      "properties": {
        "LayerVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionsList"
            },
            {
              "description": "A list of versions."
            }
          ]
        },
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token returned when the response doesn't contain all versions."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListLayersRequest": {
      "properties": {},
      "title": "ListLayersRequest",
      "type": "object"
    },
    "ListLayersResponse": {
      "example": {
        "Layers": [
          {
            "LatestMatchingVersion": {
              "CompatibleRuntimes": [
                "python3.6",
                "python3.7"
              ],
              "CreatedDate": "2018-11-15T00:37:46.592+0000",
              "Description": "My layer",
              "LayerVersionArn": "arn:aws:lambda:us-east-2:123456789012:layer:my-layer:2",
              "Version": 2
            },
            "LayerArn": "arn:aws:lambda:us-east-2:123456789012:layer:my-layer",
            "LayerName": "my-layer"
          }
        ]
      },
      "properties": {
        "Layers": {
          "allOf": [
            {
              "$ref": "#/definitions/LayersList"
            },
            {
              "description": "A list of function layers."
            }
          ]
        },
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A pagination token returned when the response doesn't contain all layers."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListProvisionedConcurrencyConfigsRequest": {
      "properties": {},
      "title": "ListProvisionedConcurrencyConfigsRequest",
      "type": "object"
    },
    "ListProvisionedConcurrencyConfigsResponse": {
      "example": {
        "ProvisionedConcurrencyConfigs": [
          {
            "AllocatedProvisionedConcurrentExecutions": 100,
            "AvailableProvisionedConcurrentExecutions": 100,
            "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:GREEN",
            "LastModified": "2019-12-31T20:29:00+0000",
            "RequestedProvisionedConcurrentExecutions": 100,
            "Status": "READY"
          },
          {
            "AllocatedProvisionedConcurrentExecutions": 100,
            "AvailableProvisionedConcurrentExecutions": 100,
            "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:BLUE",
            "LastModified": "2019-12-31T20:28:49+0000",
            "RequestedProvisionedConcurrentExecutions": 100,
            "Status": "READY"
          }
        ]
      },
      "properties": {
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The pagination token that's included if more results are available."
            }
          ]
        },
        "ProvisionedConcurrencyConfigs": {
          "allOf": [
            {
              "$ref": "#/definitions/ProvisionedConcurrencyConfigList"
            },
            {
              "description": "A list of provisioned concurrency configurations."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsRequest": {
      "properties": {},
      "title": "ListTagsRequest",
      "type": "object"
    },
    "ListTagsResponse": {
      "example": {
        "Tags": {
          "Category": "Web Tools",
          "Department": "Sales"
        }
      },
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "The function's tags."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListVersionsByFunctionRequest": {
      "properties": {},
      "title": "ListVersionsByFunctionRequest",
      "type": "object"
    },
    "ListVersionsByFunctionResponse": {
      "example": {
        "Versions": [
          {
            "CodeSha256": "YFgDgEKG3ugvF1+pX64gV6tu9qNuIYNUdgJm8nCxsm4=",
            "CodeSize": 5797206,
            "Description": "Process image objects from Amazon S3.",
            "Environment": {
              "Variables": {
                "BUCKET": "my-bucket-1xpuxmplzrlbh",
                "PREFIX": "inbound"
              }
            },
            "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
            "FunctionName": "my-function",
            "Handler": "index.handler",
            "KMSKeyArn": "arn:aws:kms:us-west-2:123456789012:key/b0844d6c-xmpl-4463-97a4-d49f50839966",
            "LastModified": "2020-04-10T19:06:32.563+0000",
            "MemorySize": 256,
            "RevisionId": "850ca006-2d98-4ff4-86db-8766e9d32fe9",
            "Role": "arn:aws:iam::123456789012:role/lambda-role",
            "Runtime": "nodejs12.x",
            "Timeout": 15,
            "TracingConfig": {
              "Mode": "Active"
            },
            "Version": "$LATEST"
          },
          {
            "CodeSha256": "YFgDgEKG3ugvF1+pX64gV6tu9qNuIYNUdgJm8nCxsm4=",
            "CodeSize": 5797206,
            "Description": "Process image objects from Amazon S3.",
            "Environment": {
              "Variables": {
                "BUCKET": "my-bucket-1xpuxmplzrlbh",
                "PREFIX": "inbound"
              }
            },
            "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
            "FunctionName": "my-function",
            "Handler": "index.handler",
            "KMSKeyArn": "arn:aws:kms:us-west-2:123456789012:key/b0844d6c-xmpl-4463-97a4-d49f50839966",
            "LastModified": "2020-04-10T19:06:32.563+0000",
            "MemorySize": 256,
            "RevisionId": "b75dcd81-xmpl-48a8-a75a-93ba8b5b9727",
            "Role": "arn:aws:iam::123456789012:role/lambda-role",
            "Runtime": "nodejs12.x",
            "Timeout": 5,
            "TracingConfig": {
              "Mode": "Active"
            },
            "Version": "1"
          }
        ]
      },
      "properties": {
        "NextMarker": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The pagination token that's included if more results are available."
            }
          ]
        },
        "Versions": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionList"
            },
            {
              "description": "A list of Lambda function versions."
            }
          ]
        }
      },
      "type": "object"
    },
    "LocalMountPath": {
      "maxLength": 160,
      "pattern": "^/mnt/[a-zA-Z0-9-_.]+$",
      "type": "string"
    },
    "LogType": {
      "enum": [
        "None",
        "Tail"
      ],
      "type": "string"
    },
    "Long": {
      "type": "integer"
    },
    "MasterRegion": {
      "pattern": "ALL|[a-z]{2}(-gov)?-[a-z]+-\\d{1}",
      "type": "string"
    },
    "MaxFunctionEventInvokeConfigListItems": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxLayerListItems": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxListItems": {
      "maximum": 10000,
      "minimum": 1,
      "type": "integer"
    },
    "MaxProvisionedConcurrencyConfigListItems": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaximumBatchingWindowInSeconds": {
      "maximum": 300,
      "minimum": 0,
      "type": "integer"
    },
    "MaximumEventAgeInSeconds": {
      "maximum": 21600,
      "minimum": 60,
      "type": "integer"
    },
    "MaximumRecordAgeInSeconds": {
      "maximum": 604800,
      "minimum": -1,
      "type": "integer"
    },
    "MaximumRetryAttempts": {
      "maximum": 2,
      "minimum": 0,
      "type": "integer"
    },
    "MaximumRetryAttemptsEventSourceMapping": {
      "maximum": 10000,
      "minimum": -1,
      "type": "integer"
    },
    "MemorySize": {
      "maximum": 10240,
      "minimum": 128,
      "type": "integer"
    },
    "NameSpacedFunctionArn": {
      "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_\\.]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
      "type": "string"
    },
    "NamespacedFunctionName": {
      "maxLength": 170,
      "minLength": 1,
      "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
      "type": "string"
    },
    "NamespacedStatementId": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "([a-zA-Z0-9-_.]+)",
      "type": "string"
    },
    "NonNegativeInteger": {
      "minimum": 0,
      "type": "integer"
    },
    "OnFailure": {
      "description": "A destination for events that failed processing.",
      "properties": {
        "Destination": {
          "allOf": [
            {
              "$ref": "#/definitions/DestinationArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the destination resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "OnSuccess": {
      "description": "A destination for events that were processed successfully.",
      "properties": {
        "Destination": {
          "allOf": [
            {
              "$ref": "#/definitions/DestinationArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the destination resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "OrganizationId": {
      "pattern": "o-[a-z0-9]{10,32}",
      "type": "string"
    },
    "PackageType": {
      "enum": [
        "Zip",
        "Image"
      ],
      "type": "string"
    },
    "ParallelizationFactor": {
      "maximum": 10,
      "minimum": 1,
      "type": "integer"
    },
    "PolicyLengthExceededException": {},
    "PositiveInteger": {
      "minimum": 1,
      "type": "integer"
    },
    "PreconditionFailedException": {},
    "Principal": {
      "pattern": ".*",
      "type": "string"
    },
    "ProvisionedConcurrencyConfigList": {
      "items": {
        "$ref": "#/definitions/ProvisionedConcurrencyConfigListItem"
      },
      "type": "array"
    },
    "ProvisionedConcurrencyConfigListItem": {
      "description": "Details about the provisioned concurrency configuration for a function alias or version.",
      "properties": {
        "AllocatedProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The amount of provisioned concurrency allocated."
            }
          ]
        },
        "AvailableProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The amount of provisioned concurrency available."
            }
          ]
        },
        "FunctionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the alias or version."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that a user last updated the configuration, in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601 format</a>."
            }
          ]
        },
        "RequestedProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/PositiveInteger"
            },
            {
              "description": "The amount of provisioned concurrency requested."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ProvisionedConcurrencyStatusEnum"
            },
            {
              "description": "The status of the allocation process."
            }
          ]
        },
        "StatusReason": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "For failed allocations, the reason that provisioned concurrency could not be allocated."
            }
          ]
        }
      },
      "type": "object"
    },
    "ProvisionedConcurrencyConfigNotFoundException": {},
    "ProvisionedConcurrencyStatusEnum": {
      "enum": [
        "IN_PROGRESS",
        "READY",
        "FAILED"
      ],
      "type": "string"
    },
    "PublishLayerVersionRequest": {
      "properties": {
        "CompatibleRuntimes": {
          "allOf": [
            {
              "$ref": "#/definitions/CompatibleRuntimes"
            },
            {
              "description": "A list of compatible <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">function runtimes</a>. Used for filtering with <a>ListLayers</a> and <a>ListLayerVersions</a>."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionContentInput"
            },
            {
              "description": "The function layer archive."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The description of the version."
            }
          ]
        },
        "LicenseInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseInfo"
            },
            {
              "description": "<p>The layer's software license. It can be any of the following:</p> <ul> <li> <p>An <a href=\"https://spdx.org/licenses/\">SPDX license identifier</a>. For example, <code>MIT</code>.</p> </li> <li> <p>The URL of a license hosted on the internet. For example, <code>https://opensource.org/licenses/MIT</code>.</p> </li> <li> <p>The full text of the license.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "Content"
      ],
      "title": "PublishLayerVersionRequest",
      "type": "object"
    },
    "PublishLayerVersionResponse": {
      "example": {
        "CompatibleRuntimes": [
          "python3.6",
          "python3.7"
        ],
        "Content": {
          "CodeSha256": "tv9jJO+rPbXUUXuRKi7CwHzKtLDkDRJLB3cC3Z/ouXo=",
          "CodeSize": 169,
          "Location": "https://awslambda-us-west-2-layers.s3.us-west-2.amazonaws.com/snapshots/123456789012/my-layer-4aaa2fbb-ff77-4b0a-ad92-5b78a716a96a?versionId=27iWyA73cCAYqyH..."
        },
        "CreatedDate": "2018-11-14T23:03:52.894+0000",
        "Description": "My Python layer",
        "LayerArn": "arn:aws:lambda:us-west-2:123456789012:layer:my-layer",
        "LayerVersionArn": "arn:aws:lambda:us-west-2:123456789012:layer:my-layer:1",
        "LicenseInfo": "MIT",
        "Version": 1
      },
      "properties": {
        "CompatibleRuntimes": {
          "allOf": [
            {
              "$ref": "#/definitions/CompatibleRuntimes"
            },
            {
              "description": "The layer's compatible runtimes."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionContentOutput"
            },
            {
              "description": "Details about the layer version."
            }
          ]
        },
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date that the layer version was created, in <a href=\"https://www.w3.org/TR/NOTE-datetime\">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD)."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The description of the version."
            }
          ]
        },
        "LayerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerArn"
            },
            {
              "description": "The ARN of the layer."
            }
          ]
        },
        "LayerVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionArn"
            },
            {
              "description": "The ARN of the layer version."
            }
          ]
        },
        "LicenseInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseInfo"
            },
            {
              "description": "The layer's software license."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerVersionNumber"
            },
            {
              "description": "The version number."
            }
          ]
        }
      },
      "type": "object"
    },
    "PublishVersionRequest": {
      "properties": {
        "CodeSha256": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a version if the function code has changed since you last updated it. You can get the hash for the version that you uploaded from the output of <a>UpdateFunctionCode</a>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description for the version to override the description in the function configuration."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Only update the function if the revision ID matches the ID that's specified. Use this option to avoid publishing a version if the function configuration has changed since you last updated it."
            }
          ]
        }
      },
      "title": "PublishVersionRequest",
      "type": "object"
    },
    "PutFunctionCodeSigningConfigRequest": {
      "properties": {
        "CodeSigningConfigArn": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfigArn"
            },
            {
              "description": "The The Amazon Resource Name (ARN) of the code signing configuration."
            }
          ]
        }
      },
      "required": [
        "CodeSigningConfigArn"
      ],
      "title": "PutFunctionCodeSigningConfigRequest",
      "type": "object"
    },
    "PutFunctionCodeSigningConfigResponse": {
      "properties": {
        "CodeSigningConfigArn": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfigArn"
            },
            {
              "description": "The The Amazon Resource Name (ARN) of the code signing configuration."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionName"
            },
            {
              "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"
            }
          ]
        }
      },
      "required": [
        "CodeSigningConfigArn",
        "FunctionName"
      ],
      "type": "object"
    },
    "PutFunctionConcurrencyRequest": {
      "properties": {
        "ReservedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/ReservedConcurrentExecutions"
            },
            {
              "description": "The number of simultaneous executions to reserve for the function."
            }
          ]
        }
      },
      "required": [
        "ReservedConcurrentExecutions"
      ],
      "title": "PutFunctionConcurrencyRequest",
      "type": "object"
    },
    "PutFunctionEventInvokeConfigRequest": {
      "properties": {
        "DestinationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DestinationConfig"
            },
            {
              "description": "<p>A destination for events after they have been sent to a function for processing.</p> <p class=\"title\"> <b>Destinations</b> </p> <ul> <li> <p> <b>Function</b> - The Amazon Resource Name (ARN) of a Lambda function.</p> </li> <li> <p> <b>Queue</b> - The ARN of an SQS queue.</p> </li> <li> <p> <b>Topic</b> - The ARN of an SNS topic.</p> </li> <li> <p> <b>Event Bus</b> - The ARN of an Amazon EventBridge event bus.</p> </li> </ul>"
            }
          ]
        },
        "MaximumEventAgeInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumEventAgeInSeconds"
            },
            {
              "description": "The maximum age of a request that Lambda sends to a function for processing."
            }
          ]
        },
        "MaximumRetryAttempts": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumRetryAttempts"
            },
            {
              "description": "The maximum number of times to retry when the function returns an error."
            }
          ]
        }
      },
      "title": "PutFunctionEventInvokeConfigRequest",
      "type": "object"
    },
    "PutProvisionedConcurrencyConfigRequest": {
      "properties": {
        "ProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/PositiveInteger"
            },
            {
              "description": "The amount of provisioned concurrency to allocate for the version or alias."
            }
          ]
        }
      },
      "required": [
        "ProvisionedConcurrentExecutions"
      ],
      "title": "PutProvisionedConcurrencyConfigRequest",
      "type": "object"
    },
    "PutProvisionedConcurrencyConfigResponse": {
      "example": {
        "AllocatedProvisionedConcurrentExecutions": 0,
        "LastModified": "2019-11-21T19:32:12+0000",
        "RequestedProvisionedConcurrentExecutions": 100,
        "Status": "IN_PROGRESS"
      },
      "properties": {
        "AllocatedProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The amount of provisioned concurrency allocated."
            }
          ]
        },
        "AvailableProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The amount of provisioned concurrency available."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that a user last updated the configuration, in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601 format</a>."
            }
          ]
        },
        "RequestedProvisionedConcurrentExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/PositiveInteger"
            },
            {
              "description": "The amount of provisioned concurrency requested."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ProvisionedConcurrencyStatusEnum"
            },
            {
              "description": "The status of the allocation process."
            }
          ]
        },
        "StatusReason": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "For failed allocations, the reason that provisioned concurrency could not be allocated."
            }
          ]
        }
      },
      "type": "object"
    },
    "Qualifier": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "(|[a-zA-Z0-9$_-]+)",
      "type": "string"
    },
    "Queue": {
      "maxLength": 1000,
      "minLength": 1,
      "pattern": "[\\s\\S]*",
      "type": "string"
    },
    "Queues": {
      "items": {
        "$ref": "#/definitions/Queue"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "RemoveLayerVersionPermissionRequest": {
      "properties": {},
      "title": "RemoveLayerVersionPermissionRequest",
      "type": "object"
    },
    "RemovePermissionRequest": {
      "properties": {},
      "title": "RemovePermissionRequest",
      "type": "object"
    },
    "RequestTooLargeException": {},
    "ReservedConcurrentExecutions": {
      "minimum": 0,
      "type": "integer"
    },
    "ResourceArn": {
      "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()",
      "type": "string"
    },
    "ResourceConflictException": {},
    "ResourceInUseException": {},
    "ResourceNotFoundException": {},
    "ResourceNotReadyException": {},
    "RoleArn": {
      "pattern": "arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
      "type": "string"
    },
    "Runtime": {
      "enum": [
        "nodejs",
        "nodejs4.3",
        "nodejs6.10",
        "nodejs8.10",
        "nodejs10.x",
        "nodejs12.x",
        "java8",
        "java8.al2",
        "java11",
        "python2.7",
        "python3.6",
        "python3.7",
        "python3.8",
        "dotnetcore1.0",
        "dotnetcore2.0",
        "dotnetcore2.1",
        "dotnetcore3.1",
        "nodejs4.3-edge",
        "go1.x",
        "ruby2.5",
        "ruby2.7",
        "provided",
        "provided.al2"
      ],
      "type": "string"
    },
    "S3Bucket": {
      "maxLength": 63,
      "minLength": 3,
      "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
      "type": "string"
    },
    "S3Key": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "S3ObjectVersion": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "SecurityGroupId": {
      "type": "string"
    },
    "SecurityGroupIds": {
      "items": {
        "$ref": "#/definitions/SecurityGroupId"
      },
      "maxItems": 5,
      "type": "array"
    },
    "SelfManagedEventSource": {
      "description": "The Self-Managed Apache Kafka cluster for your event source.",
      "properties": {
        "Endpoints": {
          "allOf": [
            {
              "$ref": "#/definitions/Endpoints"
            },
            {
              "description": "The list of bootstrap servers for your Kafka brokers in the following format: <code>\"KAFKA_BOOTSTRAP_SERVERS\": [\"abc.xyz.com:xxxx\",\"abc2.xyz.com:xxxx\"]</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "SensitiveString": {
      "format": "password",
      "type": "string"
    },
    "ServiceException": {},
    "SigningProfileVersionArns": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "maxItems": 20,
      "minItems": 1,
      "type": "array"
    },
    "SourceAccessConfiguration": {
      "description": "You can specify the authentication protocol, or the VPC components to secure access to your event source.",
      "properties": {
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/SourceAccessType"
            },
            {
              "description": "<p>The type of authentication protocol or the VPC components for your event source. For example: <code>\"Type\":\"SASL_SCRAM_512_AUTH\"</code>.</p> <ul> <li> <p> <code>BASIC_AUTH</code> - (MQ) The Secrets Manager secret that stores your broker credentials.</p> </li> <li> <p> <code>VPC_SUBNET</code> - The subnets associated with your VPC. Lambda connects to these subnets to fetch data from your Kafka cluster.</p> </li> <li> <p> <code>VPC_SECURITY_GROUP</code> - The VPC security group used to manage access to your Kafka brokers.</p> </li> <li> <p> <code>SASL_SCRAM_256_AUTH</code> - The ARN of your secret key used for SASL SCRAM-256 authentication of your Kafka brokers.</p> </li> <li> <p> <code>SASL_SCRAM_512_AUTH</code> - The ARN of your secret key used for SASL SCRAM-512 authentication of your Kafka brokers.</p> </li> </ul>"
            }
          ]
        },
        "URI": {
          "allOf": [
            {
              "$ref": "#/definitions/URI"
            },
            {
              "description": "The value for your chosen configuration in <code>Type</code>. For example: <code>\"URI\": \"arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName\"</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "SourceAccessConfigurations": {
      "items": {
        "$ref": "#/definitions/SourceAccessConfiguration"
      },
      "maxItems": 22,
      "minItems": 1,
      "type": "array"
    },
    "SourceAccessType": {
      "enum": [
        "BASIC_AUTH",
        "VPC_SUBNET",
        "VPC_SECURITY_GROUP",
        "SASL_SCRAM_512_AUTH",
        "SASL_SCRAM_256_AUTH"
      ],
      "type": "string"
    },
    "SourceOwner": {
      "pattern": "\\d{12}",
      "type": "string"
    },
    "State": {
      "enum": [
        "Pending",
        "Active",
        "Inactive",
        "Failed"
      ],
      "type": "string"
    },
    "StateReason": {
      "type": "string"
    },
    "StateReasonCode": {
      "enum": [
        "Idle",
        "Creating",
        "Restoring",
        "EniLimitExceeded",
        "InsufficientRolePermissions",
        "InvalidConfiguration",
        "InternalError",
        "SubnetOutOfIPAddresses",
        "InvalidSubnet",
        "InvalidSecurityGroup",
        "ImageDeleted",
        "ImageAccessDenied",
        "InvalidImage"
      ],
      "type": "string"
    },
    "StatementId": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "([a-zA-Z0-9-_]+)",
      "type": "string"
    },
    "String": {
      "type": "string"
    },
    "StringList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "maxItems": 1500,
      "type": "array"
    },
    "SubnetIPAddressLimitReachedException": {},
    "SubnetId": {
      "type": "string"
    },
    "SubnetIds": {
      "items": {
        "$ref": "#/definitions/SubnetId"
      },
      "maxItems": 16,
      "type": "array"
    },
    "TagKey": {
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "A list of tags to apply to the function."
            }
          ]
        }
      },
      "required": [
        "Tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagValue": {
      "type": "string"
    },
    "Tags": {
      "additionalProperties": {
        "$ref": "#/definitions/TagValue"
      },
      "type": "object"
    },
    "Timeout": {
      "minimum": 1,
      "type": "integer"
    },
    "Timestamp": {
      "type": "string"
    },
    "TooManyRequestsException": {},
    "Topic": {
      "maxLength": 249,
      "minLength": 1,
      "pattern": "^[^.]([a-zA-Z0-9\\-_.]+)",
      "type": "string"
    },
    "Topics": {
      "items": {
        "$ref": "#/definitions/Topic"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "TracingConfig": {
      "description": "The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.",
      "properties": {
        "Mode": {
          "allOf": [
            {
              "$ref": "#/definitions/TracingMode"
            },
            {
              "description": "The tracing mode."
            }
          ]
        }
      },
      "type": "object"
    },
    "TracingConfigResponse": {
      "description": "The function's AWS X-Ray tracing configuration.",
      "properties": {
        "Mode": {
          "allOf": [
            {
              "$ref": "#/definitions/TracingMode"
            },
            {
              "description": "The tracing mode."
            }
          ]
        }
      },
      "type": "object"
    },
    "TracingMode": {
      "enum": [
        "Active",
        "PassThrough"
      ],
      "type": "string"
    },
    "TumblingWindowInSeconds": {
      "maximum": 900,
      "minimum": 0,
      "type": "integer"
    },
    "URI": {
      "maxLength": 200,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9-\\/*:_+=.@-]*",
      "type": "string"
    },
    "UnreservedConcurrentExecutions": {
      "minimum": 0,
      "type": "integer"
    },
    "UnsupportedMediaTypeException": {},
    "UntagResourceRequest": {
      "properties": {},
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UpdateAliasRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description of the alias."
            }
          ]
        },
        "FunctionVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/Version"
            },
            {
              "description": "The function version that the alias invokes."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Only update the alias if the revision ID matches the ID that's specified. Use this option to avoid modifying an alias that has changed since you last read it."
            }
          ]
        },
        "RoutingConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasRoutingConfiguration"
            },
            {
              "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html#configuring-alias-routing\">routing configuration</a> of the alias."
            }
          ]
        }
      },
      "title": "UpdateAliasRequest",
      "type": "object"
    },
    "UpdateCodeSigningConfigRequest": {
      "properties": {
        "AllowedPublishers": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedPublishers"
            },
            {
              "description": "Signing profiles for this code signing configuration."
            }
          ]
        },
        "CodeSigningPolicies": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningPolicies"
            },
            {
              "description": "The code signing policy."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "Descriptive name for this code signing configuration."
            }
          ]
        }
      },
      "title": "UpdateCodeSigningConfigRequest",
      "type": "object"
    },
    "UpdateCodeSigningConfigResponse": {
      "properties": {
        "CodeSigningConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeSigningConfig"
            },
            {
              "description": "The code signing configuration"
            }
          ]
        }
      },
      "required": [
        "CodeSigningConfig"
      ],
      "type": "object"
    },
    "UpdateEventSourceMappingRequest": {
      "properties": {
        "BatchSize": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchSize"
            },
            {
              "description": "<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Self-Managed Apache Kafka</b> - Default 100. Max 10,000.</p> </li> </ul>"
            }
          ]
        },
        "BisectBatchOnFunctionError": {
          "allOf": [
            {
              "$ref": "#/definitions/BisectBatchOnFunctionError"
            },
            {
              "description": "(Streams) If the function returns an error, split the batch in two and retry."
            }
          ]
        },
        "DestinationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DestinationConfig"
            },
            {
              "description": "(Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records."
            }
          ]
        },
        "Enabled": {
          "allOf": [
            {
              "$ref": "#/definitions/Enabled"
            },
            {
              "description": "If true, the event source mapping is active. Set to false to pause polling and invocation."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionName"
            },
            {
              "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>"
            }
          ]
        },
        "FunctionResponseTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/FunctionResponseTypeList"
            },
            {
              "description": "(Streams) A list of current response type enums applied to the event source mapping."
            }
          ]
        },
        "MaximumBatchingWindowInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumBatchingWindowInSeconds"
            },
            {
              "description": "(Streams and SQS standard queues) The maximum amount of time to gather records before invoking the function, in seconds."
            }
          ]
        },
        "MaximumRecordAgeInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumRecordAgeInSeconds"
            },
            {
              "description": "(Streams) Discard records older than the specified age. The default value is infinite (-1)."
            }
          ]
        },
        "MaximumRetryAttempts": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumRetryAttemptsEventSourceMapping"
            },
            {
              "description": "(Streams) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records will be retried until the record expires."
            }
          ]
        },
        "ParallelizationFactor": {
          "allOf": [
            {
              "$ref": "#/definitions/ParallelizationFactor"
            },
            {
              "description": "(Streams) The number of batches to process from each shard concurrently."
            }
          ]
        },
        "SourceAccessConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/SourceAccessConfigurations"
            },
            {
              "description": "An array of the authentication protocol, or the VPC components to secure your event source."
            }
          ]
        },
        "TumblingWindowInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/TumblingWindowInSeconds"
            },
            {
              "description": "(Streams) The duration of a processing window in seconds. The range is between 1 second up to 15 minutes."
            }
          ]
        }
      },
      "title": "UpdateEventSourceMappingRequest",
      "type": "object"
    },
    "UpdateFunctionCodeRequest": {
      "properties": {
        "DryRun": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Set to true to validate the request parameters and access permissions without modifying the function code."
            }
          ]
        },
        "ImageUri": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "URI of a container image in the Amazon ECR registry."
            }
          ]
        },
        "Publish": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Set to true to publish a new version of the function after updating the code. This has the same effect as calling <a>PublishVersion</a> separately."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it."
            }
          ]
        },
        "S3Bucket": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Bucket"
            },
            {
              "description": "An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account."
            }
          ]
        },
        "S3Key": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Key"
            },
            {
              "description": "The Amazon S3 key of the deployment package."
            }
          ]
        },
        "S3ObjectVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/S3ObjectVersion"
            },
            {
              "description": "For versioned objects, the version of the deployment package object to use."
            }
          ]
        },
        "ZipFile": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "The base64-encoded contents of the deployment package. AWS SDK and AWS CLI clients handle the encoding for you."
            }
          ]
        }
      },
      "title": "UpdateFunctionCodeRequest",
      "type": "object"
    },
    "UpdateFunctionConfigurationRequest": {
      "properties": {
        "DeadLetterConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DeadLetterConfig"
            },
            {
              "description": "A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">Dead Letter Queues</a>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description of the function."
            }
          ]
        },
        "Environment": {
          "allOf": [
            {
              "$ref": "#/definitions/Environment"
            },
            {
              "description": "Environment variables that are accessible from function code during execution."
            }
          ]
        },
        "FileSystemConfigs": {
          "allOf": [
            {
              "$ref": "#/definitions/FileSystemConfigList"
            },
            {
              "description": "Connection settings for an Amazon EFS file system."
            }
          ]
        },
        "Handler": {
          "allOf": [
            {
              "$ref": "#/definitions/Handler"
            },
            {
              "description": "The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html\">Programming Model</a>."
            }
          ]
        },
        "ImageConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/ImageConfig"
            },
            {
              "description": "Configuration values that override the container image Dockerfile."
            }
          ]
        },
        "KMSKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KMSKeyArn"
            },
            {
              "description": "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key."
            }
          ]
        },
        "Layers": {
          "allOf": [
            {
              "$ref": "#/definitions/LayerList"
            },
            {
              "description": "A list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version."
            }
          ]
        },
        "MemorySize": {
          "allOf": [
            {
              "$ref": "#/definitions/MemorySize"
            },
            {
              "description": "The amount of memory available to the function at runtime. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the function's execution role."
            }
          ]
        },
        "Runtime": {
          "allOf": [
            {
              "$ref": "#/definitions/Runtime"
            },
            {
              "description": "The identifier of the function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime</a>."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds."
            }
          ]
        },
        "TracingConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/TracingConfig"
            },
            {
              "description": "Set <code>Mode</code> to <code>Active</code> to sample and trace a subset of incoming requests with AWS X-Ray."
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\">VPC Settings</a>."
            }
          ]
        }
      },
      "title": "UpdateFunctionConfigurationRequest",
      "type": "object"
    },
    "UpdateFunctionEventInvokeConfigRequest": {
      "properties": {
        "DestinationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DestinationConfig"
            },
            {
              "description": "<p>A destination for events after they have been sent to a function for processing.</p> <p class=\"title\"> <b>Destinations</b> </p> <ul> <li> <p> <b>Function</b> - The Amazon Resource Name (ARN) of a Lambda function.</p> </li> <li> <p> <b>Queue</b> - The ARN of an SQS queue.</p> </li> <li> <p> <b>Topic</b> - The ARN of an SNS topic.</p> </li> <li> <p> <b>Event Bus</b> - The ARN of an Amazon EventBridge event bus.</p> </li> </ul>"
            }
          ]
        },
        "MaximumEventAgeInSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumEventAgeInSeconds"
            },
            {
              "description": "The maximum age of a request that Lambda sends to a function for processing."
            }
          ]
        },
        "MaximumRetryAttempts": {
          "allOf": [
            {
              "$ref": "#/definitions/MaximumRetryAttempts"
            },
            {
              "description": "The maximum number of times to retry when the function returns an error."
            }
          ]
        }
      },
      "title": "UpdateFunctionEventInvokeConfigRequest",
      "type": "object"
    },
    "Version": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "(\\$LATEST|[0-9]+)",
      "type": "string"
    },
    "VpcConfig": {
      "description": "The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\">VPC Settings</a>.",
      "properties": {
        "SecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityGroupIds"
            },
            {
              "description": "A list of VPC security groups IDs."
            }
          ]
        },
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIds"
            },
            {
              "description": "A list of VPC subnet IDs."
            }
          ]
        }
      },
      "type": "object"
    },
    "VpcConfigResponse": {
      "description": "The VPC security groups and subnets that are attached to a Lambda function.",
      "properties": {
        "SecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityGroupIds"
            },
            {
              "description": "A list of VPC security groups IDs."
            }
          ]
        },
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIds"
            },
            {
              "description": "A list of VPC subnet IDs."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcId"
            },
            {
              "description": "The ID of the VPC."
            }
          ]
        }
      },
      "type": "object"
    },
    "VpcId": {
      "type": "string"
    },
    "Weight": {
      "format": "double",
      "maximum": 1,
      "minimum": 0,
      "type": "number"
    },
    "WorkingDirectory": {
      "maxLength": 1000,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/lambda/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}