{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "Suite of geospatial services including Maps, Places, Tracking, and Geofencing",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Location Service",
    "version": "2020-11-19",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/location-2020-11-19.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "location",
    "x-datafire": {
      "name": "amazonaws_location",
      "type": "openapi"
    }
  },
  "host": "geo.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/geofencing/v0/collections": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "CollectionName": {
                  "description": "<p>A custom name for the geofence collection.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0-9), hyphens (-), and underscores (_). </p> </li> <li> <p>Must be a unique geofence collection name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleGeofenceCollection</code>.</p> </li> </ul>",
                  "maxLength": 100,
                  "minLength": 1,
                  "pattern": "^[-._\\w]+$",
                  "type": "string"
                },
                "Description": {
                  "description": "An optional description for the geofence collection.",
                  "maxLength": 1000,
                  "minLength": 0,
                  "type": "string"
                },
                "PricingPlan": {
                  "description": "<p>Specifies the pricing plan for your geofence collection. There's three pricing plan options:</p> <ul> <li> <p> <code>RequestBasedUsage</code> — Selects the \"Request-Based Usage\" pricing plan.</p> </li> <li> <p> <code>MobileAssetTracking</code> — Selects the \"Mobile Asset Tracking\" pricing plan.</p> </li> <li> <p> <code>MobileAssetManagement</code> — Selects the \"Mobile Asset Management\" pricing plan.</p> </li> </ul> <p>For additional details and restrictions on each pricing plan option, see the <a href=\"https://aws.amazon.com/location/pricing/\">Amazon Location Service pricing page</a>.</p>",
                  "enum": [
                    "RequestBasedUsage",
                    "MobileAssetTracking",
                    "MobileAssetManagement"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "CollectionName",
                "PricingPlan"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGeofenceCollectionResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Creates a geofence collection, which manages and stores geofences.",
        "operationId": "CreateGeofenceCollection"
      }
    },
    "/geofencing/v0/collections/{CollectionName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the geofence collection to be deleted.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "CollectionName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteGeofenceCollectionResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Deletes a geofence collection from your AWS account.</p> <note> <p>This action deletes the resource permanently. You can't undo this action. If the geofence collection is the target of a tracker resource, the devices will no longer be monitored.</p> </note>",
        "operationId": "DeleteGeofenceCollection"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the geofence collection.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "CollectionName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeGeofenceCollectionResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Retrieves the geofence collection details.",
        "operationId": "DescribeGeofenceCollection"
      }
    },
    "/geofencing/v0/collections/{CollectionName}/delete-geofences": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The geofence collection storing the geofences to be deleted.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "CollectionName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "GeofenceIds": {
                  "description": "The batch of geofences to be deleted.",
                  "items": {
                    "$ref": "#/definitions/Id"
                  },
                  "maxItems": 10,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "GeofenceIds"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDeleteGeofenceResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Deletes a batch of geofences from a geofence collection.</p> <note> <p>This action deletes the resource permanently. You can't undo this action.</p> </note>",
        "operationId": "BatchDeleteGeofence"
      }
    },
    "/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The geofence collection storing the target geofence.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "CollectionName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The geofence you're retrieving details for.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "GeofenceId",
            "pattern": "^[-._\\p{L}\\p{N}]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetGeofenceResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Retrieves the geofence details from a geofence collection.",
        "operationId": "GetGeofence"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The geofence collection to store the geofence in.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "CollectionName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier for the geofence. For example, <code>ExampleGeofence-1</code>.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "GeofenceId",
            "pattern": "^[-._\\p{L}\\p{N}]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Geometry": {
                  "description": "<p>Contains the geofence geometry details.</p> <note> <p>Limitation — Amazon Location does not currently support polygons with holes, multipolygons, polygons that are wound clockwise, or that cross the antimeridian. </p> </note>",
                  "properties": {
                    "Polygon": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/LinearRings"
                        },
                        {
                          "description": "<p>An array of 1 or more linear rings. A linear ring is an array of 4 or more vertices, where the first and last vertex are the same to form a closed boundary. Each vertex is a 2-dimensional point of the form: <code>[longitude, latitude]</code>. </p> <p>The first linear ring is an outer ring, describing the polygon's boundary. Subsequent linear rings may be inner or outer rings to describe holes and islands. Outer rings must list their vertices in counter-clockwise order around the ring's center, where the left side is the polygon's exterior. Inner rings must list their vertices in clockwise order, where the left side is the polygon's interior.</p>"
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "Geometry"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutGeofenceResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "485": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Stores a geofence to a given geofence collection, or updates the geometry of an existing geofence if a geofence ID is included in the request.",
        "operationId": "PutGeofence"
      }
    },
    "/geofencing/v0/collections/{CollectionName}/list-geofences": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the geofence collection storing the list of geofences.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "CollectionName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "NextToken": {
                  "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>",
                  "maxLength": 2000,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGeofencesResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Lists geofences stored in a given geofence collection.",
        "operationId": "ListGeofences"
      }
    },
    "/geofencing/v0/collections/{CollectionName}/positions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The geofence collection used in evaluating the position of devices against its geofences.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "CollectionName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DevicePositionUpdates": {
                  "description": "Contains device details for each device to be evaluated against the given geofence collection.",
                  "items": {
                    "$ref": "#/definitions/DevicePositionUpdate"
                  },
                  "maxItems": 10,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "DevicePositionUpdates"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchEvaluateGeofencesResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Used in geofence monitoring. Evaluates device positions against the position of geofences in a given geofence collection.",
        "operationId": "BatchEvaluateGeofences"
      }
    },
    "/geofencing/v0/collections/{CollectionName}/put-geofences": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The geofence collection storing the geofences.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "CollectionName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Entries": {
                  "description": "The batch of geofences to be stored in a geofence collection.",
                  "items": {
                    "$ref": "#/definitions/BatchPutGeofenceRequestEntry"
                  },
                  "maxItems": 10,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "Entries"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchPutGeofenceResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "A batch request for storing geofences into a given geofence collection.",
        "operationId": "BatchPutGeofence"
      }
    },
    "/geofencing/v0/list-collections": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "MaxResults": {
                  "description": "<p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>",
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>",
                  "maxLength": 2000,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGeofenceCollectionsResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Lists geofence collections in your AWS account.",
        "operationId": "ListGeofenceCollections"
      }
    },
    "/maps/v0/list-maps": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "MaxResults": {
                  "description": "<p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>",
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.</p> <p>Default value: <code>null</code> </p>",
                  "maxLength": 2000,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMapsResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Lists map resources in your AWS account.",
        "operationId": "ListMaps"
      }
    },
    "/maps/v0/maps": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Configuration": {
                  "description": "Specifies the map tile style selected from an available provider.",
                  "properties": {
                    "Style": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/MapStyle"
                        },
                        {
                          "description": "<p>Specifies the map style selected from an available data provider.</p> <p>Valid styles: <code>VectorEsriLightGrayCanvas</code>, <code>VectorEsriLight</code>, <code>VectorEsriStreets</code>, <code>VectorEsriNavigation</code>, <code>VectorEsriDarkGrayCanvas</code>, <code>VectorEsriLightGrayCanvas</code>, <code>VectorHereBerlin</code> </p> <note> <p>When using HERE as your data provider, and selecting the Style <code>VectorHereBerlin</code>, you may not use HERE Maps for Asset Management. See the <a href=\"https://aws.amazon.com/service-terms/\">AWS Service Terms</a> for Amazon Location Service. </p> </note>"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Description": {
                  "description": "An optional description for the map resource.",
                  "maxLength": 1000,
                  "minLength": 0,
                  "type": "string"
                },
                "MapName": {
                  "description": "<p>The name for the map resource.</p> <p>Requirements:</p> <ul> <li> <p>Must contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), and underscores (_). </p> </li> <li> <p>Must be a unique map resource name. </p> </li> <li> <p>No spaces allowed. For example, <code>ExampleMap</code>.</p> </li> </ul>",
                  "maxLength": 100,
                  "minLength": 1,
                  "pattern": "^[-._\\w]+$",
                  "type": "string"
                },
                "PricingPlan": {
                  "description": "<p>Specifies the pricing plan for your map resource. There's three pricing plan options:</p> <ul> <li> <p> <code>RequestBasedUsage</code> — Selects the \"Request-Based Usage\" pricing plan.</p> </li> <li> <p> <code>MobileAssetTracking</code> — Selects the \"Mobile Asset Tracking\" pricing plan.</p> </li> <li> <p> <code>MobileAssetManagement</code> — Selects the \"Mobile Asset Management\" pricing plan.</p> </li> </ul> <p>For additional details and restrictions on each pricing plan option, see the <a href=\"https://aws.amazon.com/location/pricing/\">Amazon Location Service pricing page</a>.</p>",
                  "enum": [
                    "RequestBasedUsage",
                    "MobileAssetTracking",
                    "MobileAssetManagement"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "Configuration",
                "MapName",
                "PricingPlan"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateMapResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Creates a map resource in your AWS account, which provides map tiles of different styles sourced from global location data providers.</p> <note> <p>By using Maps, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. For more information, see the <a href=\"https://aws.amazon.com/service-terms/\">AWS Service Terms</a> for Amazon Location Service. </p> </note>",
        "operationId": "CreateMap"
      }
    },
    "/maps/v0/maps/{MapName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the map resource to be deleted.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "MapName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteMapResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Deletes a map resource from your AWS account.</p> <note> <p>This action deletes the resource permanently. You cannot undo this action. If the map is being used in an application, the map may not render.</p> </note>",
        "operationId": "DeleteMap"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the map resource.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "MapName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMapResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Retrieves the map resource details.",
        "operationId": "DescribeMap"
      }
    },
    "/maps/v0/maps/{MapName}/glyphs/{FontStack}/{FontUnicodeRange}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A comma-separated list of fonts to load glyphs from in order of preference.. For example, <code>Noto Sans, Arial Unicode</code>.",
            "in": "path",
            "name": "FontStack",
            "required": true,
            "type": "string"
          },
          {
            "description": "A Unicode range of characters to download glyphs for. Each response will contain 256 characters. For example, 0-255 includes all characters from range <code>U+0000</code> to <code>00FF</code>. Must be aligned to multiples of 256.",
            "in": "path",
            "name": "FontUnicodeRange",
            "pattern": "^[0-9]+-[0-9]+\\.pbf$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The map resource associated with the glyph ﬁle.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "MapName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMapGlyphsResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Retrieves glyphs used to display labels on a map.",
        "operationId": "GetMapGlyphs"
      }
    },
    "/maps/v0/maps/{MapName}/sprites/{FileName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The name of the sprite ﬁle. Use the following ﬁle names for the sprite sheet:</p> <ul> <li> <p> <code>sprites.png</code> </p> </li> <li> <p> <code>sprites@2x.png</code> for high pixel density displays</p> </li> </ul> <p>For the JSON document contain image offsets. Use the following ﬁle names:</p> <ul> <li> <p> <code>sprites.json</code> </p> </li> <li> <p> <code>sprites@2x.json</code> for high pixel density displays</p> </li> </ul>",
            "in": "path",
            "name": "FileName",
            "pattern": "^sprites(@2x)?\\.(png|json)$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The map resource associated with the sprite ﬁle.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "MapName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMapSpritesResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Retrieves the sprite sheet corresponding to a map resource. The sprite sheet is a PNG image paired with a JSON document describing the offsets of individual icons that will be displayed on a rendered map.",
        "operationId": "GetMapSprites"
      }
    },
    "/maps/v0/maps/{MapName}/style-descriptor": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The map resource to retrieve the style descriptor from.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "MapName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMapStyleDescriptorResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Retrieves the map style descriptor from a map resource. </p> <p>The style descriptor contains speciﬁcations on how features render on a map. For example, what data to display, what order to display the data in, and the style for the data. Style descriptors follow the Mapbox Style Specification.</p>",
        "operationId": "GetMapStyleDescriptor"
      }
    },
    "/maps/v0/maps/{MapName}/tiles/{Z}/{X}/{Y}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The map resource to retrieve the map tiles from.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "MapName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The X axis value for the map tile.",
            "in": "path",
            "name": "X",
            "pattern": "\\d+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Y axis value for the map tile. ",
            "in": "path",
            "name": "Y",
            "pattern": "\\d+",
            "required": true,
            "type": "string"
          },
          {
            "description": "The zoom value for the map tile.",
            "in": "path",
            "name": "Z",
            "pattern": "\\d+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMapTileResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Retrieves a vector data tile from the map resource. Map tiles are used by clients to render a map. They are addressed using a grid arrangement with an X coordinate, Y coordinate, and Z (zoom) level. </p> <p>The origin (0, 0) is the top left of the map. Increasing the zoom level by 1 doubles both the X and Y dimensions, so a tile containing data for the entire world at (0/0/0) will be split into 4 tiles at zoom 1 (1/0/0, 1/0/1, 1/1/0, 1/1/1).</p>",
        "operationId": "GetMapTile"
      }
    },
    "/places/v0/indexes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DataSource": {
                  "description": "Specifies the data provider of geospatial data.",
                  "type": "string"
                },
                "DataSourceConfiguration": {
                  "description": "<p>Specifies the data storage option chosen for requesting Places.</p> <note> <p>By using Places, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. </p> <p>Also, when using HERE as your data provider, you may not (a) use HERE Places for Asset Management, or (b) select the <code>Storage</code> option for the <code>IntendedUse</code> parameter when requesting Places in Japan. For more information, see the <a href=\"https://aws.amazon.com/service-terms/\">AWS Service Terms</a> for Amazon Location Service.</p> </note>",
                  "properties": {
                    "IntendedUse": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/IntendedUse"
                        },
                        {
                          "description": "<p>Specifies how the results of an operation will be stored by the caller. </p> <p>Valid values include:</p> <ul> <li> <p> <code>SingleUse</code> specifies that the results won't be stored. </p> </li> <li> <p> <code>Storage</code> specifies that the result can be cached or stored in a database.</p> </li> </ul> <p>Default value: <code>SingleUse</code> </p>"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "Description": {
                  "description": "The optional description for the Place index resource.",
                  "maxLength": 1000,
                  "minLength": 0,
                  "type": "string"
                },
                "IndexName": {
                  "description": "<p>The name of the Place index resource. </p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-) and underscores (_) ).</p> </li> <li> <p>Must be a unique Place index resource name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExamplePlaceIndex</code>.</p> </li> </ul>",
                  "maxLength": 100,
                  "minLength": 1,
                  "pattern": "^[-._\\w]+$",
                  "type": "string"
                },
                "PricingPlan": {
                  "description": "<p>Specifies the pricing plan for your Place index resource. There's three pricing plan options:</p> <ul> <li> <p> <code>RequestBasedUsage</code> — Selects the \"Request-Based Usage\" pricing plan.</p> </li> <li> <p> <code>MobileAssetTracking</code> — Selects the \"Mobile Asset Tracking\" pricing plan.</p> </li> <li> <p> <code>MobileAssetManagement</code> — Selects the \"Mobile Asset Management\" pricing plan.</p> </li> </ul> <p>For additional details and restrictions on each pricing plan option, see the <a href=\"https://aws.amazon.com/location/pricing/\">Amazon Location Service pricing page</a>.</p>",
                  "enum": [
                    "RequestBasedUsage",
                    "MobileAssetTracking",
                    "MobileAssetManagement"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "DataSource",
                "IndexName",
                "PricingPlan"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePlaceIndexResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Creates a Place index resource in your AWS account, which supports Places functions with geospatial data sourced from your chosen data provider.</p> <note> <p>By using Places, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. </p> <p>Because of licensing limitations, you may not use HERE to store results for locations in Japan. For more information, see the <a href=\"https://aws.amazon.com/service-terms/\">AWS Service Terms</a> for Amazon Location Service.</p> </note>",
        "operationId": "CreatePlaceIndex"
      }
    },
    "/places/v0/indexes/{IndexName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the Place index resource to be deleted.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "IndexName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePlaceIndexResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Deletes a Place index resource from your AWS account.</p> <note> <p>This action deletes the resource permanently. You cannot undo this action.</p> </note>",
        "operationId": "DeletePlaceIndex"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the Place index resource.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "IndexName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePlaceIndexResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Retrieves the Place index resource details.",
        "operationId": "DescribePlaceIndex"
      }
    },
    "/places/v0/indexes/{IndexName}/search/position": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the Place index resource you want to use for the search.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "IndexName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "MaxResults": {
                  "description": "<p>An optional paramer. The maximum number of results returned per request. </p> <p>Default value: <code>50</code> </p>",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "integer"
                },
                "Position": {
                  "description": "<p>Specifies a coordinate for the query defined by a longitude, and latitude.</p> <ul> <li> <p>The first position is the X coordinate, or longitude.</p> </li> <li> <p>The second position is the Y coordinate, or latitude. </p> </li> </ul> <p>For example, <code>position=xLongitude&amp;position=yLatitude</code> .</p>",
                  "items": {
                    "$ref": "#/definitions/Double"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                }
              },
              "required": [
                "Position"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchPlaceIndexForPositionResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Reverse geocodes a given coordinate and returns a legible address. Allows you to search for Places or points of interest near a given position.</p> <note> <p>By using Places, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. </p> <p>Because of licensing limitations, you may not use HERE to store results for locations in Japan. For more information, see the <a href=\"https://aws.amazon.com/service-terms/\">AWS Service Terms</a> for Amazon Location Service.</p> </note>",
        "operationId": "SearchPlaceIndexForPosition"
      }
    },
    "/places/v0/indexes/{IndexName}/search/text": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the Place index resource you want to use for the search.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "IndexName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "BiasPosition": {
                  "description": "<p>Searches for results closest to the given position. An optional parameter defined by longitude, and latitude.</p> <ul> <li> <p>The first <code>bias</code> position is the X coordinate, or longitude.</p> </li> <li> <p>The second <code>bias</code> position is the Y coordinate, or latitude. </p> </li> </ul> <p>For example, <code>bias=xLongitude&amp;bias=yLatitude</code>.</p>",
                  "items": {
                    "$ref": "#/definitions/Double"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "FilterBBox": {
                  "description": "<p>Filters the results by returning only Places within the provided bounding box. An optional parameter.</p> <p>The first 2 <code>bbox</code> parameters describe the lower southwest corner:</p> <ul> <li> <p>The first <code>bbox</code> position is the X coordinate or longitude of the lower southwest corner.</p> </li> <li> <p>The second <code>bbox</code> position is the Y coordinate or latitude of the lower southwest corner.</p> </li> </ul> <p>For example, <code>bbox=xLongitudeSW&amp;bbox=yLatitudeSW</code>.</p> <p>The next <code>bbox</code> parameters describe the upper northeast corner:</p> <ul> <li> <p>The third <code>bbox</code> position is the X coordinate, or longitude of the upper northeast corner.</p> </li> <li> <p>The fourth <code>bbox</code> position is the Y coordinate, or longitude of the upper northeast corner.</p> </li> </ul> <p>For example, <code>bbox=xLongitudeNE&amp;bbox=yLatitudeNE</code> </p>",
                  "items": {
                    "$ref": "#/definitions/Double"
                  },
                  "maxItems": 6,
                  "minItems": 4,
                  "type": "array"
                },
                "FilterCountries": {
                  "description": "<p>Limits the search to the given a list of countries/regions. An optional parameter.</p> <ul> <li> <p>Use the <a href=\"https://www.iso.org/iso-3166-country-codes.html\">ISO 3166</a> 3-digit country code. For example, Australia uses three upper-case characters: <code>AUS</code>.</p> </li> </ul>",
                  "items": {
                    "$ref": "#/definitions/CountryCode"
                  },
                  "maxItems": 100,
                  "minItems": 1,
                  "type": "array"
                },
                "MaxResults": {
                  "description": "<p>An optional parameter. The maximum number of results returned per request. </p> <p>The default: <code>50</code> </p>",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "integer"
                },
                "Text": {
                  "description": "The address, name, city, or region to be used in the search. In free-form text format. For example, <code>123 Any Street</code>.",
                  "format": "password",
                  "maxLength": 200,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "Text"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchPlaceIndexForTextResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Geocodes free-form text, such as an address, name, city, or region to allow you to search for Places or points of interest. </p> <p>Includes the option to apply additional parameters to narrow your list of results.</p> <note> <p>You can search for places near a given position using <code>BiasPosition</code>, or filter results within a bounding box using <code>FilterBBox</code>. Providing both parameters simultaneously returns an error.</p> </note> <note> <p>By using Places, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. </p> <p>Also, when using HERE as your data provider, you may not (a) use HERE Places for Asset Management, or (b) select the <code>Storage</code> option for the <code>IntendedUse</code> parameter when requesting Places in Japan. For more information, see the <a href=\"https://aws.amazon.com/service-terms/\">AWS Service Terms</a> for Amazon Location Service.</p> </note>",
        "operationId": "SearchPlaceIndexForText"
      }
    },
    "/places/v0/list-indexes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "MaxResults": {
                  "description": "<p>An optional limit for the maximum number of results returned in a single call.</p> <p>Default value: <code>100</code> </p>",
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.</p> <p>Default value: <code>null</code> </p>",
                  "maxLength": 2000,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPlaceIndexesResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Lists Place index resources in your AWS account.",
        "operationId": "ListPlaceIndexes"
      }
    },
    "/tracking/v0/list-trackers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "MaxResults": {
                  "description": "<p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>",
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>",
                  "maxLength": 2000,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTrackersResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Lists tracker resources in your AWS account.",
        "operationId": "ListTrackers"
      }
    },
    "/tracking/v0/trackers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Description": {
                  "description": "An optional description for the tracker resource.",
                  "maxLength": 1000,
                  "minLength": 0,
                  "type": "string"
                },
                "PricingPlan": {
                  "description": "<p>Specifies the pricing plan for your tracker resource. There's three pricing plan options:</p> <ul> <li> <p> <code>RequestBasedUsage</code> — Selects the \"Request-Based Usage\" pricing plan.</p> </li> <li> <p> <code>MobileAssetTracking</code> — Selects the \"Mobile Asset Tracking\" pricing plan.</p> </li> <li> <p> <code>MobileAssetManagement</code> — Selects the \"Mobile Asset Management\" pricing plan.</p> </li> </ul> <p>For additional details and restrictions on each pricing plan option, see the <a href=\"https://aws.amazon.com/location/pricing/\">Amazon Location Service pricing page</a>.</p>",
                  "enum": [
                    "RequestBasedUsage",
                    "MobileAssetTracking",
                    "MobileAssetManagement"
                  ],
                  "type": "string"
                },
                "TrackerName": {
                  "description": "<p>The name for the tracker resource.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-) and underscores (_).</p> </li> <li> <p>Must be a unique tracker resource name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleTracker</code>.</p> </li> </ul>",
                  "maxLength": 100,
                  "minLength": 1,
                  "pattern": "^[-._\\w]+$",
                  "type": "string"
                }
              },
              "required": [
                "PricingPlan",
                "TrackerName"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTrackerResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Creates a tracker resource in your AWS account, which lets you retrieve current and historical location of devices.",
        "operationId": "CreateTracker"
      }
    },
    "/tracking/v0/trackers/{TrackerName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the tracker resource to be deleted.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "TrackerName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTrackerResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Deletes a tracker resource from your AWS account.</p> <note> <p>This action deletes the resource permanently. You can't undo this action. If the tracker resource is in use, you may encounter an error. Make sure that the target resource is not a dependency for your applications.</p> </note>",
        "operationId": "DeleteTracker"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the tracker resource.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "TrackerName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeTrackerResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Retrieves the tracker resource details.",
        "operationId": "DescribeTracker"
      }
    },
    "/tracking/v0/trackers/{TrackerName}/consumers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the tracker resource to be associated with a geofence collection.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "TrackerName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "ConsumerArn": {
                  "description": "<p>The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS. </p> <ul> <li> <p>Format example: <code>arn:partition:service:region:account-id:resource-type:resource-id</code> </p> </li> </ul>",
                  "maxLength": 1600,
                  "minLength": 0,
                  "pattern": "^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$",
                  "type": "string"
                }
              },
              "required": [
                "ConsumerArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateTrackerConsumerResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "485": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Creates an association between a geofence collection and a tracker resource. This allows the tracker resource to communicate location data to the linked geofence collection.",
        "operationId": "AssociateTrackerConsumer"
      }
    },
    "/tracking/v0/trackers/{TrackerName}/consumers/{ConsumerArn}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "<p>The Amazon Resource Name (ARN) for the geofence collection to be disassociated from the tracker resource. Used when you need to specify a resource across all AWS. </p> <ul> <li> <p>Format example: <code>arn:partition:service:region:account-id:resource-type:resource-id</code> </p> </li> </ul>",
            "in": "path",
            "maxLength": 1600,
            "minLength": 0,
            "name": "ConsumerArn",
            "pattern": "^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the tracker resource to be dissociated from the consumer.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "TrackerName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateTrackerConsumerResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Removes the association bewteen a tracker resource and a geofence collection.</p> <note> <p>Once you unlink a tracker resource from a geofence collection, the tracker positions will no longer be automatically evaluated against geofences.</p> </note>",
        "operationId": "DisassociateTrackerConsumer"
      }
    },
    "/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/list-positions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The device whose position history you want to retrieve.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "DeviceId",
            "pattern": "^[-._\\p{L}\\p{N}]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The tracker resource receiving the request for the device position history.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "TrackerName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "EndTimeExclusive": {
                  "description": "<p>Specify the end time for the position history in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p> <ul> <li> <p>The given time for <code>EndTimeExclusive</code> must be after the time for <code>StartTimeInclusive</code>.</p> </li> </ul>",
                  "format": "date-time",
                  "type": "string"
                },
                "NextToken": {
                  "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>",
                  "maxLength": 2000,
                  "minLength": 1,
                  "type": "string"
                },
                "StartTimeInclusive": {
                  "description": "<p>Specify the start time for the position history in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p> <ul> <li> <p>The given time for <code>EndTimeExclusive</code> must be after the time for <code>StartTimeInclusive</code>.</p> </li> </ul>",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDevicePositionHistoryResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Retrieves the device position history from a tracker resource within a specified range of time.</p> <note> <p>Limitation — Device positions are deleted after one year.</p> </note>",
        "operationId": "GetDevicePositionHistory"
      }
    },
    "/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/positions/latest": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The device whose position you want to retreieve.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "DeviceId",
            "pattern": "^[-._\\p{L}\\p{N}]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "The tracker resource receiving the position update.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "TrackerName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDevicePositionResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Retrieves the latest device position.</p> <note> <p>Limitation — Device positions are deleted after one year.</p> </note>",
        "operationId": "GetDevicePosition"
      }
    },
    "/tracking/v0/trackers/{TrackerName}/get-positions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The tracker resource retrieving the device position.",
            "in": "path",
            "minLength": 1,
            "name": "TrackerName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "DeviceIds": {
                  "description": "<p>Devices whose position you want to retrieve.</p> <ul> <li> <p>For example, for two devices: <code>device-ids=DeviceId1&amp;device-ids=DeviceId2</code> </p> </li> </ul>",
                  "items": {
                    "$ref": "#/definitions/Id"
                  },
                  "maxItems": 10,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "DeviceIds"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetDevicePositionResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>A batch request to retrieve device positions.</p> <note> <p>The response will return the device positions from the last 24 hours.</p> </note>",
        "operationId": "BatchGetDevicePosition"
      }
    },
    "/tracking/v0/trackers/{TrackerName}/list-consumers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The tracker resource whose associated geofence collections you want to list.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "TrackerName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "MaxResults": {
                  "description": "<p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>",
                  "maximum": 100,
                  "minimum": 1,
                  "type": "integer"
                },
                "NextToken": {
                  "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>",
                  "maxLength": 2000,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTrackerConsumersResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "Lists geofence collections currently associated to the given tracker resource.",
        "operationId": "ListTrackerConsumers"
      }
    },
    "/tracking/v0/trackers/{TrackerName}/positions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the tracker resource to update.",
            "in": "path",
            "maxLength": 100,
            "minLength": 1,
            "name": "TrackerName",
            "pattern": "^[-._\\w]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Updates": {
                  "description": "Contains the position update details for each device.",
                  "items": {
                    "$ref": "#/definitions/DevicePositionUpdate"
                  },
                  "maxItems": 10,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "Updates"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchUpdateDevicePositionResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          }
        },
        "description": "<p>Uploads a position update for one or more devices to a tracker resource. The data is used for API queries requesting the device position and position history.</p> <note> <p>Limitation — Location data is sampled at a fixed rate of 1 position per 30 second interval, and retained for 1 year before it is deleted.</p> </note>",
        "operationId": "BatchUpdateDevicePosition"
      }
    }
  },
  "definitions": {
    "AccessDeniedException": {},
    "Arn": {
      "maxLength": 1600,
      "minLength": 0,
      "pattern": "^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$",
      "type": "string"
    },
    "ArnList": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "type": "array"
    },
    "AssociateTrackerConsumerRequest": {
      "properties": {
        "ConsumerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "<p>The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS. </p> <ul> <li> <p>Format example: <code>arn:partition:service:region:account-id:resource-type:resource-id</code> </p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "ConsumerArn"
      ],
      "title": "AssociateTrackerConsumerRequest",
      "type": "object"
    },
    "AssociateTrackerConsumerResponse": {
      "properties": {},
      "type": "object"
    },
    "BatchDeleteGeofenceError": {
      "description": "Contains error details for each geofence that failed to delete from the geofence collection.",
      "properties": {
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemError"
            },
            {
              "description": "Contains details associated to the batch error."
            }
          ]
        },
        "GeofenceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The geofence associated with the error message."
            }
          ]
        }
      },
      "required": [
        "Error",
        "GeofenceId"
      ],
      "type": "object"
    },
    "BatchDeleteGeofenceErrorList": {
      "items": {
        "$ref": "#/definitions/BatchDeleteGeofenceError"
      },
      "type": "array"
    },
    "BatchDeleteGeofenceRequest": {
      "properties": {
        "GeofenceIds": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchDeleteGeofenceRequestGeofenceIdsList"
            },
            {
              "description": "The batch of geofences to be deleted."
            }
          ]
        }
      },
      "required": [
        "GeofenceIds"
      ],
      "title": "BatchDeleteGeofenceRequest",
      "type": "object"
    },
    "BatchDeleteGeofenceRequestGeofenceIdsList": {
      "items": {
        "$ref": "#/definitions/Id"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "BatchDeleteGeofenceResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchDeleteGeofenceErrorList"
            },
            {
              "description": "Contains error details for each geofence that failed to delete."
            }
          ]
        }
      },
      "required": [
        "Errors"
      ],
      "type": "object"
    },
    "BatchEvaluateGeofencesError": {
      "description": "Contains error details for each device that failed to evaluate its position against the geofences in a given geofence collection.",
      "properties": {
        "DeviceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The device associated with the position evaluation error."
            }
          ]
        },
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemError"
            },
            {
              "description": "Contains details associated to the batch error."
            }
          ]
        },
        "SampleTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Specifies a timestamp for when the error occurred in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        }
      },
      "required": [
        "DeviceId",
        "Error",
        "SampleTime"
      ],
      "type": "object"
    },
    "BatchEvaluateGeofencesErrorList": {
      "items": {
        "$ref": "#/definitions/BatchEvaluateGeofencesError"
      },
      "type": "array"
    },
    "BatchEvaluateGeofencesRequest": {
      "properties": {
        "DevicePositionUpdates": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchEvaluateGeofencesRequestDevicePositionUpdatesList"
            },
            {
              "description": "Contains device details for each device to be evaluated against the given geofence collection."
            }
          ]
        }
      },
      "required": [
        "DevicePositionUpdates"
      ],
      "title": "BatchEvaluateGeofencesRequest",
      "type": "object"
    },
    "BatchEvaluateGeofencesRequestDevicePositionUpdatesList": {
      "items": {
        "$ref": "#/definitions/DevicePositionUpdate"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "BatchEvaluateGeofencesResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchEvaluateGeofencesErrorList"
            },
            {
              "description": "Contains error details for each device that failed to evaluate its position against the given geofence collection."
            }
          ]
        }
      },
      "required": [
        "Errors"
      ],
      "type": "object"
    },
    "BatchGetDevicePositionError": {
      "description": "Contains error details for each device that didn't return a position.",
      "properties": {
        "DeviceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The ID of the device that didn't return a position."
            }
          ]
        },
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemError"
            },
            {
              "description": "Contains details related to the error code."
            }
          ]
        }
      },
      "required": [
        "DeviceId",
        "Error"
      ],
      "type": "object"
    },
    "BatchGetDevicePositionErrorList": {
      "items": {
        "$ref": "#/definitions/BatchGetDevicePositionError"
      },
      "type": "array"
    },
    "BatchGetDevicePositionRequest": {
      "properties": {
        "DeviceIds": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchGetDevicePositionRequestDeviceIdsList"
            },
            {
              "description": "<p>Devices whose position you want to retrieve.</p> <ul> <li> <p>For example, for two devices: <code>device-ids=DeviceId1&amp;device-ids=DeviceId2</code> </p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "DeviceIds"
      ],
      "title": "BatchGetDevicePositionRequest",
      "type": "object"
    },
    "BatchGetDevicePositionRequestDeviceIdsList": {
      "items": {
        "$ref": "#/definitions/Id"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "BatchGetDevicePositionRequestTrackerNameString": {
      "minLength": 1,
      "pattern": "^[-._\\w]+$",
      "type": "string"
    },
    "BatchGetDevicePositionResponse": {
      "properties": {
        "DevicePositions": {
          "allOf": [
            {
              "$ref": "#/definitions/DevicePositionList"
            },
            {
              "description": "Contains device position details such as the device ID, position, and timestamps for when the position was received and sampled."
            }
          ]
        },
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchGetDevicePositionErrorList"
            },
            {
              "description": "Contains error details for each device that failed to send its position to the tracker resource."
            }
          ]
        }
      },
      "required": [
        "DevicePositions",
        "Errors"
      ],
      "type": "object"
    },
    "BatchItemError": {
      "description": "Contains the batch request error details associated with the request.",
      "properties": {
        "Code": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemErrorCode"
            },
            {
              "description": "The error code associated with the batch request error."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A message with the reason for the batch request error."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchItemErrorCode": {
      "enum": [
        "AccessDeniedError",
        "ConflictError",
        "InternalServerError",
        "ResourceNotFoundError",
        "ThrottlingError",
        "ValidationError"
      ],
      "type": "string"
    },
    "BatchPutGeofenceError": {
      "description": "Contains error details for each geofence that failed to be stored in a given geofence collection.",
      "properties": {
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemError"
            },
            {
              "description": "Contains details associated to the batch error."
            }
          ]
        },
        "GeofenceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The geofence associated with the error message."
            }
          ]
        }
      },
      "required": [
        "Error",
        "GeofenceId"
      ],
      "type": "object"
    },
    "BatchPutGeofenceErrorList": {
      "items": {
        "$ref": "#/definitions/BatchPutGeofenceError"
      },
      "type": "array"
    },
    "BatchPutGeofenceRequest": {
      "properties": {
        "Entries": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchPutGeofenceRequestEntriesList"
            },
            {
              "description": "The batch of geofences to be stored in a geofence collection."
            }
          ]
        }
      },
      "required": [
        "Entries"
      ],
      "title": "BatchPutGeofenceRequest",
      "type": "object"
    },
    "BatchPutGeofenceRequestEntriesList": {
      "items": {
        "$ref": "#/definitions/BatchPutGeofenceRequestEntry"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "BatchPutGeofenceRequestEntry": {
      "description": "Contains geofence details. ",
      "properties": {
        "GeofenceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The identifier for the geofence to be stored in a given geofence collection."
            }
          ]
        },
        "Geometry": {
          "allOf": [
            {
              "$ref": "#/definitions/GeofenceGeometry"
            },
            {
              "description": "The geometry details for the geofence."
            }
          ]
        }
      },
      "required": [
        "GeofenceId",
        "Geometry"
      ],
      "type": "object"
    },
    "BatchPutGeofenceResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchPutGeofenceErrorList"
            },
            {
              "description": "Contains additional error details for each geofence that failed to be stored in a geofence collection."
            }
          ]
        },
        "Successes": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchPutGeofenceSuccessList"
            },
            {
              "description": "Contains each geofence that was successfully stored in a geofence collection."
            }
          ]
        }
      },
      "required": [
        "Errors",
        "Successes"
      ],
      "type": "object"
    },
    "BatchPutGeofenceSuccess": {
      "description": "Contains a summary of each geofence that was successfully stored in a given geofence collection.",
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence was stored in a geofence collection in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        },
        "GeofenceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The geofence successfully stored in a geofence collection."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "GeofenceId",
        "UpdateTime"
      ],
      "type": "object"
    },
    "BatchPutGeofenceSuccessList": {
      "items": {
        "$ref": "#/definitions/BatchPutGeofenceSuccess"
      },
      "type": "array"
    },
    "BatchUpdateDevicePositionError": {
      "description": "Contains error details for each device that failed to update its position.",
      "properties": {
        "DeviceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The device associated with the failed location update."
            }
          ]
        },
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemError"
            },
            {
              "description": "Contains details related to the error code such as the error code and error message."
            }
          ]
        },
        "SampleTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when a position sample was attempted in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        }
      },
      "required": [
        "DeviceId",
        "Error",
        "SampleTime"
      ],
      "type": "object"
    },
    "BatchUpdateDevicePositionErrorList": {
      "items": {
        "$ref": "#/definitions/BatchUpdateDevicePositionError"
      },
      "type": "array"
    },
    "BatchUpdateDevicePositionRequest": {
      "properties": {
        "Updates": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchUpdateDevicePositionRequestUpdatesList"
            },
            {
              "description": "Contains the position update details for each device."
            }
          ]
        }
      },
      "required": [
        "Updates"
      ],
      "title": "BatchUpdateDevicePositionRequest",
      "type": "object"
    },
    "BatchUpdateDevicePositionRequestUpdatesList": {
      "items": {
        "$ref": "#/definitions/DevicePositionUpdate"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "BatchUpdateDevicePositionResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchUpdateDevicePositionErrorList"
            },
            {
              "description": "Contains error details for each device that failed to update its position."
            }
          ]
        }
      },
      "required": [
        "Errors"
      ],
      "type": "object"
    },
    "Blob": {
      "type": "string"
    },
    "BoundingBox": {
      "items": {
        "$ref": "#/definitions/Double"
      },
      "maxItems": 6,
      "minItems": 4,
      "type": "array"
    },
    "ConflictException": {},
    "CountryCode": {
      "pattern": "^[A-Z]{3}$",
      "type": "string"
    },
    "CountryCodeList": {
      "items": {
        "$ref": "#/definitions/CountryCode"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array"
    },
    "CreateGeofenceCollectionRequest": {
      "properties": {
        "CollectionName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "<p>A custom name for the geofence collection.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0-9), hyphens (-), and underscores (_). </p> </li> <li> <p>Must be a unique geofence collection name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleGeofenceCollection</code>.</p> </li> </ul>"
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "An optional description for the geofence collection."
            }
          ]
        },
        "PricingPlan": {
          "allOf": [
            {
              "$ref": "#/definitions/PricingPlan"
            },
            {
              "description": "<p>Specifies the pricing plan for your geofence collection. There's three pricing plan options:</p> <ul> <li> <p> <code>RequestBasedUsage</code> — Selects the \"Request-Based Usage\" pricing plan.</p> </li> <li> <p> <code>MobileAssetTracking</code> — Selects the \"Mobile Asset Tracking\" pricing plan.</p> </li> <li> <p> <code>MobileAssetManagement</code> — Selects the \"Mobile Asset Management\" pricing plan.</p> </li> </ul> <p>For additional details and restrictions on each pricing plan option, see the <a href=\"https://aws.amazon.com/location/pricing/\">Amazon Location Service pricing page</a>.</p>"
            }
          ]
        }
      },
      "required": [
        "CollectionName",
        "PricingPlan"
      ],
      "title": "CreateGeofenceCollectionRequest",
      "type": "object"
    },
    "CreateGeofenceCollectionResponse": {
      "properties": {
        "CollectionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS. "
            }
          ]
        },
        "CollectionName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name for the geofence collection."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence collection was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        }
      },
      "required": [
        "CollectionArn",
        "CollectionName",
        "CreateTime"
      ],
      "type": "object"
    },
    "CreateMapRequest": {
      "properties": {
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/MapConfiguration"
            },
            {
              "description": "Specifies the map style selected from an available data provider."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "An optional description for the map resource."
            }
          ]
        },
        "MapName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "<p>The name for the map resource.</p> <p>Requirements:</p> <ul> <li> <p>Must contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), and underscores (_). </p> </li> <li> <p>Must be a unique map resource name. </p> </li> <li> <p>No spaces allowed. For example, <code>ExampleMap</code>.</p> </li> </ul>"
            }
          ]
        },
        "PricingPlan": {
          "allOf": [
            {
              "$ref": "#/definitions/PricingPlan"
            },
            {
              "description": "<p>Specifies the pricing plan for your map resource. There's three pricing plan options:</p> <ul> <li> <p> <code>RequestBasedUsage</code> — Selects the \"Request-Based Usage\" pricing plan.</p> </li> <li> <p> <code>MobileAssetTracking</code> — Selects the \"Mobile Asset Tracking\" pricing plan.</p> </li> <li> <p> <code>MobileAssetManagement</code> — Selects the \"Mobile Asset Management\" pricing plan.</p> </li> </ul> <p>For additional details and restrictions on each pricing plan option, see the <a href=\"https://aws.amazon.com/location/pricing/\">Amazon Location Service pricing page</a>.</p>"
            }
          ]
        }
      },
      "required": [
        "Configuration",
        "MapName",
        "PricingPlan"
      ],
      "title": "CreateMapRequest",
      "type": "object"
    },
    "CreateMapResponse": {
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the map resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>."
            }
          ]
        },
        "MapArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "<p>The Amazon Resource Name (ARN) for the map resource. Used when you need to specify a resource across all AWS.</p> <ul> <li> <p>Format example: <code>arn:partition:service:region:account-id:resource-type:resource-id</code> </p> </li> </ul>"
            }
          ]
        },
        "MapName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the map resource."
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "MapArn",
        "MapName"
      ],
      "type": "object"
    },
    "CreatePlaceIndexRequest": {
      "properties": {
        "DataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the data provider of geospatial data."
            }
          ]
        },
        "DataSourceConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceConfiguration"
            },
            {
              "description": "Specifies the data storage option for requesting Places."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The optional description for the Place index resource."
            }
          ]
        },
        "IndexName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "<p>The name of the Place index resource. </p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-) and underscores (_) ).</p> </li> <li> <p>Must be a unique Place index resource name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExamplePlaceIndex</code>.</p> </li> </ul>"
            }
          ]
        },
        "PricingPlan": {
          "allOf": [
            {
              "$ref": "#/definitions/PricingPlan"
            },
            {
              "description": "<p>Specifies the pricing plan for your Place index resource. There's three pricing plan options:</p> <ul> <li> <p> <code>RequestBasedUsage</code> — Selects the \"Request-Based Usage\" pricing plan.</p> </li> <li> <p> <code>MobileAssetTracking</code> — Selects the \"Mobile Asset Tracking\" pricing plan.</p> </li> <li> <p> <code>MobileAssetManagement</code> — Selects the \"Mobile Asset Management\" pricing plan.</p> </li> </ul> <p>For additional details and restrictions on each pricing plan option, see the <a href=\"https://aws.amazon.com/location/pricing/\">Amazon Location Service pricing page</a>.</p>"
            }
          ]
        }
      },
      "required": [
        "DataSource",
        "IndexName",
        "PricingPlan"
      ],
      "title": "CreatePlaceIndexRequest",
      "type": "object"
    },
    "CreatePlaceIndexResponse": {
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the Place index resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        },
        "IndexArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the Place index resource. Used when you need to specify a resource across all AWS. "
            }
          ]
        },
        "IndexName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name for the Place index resource."
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "IndexArn",
        "IndexName"
      ],
      "type": "object"
    },
    "CreateTrackerRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "An optional description for the tracker resource."
            }
          ]
        },
        "PricingPlan": {
          "allOf": [
            {
              "$ref": "#/definitions/PricingPlan"
            },
            {
              "description": "<p>Specifies the pricing plan for your tracker resource. There's three pricing plan options:</p> <ul> <li> <p> <code>RequestBasedUsage</code> — Selects the \"Request-Based Usage\" pricing plan.</p> </li> <li> <p> <code>MobileAssetTracking</code> — Selects the \"Mobile Asset Tracking\" pricing plan.</p> </li> <li> <p> <code>MobileAssetManagement</code> — Selects the \"Mobile Asset Management\" pricing plan.</p> </li> </ul> <p>For additional details and restrictions on each pricing plan option, see the <a href=\"https://aws.amazon.com/location/pricing/\">Amazon Location Service pricing page</a>.</p>"
            }
          ]
        },
        "TrackerName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "<p>The name for the tracker resource.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-) and underscores (_).</p> </li> <li> <p>Must be a unique tracker resource name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleTracker</code>.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "PricingPlan",
        "TrackerName"
      ],
      "title": "CreateTrackerRequest",
      "type": "object"
    },
    "CreateTrackerResponse": {
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the tracker resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        },
        "TrackerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS."
            }
          ]
        },
        "TrackerName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the tracker resource."
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "TrackerArn",
        "TrackerName"
      ],
      "type": "object"
    },
    "DataSourceConfiguration": {
      "description": "<p>Specifies the data storage option chosen for requesting Places.</p> <note> <p>By using Places, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. </p> <p>Also, when using HERE as your data provider, you may not (a) use HERE Places for Asset Management, or (b) select the <code>Storage</code> option for the <code>IntendedUse</code> parameter when requesting Places in Japan. For more information, see the <a href=\"https://aws.amazon.com/service-terms/\">AWS Service Terms</a> for Amazon Location Service.</p> </note>",
      "properties": {
        "IntendedUse": {
          "allOf": [
            {
              "$ref": "#/definitions/IntendedUse"
            },
            {
              "description": "<p>Specifies how the results of an operation will be stored by the caller. </p> <p>Valid values include:</p> <ul> <li> <p> <code>SingleUse</code> specifies that the results won't be stored. </p> </li> <li> <p> <code>Storage</code> specifies that the result can be cached or stored in a database.</p> </li> </ul> <p>Default value: <code>SingleUse</code> </p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteGeofenceCollectionRequest": {
      "properties": {},
      "title": "DeleteGeofenceCollectionRequest",
      "type": "object"
    },
    "DeleteGeofenceCollectionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteMapRequest": {
      "properties": {},
      "title": "DeleteMapRequest",
      "type": "object"
    },
    "DeleteMapResponse": {
      "properties": {},
      "type": "object"
    },
    "DeletePlaceIndexRequest": {
      "properties": {},
      "title": "DeletePlaceIndexRequest",
      "type": "object"
    },
    "DeletePlaceIndexResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteTrackerRequest": {
      "properties": {},
      "title": "DeleteTrackerRequest",
      "type": "object"
    },
    "DeleteTrackerResponse": {
      "properties": {},
      "type": "object"
    },
    "DescribeGeofenceCollectionRequest": {
      "properties": {},
      "title": "DescribeGeofenceCollectionRequest",
      "type": "object"
    },
    "DescribeGeofenceCollectionResponse": {
      "properties": {
        "CollectionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS. "
            }
          ]
        },
        "CollectionName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the geofence collection."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The optional description for the geofence collection."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence collection was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        }
      },
      "required": [
        "CollectionArn",
        "CollectionName",
        "CreateTime",
        "Description",
        "UpdateTime"
      ],
      "type": "object"
    },
    "DescribeMapRequest": {
      "properties": {},
      "title": "DescribeMapRequest",
      "type": "object"
    },
    "DescribeMapResponse": {
      "properties": {
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/MapConfiguration"
            },
            {
              "description": "Specifies the map tile style selected from a partner data provider."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the map resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>."
            }
          ]
        },
        "DataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the data provider for the associated map tiles."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The optional description for the map resource."
            }
          ]
        },
        "MapArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the map resource. Used when you need to specify a resource across all AWS."
            }
          ]
        },
        "MapName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The map style selected from an available provider."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the map resource was last update in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>."
            }
          ]
        }
      },
      "required": [
        "Configuration",
        "CreateTime",
        "DataSource",
        "Description",
        "MapArn",
        "MapName",
        "UpdateTime"
      ],
      "type": "object"
    },
    "DescribePlaceIndexRequest": {
      "properties": {},
      "title": "DescribePlaceIndexRequest",
      "type": "object"
    },
    "DescribePlaceIndexResponse": {
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the Place index resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        },
        "DataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The data provider of geospatial data."
            }
          ]
        },
        "DataSourceConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSourceConfiguration"
            },
            {
              "description": "The specified data storage option for requesting Places."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The optional description for the Place index resource."
            }
          ]
        },
        "IndexArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the Place index resource. Used when you need to specify a resource across all AWS. "
            }
          ]
        },
        "IndexName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the Place index resource being described."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the Place index resource was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "DataSource",
        "DataSourceConfiguration",
        "Description",
        "IndexArn",
        "IndexName",
        "UpdateTime"
      ],
      "type": "object"
    },
    "DescribeTrackerRequest": {
      "properties": {},
      "title": "DescribeTrackerRequest",
      "type": "object"
    },
    "DescribeTrackerResponse": {
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the tracker resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The optional description for the tracker resource."
            }
          ]
        },
        "TrackerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS."
            }
          ]
        },
        "TrackerName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the tracker resource."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the tracker resource was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "Description",
        "TrackerArn",
        "TrackerName",
        "UpdateTime"
      ],
      "type": "object"
    },
    "DevicePosition": {
      "description": "Contains the device position details.",
      "properties": {
        "DeviceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The device whose position you retrieved."
            }
          ]
        },
        "Position": {
          "allOf": [
            {
              "$ref": "#/definitions/Position"
            },
            {
              "description": "The last known device position."
            }
          ]
        },
        "ReceivedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the tracker resource recieved the position in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        },
        "SampleTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the position was detected and sampled in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        }
      },
      "required": [
        "Position",
        "ReceivedTime",
        "SampleTime"
      ],
      "type": "object"
    },
    "DevicePositionList": {
      "items": {
        "$ref": "#/definitions/DevicePosition"
      },
      "type": "array"
    },
    "DevicePositionUpdate": {
      "description": "Contains the position update details for a device.",
      "properties": {
        "DeviceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The device associated to the position update."
            }
          ]
        },
        "Position": {
          "allOf": [
            {
              "$ref": "#/definitions/Position"
            },
            {
              "description": "The latest device position defined in <a href=\"https://earth-info.nga.mil/GandG/wgs84/index.html\">WGS 84</a> format: <code>[Xlongitude, Ylatitude]</code>."
            }
          ]
        },
        "SampleTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the position update was received in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        }
      },
      "required": [
        "DeviceId",
        "Position",
        "SampleTime"
      ],
      "type": "object"
    },
    "DisassociateTrackerConsumerRequest": {
      "properties": {},
      "title": "DisassociateTrackerConsumerRequest",
      "type": "object"
    },
    "DisassociateTrackerConsumerResponse": {
      "properties": {},
      "type": "object"
    },
    "Double": {
      "format": "double",
      "type": "number"
    },
    "GeofenceGeometry": {
      "description": "<p>Contains the geofence geometry details.</p> <note> <p>Limitation — Amazon Location does not currently support polygons with holes, multipolygons, polygons that are wound clockwise, or that cross the antimeridian. </p> </note>",
      "properties": {
        "Polygon": {
          "allOf": [
            {
              "$ref": "#/definitions/LinearRings"
            },
            {
              "description": "<p>An array of 1 or more linear rings. A linear ring is an array of 4 or more vertices, where the first and last vertex are the same to form a closed boundary. Each vertex is a 2-dimensional point of the form: <code>[longitude, latitude]</code>. </p> <p>The first linear ring is an outer ring, describing the polygon's boundary. Subsequent linear rings may be inner or outer rings to describe holes and islands. Outer rings must list their vertices in counter-clockwise order around the ring's center, where the left side is the polygon's exterior. Inner rings must list their vertices in clockwise order, where the left side is the polygon's interior.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDevicePositionHistoryRequest": {
      "properties": {
        "EndTimeExclusive": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "<p>Specify the end time for the position history in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p> <ul> <li> <p>The given time for <code>EndTimeExclusive</code> must be after the time for <code>StartTimeInclusive</code>.</p> </li> </ul>"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>"
            }
          ]
        },
        "StartTimeInclusive": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "<p>Specify the start time for the position history in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p> <ul> <li> <p>The given time for <code>EndTimeExclusive</code> must be after the time for <code>StartTimeInclusive</code>.</p> </li> </ul>"
            }
          ]
        }
      },
      "title": "GetDevicePositionHistoryRequest",
      "type": "object"
    },
    "GetDevicePositionHistoryResponse": {
      "properties": {
        "DevicePositions": {
          "allOf": [
            {
              "$ref": "#/definitions/DevicePositionList"
            },
            {
              "description": "Contains the position history details for the requested device."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. "
            }
          ]
        }
      },
      "required": [
        "DevicePositions"
      ],
      "type": "object"
    },
    "GetDevicePositionRequest": {
      "properties": {},
      "title": "GetDevicePositionRequest",
      "type": "object"
    },
    "GetDevicePositionResponse": {
      "properties": {
        "DeviceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The device whose position you retrieved."
            }
          ]
        },
        "Position": {
          "allOf": [
            {
              "$ref": "#/definitions/Position"
            },
            {
              "description": "The last known device position."
            }
          ]
        },
        "ReceivedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the tracker resource recieved the position in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        },
        "SampleTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the position was detected and sampled in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601 </a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        }
      },
      "required": [
        "Position",
        "ReceivedTime",
        "SampleTime"
      ],
      "type": "object"
    },
    "GetGeofenceRequest": {
      "properties": {},
      "title": "GetGeofenceRequest",
      "type": "object"
    },
    "GetGeofenceResponse": {
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence collection was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        },
        "GeofenceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The geofence identifier."
            }
          ]
        },
        "Geometry": {
          "allOf": [
            {
              "$ref": "#/definitions/GeofenceGeometry"
            },
            {
              "description": "Contains the geofence geometry details describing a polygon."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>Identifies the state of the geofence. A geofence will hold one of the following states:</p> <ul> <li> <p> <code>ACTIVE</code> — The geofence has been indexed by the system. </p> </li> <li> <p> <code>PENDING</code> — The geofence is being processed by the system.</p> </li> <li> <p> <code>FAILED</code> — The geofence failed to be indexed by the system.</p> </li> <li> <p> <code>DELETED</code> — The geofence has been deleted from the system index.</p> </li> <li> <p> <code>DELETING</code> — The geofence is being deleted from the system index.</p> </li> </ul>"
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence collection was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "GeofenceId",
        "Geometry",
        "Status",
        "UpdateTime"
      ],
      "type": "object"
    },
    "GetMapGlyphsRequest": {
      "properties": {},
      "title": "GetMapGlyphsRequest",
      "type": "object"
    },
    "GetMapGlyphsRequestFontUnicodeRangeString": {
      "pattern": "^[0-9]+-[0-9]+\\.pbf$",
      "type": "string"
    },
    "GetMapGlyphsResponse": {
      "properties": {
        "Blob": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "The blob's content type."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMapSpritesRequest": {
      "properties": {},
      "title": "GetMapSpritesRequest",
      "type": "object"
    },
    "GetMapSpritesRequestFileNameString": {
      "pattern": "^sprites(@2x)?\\.(png|json)$",
      "type": "string"
    },
    "GetMapSpritesResponse": {
      "properties": {
        "Blob": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "Contains the body of the sprite sheet or JSON offset ﬁle."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMapStyleDescriptorRequest": {
      "properties": {},
      "title": "GetMapStyleDescriptorRequest",
      "type": "object"
    },
    "GetMapStyleDescriptorResponse": {
      "properties": {
        "Blob": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "Contains the body of the style descriptor."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMapTileRequest": {
      "properties": {},
      "title": "GetMapTileRequest",
      "type": "object"
    },
    "GetMapTileRequestXString": {
      "pattern": "\\d+",
      "type": "string"
    },
    "GetMapTileRequestYString": {
      "pattern": "\\d+",
      "type": "string"
    },
    "GetMapTileRequestZString": {
      "pattern": "\\d+",
      "type": "string"
    },
    "GetMapTileResponse": {
      "properties": {
        "Blob": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "Contains Mapbox Vector Tile (MVT) data."
            }
          ]
        }
      },
      "type": "object"
    },
    "Id": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "^[-._\\p{L}\\p{N}]+$",
      "type": "string"
    },
    "IntendedUse": {
      "enum": [
        "SingleUse",
        "Storage"
      ],
      "type": "string"
    },
    "InternalServerException": {},
    "LinearRing": {
      "items": {
        "$ref": "#/definitions/Position"
      },
      "minItems": 4,
      "type": "array"
    },
    "LinearRings": {
      "items": {
        "$ref": "#/definitions/LinearRing"
      },
      "minItems": 1,
      "type": "array"
    },
    "ListGeofenceCollectionsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/ListGeofenceCollectionsRequestMaxResultsInteger"
            },
            {
              "description": "<p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>"
            }
          ]
        }
      },
      "title": "ListGeofenceCollectionsRequest",
      "type": "object"
    },
    "ListGeofenceCollectionsRequestMaxResultsInteger": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListGeofenceCollectionsResponse": {
      "properties": {
        "Entries": {
          "allOf": [
            {
              "$ref": "#/definitions/ListGeofenceCollectionsResponseEntryList"
            },
            {
              "description": "Lists the geofence collections that exist in your AWS account."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. "
            }
          ]
        }
      },
      "required": [
        "Entries"
      ],
      "type": "object"
    },
    "ListGeofenceCollectionsResponseEntry": {
      "description": "Contains the geofence collection details.",
      "properties": {
        "CollectionName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the geofence collection."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence collection was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The description for the geofence collection"
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Specifies a timestamp for when the resource was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        }
      },
      "required": [
        "CollectionName",
        "CreateTime",
        "Description",
        "UpdateTime"
      ],
      "type": "object"
    },
    "ListGeofenceCollectionsResponseEntryList": {
      "items": {
        "$ref": "#/definitions/ListGeofenceCollectionsResponseEntry"
      },
      "type": "array"
    },
    "ListGeofenceResponseEntry": {
      "description": "Contains a list of geofences stored in a given geofence collection.",
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence was stored in a geofence collection in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        },
        "GeofenceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The geofence identifier."
            }
          ]
        },
        "Geometry": {
          "allOf": [
            {
              "$ref": "#/definitions/GeofenceGeometry"
            },
            {
              "description": "Contains the geofence geometry details describing a polygon."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>Identifies the state of the geofence. A geofence will hold one of the following states:</p> <ul> <li> <p> <code>ACTIVE</code> — The geofence has been indexed by the system. </p> </li> <li> <p> <code>PENDING</code> — The geofence is being processed by the system.</p> </li> <li> <p> <code>FAILED</code> — The geofence failed to be indexed by the system.</p> </li> <li> <p> <code>DELETED</code> — The geofence has been deleted from the system index.</p> </li> <li> <p> <code>DELETING</code> — The geofence is being deleted from the system index.</p> </li> </ul>"
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "GeofenceId",
        "Geometry",
        "Status",
        "UpdateTime"
      ],
      "type": "object"
    },
    "ListGeofenceResponseEntryList": {
      "items": {
        "$ref": "#/definitions/ListGeofenceResponseEntry"
      },
      "type": "array"
    },
    "ListGeofencesRequest": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>"
            }
          ]
        }
      },
      "title": "ListGeofencesRequest",
      "type": "object"
    },
    "ListGeofencesResponse": {
      "properties": {
        "Entries": {
          "allOf": [
            {
              "$ref": "#/definitions/ListGeofenceResponseEntryList"
            },
            {
              "description": "Contains a list of geofences stored in the geofence collection."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. "
            }
          ]
        }
      },
      "required": [
        "Entries"
      ],
      "type": "object"
    },
    "ListMapsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/ListMapsRequestMaxResultsInteger"
            },
            {
              "description": "<p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.</p> <p>Default value: <code>null</code> </p>"
            }
          ]
        }
      },
      "title": "ListMapsRequest",
      "type": "object"
    },
    "ListMapsRequestMaxResultsInteger": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListMapsResponse": {
      "properties": {
        "Entries": {
          "allOf": [
            {
              "$ref": "#/definitions/ListMapsResponseEntryList"
            },
            {
              "description": "Contains a list of maps in your AWS account"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. "
            }
          ]
        }
      },
      "required": [
        "Entries"
      ],
      "type": "object"
    },
    "ListMapsResponseEntry": {
      "description": "Contains details of an existing map resource in your AWS account.",
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the map resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>."
            }
          ]
        },
        "DataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specifies the data provider for the associated map tiles."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The description for the map resource."
            }
          ]
        },
        "MapName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the associated map resource."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the map resource was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>."
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "DataSource",
        "Description",
        "MapName",
        "UpdateTime"
      ],
      "type": "object"
    },
    "ListMapsResponseEntryList": {
      "items": {
        "$ref": "#/definitions/ListMapsResponseEntry"
      },
      "type": "array"
    },
    "ListPlaceIndexesRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/ListPlaceIndexesRequestMaxResultsInteger"
            },
            {
              "description": "<p>An optional limit for the maximum number of results returned in a single call.</p> <p>Default value: <code>100</code> </p>"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.</p> <p>Default value: <code>null</code> </p>"
            }
          ]
        }
      },
      "title": "ListPlaceIndexesRequest",
      "type": "object"
    },
    "ListPlaceIndexesRequestMaxResultsInteger": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListPlaceIndexesResponse": {
      "properties": {
        "Entries": {
          "allOf": [
            {
              "$ref": "#/definitions/ListPlaceIndexesResponseEntryList"
            },
            {
              "description": "Lists the Place index resources that exist in your AWS account"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results."
            }
          ]
        }
      },
      "required": [
        "Entries"
      ],
      "type": "object"
    },
    "ListPlaceIndexesResponseEntry": {
      "description": "A Place index resource listed in your AWS account.",
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the Place index resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        },
        "DataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The data provider of geospatial data."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The optional description for the Place index resource."
            }
          ]
        },
        "IndexName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the Place index resource."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the Place index resource was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "DataSource",
        "Description",
        "IndexName",
        "UpdateTime"
      ],
      "type": "object"
    },
    "ListPlaceIndexesResponseEntryList": {
      "items": {
        "$ref": "#/definitions/ListPlaceIndexesResponseEntry"
      },
      "type": "array"
    },
    "ListTrackerConsumersRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/ListTrackerConsumersRequestMaxResultsInteger"
            },
            {
              "description": "<p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>"
            }
          ]
        }
      },
      "title": "ListTrackerConsumersRequest",
      "type": "object"
    },
    "ListTrackerConsumersRequestMaxResultsInteger": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListTrackerConsumersResponse": {
      "properties": {
        "ConsumerArns": {
          "allOf": [
            {
              "$ref": "#/definitions/ArnList"
            },
            {
              "description": "Contains the list of geofence collection ARNs associated to the tracker resource."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. "
            }
          ]
        }
      },
      "required": [
        "ConsumerArns"
      ],
      "type": "object"
    },
    "ListTrackersRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/ListTrackersRequestMaxResultsInteger"
            },
            {
              "description": "<p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "<p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>"
            }
          ]
        }
      },
      "title": "ListTrackersRequest",
      "type": "object"
    },
    "ListTrackersRequestMaxResultsInteger": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "ListTrackersResponse": {
      "properties": {
        "Entries": {
          "allOf": [
            {
              "$ref": "#/definitions/ListTrackersResponseEntryList"
            },
            {
              "description": "Contains tracker resources in your AWS account. Details include tracker name, description and timestamps for when the tracker was created and last updated."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. "
            }
          ]
        }
      },
      "required": [
        "Entries"
      ],
      "type": "object"
    },
    "ListTrackersResponseEntry": {
      "description": "Contains the tracker resource details.",
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the tracker resource was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The description for the tracker resource."
            }
          ]
        },
        "TrackerName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the tracker resource."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the position was detected and sampled in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. "
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "Description",
        "TrackerName",
        "UpdateTime"
      ],
      "type": "object"
    },
    "ListTrackersResponseEntryList": {
      "items": {
        "$ref": "#/definitions/ListTrackersResponseEntry"
      },
      "type": "array"
    },
    "MapConfiguration": {
      "description": "Specifies the map tile style selected from an available provider.",
      "properties": {
        "Style": {
          "allOf": [
            {
              "$ref": "#/definitions/MapStyle"
            },
            {
              "description": "<p>Specifies the map style selected from an available data provider.</p> <p>Valid styles: <code>VectorEsriLightGrayCanvas</code>, <code>VectorEsriLight</code>, <code>VectorEsriStreets</code>, <code>VectorEsriNavigation</code>, <code>VectorEsriDarkGrayCanvas</code>, <code>VectorEsriLightGrayCanvas</code>, <code>VectorHereBerlin</code> </p> <note> <p>When using HERE as your data provider, and selecting the Style <code>VectorHereBerlin</code>, you may not use HERE Maps for Asset Management. See the <a href=\"https://aws.amazon.com/service-terms/\">AWS Service Terms</a> for Amazon Location Service. </p> </note>"
            }
          ]
        }
      },
      "required": [
        "Style"
      ],
      "type": "object"
    },
    "MapStyle": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "^[-._\\p{L}\\p{N}]+$",
      "type": "string"
    },
    "Place": {
      "description": "Contains details about addresses or points of interest that match the search criteria.",
      "properties": {
        "AddressNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The numerical portion of an address, such as a building number. "
            }
          ]
        },
        "Country": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A country/region specified using <a href=\"https://www.iso.org/iso-3166-country-codes.html\">ISO 3166</a> 3-digit country/region code. For example, <code>CAN</code>."
            }
          ]
        },
        "Geometry": {
          "$ref": "#/definitions/PlaceGeometry"
        },
        "Label": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The full name and address of the point of interest such as a city, region, or country. For example, <code>123 Any Street, Any Town, USA</code>."
            }
          ]
        },
        "Municipality": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A name for a local area, such as a city or town name. For example, <code>Toronto</code>."
            }
          ]
        },
        "Neighborhood": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of a community district. For example, <code>Downtown</code>."
            }
          ]
        },
        "PostalCode": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A group of numbers and letters in a country-specific format, which accompanies the address for the purpose of identifying a location. "
            }
          ]
        },
        "Region": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A name for an area or geographical division, such as a province or state name. For example, <code>British Columbia</code>."
            }
          ]
        },
        "Street": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name for a street or a road to identify a location. For example, <code>Main Street</code>."
            }
          ]
        },
        "SubRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A country, or an area that's part of a larger region . For example, <code>Metro Vancouver</code>."
            }
          ]
        }
      },
      "required": [
        "Geometry"
      ],
      "type": "object"
    },
    "PlaceGeometry": {
      "description": "Places uses a point geometry to specify a location or a Place.",
      "properties": {
        "Point": {
          "allOf": [
            {
              "$ref": "#/definitions/Position"
            },
            {
              "description": "<p>A single point geometry specifies a location for a Place using <a href=\"https://gisgeography.com/wgs84-world-geodetic-system/\">WGS 84</a> coordinates:</p> <ul> <li> <p> <i>x</i> — Specifies the x coordinate or longitude. </p> </li> <li> <p> <i>y</i> — Specifies the y coordinate or latitude. </p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "PlaceIndexSearchResultLimit": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "Position": {
      "items": {
        "$ref": "#/definitions/Double"
      },
      "maxItems": 2,
      "minItems": 2,
      "type": "array"
    },
    "PricingPlan": {
      "enum": [
        "RequestBasedUsage",
        "MobileAssetTracking",
        "MobileAssetManagement"
      ],
      "type": "string"
    },
    "PutGeofenceRequest": {
      "properties": {
        "Geometry": {
          "allOf": [
            {
              "$ref": "#/definitions/GeofenceGeometry"
            },
            {
              "description": "Contains the polygon details to specify the position of the geofence."
            }
          ]
        }
      },
      "required": [
        "Geometry"
      ],
      "title": "PutGeofenceRequest",
      "type": "object"
    },
    "PutGeofenceResponse": {
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence was created in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        },
        "GeofenceId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The geofence identifier entered in the request."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp for when the geofence was last updated in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> "
            }
          ]
        }
      },
      "required": [
        "CreateTime",
        "GeofenceId",
        "UpdateTime"
      ],
      "type": "object"
    },
    "ResourceDescription": {
      "maxLength": 1000,
      "minLength": 0,
      "type": "string"
    },
    "ResourceName": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "^[-._\\w]+$",
      "type": "string"
    },
    "ResourceNotFoundException": {},
    "SearchForPositionResult": {
      "description": "Specifies a single point of interest, or Place as a result of a search query obtained from a dataset configured in the Place index Resource.",
      "properties": {
        "Place": {
          "allOf": [
            {
              "$ref": "#/definitions/Place"
            },
            {
              "description": "Contains details about the relevant point of interest."
            }
          ]
        }
      },
      "required": [
        "Place"
      ],
      "type": "object"
    },
    "SearchForPositionResultList": {
      "items": {
        "$ref": "#/definitions/SearchForPositionResult"
      },
      "type": "array"
    },
    "SearchForTextResult": {
      "description": "Contains relevant Places returned by calling <code>SearchPlaceIndexForText</code>.",
      "properties": {
        "Place": {
          "allOf": [
            {
              "$ref": "#/definitions/Place"
            },
            {
              "description": "Contains details about the relevant point of interest."
            }
          ]
        }
      },
      "required": [
        "Place"
      ],
      "type": "object"
    },
    "SearchForTextResultList": {
      "items": {
        "$ref": "#/definitions/SearchForTextResult"
      },
      "type": "array"
    },
    "SearchPlaceIndexForPositionRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaceIndexSearchResultLimit"
            },
            {
              "description": "<p>An optional paramer. The maximum number of results returned per request. </p> <p>Default value: <code>50</code> </p>"
            }
          ]
        },
        "Position": {
          "allOf": [
            {
              "$ref": "#/definitions/Position"
            },
            {
              "description": "<p>Specifies a coordinate for the query defined by a longitude, and latitude.</p> <ul> <li> <p>The first position is the X coordinate, or longitude.</p> </li> <li> <p>The second position is the Y coordinate, or latitude. </p> </li> </ul> <p>For example, <code>position=xLongitude&amp;position=yLatitude</code> .</p>"
            }
          ]
        }
      },
      "required": [
        "Position"
      ],
      "title": "SearchPlaceIndexForPositionRequest",
      "type": "object"
    },
    "SearchPlaceIndexForPositionResponse": {
      "properties": {
        "Results": {
          "allOf": [
            {
              "$ref": "#/definitions/SearchForPositionResultList"
            },
            {
              "description": "Returns a list of Places closest to the specified position. Each result contains additional information about the Places returned."
            }
          ]
        },
        "Summary": {
          "allOf": [
            {
              "$ref": "#/definitions/SearchPlaceIndexForPositionSummary"
            },
            {
              "description": "Contains a summary of the request."
            }
          ]
        }
      },
      "required": [
        "Results",
        "Summary"
      ],
      "type": "object"
    },
    "SearchPlaceIndexForPositionSummary": {
      "description": "A summary of the reverse geocoding request sent using <code>SearchPlaceIndexForPosition</code>.",
      "properties": {
        "DataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The data provider of geospatial data for the Place index resource."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaceIndexSearchResultLimit"
            },
            {
              "description": "<p>An optional parameter. The maximum number of results returned per request. </p> <p>Default value: <code>50</code> </p>"
            }
          ]
        },
        "Position": {
          "allOf": [
            {
              "$ref": "#/definitions/Position"
            },
            {
              "description": "The position given in the reverse geocoding request."
            }
          ]
        }
      },
      "required": [
        "DataSource",
        "Position"
      ],
      "type": "object"
    },
    "SearchPlaceIndexForTextRequest": {
      "properties": {
        "BiasPosition": {
          "allOf": [
            {
              "$ref": "#/definitions/Position"
            },
            {
              "description": "<p>Searches for results closest to the given position. An optional parameter defined by longitude, and latitude.</p> <ul> <li> <p>The first <code>bias</code> position is the X coordinate, or longitude.</p> </li> <li> <p>The second <code>bias</code> position is the Y coordinate, or latitude. </p> </li> </ul> <p>For example, <code>bias=xLongitude&amp;bias=yLatitude</code>.</p>"
            }
          ]
        },
        "FilterBBox": {
          "allOf": [
            {
              "$ref": "#/definitions/BoundingBox"
            },
            {
              "description": "<p>Filters the results by returning only Places within the provided bounding box. An optional parameter.</p> <p>The first 2 <code>bbox</code> parameters describe the lower southwest corner:</p> <ul> <li> <p>The first <code>bbox</code> position is the X coordinate or longitude of the lower southwest corner.</p> </li> <li> <p>The second <code>bbox</code> position is the Y coordinate or latitude of the lower southwest corner.</p> </li> </ul> <p>For example, <code>bbox=xLongitudeSW&amp;bbox=yLatitudeSW</code>.</p> <p>The next <code>bbox</code> parameters describe the upper northeast corner:</p> <ul> <li> <p>The third <code>bbox</code> position is the X coordinate, or longitude of the upper northeast corner.</p> </li> <li> <p>The fourth <code>bbox</code> position is the Y coordinate, or longitude of the upper northeast corner.</p> </li> </ul> <p>For example, <code>bbox=xLongitudeNE&amp;bbox=yLatitudeNE</code> </p>"
            }
          ]
        },
        "FilterCountries": {
          "allOf": [
            {
              "$ref": "#/definitions/CountryCodeList"
            },
            {
              "description": "<p>Limits the search to the given a list of countries/regions. An optional parameter.</p> <ul> <li> <p>Use the <a href=\"https://www.iso.org/iso-3166-country-codes.html\">ISO 3166</a> 3-digit country code. For example, Australia uses three upper-case characters: <code>AUS</code>.</p> </li> </ul>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaceIndexSearchResultLimit"
            },
            {
              "description": "<p>An optional parameter. The maximum number of results returned per request. </p> <p>The default: <code>50</code> </p>"
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/SyntheticSearchPlaceIndexForTextRequestString"
            },
            {
              "description": "The address, name, city, or region to be used in the search. In free-form text format. For example, <code>123 Any Street</code>."
            }
          ]
        }
      },
      "required": [
        "Text"
      ],
      "title": "SearchPlaceIndexForTextRequest",
      "type": "object"
    },
    "SearchPlaceIndexForTextResponse": {
      "properties": {
        "Results": {
          "allOf": [
            {
              "$ref": "#/definitions/SearchForTextResultList"
            },
            {
              "description": "A list of Places closest to the specified position. Each result contains additional information about the specific point of interest. "
            }
          ]
        },
        "Summary": {
          "allOf": [
            {
              "$ref": "#/definitions/SearchPlaceIndexForTextSummary"
            },
            {
              "description": "Contains a summary of the request. Contains the <code>BiasPosition</code>, <code>DataSource</code>, <code>FilterBBox</code>, <code>FilterCountries</code>, <code>MaxResults</code>, <code>ResultBBox</code>, and <code>Text</code>."
            }
          ]
        }
      },
      "required": [
        "Results",
        "Summary"
      ],
      "type": "object"
    },
    "SearchPlaceIndexForTextSummary": {
      "description": "A summary of the geocoding request sent using <code>SearchPlaceIndexForText</code>.",
      "properties": {
        "BiasPosition": {
          "allOf": [
            {
              "$ref": "#/definitions/Position"
            },
            {
              "description": "Contains the coordinates for the bias position entered in the geocoding request."
            }
          ]
        },
        "DataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The data provider of geospatial data for the Place index resource."
            }
          ]
        },
        "FilterBBox": {
          "allOf": [
            {
              "$ref": "#/definitions/BoundingBox"
            },
            {
              "description": "Contains the coordinates for the optional bounding box coordinated entered in the geocoding request."
            }
          ]
        },
        "FilterCountries": {
          "allOf": [
            {
              "$ref": "#/definitions/CountryCodeList"
            },
            {
              "description": "Contains the country filter entered in the geocoding request."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaceIndexSearchResultLimit"
            },
            {
              "description": "Contains the maximum number of results indicated for the request."
            }
          ]
        },
        "ResultBBox": {
          "allOf": [
            {
              "$ref": "#/definitions/BoundingBox"
            },
            {
              "description": "A bounding box that contains the search results within the specified area indicated by <code>FilterBBox</code>. A subset of bounding box specified using <code>FilterBBox</code>."
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/SyntheticSearchPlaceIndexForTextSummaryString"
            },
            {
              "description": "The address, name, city or region to be used in the geocoding request. In free-form text format. For example, <code>Vancouver</code>."
            }
          ]
        }
      },
      "required": [
        "DataSource",
        "Text"
      ],
      "type": "object"
    },
    "String": {
      "type": "string"
    },
    "SyntheticSearchPlaceIndexForTextRequestString": {
      "format": "password",
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "SyntheticSearchPlaceIndexForTextSummaryString": {
      "format": "password",
      "type": "string"
    },
    "ThrottlingException": {},
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "Token": {
      "maxLength": 2000,
      "minLength": 1,
      "type": "string"
    },
    "ValidationException": {}
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/geo/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  }
}