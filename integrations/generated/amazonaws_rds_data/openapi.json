{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<p><fullname>Amazon RDS Data Service</fullname> <p>Amazon RDS provides an HTTP endpoint to run SQL statements on an Amazon Aurora Serverless DB cluster. To run these statements, you work with the Data Service API.</p> <p>For more information about the Data Service API, see <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>If you have questions or comments related to the Data API, send email to <a href=\"mailto:Rds-data-api-feedback@amazon.com\">Rds-data-api-feedback@amazon.com</a>.</p> </note></p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS RDS DataService",
    "version": "2018-08-01",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/rds-data-2018-08-01.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "rds-data",
    "x-datafire": {
      "name": "amazonaws_rds_data",
      "type": "openapi"
    }
  },
  "host": "rds-data.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/BatchExecute": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "database": {
                  "description": "The name of the database.",
                  "maxLength": 64,
                  "minLength": 0,
                  "type": "string"
                },
                "parameterSets": {
                  "description": "<p>The parameter set for the batch operation.</p> <p>The SQL statement is executed as many times as the number of parameter sets provided. To execute a SQL statement with no parameters, use one of the following options:</p> <ul> <li> <p>Specify one or more empty parameter sets.</p> </li> <li> <p>Use the <code>ExecuteStatement</code> operation instead of the <code>BatchExecuteStatement</code> operation.</p> </li> </ul> <note> <p>Array parameters are not supported.</p> </note>",
                  "items": {
                    "$ref": "#/definitions/SqlParametersList"
                  },
                  "type": "array"
                },
                "resourceArn": {
                  "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "schema": {
                  "description": "The name of the database schema.",
                  "maxLength": 64,
                  "minLength": 0,
                  "type": "string"
                },
                "secretArn": {
                  "description": "The name or ARN of the secret that enables access to the DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "sql": {
                  "description": "The SQL statement to run.",
                  "maxLength": 65536,
                  "minLength": 0,
                  "type": "string"
                },
                "transactionId": {
                  "description": "<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>",
                  "maxLength": 192,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "required": [
                "resourceArn",
                "secretArn",
                "sql"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchExecuteStatementResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "StatementTimeoutException",
            "schema": {
              "$ref": "#/definitions/StatementTimeoutException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableError",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableError"
            }
          }
        },
        "description": "<p>Runs a batch SQL statement over an array of data.</p> <p>You can run bulk update and insert operations for multiple records using a DML statement with different parameter sets. Bulk operations can provide a significant performance improvement over individual insert and update operations.</p> <important> <p>If a call isn't part of a transaction because it doesn't include the <code>transactionID</code> parameter, changes that result from the call are committed automatically.</p> </important>",
        "operationId": "BatchExecuteStatement"
      }
    },
    "/BeginTransaction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "database": {
                  "description": "The name of the database.",
                  "maxLength": 64,
                  "minLength": 0,
                  "type": "string"
                },
                "resourceArn": {
                  "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "schema": {
                  "description": "The name of the database schema.",
                  "maxLength": 64,
                  "minLength": 0,
                  "type": "string"
                },
                "secretArn": {
                  "description": "The name or ARN of the secret that enables access to the DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                }
              },
              "required": [
                "resourceArn",
                "secretArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BeginTransactionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "StatementTimeoutException",
            "schema": {
              "$ref": "#/definitions/StatementTimeoutException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableError",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableError"
            }
          }
        },
        "description": "<p>Starts a SQL transaction.</p> <pre><code> &lt;important&gt; &lt;p&gt;A transaction can run for a maximum of 24 hours. A transaction is terminated and rolled back automatically after 24 hours.&lt;/p&gt; &lt;p&gt;A transaction times out if no calls use its transaction ID in three minutes. If a transaction times out before it's committed, it's rolled back automatically.&lt;/p&gt; &lt;p&gt;DDL statements inside a transaction cause an implicit commit. We recommend that you run each DDL statement in a separate &lt;code&gt;ExecuteStatement&lt;/code&gt; call with &lt;code&gt;continueAfterTimeout&lt;/code&gt; enabled.&lt;/p&gt; &lt;/important&gt; </code></pre>",
        "operationId": "BeginTransaction"
      }
    },
    "/CommitTransaction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "resourceArn": {
                  "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "secretArn": {
                  "description": "The name or ARN of the secret that enables access to the DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "transactionId": {
                  "description": "The identifier of the transaction to end and commit.",
                  "maxLength": 192,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "required": [
                "resourceArn",
                "secretArn",
                "transactionId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CommitTransactionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "StatementTimeoutException",
            "schema": {
              "$ref": "#/definitions/StatementTimeoutException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableError",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableError"
            }
          },
          "485": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          }
        },
        "description": "Ends a SQL transaction started with the <code>BeginTransaction</code> operation and commits the changes.",
        "operationId": "CommitTransaction"
      }
    },
    "/Execute": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "parameters": {
                  "description": "<p>The parameters for the SQL statement.</p> <note> <p>Array parameters are not supported.</p> </note>",
                  "items": {
                    "$ref": "#/definitions/SqlParameter"
                  },
                  "type": "array"
                },
                "continueAfterTimeout": {
                  "description": "<p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <important> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </important>",
                  "type": "boolean"
                },
                "database": {
                  "description": "The name of the database.",
                  "maxLength": 64,
                  "minLength": 0,
                  "type": "string"
                },
                "includeResultMetadata": {
                  "description": "A value that indicates whether to include metadata in the results.",
                  "type": "boolean"
                },
                "resourceArn": {
                  "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "resultSetOptions": {
                  "description": "Options that control how the result set is returned.",
                  "properties": {
                    "decimalReturnType": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/DecimalReturnType"
                        },
                        {
                          "description": "<p>A value that indicates how a field of <code>DECIMAL</code> type is represented in the response. The value of <code>STRING</code>, the default, specifies that it is converted to a String value. The value of <code>DOUBLE_OR_LONG</code> specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.</p> <important> <p>Conversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.</p> </important>"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "schema": {
                  "description": "The name of the database schema.",
                  "maxLength": 64,
                  "minLength": 0,
                  "type": "string"
                },
                "secretArn": {
                  "description": "The name or ARN of the secret that enables access to the DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "sql": {
                  "description": "The SQL statement to run.",
                  "maxLength": 65536,
                  "minLength": 0,
                  "type": "string"
                },
                "transactionId": {
                  "description": "<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>",
                  "maxLength": 192,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "required": [
                "resourceArn",
                "secretArn",
                "sql"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExecuteStatementResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "StatementTimeoutException",
            "schema": {
              "$ref": "#/definitions/StatementTimeoutException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableError",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableError"
            }
          }
        },
        "description": "<p>Runs a SQL statement against a database.</p> <important> <p>If a call isn't part of a transaction because it doesn't include the <code>transactionID</code> parameter, changes that result from the call are committed automatically.</p> </important> <p>The response size limit is 1 MB. If the call returns more than 1 MB of response data, the call is terminated.</p>",
        "operationId": "ExecuteStatement"
      }
    },
    "/ExecuteSql": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "awsSecretStoreArn": {
                  "description": "The Amazon Resource Name (ARN) of the secret that enables access to the DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "database": {
                  "description": "The name of the database.",
                  "maxLength": 64,
                  "minLength": 0,
                  "type": "string"
                },
                "dbClusterOrInstanceArn": {
                  "description": "The ARN of the Aurora Serverless DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "schema": {
                  "description": "The name of the database schema.",
                  "maxLength": 64,
                  "minLength": 0,
                  "type": "string"
                },
                "sqlStatements": {
                  "description": "<p>One or more SQL statements to run on the DB cluster.</p> <p>You can separate SQL statements from each other with a semicolon (;). Any valid SQL statement is permitted, including data definition, data manipulation, and commit statements. </p>",
                  "maxLength": 65536,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "required": [
                "awsSecretStoreArn",
                "dbClusterOrInstanceArn",
                "sqlStatements"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExecuteSqlResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "ServiceUnavailableError",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableError"
            }
          }
        },
        "deprecated": true,
        "description": "<p>Runs one or more SQL statements.</p> <important> <p>This operation is deprecated. Use the <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> operation.</p> </important>",
        "operationId": "ExecuteSql"
      }
    },
    "/RollbackTransaction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "resourceArn": {
                  "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "secretArn": {
                  "description": "The name or ARN of the secret that enables access to the DB cluster.",
                  "maxLength": 100,
                  "minLength": 11,
                  "type": "string"
                },
                "transactionId": {
                  "description": "The identifier of the transaction to roll back.",
                  "maxLength": 192,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "required": [
                "resourceArn",
                "secretArn",
                "transactionId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RollbackTransactionResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "StatementTimeoutException",
            "schema": {
              "$ref": "#/definitions/StatementTimeoutException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableError",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableError"
            }
          },
          "485": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          }
        },
        "description": "Performs a rollback of a transaction. Rolling back a transaction cancels its changes.",
        "operationId": "RollbackTransaction"
      }
    }
  },
  "definitions": {
    "Arn": {
      "maxLength": 100,
      "minLength": 11,
      "type": "string"
    },
    "ArrayOfArray": {
      "description": "<p>An array of arrays.</p> <note> <p>Some array entries can be null.</p> </note>",
      "items": {
        "$ref": "#/definitions/ArrayValue"
      },
      "type": "array"
    },
    "ArrayValue": {
      "description": "Contains an array.",
      "properties": {
        "arrayValues": {
          "allOf": [
            {
              "$ref": "#/definitions/ArrayOfArray"
            },
            {
              "description": "An array of arrays."
            }
          ]
        },
        "booleanValues": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanArray"
            },
            {
              "description": "An array of Boolean values."
            }
          ]
        },
        "doubleValues": {
          "allOf": [
            {
              "$ref": "#/definitions/DoubleArray"
            },
            {
              "description": "An array of integers."
            }
          ]
        },
        "longValues": {
          "allOf": [
            {
              "$ref": "#/definitions/LongArray"
            },
            {
              "description": "An array of floating point numbers."
            }
          ]
        },
        "stringValues": {
          "allOf": [
            {
              "$ref": "#/definitions/StringArray"
            },
            {
              "description": "An array of strings."
            }
          ]
        }
      },
      "type": "object"
    },
    "ArrayValueList": {
      "items": {
        "$ref": "#/definitions/Value"
      },
      "type": "array"
    },
    "BadRequestException": {},
    "BatchExecuteStatementRequest": {
      "description": "The request parameters represent the input of a SQL statement over an array of data.",
      "properties": {
        "database": {
          "allOf": [
            {
              "$ref": "#/definitions/DbName"
            },
            {
              "description": "The name of the database."
            }
          ]
        },
        "parameterSets": {
          "allOf": [
            {
              "$ref": "#/definitions/SqlParameterSets"
            },
            {
              "description": "<p>The parameter set for the batch operation.</p> <p>The SQL statement is executed as many times as the number of parameter sets provided. To execute a SQL statement with no parameters, use one of the following options:</p> <ul> <li> <p>Specify one or more empty parameter sets.</p> </li> <li> <p>Use the <code>ExecuteStatement</code> operation instead of the <code>BatchExecuteStatement</code> operation.</p> </li> </ul> <note> <p>Array parameters are not supported.</p> </note>"
            }
          ]
        },
        "resourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster."
            }
          ]
        },
        "schema": {
          "allOf": [
            {
              "$ref": "#/definitions/DbName"
            },
            {
              "description": "The name of the database schema."
            }
          ]
        },
        "secretArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The name or ARN of the secret that enables access to the DB cluster."
            }
          ]
        },
        "sql": {
          "allOf": [
            {
              "$ref": "#/definitions/SqlStatement"
            },
            {
              "description": "The SQL statement to run."
            }
          ]
        },
        "transactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>"
            }
          ]
        }
      },
      "required": [
        "resourceArn",
        "secretArn",
        "sql"
      ],
      "title": "BatchExecuteStatementRequest",
      "type": "object"
    },
    "BatchExecuteStatementResponse": {
      "description": "The response elements represent the output of a SQL statement over an array of data.",
      "properties": {
        "updateResults": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateResults"
            },
            {
              "description": "The execution results of each batch entry."
            }
          ]
        }
      },
      "type": "object"
    },
    "BeginTransactionRequest": {
      "description": "The request parameters represent the input of a request to start a SQL transaction.",
      "properties": {
        "database": {
          "allOf": [
            {
              "$ref": "#/definitions/DbName"
            },
            {
              "description": "The name of the database."
            }
          ]
        },
        "resourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster."
            }
          ]
        },
        "schema": {
          "allOf": [
            {
              "$ref": "#/definitions/DbName"
            },
            {
              "description": "The name of the database schema."
            }
          ]
        },
        "secretArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The name or ARN of the secret that enables access to the DB cluster."
            }
          ]
        }
      },
      "required": [
        "resourceArn",
        "secretArn"
      ],
      "title": "BeginTransactionRequest",
      "type": "object"
    },
    "BeginTransactionResponse": {
      "description": "The response elements represent the output of a request to start a SQL transaction.",
      "properties": {
        "transactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The transaction ID of the transaction started by the call."
            }
          ]
        }
      },
      "type": "object"
    },
    "Blob": {
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BooleanArray": {
      "description": "<p>An array of Boolean values.</p> <note> <p>Some array entries can be null.</p> </note>",
      "items": {
        "$ref": "#/definitions/BoxedBoolean"
      },
      "type": "array"
    },
    "BoxedBoolean": {
      "type": "boolean"
    },
    "BoxedDouble": {
      "format": "double",
      "type": "number"
    },
    "BoxedFloat": {
      "format": "float",
      "type": "number"
    },
    "BoxedInteger": {
      "type": "integer"
    },
    "BoxedLong": {
      "type": "integer"
    },
    "ColumnMetadata": {
      "description": "Contains the metadata for a column.",
      "properties": {
        "arrayBaseColumnType": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The type of the column."
            }
          ]
        },
        "isAutoIncrement": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates whether the column increments automatically."
            }
          ]
        },
        "isCaseSensitive": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates whether the column is case-sensitive."
            }
          ]
        },
        "isCurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates whether the column contains currency values."
            }
          ]
        },
        "isSigned": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates whether an integer column is signed."
            }
          ]
        },
        "label": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The label for the column."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the column."
            }
          ]
        },
        "nullable": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "A value that indicates whether the column is nullable."
            }
          ]
        },
        "precision": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The precision value of a decimal number column."
            }
          ]
        },
        "scale": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The scale value of a decimal number column."
            }
          ]
        },
        "schemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the schema that owns the table that includes the column."
            }
          ]
        },
        "tableName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the table that includes the column."
            }
          ]
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The type of the column."
            }
          ]
        },
        "typeName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The database-specific data type of the column."
            }
          ]
        }
      },
      "type": "object"
    },
    "CommitTransactionRequest": {
      "description": "The request parameters represent the input of a commit transaction request.",
      "properties": {
        "resourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster."
            }
          ]
        },
        "secretArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The name or ARN of the secret that enables access to the DB cluster."
            }
          ]
        },
        "transactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The identifier of the transaction to end and commit."
            }
          ]
        }
      },
      "required": [
        "resourceArn",
        "secretArn",
        "transactionId"
      ],
      "title": "CommitTransactionRequest",
      "type": "object"
    },
    "CommitTransactionResponse": {
      "description": "The response elements represent the output of a commit transaction request.",
      "properties": {
        "transactionStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/TransactionStatus"
            },
            {
              "description": "The status of the commit operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "DbName": {
      "maxLength": 64,
      "minLength": 0,
      "type": "string"
    },
    "DecimalReturnType": {
      "enum": [
        "DOUBLE_OR_LONG",
        "STRING"
      ],
      "type": "string"
    },
    "DoubleArray": {
      "description": "<p>An array of floating point numbers.</p> <note> <p>Some array entries can be null.</p> </note>",
      "items": {
        "$ref": "#/definitions/BoxedDouble"
      },
      "type": "array"
    },
    "ExecuteSqlRequest": {
      "description": "The request parameters represent the input of a request to run one or more SQL statements.",
      "properties": {
        "awsSecretStoreArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the secret that enables access to the DB cluster."
            }
          ]
        },
        "database": {
          "allOf": [
            {
              "$ref": "#/definitions/DbName"
            },
            {
              "description": "The name of the database."
            }
          ]
        },
        "dbClusterOrInstanceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the Aurora Serverless DB cluster."
            }
          ]
        },
        "schema": {
          "allOf": [
            {
              "$ref": "#/definitions/DbName"
            },
            {
              "description": "The name of the database schema."
            }
          ]
        },
        "sqlStatements": {
          "allOf": [
            {
              "$ref": "#/definitions/SqlStatement"
            },
            {
              "description": "<p>One or more SQL statements to run on the DB cluster.</p> <p>You can separate SQL statements from each other with a semicolon (;). Any valid SQL statement is permitted, including data definition, data manipulation, and commit statements. </p>"
            }
          ]
        }
      },
      "required": [
        "awsSecretStoreArn",
        "dbClusterOrInstanceArn",
        "sqlStatements"
      ],
      "title": "ExecuteSqlRequest",
      "type": "object"
    },
    "ExecuteSqlResponse": {
      "description": "The response elements represent the output of a request to run one or more SQL statements.",
      "properties": {
        "sqlStatementResults": {
          "allOf": [
            {
              "$ref": "#/definitions/SqlStatementResults"
            },
            {
              "description": "The results of the SQL statement or statements."
            }
          ]
        }
      },
      "type": "object"
    },
    "ExecuteStatementRequest": {
      "description": "The request parameters represent the input of a request to run a SQL statement against a database.",
      "properties": {
        "parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/SqlParametersList"
            },
            {
              "description": "<p>The parameters for the SQL statement.</p> <note> <p>Array parameters are not supported.</p> </note>"
            }
          ]
        },
        "continueAfterTimeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <important> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </important>"
            }
          ]
        },
        "database": {
          "allOf": [
            {
              "$ref": "#/definitions/DbName"
            },
            {
              "description": "The name of the database."
            }
          ]
        },
        "includeResultMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A value that indicates whether to include metadata in the results."
            }
          ]
        },
        "resourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster."
            }
          ]
        },
        "resultSetOptions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultSetOptions"
            },
            {
              "description": "Options that control how the result set is returned."
            }
          ]
        },
        "schema": {
          "allOf": [
            {
              "$ref": "#/definitions/DbName"
            },
            {
              "description": "The name of the database schema."
            }
          ]
        },
        "secretArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The name or ARN of the secret that enables access to the DB cluster."
            }
          ]
        },
        "sql": {
          "allOf": [
            {
              "$ref": "#/definitions/SqlStatement"
            },
            {
              "description": "The SQL statement to run."
            }
          ]
        },
        "transactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>"
            }
          ]
        }
      },
      "required": [
        "resourceArn",
        "secretArn",
        "sql"
      ],
      "title": "ExecuteStatementRequest",
      "type": "object"
    },
    "ExecuteStatementResponse": {
      "description": "The response elements represent the output of a request to run a SQL statement against a database.",
      "properties": {
        "columnMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "description": "Metadata for the columns included in the results."
            }
          ]
        },
        "generatedFields": {
          "allOf": [
            {
              "$ref": "#/definitions/FieldList"
            },
            {
              "description": "<p>Values for fields generated during the request.</p> <pre><code> &lt;note&gt; &lt;p&gt;The &lt;code&gt;generatedFields&lt;/code&gt; data isn't supported by Aurora PostgreSQL. To get the values of generated fields, use the &lt;code&gt;RETURNING&lt;/code&gt; clause. For more information, see &lt;a href=&quot;https://www.postgresql.org/docs/10/dml-returning.html&quot;&gt;Returning Data From Modified Rows&lt;/a&gt; in the PostgreSQL documentation.&lt;/p&gt; &lt;/note&gt; </code></pre>"
            }
          ]
        },
        "numberOfRecordsUpdated": {
          "allOf": [
            {
              "$ref": "#/definitions/RecordsUpdated"
            },
            {
              "description": "The number of records updated by the request."
            }
          ]
        },
        "records": {
          "allOf": [
            {
              "$ref": "#/definitions/SqlRecords"
            },
            {
              "description": "The records returned by the SQL statement."
            }
          ]
        }
      },
      "type": "object"
    },
    "Field": {
      "description": "Contains a value.",
      "properties": {
        "arrayValue": {
          "allOf": [
            {
              "$ref": "#/definitions/ArrayValue"
            },
            {
              "description": "An array of values."
            }
          ]
        },
        "blobValue": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "A value of BLOB data type."
            }
          ]
        },
        "booleanValue": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "A value of Boolean data type."
            }
          ]
        },
        "doubleValue": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedDouble"
            },
            {
              "description": "A value of double data type."
            }
          ]
        },
        "isNull": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "A NULL value."
            }
          ]
        },
        "longValue": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedLong"
            },
            {
              "description": "A value of long data type."
            }
          ]
        },
        "stringValue": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A value of string data type."
            }
          ]
        }
      },
      "type": "object"
    },
    "FieldList": {
      "items": {
        "$ref": "#/definitions/Field"
      },
      "type": "array"
    },
    "ForbiddenException": {},
    "Id": {
      "maxLength": 192,
      "minLength": 0,
      "type": "string"
    },
    "Integer": {
      "type": "integer"
    },
    "InternalServerErrorException": {},
    "Long": {
      "type": "integer"
    },
    "LongArray": {
      "description": "<p>An array of integers.</p> <note> <p>Some array entries can be null.</p> </note>",
      "items": {
        "$ref": "#/definitions/BoxedLong"
      },
      "type": "array"
    },
    "Metadata": {
      "items": {
        "$ref": "#/definitions/ColumnMetadata"
      },
      "type": "array"
    },
    "NotFoundException": {},
    "ParameterName": {
      "type": "string"
    },
    "Record": {
      "description": "A record returned by a call.",
      "properties": {
        "values": {
          "allOf": [
            {
              "$ref": "#/definitions/Row"
            },
            {
              "description": "The values returned in the record."
            }
          ]
        }
      },
      "type": "object"
    },
    "Records": {
      "items": {
        "$ref": "#/definitions/Record"
      },
      "type": "array"
    },
    "RecordsUpdated": {
      "type": "integer"
    },
    "ResultFrame": {
      "description": "The result set returned by a SQL statement.",
      "properties": {
        "records": {
          "allOf": [
            {
              "$ref": "#/definitions/Records"
            },
            {
              "description": "The records in the result set."
            }
          ]
        },
        "resultSetMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultSetMetadata"
            },
            {
              "description": "The result-set metadata in the result set."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResultSetMetadata": {
      "description": "The metadata of the result set returned by a SQL statement.",
      "properties": {
        "columnCount": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The number of columns in the result set."
            }
          ]
        },
        "columnMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "description": "The metadata of the columns in the result set."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResultSetOptions": {
      "description": "Options that control how the result set is returned.",
      "properties": {
        "decimalReturnType": {
          "allOf": [
            {
              "$ref": "#/definitions/DecimalReturnType"
            },
            {
              "description": "<p>A value that indicates how a field of <code>DECIMAL</code> type is represented in the response. The value of <code>STRING</code>, the default, specifies that it is converted to a String value. The value of <code>DOUBLE_OR_LONG</code> specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.</p> <important> <p>Conversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.</p> </important>"
            }
          ]
        }
      },
      "type": "object"
    },
    "RollbackTransactionRequest": {
      "description": "The request parameters represent the input of a request to perform a rollback of a transaction.",
      "properties": {
        "resourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster."
            }
          ]
        },
        "secretArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The name or ARN of the secret that enables access to the DB cluster."
            }
          ]
        },
        "transactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "description": "The identifier of the transaction to roll back."
            }
          ]
        }
      },
      "required": [
        "resourceArn",
        "secretArn",
        "transactionId"
      ],
      "title": "RollbackTransactionRequest",
      "type": "object"
    },
    "RollbackTransactionResponse": {
      "description": "The response elements represent the output of a request to perform a rollback of a transaction.",
      "properties": {
        "transactionStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/TransactionStatus"
            },
            {
              "description": "The status of the rollback operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "Row": {
      "items": {
        "$ref": "#/definitions/Value"
      },
      "type": "array"
    },
    "ServiceUnavailableError": {},
    "SqlParameter": {
      "description": "A parameter used in a SQL statement.",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterName"
            },
            {
              "description": "The name of the parameter."
            }
          ]
        },
        "typeHint": {
          "allOf": [
            {
              "$ref": "#/definitions/TypeHint"
            },
            {
              "description": "<p>A hint that specifies the correct object type for data type mapping.</p> <p> <b>Values:</b> </p> <ul> <li> <p> <code>DECIMAL</code> - The corresponding <code>String</code> parameter value is sent as an object of <code>DECIMAL</code> type to the database.</p> </li> <li> <p> <code>TIMESTAMP</code> - The corresponding <code>String</code> parameter value is sent as an object of <code>TIMESTAMP</code> type to the database. The accepted format is <code>YYYY-MM-DD HH:MM:SS[.FFF]</code>.</p> </li> <li> <p> <code>TIME</code> - The corresponding <code>String</code> parameter value is sent as an object of <code>TIME</code> type to the database. The accepted format is <code>HH:MM:SS[.FFF]</code>.</p> </li> <li> <p> <code>DATE</code> - The corresponding <code>String</code> parameter value is sent as an object of <code>DATE</code> type to the database. The accepted format is <code>YYYY-MM-DD</code>.</p> </li> </ul>"
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/Field"
            },
            {
              "description": "The value of the parameter."
            }
          ]
        }
      },
      "type": "object"
    },
    "SqlParameterSets": {
      "items": {
        "$ref": "#/definitions/SqlParametersList"
      },
      "type": "array"
    },
    "SqlParametersList": {
      "items": {
        "$ref": "#/definitions/SqlParameter"
      },
      "type": "array"
    },
    "SqlRecords": {
      "items": {
        "$ref": "#/definitions/FieldList"
      },
      "type": "array"
    },
    "SqlStatement": {
      "maxLength": 65536,
      "minLength": 0,
      "type": "string"
    },
    "SqlStatementResult": {
      "description": "<p>The result of a SQL statement.</p> <pre><code> &lt;important&gt; &lt;p&gt;This data type is deprecated.&lt;/p&gt; &lt;/important&gt; </code></pre>",
      "properties": {
        "numberOfRecordsUpdated": {
          "allOf": [
            {
              "$ref": "#/definitions/RecordsUpdated"
            },
            {
              "description": "The number of records updated by a SQL statement."
            }
          ]
        },
        "resultFrame": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultFrame"
            },
            {
              "description": "The result set of the SQL statement."
            }
          ]
        }
      },
      "type": "object"
    },
    "SqlStatementResults": {
      "items": {
        "$ref": "#/definitions/SqlStatementResult"
      },
      "type": "array"
    },
    "StatementTimeoutException": {},
    "String": {
      "type": "string"
    },
    "StringArray": {
      "description": "<p>An array of strings.</p> <note> <p>Some array entries can be null.</p> </note>",
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "StructValue": {
      "description": "A structure value returned by a call.",
      "properties": {
        "attributes": {
          "allOf": [
            {
              "$ref": "#/definitions/ArrayValueList"
            },
            {
              "description": "The attributes returned in the record."
            }
          ]
        }
      },
      "type": "object"
    },
    "TransactionStatus": {
      "maxLength": 128,
      "minLength": 0,
      "type": "string"
    },
    "TypeHint": {
      "enum": [
        "DATE",
        "DECIMAL",
        "TIME",
        "TIMESTAMP"
      ],
      "type": "string"
    },
    "UpdateResult": {
      "description": "The response elements represent the results of an update.",
      "properties": {
        "generatedFields": {
          "allOf": [
            {
              "$ref": "#/definitions/FieldList"
            },
            {
              "description": "Values for fields generated during the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateResults": {
      "items": {
        "$ref": "#/definitions/UpdateResult"
      },
      "type": "array"
    },
    "Value": {
      "description": "<p>Contains the value of a column.</p> <pre><code> &lt;important&gt; &lt;p&gt;This data type is deprecated.&lt;/p&gt; &lt;/important&gt; </code></pre>",
      "properties": {
        "arrayValues": {
          "allOf": [
            {
              "$ref": "#/definitions/ArrayValueList"
            },
            {
              "description": "An array of column values."
            }
          ]
        },
        "bigIntValue": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedLong"
            },
            {
              "description": "A value for a column of big integer data type."
            }
          ]
        },
        "bitValue": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "A value for a column of BIT data type."
            }
          ]
        },
        "blobValue": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "A value for a column of BLOB data type."
            }
          ]
        },
        "doubleValue": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedDouble"
            },
            {
              "description": "A value for a column of double data type."
            }
          ]
        },
        "intValue": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedInteger"
            },
            {
              "description": "A value for a column of integer data type."
            }
          ]
        },
        "isNull": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedBoolean"
            },
            {
              "description": "A NULL value."
            }
          ]
        },
        "realValue": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxedFloat"
            },
            {
              "description": "A value for a column of real data type."
            }
          ]
        },
        "stringValue": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A value for a column of string data type."
            }
          ]
        },
        "structValue": {
          "allOf": [
            {
              "$ref": "#/definitions/StructValue"
            },
            {
              "description": "A value for a column of STRUCT data type."
            }
          ]
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/rds-data/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  }
}