{
  "swagger": "2.0",
  "info": {
    "description": "The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI.\nYou can access all information and trigger all actions.\nThe only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI.\n",
    "license": {
      "name": "Attribution-NonCommercial-ShareAlike 4.0 International",
      "url": "http://creativecommons.org/licenses/by-nc-sa/4.0/"
    },
    "title": "CircleCI REST API",
    "version": "v1",
    "x-apisguru-categories": [
      "developer_tools"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_avatars0.githubusercontent.com_u_1231870.png"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://raw.githubusercontent.com/kamikazechaser/spec-circleci/master/swagger.yml",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "circleci.com",
    "x-unofficialSpec": true,
    "x-datafire": {
      "name": "circleci",
      "type": "openapi"
    }
  },
  "host": "circleci.com",
  "basePath": "/api/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/me": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "signed in user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "description": "Provides information about the signed in user.\n"
      }
    },
    "/project/{username}/{project}": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "The number of builds to return. Maximum 100, defaults to 30.\n",
            "in": "query",
            "maximum": 100,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "The API returns builds starting from this offset, defaults to 0.\n",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Restricts which builds are returned.\nSet to \"completed\", \"successful\", \"failed\", \"running\", or defaults to no filter.\n",
            "enum": [
              "completed",
              "successful",
              "failed",
              "running"
            ],
            "in": "query",
            "name": "filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Build summary for each of the last 30 builds",
            "schema": {
              "$ref": "#/definitions/Builds"
            }
          }
        },
        "description": "Build summary for each of the last 30 builds for a single git repo.\n"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "build_parameters": {
                  "$ref": "#/definitions/BuildParameters"
                },
                "parallel": {
                  "$ref": "#/definitions/Parallel"
                },
                "revision": {
                  "$ref": "#/definitions/Revision"
                },
                "tag": {
                  "$ref": "#/definitions/Tag"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "returns a summary of the build",
            "schema": {
              "$ref": "#/definitions/BuildSummary"
            }
          }
        },
        "description": "Triggers a new build, returns a summary of the build.\n"
      }
    },
    "/project/{username}/{project}/build-cache": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "status message",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Clears the cache for a project.\n"
      }
    },
    "/project/{username}/{project}/checkout-key": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "checkout keys",
            "schema": {
              "$ref": "#/definitions/Keys"
            }
          }
        },
        "description": "Lists checkout keys.\n"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The type of key to create. Can be 'deploy-key' or 'github-user-key'.\n",
            "in": "body",
            "name": "body",
            "schema": {
              "enum": [
                "deploy-key",
                "github-user-key"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "checkout key",
            "schema": {
              "$ref": "#/definitions/Key"
            }
          }
        },
        "description": "Creates a new checkout key.\nOnly usable with a user API token.\n"
      }
    },
    "/project/{username}/{project}/checkout-key/{fingerprint}": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXXX\n",
          "in": "path",
          "name": "fingerprint",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "status message",
            "schema": {
              "properties": {
                "message": {
                  "enum": [
                    "OK"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Delete a checkout key.\n"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "checkout key",
            "schema": {
              "$ref": "#/definitions/Key"
            }
          }
        },
        "description": "Get a checkout key.\n"
      }
    },
    "/project/{username}/{project}/envvar": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "XXX",
            "schema": {
              "$ref": "#/definitions/Envvars"
            }
          }
        },
        "description": "Lists the environment variables for :project\n"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "XXX",
            "schema": {
              "$ref": "#/definitions/Envvar"
            }
          }
        },
        "description": "Creates a new environment variable\n"
      }
    },
    "/project/{username}/{project}/envvar/{name}": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXXX\n",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Deletes the environment variable named ':name'\n",
            "schema": {
              "properties": {
                "message": {
                  "enum": [
                    "OK"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Deletes the environment variable named ':name'\n"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "XXX",
            "schema": {
              "$ref": "#/definitions/Envvar"
            }
          }
        },
        "description": "Gets the hidden value of environment variable :name\n"
      }
    },
    "/project/{username}/{project}/ssh-key": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "application/json"
            ],
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "hostname": {
                  "type": "string"
                },
                "private_key": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "no response expected",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Create an ssh key used to access external systems that require SSH key-based authentication\n"
      }
    },
    "/project/{username}/{project}/tree/{branch}": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        },
        {
          "description": "The branch name should be url-encoded.\n",
          "in": "path",
          "name": "branch",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "build_parameters": {
                  "$ref": "#/definitions/BuildParameters"
                },
                "parallel": {
                  "$ref": "#/definitions/Parallel"
                },
                "revision": {
                  "$ref": "#/definitions/Revision"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "returns a summary of the build",
            "headers": {
              "Location": {
                "format": "uri",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        },
        "description": "Triggers a new build, returns a summary of the build.\nOptional build parameters can be set using an experimental API.\n\nNote: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/)\n"
      }
    },
    "/project/{username}/{project}/{build_num}": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXXX\n",
          "in": "path",
          "name": "build_num",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Full details for a single build",
            "schema": {
              "$ref": "#/definitions/BuildDetail"
            }
          }
        },
        "description": "Full details for a single build. The response includes all of the fields from the build summary.\nThis is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named 'payload'.\n"
      }
    },
    "/project/{username}/{project}/{build_num}/artifacts": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXXX\n",
          "in": "path",
          "name": "build_num",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List the artifacts produced by a given build",
            "schema": {
              "$ref": "#/definitions/Artifacts"
            }
          }
        },
        "description": "List the artifacts produced by a given build.\n"
      }
    },
    "/project/{username}/{project}/{build_num}/cancel": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXXX\n",
          "in": "path",
          "name": "build_num",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "returns a summary of the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        },
        "description": "Cancels the build, returns a summary of the build.\n"
      }
    },
    "/project/{username}/{project}/{build_num}/retry": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXXX\n",
          "in": "path",
          "name": "build_num",
          "required": true,
          "type": "integer"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "returns a summary of the new build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        },
        "description": "Retries the build, returns a summary of the new build.\n"
      }
    },
    "/project/{username}/{project}/{build_num}/tests": {
      "parameters": [
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXX\n",
          "in": "path",
          "name": "project",
          "required": true,
          "type": "string"
        },
        {
          "description": "XXXXXXXXXX\n",
          "in": "path",
          "name": "build_num",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "test metadata for a build\n",
            "schema": {
              "$ref": "#/definitions/Tests"
            }
          }
        },
        "description": "Provides test metadata for a build\nNote: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/)\n"
      }
    },
    "/projects": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all the projects you're following on CircleCI\n",
            "schema": {
              "$ref": "#/definitions/Projects"
            }
          }
        },
        "description": "List of all the projects you're following on CircleCI, with build information organized by branch.\n"
      }
    },
    "/recent-builds": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 30,
            "description": "The number of builds to return. Maximum 100, defaults to 30.\n",
            "in": "query",
            "maximum": 100,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "description": "The API returns builds starting from this offset, defaults to 0.\n",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Build summary for each of the last 30 recent builds",
            "schema": {
              "$ref": "#/definitions/Builds"
            }
          }
        },
        "description": "Build summary for each of the last 30 recent builds, ordered by build_num.\n"
      }
    },
    "/user/heroku-key": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "403": {
            "description": "Your Heroku API key is invalid.\n",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Adds your Heroku API key to CircleCI, takes apikey as form param name.\n"
      }
    }
  },
  "definitions": {
    "Artifact": {
      "properties": {
        "node_index": {
          "type": "integer"
        },
        "path": {
          "type": "string"
        },
        "pretty_path": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Artifacts": {
      "items": {
        "$ref": "#/definitions/Artifact"
      },
      "type": "array"
    },
    "Aws": {
      "properties": {
        "keypair": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "Build": {
      "properties": {
        "body": {
          "description": "commit message body",
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "build_time_millis": {
          "type": "integer"
        },
        "build_url": {
          "format": "uri",
          "type": "string"
        },
        "committer_email": {
          "format": "email",
          "type": "string"
        },
        "committer_name": {
          "type": "string"
        },
        "dont_build": {
          "description": "reason why we didn't build, if we didn't build",
          "type": "string",
          "x-nullable": true
        },
        "lifecycle": {
          "$ref": "#/definitions/Lifecycle"
        },
        "previous": {
          "$ref": "#/definitions/PreviousBuild"
        },
        "queued_at": {
          "description": "time build was queued",
          "format": "date-time",
          "type": "string"
        },
        "reponame": {
          "type": "string"
        },
        "retry_of": {
          "description": "build_num of the build this is a retry of",
          "type": "integer",
          "x-nullable": true
        },
        "start_time": {
          "description": "time build started",
          "format": "date-time",
          "type": "string"
        },
        "stop_time": {
          "description": "time build finished",
          "format": "date-time",
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vcs_url": {
          "format": "uri",
          "type": "string"
        },
        "why": {
          "description": "short string explaining the reason we built",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BuildDetail": {
      "description": "previous build",
      "properties": {
        "all_commit_details": {
          "$ref": "#/definitions/CommitDetails"
        },
        "compare": {
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "job_name": {
          "type": "string"
        },
        "node": {
          "x-nullable": true
        },
        "previous_successful_build": {
          "$ref": "#/definitions/PreviousBuild"
        },
        "retries": {
          "type": "boolean",
          "x-nullable": true
        },
        "ssh_enabled": {
          "type": "boolean",
          "x-nullable": true
        },
        "timedout": {
          "type": "boolean",
          "x-nullable": true
        },
        "usage_queued_at": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "type": "object"
    },
    "BuildParameters": {
      "description": "Additional environment variables to inject into the build environment. A map of names to values.\n",
      "type": "object"
    },
    "BuildSummary": {
      "properties": {
        "added_at": {
          "format": "date-time",
          "type": "string"
        },
        "build_num": {
          "type": "integer"
        },
        "outcome": {
          "$ref": "#/definitions/Outcome"
        },
        "pushed_at": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "vcs_revision": {
          "$ref": "#/definitions/Sha1"
        }
      },
      "type": "object"
    },
    "Builds": {
      "items": {
        "$ref": "#/definitions/Build"
      },
      "type": "array"
    },
    "CommitDetail": {
      "properties": {
        "author_date": {
          "format": "date-time",
          "type": "string"
        },
        "author_email": {
          "format": "email",
          "type": "string"
        },
        "author_login": {
          "type": "string"
        },
        "author_name": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "commit": {
          "$ref": "#/definitions/Sha1"
        },
        "commit_url": {
          "format": "uri",
          "type": "string"
        },
        "committer_date": {
          "format": "date-time",
          "type": "string"
        },
        "committer_email": {
          "format": "email",
          "type": "string"
        },
        "committer_login": {
          "type": "string"
        },
        "committer_name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommitDetails": {
      "items": {
        "$ref": "#/definitions/CommitDetail"
      },
      "type": "array"
    },
    "Envvar": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Envvars": {
      "items": {
        "$ref": "#/definitions/Envvar"
      },
      "type": "array"
    },
    "Key": {
      "properties": {
        "fingerprint": {
          "type": "string"
        },
        "preferred": {
          "type": "boolean"
        },
        "public_key": {
          "type": "string"
        },
        "time": {
          "description": "when the key was issued",
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "description": "can be \"deploy-key\" or \"github-user-key\"\n",
          "enum": [
            "deploy-key",
            "github-user-key"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Keys": {
      "items": {
        "$ref": "#/definitions/Key"
      },
      "type": "array"
    },
    "Lifecycle": {
      "enum": [
        "queued",
        "scheduled",
        "not_run",
        "not_running",
        "running",
        "finished"
      ],
      "type": "string"
    },
    "Outcome": {
      "enum": [
        "canceled",
        "infrastructure_fail",
        "timedout",
        "failed",
        "no_tests",
        "success"
      ],
      "type": "string"
    },
    "Parallel": {
      "description": "The number of containers to use to run the build. Default is null and the project default is used.\n",
      "type": "string"
    },
    "PreviousBuild": {
      "description": "previous build",
      "properties": {
        "build_num": {
          "type": "integer"
        },
        "build_time_millis": {
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "type": "object"
    },
    "Project": {
      "properties": {
        "aws": {
          "$ref": "#/definitions/Aws"
        },
        "branches": {
          "type": "object"
        },
        "campfire_notify_prefs": {
          "$ref": "#/definitions/StringOrNull"
        },
        "campfire_room": {
          "$ref": "#/definitions/StringOrNull"
        },
        "campfire_subdomain": {
          "$ref": "#/definitions/StringOrNull"
        },
        "campfire_token": {
          "$ref": "#/definitions/StringOrNull"
        },
        "compile": {
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        },
        "dependencies": {
          "type": "string"
        },
        "extra": {
          "type": "string"
        },
        "feature_flags": {
          "properties": {
            "build-fork-prs": {
              "type": "boolean"
            },
            "fleet": {
              "type": "boolean",
              "x-nullable": true
            },
            "junit": {
              "type": "boolean"
            },
            "oss": {
              "type": "boolean"
            },
            "osx": {
              "type": "boolean"
            },
            "set-github-status": {
              "type": "boolean"
            },
            "trusty-beta": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "flowdock_api_token": {
          "$ref": "#/definitions/StringOrNull"
        },
        "followed": {
          "type": "boolean"
        },
        "has_usable_key": {
          "type": "boolean"
        },
        "heroku_deploy_user": {
          "$ref": "#/definitions/StringOrNull"
        },
        "hipchat_api_token": {
          "$ref": "#/definitions/StringOrNull"
        },
        "hipchat_notify": {
          "$ref": "#/definitions/StringOrNull"
        },
        "hipchat_notify_prefs": {
          "type": "string",
          "x-nullable": true
        },
        "hipchat_room": {
          "$ref": "#/definitions/StringOrNull"
        },
        "irc_channel": {
          "$ref": "#/definitions/StringOrNull"
        },
        "irc_keyword": {
          "$ref": "#/definitions/StringOrNull"
        },
        "irc_notify_prefs": {
          "$ref": "#/definitions/StringOrNull"
        },
        "irc_password": {
          "$ref": "#/definitions/StringOrNull"
        },
        "irc_server": {
          "$ref": "#/definitions/StringOrNull"
        },
        "irc_username": {
          "$ref": "#/definitions/StringOrNull"
        },
        "language": {
          "type": "string"
        },
        "oss": {
          "type": "boolean"
        },
        "parallel": {
          "type": "integer"
        },
        "reponame": {
          "type": "string"
        },
        "scopes": {
          "items": {
            "$ref": "#/definitions/Scope"
          },
          "type": "array"
        },
        "setup": {
          "type": "string"
        },
        "slack_api_token": {
          "$ref": "#/definitions/StringOrNull"
        },
        "slack_channel": {
          "$ref": "#/definitions/StringOrNull"
        },
        "slack_channel_override": {
          "$ref": "#/definitions/StringOrNull"
        },
        "slack_notify_prefs": {
          "$ref": "#/definitions/StringOrNull"
        },
        "slack_subdomain": {
          "$ref": "#/definitions/StringOrNull"
        },
        "slack_webhook_url": {
          "format": "uri",
          "type": "string"
        },
        "ssh_keys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "test": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vcs_type": {
          "type": "string"
        },
        "vcs_url": {
          "format": "uri",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Projects": {
      "items": {
        "$ref": "#/definitions/Project"
      },
      "type": "array"
    },
    "Revision": {
      "description": "The specific revision to build.\nDefault is null and the head of the branch is used. Cannot be used with tag parameter.\n",
      "type": "string"
    },
    "Scope": {
      "enum": [
        "write-settings",
        "view-builds",
        "read-settings",
        "trigger-builds",
        "all",
        "status",
        "none"
      ],
      "type": "string"
    },
    "Sha1": {
      "type": "string"
    },
    "Status": {
      "enum": [
        "retried",
        "canceled",
        "infrastructure_fail",
        "timedout",
        "not_run",
        "running",
        "failed",
        "queued",
        "scheduled",
        "not_running",
        "no_tests",
        "fixed",
        "success"
      ],
      "type": "string"
    },
    "StringOrNull": {
      "type": "string",
      "x-nullable": true
    },
    "Tag": {
      "description": "The tag to build. Default is null. Cannot be used with revision parameter.\n",
      "type": "string"
    },
    "Tests": {
      "properties": {
        "tests": {
          "items": {
            "properties": {
              "classname": {
                "type": "string"
              },
              "file": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "result": {
                "$ref": "#/definitions/Status"
              },
              "run_time": {
                "type": "number"
              },
              "source": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "admin": {
          "type": "boolean"
        },
        "all_emails": {
          "items": {
            "format": "email",
            "type": "string"
          },
          "type": "array"
        },
        "analytics_id": {
          "type": "string"
        },
        "avatar_url": {
          "format": "uri",
          "type": "string"
        },
        "basic_email_prefs": {
          "type": "string"
        },
        "bitbucket": {
          "type": "integer",
          "x-nullable": true
        },
        "bitbucket_authorized": {
          "type": "boolean"
        },
        "containers": {
          "type": "integer"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "days_left_in_trial": {
          "type": "integer"
        },
        "dev_admin": {
          "type": "boolean"
        },
        "enrolled_betas": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "github_id": {
          "type": "integer",
          "x-nullable": true
        },
        "github_oauth_scopes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gravatar_id": {
          "type": "integer",
          "x-nullable": true
        },
        "heroku_api_key": {
          "type": "string",
          "x-nullable": true
        },
        "in_beta_program": {
          "type": "boolean"
        },
        "login": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization_prefs": {
          "type": "object"
        },
        "parallelism": {
          "type": "integer"
        },
        "plan": {
          "type": "string",
          "x-nullable": true
        },
        "projects": {
          "type": "object"
        },
        "pusher_id": {
          "type": "string"
        },
        "selected_email": {
          "format": "email",
          "type": "string"
        },
        "sign_in_count": {
          "type": "integer"
        },
        "trial_end": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "apikey": {
      "in": "query",
      "name": "circle-token",
      "type": "apiKey"
    }
  },
  "security": [
    {
      "apikey": []
    }
  ],
  "x-components": {
    "parameters": {
      "branch": {
        "description": "The branch name should be url-encoded.\n",
        "in": "path",
        "name": "branch",
        "required": true,
        "type": "string"
      },
      "build_num": {
        "description": "XXXXXXXXXX\n",
        "in": "path",
        "name": "build_num",
        "required": true,
        "type": "integer"
      },
      "envvar_name": {
        "description": "XXXXXXXXXX\n",
        "in": "path",
        "name": "name",
        "required": true,
        "type": "string"
      },
      "filter": {
        "description": "Restricts which builds are returned.\nSet to \"completed\", \"successful\", \"failed\", \"running\", or defaults to no filter.\n",
        "enum": [
          "completed",
          "successful",
          "failed",
          "running"
        ],
        "in": "query",
        "name": "filter",
        "type": "string"
      },
      "fingerprint": {
        "description": "XXXXXXXXXX\n",
        "in": "path",
        "name": "fingerprint",
        "required": true,
        "type": "string"
      },
      "limit": {
        "default": 30,
        "description": "The number of builds to return. Maximum 100, defaults to 30.\n",
        "in": "query",
        "maximum": 100,
        "name": "limit",
        "type": "integer"
      },
      "offset": {
        "default": 0,
        "description": "The API returns builds starting from this offset, defaults to 0.\n",
        "in": "query",
        "name": "offset",
        "type": "integer"
      },
      "project": {
        "description": "XXXXXXXXX\n",
        "in": "path",
        "name": "project",
        "required": true,
        "type": "string"
      },
      "username": {
        "description": "XXXXXXXXX\n",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      }
    },
    "responses": {
      "envvar": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Envvar"
            }
          }
        },
        "description": "XXX"
      },
      "envvars": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Envvars"
            }
          }
        },
        "description": "XXX"
      },
      "key": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Key"
            }
          }
        },
        "description": "checkout key"
      }
    }
  }
}