{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "Amazon EventBridge Schema Registry",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Schemas",
    "version": "2019-12-02",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/schemas-2019-12-02.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "schemas",
    "x-datafire": {
      "name": "amazonaws_schemas",
      "type": "openapi"
    }
  },
  "host": "schemas.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/tags/{resource-arn}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ARN of the resource.",
            "in": "path",
            "name": "resource-arn",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          }
        },
        "description": "Get tags for resource.",
        "operationId": "ListTagsForResource"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ARN of the resource.",
            "in": "path",
            "name": "resource-arn",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/__string"
                  },
                  "description": "Key-value pairs associated with a resource.",
                  "type": "object"
                }
              },
              "required": [
                "tags"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          }
        },
        "description": "Add tags to a resource.",
        "operationId": "TagResource"
      }
    },
    "/tags/{resource-arn}#tagKeys": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ARN of the resource.",
            "in": "path",
            "name": "resource-arn",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Keys of key-value pairs.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/__string"
            },
            "name": "tagKeys",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          }
        },
        "description": "Removes tags from a resource.",
        "operationId": "UntagResource"
      }
    },
    "/v1/discover": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Events": {
                  "description": "An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.",
                  "items": {
                    "$ref": "#/definitions/GetDiscoveredSchemaVersionItemInput"
                  },
                  "maxItems": 10,
                  "minItems": 1,
                  "type": "array"
                },
                "Type": {
                  "description": "The type of event.",
                  "enum": [
                    "OpenApi3",
                    "JSONSchemaDraft4"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "Events",
                "Type"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDiscoveredSchemaResponse"
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          }
        },
        "description": "Get the discovered schema that was generated based on sampled events.",
        "operationId": "GetDiscoveredSchema"
      }
    },
    "/v1/discoverers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Specifying this limits the results to only those discoverer IDs that start with the specified prefix.",
            "in": "query",
            "name": "discovererIdPrefix",
            "required": false,
            "type": "string"
          },
          {
            "description": "",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "description": "Specifying this limits the results to only those ARNs that start with the specified prefix.",
            "in": "query",
            "name": "sourceArnPrefix",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDiscoverersResponse"
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          }
        },
        "description": "List the discoverers.",
        "operationId": "ListDiscoverers"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/__string"
                  },
                  "description": "Key-value pairs associated with a resource.",
                  "type": "object"
                },
                "Description": {
                  "description": "A description for the discoverer.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                },
                "SourceArn": {
                  "description": "The ARN of the event bus.",
                  "maxLength": 1600,
                  "minLength": 20,
                  "type": "string"
                }
              },
              "required": [
                "SourceArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDiscovererResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "description": "Creates a discoverer.",
        "operationId": "CreateDiscoverer"
      }
    },
    "/v1/discoverers/id/{discovererId}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the discoverer.",
            "in": "path",
            "name": "discovererId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Deletes a discoverer.",
        "operationId": "DeleteDiscoverer"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the discoverer.",
            "in": "path",
            "name": "discovererId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDiscovererResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Describes the discoverer.",
        "operationId": "DescribeDiscoverer"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the discoverer.",
            "in": "path",
            "name": "discovererId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Description": {
                  "description": "The description of the discoverer to update.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDiscovererResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Updates the discoverer",
        "operationId": "UpdateDiscoverer"
      }
    },
    "/v1/discoverers/id/{discovererId}/start": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the discoverer.",
            "in": "path",
            "name": "discovererId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartDiscovererResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Starts the discoverer",
        "operationId": "StartDiscoverer"
      }
    },
    "/v1/discoverers/id/{discovererId}/stop": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the discoverer.",
            "in": "path",
            "name": "discovererId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopDiscovererResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Stops the discoverer",
        "operationId": "StopDiscoverer"
      }
    },
    "/v1/policy": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "query",
            "name": "registryName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Delete the resource-based policy attached to the specified registry.",
        "operationId": "DeleteResourcePolicy"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "query",
            "name": "registryName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetResourcePolicyResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Retrieves the resource-based policy attached to a given registry.",
        "operationId": "GetResourcePolicy"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "query",
            "name": "registryName",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Policy": {
                  "description": "The resource-based policy.",
                  "type": "string"
                },
                "RevisionId": {
                  "description": "The revision ID of the policy.",
                  "type": "string"
                }
              },
              "required": [
                "Policy"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutResourcePolicyResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "PreconditionFailedException",
            "schema": {
              "$ref": "#/definitions/PreconditionFailedException"
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "486": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "The name of the policy.",
        "operationId": "PutResourcePolicy"
      }
    },
    "/v1/registries": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "description": "Specifying this limits the results to only those registry names that start with the specified prefix.",
            "in": "query",
            "name": "registryNamePrefix",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can be set to Local or AWS to limit responses to your custom registries, or the ones provided by AWS.",
            "in": "query",
            "name": "scope",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListRegistriesResponse"
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          }
        },
        "description": "List the registries.",
        "operationId": "ListRegistries"
      }
    },
    "/v1/registries/name/{registryName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Deletes a Registry.",
        "operationId": "DeleteRegistry"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeRegistryResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Describes the registry.",
        "operationId": "DescribeRegistry"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/__string"
                  },
                  "description": "Key-value pairs associated with a resource.",
                  "type": "object"
                },
                "Description": {
                  "description": "A description of the registry to be created.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateRegistryResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "485": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "description": "Creates a registry.",
        "operationId": "CreateRegistry"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "Description": {
                  "description": "The description of the registry to update.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateRegistryResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Updates a registry.",
        "operationId": "UpdateRegistry"
      }
    },
    "/v1/registries/name/{registryName}/schemas": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specifying this limits the results to only those schema names that start with the specified prefix.",
            "in": "query",
            "name": "schemaNamePrefix",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSchemasResponse"
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          }
        },
        "description": "List the schemas.",
        "operationId": "ListSchemas"
      }
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Delete a schema definition.",
        "operationId": "DeleteSchema"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specifying this limits the results to only this schema version.",
            "in": "query",
            "name": "schemaVersion",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeSchemaResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Retrieve the schema definition.",
        "operationId": "DescribeSchema"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/__string"
                  },
                  "description": "Key-value pairs associated with a resource.",
                  "type": "object"
                },
                "Content": {
                  "description": "The source of the schema definition.",
                  "maxLength": 100000,
                  "minLength": 1,
                  "type": "string"
                },
                "Description": {
                  "description": "A description of the schema.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                },
                "Type": {
                  "description": "The type of schema.",
                  "enum": [
                    "OpenApi3",
                    "JSONSchemaDraft4"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "Content",
                "Type"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSchemaResponse"
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          }
        },
        "description": "<p>Creates a schema definition.</p> <note><p>Inactive schemas will be deleted after two years.</p></note>",
        "operationId": "CreateSchema"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "ClientTokenId": {
                  "description": "The ID of the client token.",
                  "maxLength": 36,
                  "minLength": 0,
                  "type": "string"
                },
                "Content": {
                  "description": "The source of the schema definition.",
                  "maxLength": 100000,
                  "minLength": 1,
                  "type": "string"
                },
                "Description": {
                  "description": "The description of the schema.",
                  "maxLength": 256,
                  "minLength": 0,
                  "type": "string"
                },
                "Type": {
                  "description": "The schema type for the events schema.",
                  "enum": [
                    "OpenApi3",
                    "JSONSchemaDraft4"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateSchemaResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "482": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "483": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "<p>Updates the schema definition</p> <note><p>Inactive schemas will be deleted after two years.</p></note>",
        "operationId": "UpdateSchema"
      }
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/export#type": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specifying this limits the results to only this schema version.",
            "in": "query",
            "name": "schemaVersion",
            "required": false,
            "type": "string"
          },
          {
            "description": "",
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExportSchemaResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "",
        "operationId": "ExportSchema"
      }
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The language of the code binding.",
            "in": "path",
            "name": "language",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specifying this limits the results to only this schema version.",
            "in": "query",
            "name": "schemaVersion",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeCodeBindingResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Describe the code binding URI.",
        "operationId": "DescribeCodeBinding"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The language of the code binding.",
            "in": "path",
            "name": "language",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specifying this limits the results to only this schema version.",
            "in": "query",
            "name": "schemaVersion",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutCodeBindingResponse"
            }
          },
          "480": {
            "description": "GoneException",
            "schema": {
              "$ref": "#/definitions/GoneException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "485": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Put code binding URI",
        "operationId": "PutCodeBinding"
      }
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}/source": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The language of the code binding.",
            "in": "path",
            "name": "language",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specifying this limits the results to only this schema version.",
            "in": "query",
            "name": "schemaVersion",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCodeBindingSourceResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          }
        },
        "description": "Get the code binding source URI.",
        "operationId": "GetCodeBindingSource"
      }
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/version/{schemaVersion}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The version number of the schema",
            "in": "path",
            "name": "schemaVersion",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Delete the schema version definition",
        "operationId": "DeleteSchemaVersion"
      }
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/versions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the schema.",
            "in": "path",
            "name": "schemaName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSchemaVersionsResponse"
            }
          },
          "480": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "483": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          },
          "484": {
            "description": "NotFoundException",
            "schema": {
              "$ref": "#/definitions/NotFoundException"
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          }
        },
        "description": "Provides a list of the schema versions and related information.",
        "operationId": "ListSchemaVersions"
      }
    },
    "/v1/registries/name/{registryName}/schemas/search#keywords": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Specifying this limits the results to only schemas that include the provided keywords.",
            "in": "query",
            "name": "keywords",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the registry.",
            "in": "path",
            "name": "registryName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchSchemasResponse"
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableException"
            }
          },
          "481": {
            "description": "BadRequestException",
            "schema": {
              "$ref": "#/definitions/BadRequestException"
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "schema": {
              "$ref": "#/definitions/UnauthorizedException"
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorException"
            }
          },
          "484": {
            "description": "ForbiddenException",
            "schema": {
              "$ref": "#/definitions/ForbiddenException"
            }
          }
        },
        "description": "Search the schemas",
        "operationId": "SearchSchemas"
      }
    }
  },
  "definitions": {
    "BadRequestException": {},
    "Body": {
      "type": "string"
    },
    "CodeGenerationStatus": {
      "enum": [
        "CREATE_IN_PROGRESS",
        "CREATE_COMPLETE",
        "CREATE_FAILED"
      ],
      "type": "string"
    },
    "ConflictException": {},
    "CreateDiscovererRequest": {
      "description": "",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin0Max256"
            },
            {
              "description": "A description for the discoverer."
            }
          ]
        },
        "SourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin20Max1600"
            },
            {
              "description": "The ARN of the event bus."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the resource.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "required": [
        "SourceArn"
      ],
      "title": "CreateDiscovererRequest",
      "type": "object"
    },
    "CreateDiscovererResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The description of the discoverer."
            }
          ]
        },
        "DiscovererArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the discoverer."
            }
          ]
        },
        "DiscovererId": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ID of the discoverer."
            }
          ]
        },
        "SourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the event bus."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/DiscovererState"
            },
            {
              "description": "The state of the discoverer."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the resource.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateRegistryRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin0Max256"
            },
            {
              "description": "A description of the registry to be created."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags to associate with the registry.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "title": "CreateRegistryRequest",
      "type": "object"
    },
    "CreateRegistryResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The description of the registry."
            }
          ]
        },
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the registry.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateSchemaRequest": {
      "properties": {
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin1Max100000"
            },
            {
              "description": "The source of the schema definition."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin0Max256"
            },
            {
              "description": "A description of the schema."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the schema.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/Type"
            },
            {
              "description": "The type of schema."
            }
          ]
        }
      },
      "required": [
        "Type",
        "Content"
      ],
      "title": "CreateSchemaRequest",
      "type": "object"
    },
    "CreateSchemaResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The description of the schema."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date and time that schema was modified."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the schema."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The version number of the schema"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "xml": {
                "name": "tags"
              }
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The type of the schema."
            }
          ]
        },
        "VersionCreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date the schema version was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteDiscovererRequest": {
      "properties": {},
      "title": "DeleteDiscovererRequest",
      "type": "object"
    },
    "DeleteRegistryRequest": {
      "properties": {},
      "title": "DeleteRegistryRequest",
      "type": "object"
    },
    "DeleteResourcePolicyRequest": {
      "properties": {},
      "title": "DeleteResourcePolicyRequest",
      "type": "object"
    },
    "DeleteSchemaRequest": {
      "properties": {},
      "title": "DeleteSchemaRequest",
      "type": "object"
    },
    "DeleteSchemaVersionRequest": {
      "properties": {},
      "title": "DeleteSchemaVersionRequest",
      "type": "object"
    },
    "DescribeCodeBindingRequest": {
      "properties": {},
      "title": "DescribeCodeBindingRequest",
      "type": "object"
    },
    "DescribeCodeBindingResponse": {
      "properties": {
        "CreationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The time and date that the code binding was created."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date and time that code bindings were modified."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenerationStatus"
            },
            {
              "description": "The current status of code binding generation."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDiscovererRequest": {
      "properties": {},
      "title": "DescribeDiscovererRequest",
      "type": "object"
    },
    "DescribeDiscovererResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The description of the discoverer."
            }
          ]
        },
        "DiscovererArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the discoverer."
            }
          ]
        },
        "DiscovererId": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ID of the discoverer."
            }
          ]
        },
        "SourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the event bus."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/DiscovererState"
            },
            {
              "description": "The state of the discoverer."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the resource.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeRegistryRequest": {
      "properties": {},
      "title": "DescribeRegistryRequest",
      "type": "object"
    },
    "DescribeRegistryResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The description of the registry."
            }
          ]
        },
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the registry.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeSchemaRequest": {
      "properties": {},
      "title": "DescribeSchemaRequest",
      "type": "object"
    },
    "DescribeSchemaResponse": {
      "properties": {
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The source of the schema definition."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The description of the schema."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date and time that schema was modified."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the schema."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The version number of the schema"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the resource.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The type of the schema."
            }
          ]
        },
        "VersionCreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date the schema version was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "DiscovererState": {
      "enum": [
        "STARTED",
        "STOPPED"
      ],
      "type": "string"
    },
    "DiscovererSummary": {
      "properties": {
        "DiscovererArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the discoverer."
            }
          ]
        },
        "DiscovererId": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ID of the discoverer."
            }
          ]
        },
        "SourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the event bus."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/DiscovererState"
            },
            {
              "description": "The state of the discoverer."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the resource.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "type": "object"
    },
    "ExportSchemaRequest": {
      "properties": {},
      "title": "ExportSchemaRequest",
      "type": "object"
    },
    "ExportSchemaResponse": {
      "properties": {
        "Content": {
          "$ref": "#/definitions/__string"
        },
        "SchemaArn": {
          "$ref": "#/definitions/__string"
        },
        "SchemaName": {
          "$ref": "#/definitions/__string"
        },
        "SchemaVersion": {
          "$ref": "#/definitions/__string"
        },
        "Type": {
          "$ref": "#/definitions/__string"
        }
      },
      "type": "object"
    },
    "ForbiddenException": {},
    "GetCodeBindingSourceRequest": {
      "properties": {},
      "title": "GetCodeBindingSourceRequest",
      "type": "object"
    },
    "GetCodeBindingSourceResponse": {
      "properties": {
        "Body": {
          "$ref": "#/definitions/Body"
        }
      },
      "type": "object"
    },
    "GetDiscoveredSchemaRequest": {
      "properties": {
        "Events": {
          "allOf": [
            {
              "$ref": "#/definitions/__listOfGetDiscoveredSchemaVersionItemInput"
            },
            {
              "description": "An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/Type"
            },
            {
              "description": "The type of event."
            }
          ]
        }
      },
      "required": [
        "Type",
        "Events"
      ],
      "title": "GetDiscoveredSchemaRequest",
      "type": "object"
    },
    "GetDiscoveredSchemaResponse": {
      "properties": {
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The source of the schema definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDiscoveredSchemaVersionItemInput": {
      "maxLength": 100000,
      "minLength": 1,
      "type": "string"
    },
    "GetResourcePolicyRequest": {
      "properties": {},
      "title": "GetResourcePolicyRequest",
      "type": "object"
    },
    "GetResourcePolicyResponse": {
      "properties": {
        "Policy": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The resource-based policy."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The revision ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "GoneException": {},
    "InternalServerErrorException": {},
    "ListDiscoverersRequest": {
      "properties": {},
      "title": "ListDiscoverersRequest",
      "type": "object"
    },
    "ListDiscoverersResponse": {
      "properties": {
        "Discoverers": {
          "allOf": [
            {
              "$ref": "#/definitions/__listOfDiscovererSummary"
            },
            {
              "description": "An array of DiscovererSummary information."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListRegistriesRequest": {
      "properties": {},
      "title": "ListRegistriesRequest",
      "type": "object"
    },
    "ListRegistriesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
            }
          ]
        },
        "Registries": {
          "allOf": [
            {
              "$ref": "#/definitions/__listOfRegistrySummary"
            },
            {
              "description": "An array of registry summaries."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListSchemaVersionsRequest": {
      "properties": {},
      "title": "ListSchemaVersionsRequest",
      "type": "object"
    },
    "ListSchemaVersionsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
            }
          ]
        },
        "SchemaVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/__listOfSchemaVersionSummary"
            },
            {
              "description": "An array of schema version summaries."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListSchemasRequest": {
      "properties": {},
      "title": "ListSchemasRequest",
      "type": "object"
    },
    "ListSchemasResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
            }
          ]
        },
        "Schemas": {
          "allOf": [
            {
              "$ref": "#/definitions/__listOfSchemaSummary"
            },
            {
              "description": "An array of schema summaries."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {},
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "type": "object"
    },
    "NotFoundException": {},
    "PreconditionFailedException": {},
    "PutCodeBindingRequest": {
      "properties": {},
      "title": "PutCodeBindingRequest",
      "type": "object"
    },
    "PutCodeBindingResponse": {
      "properties": {
        "CreationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The time and date that the code binding was created."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date and time that code bindings were modified."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenerationStatus"
            },
            {
              "description": "The current status of code binding generation."
            }
          ]
        }
      },
      "type": "object"
    },
    "PutResourcePolicyRequest": {
      "description": "The name of the policy.",
      "properties": {
        "Policy": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The resource-based policy."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The revision ID of the policy."
            }
          ]
        }
      },
      "required": [
        "Policy"
      ],
      "title": "PutResourcePolicyRequest",
      "type": "object"
    },
    "PutResourcePolicyResponse": {
      "properties": {
        "Policy": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The resource-based policy."
            }
          ]
        },
        "RevisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The revision ID of the policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "RegistrySummary": {
      "properties": {
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the registry.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaSummary": {
      "description": "A summary of schema details.",
      "properties": {
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date and time that schema was modified."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the schema."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the schema.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        },
        "VersionCount": {
          "allOf": [
            {
              "$ref": "#/definitions/__long"
            },
            {
              "description": "The number of versions available for the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaVersionSummary": {
      "properties": {
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the schema version."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/Type"
            },
            {
              "description": "The type of schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "SearchSchemaSummary": {
      "properties": {
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the schema."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "SchemaVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/__listOfSearchSchemaVersionSummary"
            },
            {
              "description": "An array of schema version summaries."
            }
          ]
        }
      },
      "type": "object"
    },
    "SearchSchemaVersionSummary": {
      "properties": {
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date the schema version was created."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The version number of the schema"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/Type"
            },
            {
              "description": "The type of schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "SearchSchemasRequest": {
      "properties": {},
      "title": "SearchSchemasRequest",
      "type": "object"
    },
    "SearchSchemasResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
            }
          ]
        },
        "Schemas": {
          "allOf": [
            {
              "$ref": "#/definitions/__listOfSearchSchemaSummary"
            },
            {
              "description": "An array of SearchSchemaSummary information."
            }
          ]
        }
      },
      "type": "object"
    },
    "ServiceUnavailableException": {},
    "StartDiscovererRequest": {
      "properties": {},
      "title": "StartDiscovererRequest",
      "type": "object"
    },
    "StartDiscovererResponse": {
      "properties": {
        "DiscovererId": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ID of the discoverer."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/DiscovererState"
            },
            {
              "description": "The state of the discoverer."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopDiscovererRequest": {
      "properties": {},
      "title": "StopDiscovererRequest",
      "type": "object"
    },
    "StopDiscovererResponse": {
      "properties": {
        "DiscovererId": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ID of the discoverer."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/DiscovererState"
            },
            {
              "description": "The state of the discoverer."
            }
          ]
        }
      },
      "type": "object"
    },
    "TagResourceRequest": {
      "description": "",
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the resource.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "required": [
        "Tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "Tags": {
      "additionalProperties": {
        "$ref": "#/definitions/__string"
      },
      "description": "Key-value pairs associated with a resource.",
      "type": "object"
    },
    "TooManyRequestsException": {},
    "Type": {
      "enum": [
        "OpenApi3",
        "JSONSchemaDraft4"
      ],
      "type": "string"
    },
    "UnauthorizedException": {},
    "UntagResourceRequest": {
      "properties": {},
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UpdateDiscovererRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin0Max256"
            },
            {
              "description": "The description of the discoverer to update."
            }
          ]
        }
      },
      "title": "UpdateDiscovererRequest",
      "type": "object"
    },
    "UpdateDiscovererResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The description of the discoverer."
            }
          ]
        },
        "DiscovererArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the discoverer."
            }
          ]
        },
        "DiscovererId": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ID of the discoverer."
            }
          ]
        },
        "SourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the event bus."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/DiscovererState"
            },
            {
              "description": "The state of the discoverer."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the resource.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateRegistryRequest": {
      "description": "Updates the registry.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin0Max256"
            },
            {
              "description": "The description of the registry to update."
            }
          ]
        }
      },
      "title": "UpdateRegistryRequest",
      "type": "object"
    },
    "UpdateRegistryResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The description of the registry."
            }
          ]
        },
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Tags associated with the registry.",
              "xml": {
                "name": "tags"
              }
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateSchemaRequest": {
      "properties": {
        "ClientTokenId": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin0Max36"
            },
            {
              "description": "The ID of the client token."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin1Max100000"
            },
            {
              "description": "The source of the schema definition."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__stringMin0Max256"
            },
            {
              "description": "The description of the schema."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/Type"
            },
            {
              "description": "The schema type for the events schema."
            }
          ]
        }
      },
      "title": "UpdateSchemaRequest",
      "type": "object"
    },
    "UpdateSchemaResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The description of the schema."
            }
          ]
        },
        "LastModified": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date and time that schema was modified."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The ARN of the schema."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The version number of the schema"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "xml": {
                "name": "tags"
              }
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/__string"
            },
            {
              "description": "The type of the schema."
            }
          ]
        },
        "VersionCreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/__timestampIso8601"
            },
            {
              "description": "The date the schema version was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "__integer": {
      "type": "integer"
    },
    "__listOfDiscovererSummary": {
      "items": {
        "$ref": "#/definitions/DiscovererSummary"
      },
      "type": "array"
    },
    "__listOfGetDiscoveredSchemaVersionItemInput": {
      "items": {
        "$ref": "#/definitions/GetDiscoveredSchemaVersionItemInput"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "__listOfRegistrySummary": {
      "items": {
        "$ref": "#/definitions/RegistrySummary"
      },
      "type": "array"
    },
    "__listOfSchemaSummary": {
      "items": {
        "$ref": "#/definitions/SchemaSummary"
      },
      "type": "array"
    },
    "__listOfSchemaVersionSummary": {
      "items": {
        "$ref": "#/definitions/SchemaVersionSummary"
      },
      "type": "array"
    },
    "__listOfSearchSchemaSummary": {
      "items": {
        "$ref": "#/definitions/SearchSchemaSummary"
      },
      "type": "array"
    },
    "__listOfSearchSchemaVersionSummary": {
      "items": {
        "$ref": "#/definitions/SearchSchemaVersionSummary"
      },
      "type": "array"
    },
    "__listOf__string": {
      "items": {
        "$ref": "#/definitions/__string"
      },
      "type": "array"
    },
    "__long": {
      "type": "integer"
    },
    "__string": {
      "type": "string"
    },
    "__stringMin0Max256": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "__stringMin0Max36": {
      "maxLength": 36,
      "minLength": 0,
      "type": "string"
    },
    "__stringMin1Max100000": {
      "maxLength": 100000,
      "minLength": 1,
      "type": "string"
    },
    "__stringMin20Max1600": {
      "maxLength": 1600,
      "minLength": 20,
      "type": "string"
    },
    "__timestampIso8601": {
      "format": "date-time",
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/schemas/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}