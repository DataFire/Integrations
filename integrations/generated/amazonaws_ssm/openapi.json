{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Systems Manager</fullname> <p>AWS Systems Manager is a collection of capabilities that helps you automate management tasks such as collecting system inventory, applying operating system (OS) patches, automating the creation of Amazon Machine Images (AMIs), and configuring operating systems (OSs) and applications at scale. Systems Manager lets you remotely and securely manage the configuration of your managed instances. A <i>managed instance</i> is any Amazon Elastic Compute Cloud instance (EC2 instance), or any on-premises server or virtual machine (VM) in your hybrid environment that has been configured for Systems Manager.</p> <p>This reference is intended to be used with the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/\">AWS Systems Manager User Guide</a>.</p> <p>To get started, verify prerequisites and configure managed instances. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html\">Setting up AWS Systems Manager</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>For information about other API actions you can perform on EC2 instances, see the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/\">Amazon EC2 API Reference</a>. For information about how to use a Query API, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/making-api-requests.html\">Making API requests</a>. </p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Simple Systems Manager (SSM)",
    "version": "2014-11-06",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ssm-2014-11-06.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "ssm",
    "x-datafire": {
      "name": "amazonaws_ssm",
      "type": "openapi"
    }
  },
  "host": "ssm.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=AmazonSSM.AddTagsToResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.AddTagsToResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddTagsToResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddTagsToResourceResult"
            }
          },
          "480": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "TooManyTagsError",
            "schema": {
              "$ref": "#/definitions/TooManyTagsError"
            }
          },
          "484": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          }
        },
        "description": "<p>Adds or overwrites one or more tags for the specified resource. Tags are metadata that you can assign to your documents, managed instances, maintenance windows, Parameter Store parameters, and patch baselines. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. For example, you could define a set of tags for your account's managed instances that helps you track each instance's owner and stack level. For example: Key=Owner and Value=DbAdmin, SysAdmin, or Dev. Or Key=Stack and Value=Production, Pre-Production, or Test.</p> <p>Each resource can have a maximum of 50 tags. </p> <p>We recommend that you devise a set of tag keys that meets your needs for each resource type. Using a consistent set of tag keys makes it easier for you to manage your resources. You can search and filter the resources based on the tags you add. Tags don't have any semantic meaning to and are interpreted strictly as a string of characters. </p> <p>For more information about using tags with EC2 instances, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\">Tagging your Amazon EC2 resources</a> in the <i>Amazon EC2 User Guide</i>.</p>",
        "operationId": "AddTagsToResource"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CancelCommand": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CancelCommand"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelCommandRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelCommandResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidCommandId",
            "schema": {
              "$ref": "#/definitions/InvalidCommandId"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "DuplicateInstanceId",
            "schema": {
              "$ref": "#/definitions/DuplicateInstanceId"
            }
          }
        },
        "description": "Attempts to cancel the command specified by the Command ID. There is no guarantee that the command will be terminated and the underlying process stopped.",
        "operationId": "CancelCommand"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CancelMaintenanceWindowExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CancelMaintenanceWindowExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelMaintenanceWindowExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelMaintenanceWindowExecutionResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          }
        },
        "description": "Stops a maintenance window execution that is already in progress and cancels any tasks in the window that have not already starting running. (Tasks already in progress will continue to completion.)",
        "operationId": "CancelMaintenanceWindowExecution"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CreateActivation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CreateActivation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActivationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateActivationResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Generates an activation code and activation ID you can use to register your on-premises server or virtual machine (VM) with Systems Manager. Registering these machines with Systems Manager makes it possible to manage them using Systems Manager capabilities. You use the activation code and ID when installing SSM Agent on machines in your hybrid environment. For more information about requirements for managing on-premises instances and VMs using Systems Manager, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html\">Setting up AWS Systems Manager for hybrid environments</a> in the <i>AWS Systems Manager User Guide</i>. </p> <note> <p>On-premises servers or VMs that are registered with Systems Manager and EC2 instances that you manage with Systems Manager are all called <i>managed instances</i>.</p> </note>",
        "operationId": "CreateActivation"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CreateAssociation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CreateAssociation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAssociationResult"
            }
          },
          "480": {
            "description": "AssociationAlreadyExists",
            "schema": {
              "$ref": "#/definitions/AssociationAlreadyExists"
            }
          },
          "481": {
            "description": "AssociationLimitExceeded",
            "schema": {
              "$ref": "#/definitions/AssociationLimitExceeded"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "484": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "485": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "486": {
            "description": "UnsupportedPlatformType",
            "schema": {
              "$ref": "#/definitions/UnsupportedPlatformType"
            }
          },
          "487": {
            "description": "InvalidOutputLocation",
            "schema": {
              "$ref": "#/definitions/InvalidOutputLocation"
            }
          },
          "488": {
            "description": "InvalidParameters",
            "schema": {
              "$ref": "#/definitions/InvalidParameters"
            }
          },
          "489": {
            "description": "InvalidTarget",
            "schema": {
              "$ref": "#/definitions/InvalidTarget"
            }
          },
          "490": {
            "description": "InvalidSchedule",
            "schema": {
              "$ref": "#/definitions/InvalidSchedule"
            }
          }
        },
        "description": "A State Manager association defines the state that you want to maintain on your instances. For example, an association can specify that anti-virus software must be installed and running on your instances, or that certain ports must be closed. For static targets, the association specifies a schedule for when the configuration is reapplied. For dynamic targets, such as an AWS Resource Group or an AWS Autoscaling Group, State Manager applies the configuration when new instances are added to the group. The association also specifies actions to take when applying the configuration. For example, an association for anti-virus software might run once a day. If the software is not installed, then State Manager installs it. If the software is installed, but the service is not running, then the association might instruct State Manager to start the service. ",
        "operationId": "CreateAssociation"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CreateAssociationBatch": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CreateAssociationBatch"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAssociationBatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAssociationBatchResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "483": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "484": {
            "description": "InvalidParameters",
            "schema": {
              "$ref": "#/definitions/InvalidParameters"
            }
          },
          "485": {
            "description": "DuplicateInstanceId",
            "schema": {
              "$ref": "#/definitions/DuplicateInstanceId"
            }
          },
          "486": {
            "description": "AssociationLimitExceeded",
            "schema": {
              "$ref": "#/definitions/AssociationLimitExceeded"
            }
          },
          "487": {
            "description": "UnsupportedPlatformType",
            "schema": {
              "$ref": "#/definitions/UnsupportedPlatformType"
            }
          },
          "488": {
            "description": "InvalidOutputLocation",
            "schema": {
              "$ref": "#/definitions/InvalidOutputLocation"
            }
          },
          "489": {
            "description": "InvalidTarget",
            "schema": {
              "$ref": "#/definitions/InvalidTarget"
            }
          },
          "490": {
            "description": "InvalidSchedule",
            "schema": {
              "$ref": "#/definitions/InvalidSchedule"
            }
          }
        },
        "description": "<p>Associates the specified Systems Manager document with the specified instances or targets.</p> <p>When you associate a document with one or more instances using instance IDs or tags, SSM Agent running on the instance processes the document and configures the instance as specified.</p> <p>If you associate a document with an instance that already has an associated document, the system returns the AssociationAlreadyExists exception.</p>",
        "operationId": "CreateAssociationBatch"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CreateDocument": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CreateDocument"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDocumentResult"
            }
          },
          "480": {
            "description": "DocumentAlreadyExists",
            "schema": {
              "$ref": "#/definitions/DocumentAlreadyExists"
            }
          },
          "481": {
            "description": "MaxDocumentSizeExceeded",
            "schema": {
              "$ref": "#/definitions/MaxDocumentSizeExceeded"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "InvalidDocumentContent",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentContent"
            }
          },
          "484": {
            "description": "DocumentLimitExceeded",
            "schema": {
              "$ref": "#/definitions/DocumentLimitExceeded"
            }
          },
          "485": {
            "description": "InvalidDocumentSchemaVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentSchemaVersion"
            }
          }
        },
        "description": "Creates a Systems Manager (SSM) document. An SSM document defines the actions that Systems Manager performs on your managed instances. For more information about SSM documents, including information about supported schemas, features, and syntax, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html\">AWS Systems Manager Documents</a> in the <i>AWS Systems Manager User Guide</i>.",
        "operationId": "CreateDocument"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CreateMaintenanceWindow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CreateMaintenanceWindow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "481": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Creates a new maintenance window.</p> <note> <p>The value you specify for <code>Duration</code> determines the specific end time for the maintenance window based on the time it begins. No maintenance window tasks are permitted to start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>. For example, if the maintenance window starts at 3 PM, the duration is three hours, and the value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start after 5 PM.</p> </note>",
        "operationId": "CreateMaintenanceWindow"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CreateOpsItem": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CreateOpsItem"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpsItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateOpsItemResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "OpsItemAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/OpsItemAlreadyExistsException"
            }
          },
          "482": {
            "description": "OpsItemLimitExceededException",
            "schema": {
              "$ref": "#/definitions/OpsItemLimitExceededException"
            }
          },
          "483": {
            "description": "OpsItemInvalidParameterException",
            "schema": {
              "$ref": "#/definitions/OpsItemInvalidParameterException"
            }
          }
        },
        "description": "<p>Creates a new OpsItem. You must have permission in AWS Identity and Access Management (IAM) to create a new OpsItem. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html\">Getting started with OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html\">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. </p>",
        "operationId": "CreateOpsItem"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CreateOpsMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CreateOpsMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpsMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateOpsMetadataResult"
            }
          },
          "480": {
            "description": "OpsMetadataAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataAlreadyExistsException"
            }
          },
          "481": {
            "description": "OpsMetadataTooManyUpdatesException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataTooManyUpdatesException"
            }
          },
          "482": {
            "description": "OpsMetadataInvalidArgumentException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataInvalidArgumentException"
            }
          },
          "483": {
            "description": "OpsMetadataLimitExceededException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "If you create a new application in Application Manager, Systems Manager calls this API action to specify information about the new application, including the application type.",
        "operationId": "CreateOpsMetadata"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CreatePatchBaseline": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CreatePatchBaseline"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePatchBaselineResult"
            }
          },
          "480": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "481": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Creates a patch baseline.</p> <note> <p>For information about valid key and value pairs in <code>PatchFilters</code> for each supported operating system type, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html\">PatchFilter</a>.</p> </note>",
        "operationId": "CreatePatchBaseline"
      }
    },
    "/#X-Amz-Target=AmazonSSM.CreateResourceDataSync": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.CreateResourceDataSync"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateResourceDataSyncRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateResourceDataSyncResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ResourceDataSyncCountExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncCountExceededException"
            }
          },
          "482": {
            "description": "ResourceDataSyncAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncAlreadyExistsException"
            }
          },
          "483": {
            "description": "ResourceDataSyncInvalidConfigurationException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncInvalidConfigurationException"
            }
          }
        },
        "description": "<p>A resource data sync helps you view data from multiple sources in a single location. Systems Manager offers two types of resource data sync: <code>SyncToDestination</code> and <code>SyncFromSource</code>.</p> <p>You can configure Systems Manager Inventory to use the <code>SyncToDestination</code> type to synchronize Inventory data from multiple AWS Regions to a single S3 bucket. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-datasync.html\">Configuring Resource Data Sync for Inventory</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>You can configure Systems Manager Explorer to use the <code>SyncFromSource</code> type to synchronize operational work items (OpsItems) and operational data (OpsData) from multiple AWS Regions to a single S3 bucket. This type can synchronize OpsItems and OpsData from multiple AWS accounts and Regions or <code>EntireOrganization</code> by using AWS Organizations. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resource-data-sync.html\">Setting up Systems Manager Explorer to display data from multiple accounts and Regions</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>A resource data sync is an asynchronous operation that returns immediately. After a successful initial sync is completed, the system continuously syncs data. To check the status of a sync, use the <a>ListResourceDataSync</a>.</p> <note> <p>By default, data is not encrypted in Amazon S3. We strongly recommend that you enable encryption in Amazon S3 to ensure secure data storage. We also recommend that you secure access to the Amazon S3 bucket by creating a restrictive bucket policy. </p> </note>",
        "operationId": "CreateResourceDataSync"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeleteActivation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeleteActivation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteActivationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteActivationResult"
            }
          },
          "480": {
            "description": "InvalidActivationId",
            "schema": {
              "$ref": "#/definitions/InvalidActivationId"
            }
          },
          "481": {
            "description": "InvalidActivation",
            "schema": {
              "$ref": "#/definitions/InvalidActivation"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          }
        },
        "description": "Deletes an activation. You are not required to delete an activation. If you delete an activation, you can no longer use it to register additional managed instances. Deleting an activation does not de-register managed instances. You must manually de-register managed instances.",
        "operationId": "DeleteActivation"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeleteAssociation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeleteAssociation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAssociationResult"
            }
          },
          "480": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "482": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "483": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "484": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          }
        },
        "description": "<p>Disassociates the specified Systems Manager document from the specified instance.</p> <p>When you disassociate a document from an instance, it does not change the configuration of the instance. To change the configuration state of an instance after you disassociate a document, you must create a new document with the desired configuration and associate it with the instance.</p>",
        "operationId": "DeleteAssociation"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeleteDocument": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeleteDocument"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDocumentResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentOperation",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentOperation"
            }
          },
          "483": {
            "description": "AssociatedInstances",
            "schema": {
              "$ref": "#/definitions/AssociatedInstances"
            }
          }
        },
        "description": "<p>Deletes the Systems Manager document and all instance associations to the document.</p> <p>Before you delete the document, we recommend that you use <a>DeleteAssociation</a> to disassociate all instances that are associated with the document.</p>",
        "operationId": "DeleteDocument"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeleteInventory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeleteInventory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteInventoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteInventoryResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "482": {
            "description": "InvalidOptionException",
            "schema": {
              "$ref": "#/definitions/InvalidOptionException"
            }
          },
          "483": {
            "description": "InvalidDeleteInventoryParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidDeleteInventoryParametersException"
            }
          },
          "484": {
            "description": "InvalidInventoryRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidInventoryRequestException"
            }
          }
        },
        "description": "Delete a custom inventory type or the data associated with a custom Inventory type. Deleting a custom inventory type is also referred to as deleting a custom inventory schema.",
        "operationId": "DeleteInventory"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeleteMaintenanceWindow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeleteMaintenanceWindow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Deletes a maintenance window.",
        "operationId": "DeleteMaintenanceWindow"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeleteOpsMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeleteOpsMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteOpsMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteOpsMetadataResult"
            }
          },
          "480": {
            "description": "OpsMetadataNotFoundException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataNotFoundException"
            }
          },
          "481": {
            "description": "OpsMetadataInvalidArgumentException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataInvalidArgumentException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Delete OpsMetadata related to an application.",
        "operationId": "DeleteOpsMetadata"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeleteParameter": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeleteParameter"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteParameterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteParameterResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ParameterNotFound",
            "schema": {
              "$ref": "#/definitions/ParameterNotFound"
            }
          }
        },
        "description": "Delete a parameter from the system.",
        "operationId": "DeleteParameter"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeleteParameters": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeleteParameters"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteParametersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteParametersResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Delete a list of parameters.",
        "operationId": "DeleteParameters"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeletePatchBaseline": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeletePatchBaseline"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePatchBaselineResult"
            }
          },
          "480": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Deletes a patch baseline.",
        "operationId": "DeletePatchBaseline"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeleteResourceDataSync": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeleteResourceDataSync"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteResourceDataSyncRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteResourceDataSyncResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ResourceDataSyncNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncNotFoundException"
            }
          },
          "482": {
            "description": "ResourceDataSyncInvalidConfigurationException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncInvalidConfigurationException"
            }
          }
        },
        "description": "Deletes a Resource Data Sync configuration. After the configuration is deleted, changes to data on managed instances are no longer synced to or from the target. Deleting a sync configuration does not delete data.",
        "operationId": "DeleteResourceDataSync"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeregisterManagedInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeregisterManagedInstance"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterManagedInstanceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterManagedInstanceResult"
            }
          },
          "480": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Removes the server or virtual machine from the list of registered servers. You can reregister the instance again at any time. If you don't plan to use Run Command on the server, we suggest uninstalling SSM Agent first.",
        "operationId": "DeregisterManagedInstance"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeregisterPatchBaselineForPatchGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeregisterPatchBaselineForPatchGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterPatchBaselineForPatchGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterPatchBaselineForPatchGroupResult"
            }
          },
          "480": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Removes a patch group from a patch baseline.",
        "operationId": "DeregisterPatchBaselineForPatchGroup"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeregisterTargetFromMaintenanceWindow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeregisterTargetFromMaintenanceWindow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterTargetFromMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterTargetFromMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "482": {
            "description": "TargetInUseException",
            "schema": {
              "$ref": "#/definitions/TargetInUseException"
            }
          }
        },
        "description": "Removes a target from a maintenance window.",
        "operationId": "DeregisterTargetFromMaintenanceWindow"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DeregisterTaskFromMaintenanceWindow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DeregisterTaskFromMaintenanceWindow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterTaskFromMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterTaskFromMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Removes a task from a maintenance window.",
        "operationId": "DeregisterTaskFromMaintenanceWindow"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeActivations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeActivations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeActivationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeActivationsResult"
            }
          },
          "480": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Describes details about the activation, such as the date and time the activation was created, its expiration date, the IAM role assigned to the instances in the activation, and the number of instances registered by using this activation.",
        "operationId": "DescribeActivations"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeAssociation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DescribeAssociation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAssociationResult"
            }
          },
          "480": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "481": {
            "description": "InvalidAssociationVersion",
            "schema": {
              "$ref": "#/definitions/InvalidAssociationVersion"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "484": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          }
        },
        "description": "Describes the association for the specified target or instance. If you created the association by using the <code>Targets</code> parameter, then you must retrieve the association by using the association ID. If you created the association by specifying an instance ID and a Systems Manager document, then you retrieve the association by specifying the document name and the instance ID. ",
        "operationId": "DescribeAssociation"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeAssociationExecutionTargets": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeAssociationExecutionTargets"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAssociationExecutionTargetsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAssociationExecutionTargetsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "483": {
            "description": "AssociationExecutionDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationExecutionDoesNotExist"
            }
          }
        },
        "description": "Use this API action to view information about a specific execution of a specific association.",
        "operationId": "DescribeAssociationExecutionTargets"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeAssociationExecutions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeAssociationExecutions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAssociationExecutionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAssociationExecutionsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Use this API action to view all executions for a specific association ID. ",
        "operationId": "DescribeAssociationExecutions"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeAutomationExecutions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeAutomationExecutions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAutomationExecutionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAutomationExecutionsResult"
            }
          },
          "480": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "481": {
            "description": "InvalidFilterValue",
            "schema": {
              "$ref": "#/definitions/InvalidFilterValue"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "483": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Provides details about all active and terminated Automation executions.",
        "operationId": "DescribeAutomationExecutions"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeAutomationStepExecutions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeAutomationStepExecutions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAutomationStepExecutionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAutomationStepExecutionsResult"
            }
          },
          "480": {
            "description": "AutomationExecutionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionNotFoundException"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "483": {
            "description": "InvalidFilterValue",
            "schema": {
              "$ref": "#/definitions/InvalidFilterValue"
            }
          },
          "484": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Information about all active and terminated step executions in an Automation workflow.",
        "operationId": "DescribeAutomationStepExecutions"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeAvailablePatches": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeAvailablePatches"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAvailablePatchesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAvailablePatchesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Lists all patches eligible to be included in a patch baseline.",
        "operationId": "DescribeAvailablePatches"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeDocument": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DescribeDocument"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDocumentResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          }
        },
        "description": "Describes the specified Systems Manager document.",
        "operationId": "DescribeDocument"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeDocumentPermission": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DescribeDocumentPermission"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDocumentPermissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDocumentPermissionResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidPermissionType",
            "schema": {
              "$ref": "#/definitions/InvalidPermissionType"
            }
          }
        },
        "description": "Describes the permissions for a Systems Manager document. If you created the document, you are the owner. If a document is shared, it can either be shared privately (by specifying a user's AWS account ID) or publicly (<i>All</i>). ",
        "operationId": "DescribeDocumentPermission"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeEffectiveInstanceAssociations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeEffectiveInstanceAssociations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEffectiveInstanceAssociationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEffectiveInstanceAssociationsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "All associations for the instance(s).",
        "operationId": "DescribeEffectiveInstanceAssociations"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeEffectivePatchesForPatchBaseline": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeEffectivePatchesForPatchBaseline"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEffectivePatchesForPatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEffectivePatchesForPatchBaselineResult"
            }
          },
          "480": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "UnsupportedOperatingSystem",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperatingSystem"
            }
          },
          "483": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves the current effective patches (the patch and the approval state) for the specified patch baseline. Note that this API applies only to Windows patch baselines.",
        "operationId": "DescribeEffectivePatchesForPatchBaseline"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeInstanceAssociationsStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeInstanceAssociationsStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstanceAssociationsStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstanceAssociationsStatusResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "The status of the associations for the instance(s).",
        "operationId": "DescribeInstanceAssociationsStatus"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeInstanceInformation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeInstanceInformation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstanceInformationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstanceInformationResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "483": {
            "description": "InvalidInstanceInformationFilterValue",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceInformationFilterValue"
            }
          },
          "484": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          }
        },
        "description": "<p>Describes one or more of your instances, including information about the operating system platform, the version of SSM Agent installed on the instance, instance status, and so on.</p> <p>If you specify one or more instance IDs, it returns information for those instances. If you do not specify instance IDs, it returns information for all your instances. If you specify an instance ID that is not valid or an instance that you do not own, you receive an error.</p> <note> <p>The IamRole field for this API action is the Amazon Identity and Access Management (IAM) role assigned to on-premises instances. This call does not return the IAM role for EC2 instances.</p> </note>",
        "operationId": "DescribeInstanceInformation"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeInstancePatchStates": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeInstancePatchStates"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchStatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchStatesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Retrieves the high-level patch state of one or more instances.",
        "operationId": "DescribeInstancePatchStates"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeInstancePatchStatesForPatchGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeInstancePatchStatesForPatchGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchStatesForPatchGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchStatesForPatchGroupResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Retrieves the high-level patch state for the instances in the specified patch group.",
        "operationId": "DescribeInstancePatchStatesForPatchGroup"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeInstancePatches": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeInstancePatches"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInstancePatchesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "483": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Retrieves information about the patches on the specified instance and their state relative to the patch baseline being used for the instance.",
        "operationId": "DescribeInstancePatches"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeInventoryDeletions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeInventoryDeletions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeInventoryDeletionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeInventoryDeletionsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDeletionIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeletionIdException"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Describes a specific delete inventory operation.",
        "operationId": "DescribeInventoryDeletions"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowExecutionTaskInvocations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeMaintenanceWindowExecutionTaskInvocations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionTaskInvocationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionTaskInvocationsResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves the individual task executions (one per target) for a particular task run as part of a maintenance window execution.",
        "operationId": "DescribeMaintenanceWindowExecutionTaskInvocations"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowExecutionTasks": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeMaintenanceWindowExecutionTasks"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionTasksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionTasksResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "For a given maintenance window execution, lists the tasks that were run.",
        "operationId": "DescribeMaintenanceWindowExecutionTasks"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowExecutions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeMaintenanceWindowExecutions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowExecutionsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Lists the executions of a maintenance window. This includes information about when the maintenance window was scheduled to be active, and information about tasks registered and run with the maintenance window.",
        "operationId": "DescribeMaintenanceWindowExecutions"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowSchedule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeMaintenanceWindowSchedule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowScheduleResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          }
        },
        "description": "Retrieves information about upcoming executions of a maintenance window.",
        "operationId": "DescribeMaintenanceWindowSchedule"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowTargets": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeMaintenanceWindowTargets"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowTargetsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowTargetsResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Lists the targets registered with the maintenance window.",
        "operationId": "DescribeMaintenanceWindowTargets"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowTasks": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeMaintenanceWindowTasks"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowTasksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowTasksResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Lists the tasks in a maintenance window.",
        "operationId": "DescribeMaintenanceWindowTasks"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindows": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeMaintenanceWindows"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves the maintenance windows in an AWS account.",
        "operationId": "DescribeMaintenanceWindows"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowsForTarget": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeMaintenanceWindowsForTarget"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowsForTargetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMaintenanceWindowsForTargetResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves information about the maintenance window targets or tasks that an instance is associated with.",
        "operationId": "DescribeMaintenanceWindowsForTarget"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeOpsItems": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeOpsItems"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeOpsItemsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeOpsItemsResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Query a set of OpsItems. You must have permission in AWS Identity and Access Management (IAM) to query a list of OpsItems. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html\">Getting started with OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html\">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. </p>",
        "operationId": "DescribeOpsItems"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeParameters": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeParameters"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeParametersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeParametersResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "482": {
            "description": "InvalidFilterOption",
            "schema": {
              "$ref": "#/definitions/InvalidFilterOption"
            }
          },
          "483": {
            "description": "InvalidFilterValue",
            "schema": {
              "$ref": "#/definitions/InvalidFilterValue"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "<p>Get information about a parameter.</p> <note> <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code> in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of <code>MaxResults</code>. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a <code>NextToken</code>. You can specify the <code>NextToken</code> in a subsequent call to get the next set of results.</p> </note>",
        "operationId": "DescribeParameters"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribePatchBaselines": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribePatchBaselines"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePatchBaselinesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePatchBaselinesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Lists the patch baselines in your AWS account.",
        "operationId": "DescribePatchBaselines"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribePatchGroupState": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.DescribePatchGroupState"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePatchGroupStateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePatchGroupStateResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Returns high-level aggregated patch compliance state for a patch group.",
        "operationId": "DescribePatchGroupState"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribePatchGroups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribePatchGroups"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePatchGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePatchGroupsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Lists all patch groups that have been registered with patch baselines.",
        "operationId": "DescribePatchGroups"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribePatchProperties": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribePatchProperties"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePatchPropertiesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePatchPropertiesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Lists the properties of available patches organized by product, product family, classification, severity, and other properties of available patches. You can use the reported properties in the filters you specify in requests for actions such as <a>CreatePatchBaseline</a>, <a>UpdatePatchBaseline</a>, <a>DescribeAvailablePatches</a>, and <a>DescribePatchBaselines</a>.</p> <p>The following section lists the properties that can be used in filters for each major operating system type:</p> <dl> <dt>AMAZON_LINUX</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>AMAZON_LINUX_2</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>CENTOS</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>DEBIAN</dt> <dd> <p>Valid properties: PRODUCT, PRIORITY</p> </dd> <dt>MACOS</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION</p> </dd> <dt>ORACLE_LINUX</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>REDHAT_ENTERPRISE_LINUX</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>SUSE</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>UBUNTU</dt> <dd> <p>Valid properties: PRODUCT, PRIORITY</p> </dd> <dt>WINDOWS</dt> <dd> <p>Valid properties: PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, MSRC_SEVERITY</p> </dd> </dl>",
        "operationId": "DescribePatchProperties"
      }
    },
    "/#X-Amz-Target=AmazonSSM.DescribeSessions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.DescribeSessions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeSessionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeSessionsResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Retrieves a list of all active sessions (both connected and disconnected) or terminated sessions from the past 30 days.",
        "operationId": "DescribeSessions"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetAutomationExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetAutomationExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAutomationExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAutomationExecutionResult"
            }
          },
          "480": {
            "description": "AutomationExecutionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionNotFoundException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Get detailed information about a particular Automation execution.",
        "operationId": "GetAutomationExecution"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetCalendarState": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetCalendarState"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCalendarStateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCalendarStateResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentType",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentType"
            }
          },
          "483": {
            "description": "UnsupportedCalendarException",
            "schema": {
              "$ref": "#/definitions/UnsupportedCalendarException"
            }
          }
        },
        "description": "<p>Gets the state of the AWS Systems Manager Change Calendar at an optional, specified time. If you specify a time, <code>GetCalendarState</code> returns the state of the calendar at a specific time, and returns the next time that the Change Calendar state will transition. If you do not specify a time, <code>GetCalendarState</code> assumes the current time. Change Calendar entries have two possible states: <code>OPEN</code> or <code>CLOSED</code>.</p> <p>If you specify more than one calendar in a request, the command returns the status of <code>OPEN</code> only if all calendars in the request are open. If one or more calendars in the request are closed, the status returned is <code>CLOSED</code>.</p> <p>For more information about Systems Manager Change Calendar, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar.html\">AWS Systems Manager Change Calendar</a> in the <i>AWS Systems Manager User Guide</i>.</p>",
        "operationId": "GetCalendarState"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetCommandInvocation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetCommandInvocation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCommandInvocationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCommandInvocationResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidCommandId",
            "schema": {
              "$ref": "#/definitions/InvalidCommandId"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "InvalidPluginName",
            "schema": {
              "$ref": "#/definitions/InvalidPluginName"
            }
          },
          "484": {
            "description": "InvocationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/InvocationDoesNotExist"
            }
          }
        },
        "description": "Returns detailed information about command execution for an invocation or plugin. ",
        "operationId": "GetCommandInvocation"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetConnectionStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetConnectionStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetConnectionStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetConnectionStatusResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves the Session Manager connection status for an instance to determine whether it is running and ready to receive Session Manager connections.",
        "operationId": "GetConnectionStatus"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetDefaultPatchBaseline": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetDefaultPatchBaseline"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDefaultPatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDefaultPatchBaselineResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Retrieves the default patch baseline. Note that Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.</p> <p>If you do not specify an operating system value, the default patch baseline for Windows is returned.</p>",
        "operationId": "GetDefaultPatchBaseline"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetDeployablePatchSnapshotForInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetDeployablePatchSnapshotForInstance"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeployablePatchSnapshotForInstanceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeployablePatchSnapshotForInstanceResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "UnsupportedOperatingSystem",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperatingSystem"
            }
          },
          "482": {
            "description": "UnsupportedFeatureRequiredException",
            "schema": {
              "$ref": "#/definitions/UnsupportedFeatureRequiredException"
            }
          }
        },
        "description": "Retrieves the current snapshot for the patch baseline the instance uses. This API is primarily used by the AWS-RunPatchBaseline Systems Manager document. ",
        "operationId": "GetDeployablePatchSnapshotForInstance"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetDocument": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetDocument"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDocumentResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          }
        },
        "description": "Gets the contents of the specified Systems Manager document.",
        "operationId": "GetDocument"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetInventory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.GetInventory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetInventoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetInventoryResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "482": {
            "description": "InvalidInventoryGroupException",
            "schema": {
              "$ref": "#/definitions/InvalidInventoryGroupException"
            }
          },
          "483": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "484": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "485": {
            "description": "InvalidAggregatorException",
            "schema": {
              "$ref": "#/definitions/InvalidAggregatorException"
            }
          },
          "486": {
            "description": "InvalidResultAttributeException",
            "schema": {
              "$ref": "#/definitions/InvalidResultAttributeException"
            }
          }
        },
        "description": "Query inventory information.",
        "operationId": "GetInventory"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetInventorySchema": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.GetInventorySchema"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetInventorySchemaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetInventorySchemaResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Return a list of inventory type names for the account, or return a list of attribute names for a specific Inventory item type.",
        "operationId": "GetInventorySchema"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetMaintenanceWindow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves a maintenance window.",
        "operationId": "GetMaintenanceWindow"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindowExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetMaintenanceWindowExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves details about a specific a maintenance window execution.",
        "operationId": "GetMaintenanceWindowExecution"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindowExecutionTask": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetMaintenanceWindowExecutionTask"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionTaskResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves the details about a specific task run as part of a maintenance window execution.",
        "operationId": "GetMaintenanceWindowExecutionTask"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindowExecutionTaskInvocation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetMaintenanceWindowExecutionTaskInvocation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionTaskInvocationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowExecutionTaskInvocationResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves information about a specific task running on a specific target.",
        "operationId": "GetMaintenanceWindowExecutionTaskInvocation"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindowTask": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetMaintenanceWindowTask"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMaintenanceWindowTaskResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Lists the tasks in a maintenance window.",
        "operationId": "GetMaintenanceWindowTask"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetOpsItem": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetOpsItem"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetOpsItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetOpsItemResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "OpsItemNotFoundException",
            "schema": {
              "$ref": "#/definitions/OpsItemNotFoundException"
            }
          }
        },
        "description": "<p>Get information about an OpsItem by using the ID. You must have permission in AWS Identity and Access Management (IAM) to view information about an OpsItem. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html\">Getting started with OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html\">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. </p>",
        "operationId": "GetOpsItem"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetOpsMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetOpsMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetOpsMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetOpsMetadataResult"
            }
          },
          "480": {
            "description": "OpsMetadataNotFoundException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataNotFoundException"
            }
          },
          "481": {
            "description": "OpsMetadataInvalidArgumentException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataInvalidArgumentException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "View operational metadata related to an application in Application Manager.",
        "operationId": "GetOpsMetadata"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetOpsSummary": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.GetOpsSummary"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetOpsSummaryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetOpsSummaryResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ResourceDataSyncNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncNotFoundException"
            }
          },
          "482": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "483": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "484": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "485": {
            "description": "InvalidAggregatorException",
            "schema": {
              "$ref": "#/definitions/InvalidAggregatorException"
            }
          }
        },
        "description": "View a summary of OpsItems based on specified filters and aggregators.",
        "operationId": "GetOpsSummary"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetParameter": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetParameter"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetParameterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetParameterResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          },
          "482": {
            "description": "ParameterNotFound",
            "schema": {
              "$ref": "#/definitions/ParameterNotFound"
            }
          },
          "483": {
            "description": "ParameterVersionNotFound",
            "schema": {
              "$ref": "#/definitions/ParameterVersionNotFound"
            }
          }
        },
        "description": "Get information about a parameter by using the parameter name. Don't confuse this API action with the <a>GetParameters</a> API action.",
        "operationId": "GetParameter"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetParameterHistory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.GetParameterHistory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetParameterHistoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetParameterHistoryResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ParameterNotFound",
            "schema": {
              "$ref": "#/definitions/ParameterNotFound"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "483": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          }
        },
        "description": "Retrieves the history of all changes to a parameter.",
        "operationId": "GetParameterHistory"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetParameters": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetParameters"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetParametersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetParametersResult"
            }
          },
          "480": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Get details of a parameter. Don't confuse this API action with the <a>GetParameter</a> API action.",
        "operationId": "GetParameters"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetParametersByPath": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.GetParametersByPath"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetParametersByPathRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetParametersByPathResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "482": {
            "description": "InvalidFilterOption",
            "schema": {
              "$ref": "#/definitions/InvalidFilterOption"
            }
          },
          "483": {
            "description": "InvalidFilterValue",
            "schema": {
              "$ref": "#/definitions/InvalidFilterValue"
            }
          },
          "484": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          },
          "485": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "<p>Retrieve information about one or more parameters in a specific hierarchy. </p> <note> <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code> in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of <code>MaxResults</code>. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a <code>NextToken</code>. You can specify the <code>NextToken</code> in a subsequent call to get the next set of results.</p> </note>",
        "operationId": "GetParametersByPath"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetPatchBaseline": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetPatchBaseline"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPatchBaselineResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves information about a patch baseline.",
        "operationId": "GetPatchBaseline"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetPatchBaselineForPatchGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetPatchBaselineForPatchGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPatchBaselineForPatchGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPatchBaselineForPatchGroupResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Retrieves the patch baseline that should be used for the specified patch group.",
        "operationId": "GetPatchBaselineForPatchGroup"
      }
    },
    "/#X-Amz-Target=AmazonSSM.GetServiceSetting": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.GetServiceSetting"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetServiceSettingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetServiceSettingResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ServiceSettingNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceSettingNotFound"
            }
          }
        },
        "description": "<p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of \"false\". This means the user can't use this feature unless they change the setting to \"true\" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>UpdateServiceSetting</a> API action to change the default setting. Or use the <a>ResetServiceSetting</a> to change the value back to the original value defined by the AWS service team.</p> <p>Query the current service setting for the account. </p>",
        "operationId": "GetServiceSetting"
      }
    },
    "/#X-Amz-Target=AmazonSSM.LabelParameterVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.LabelParameterVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LabelParameterVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LabelParameterVersionResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          },
          "482": {
            "description": "ParameterNotFound",
            "schema": {
              "$ref": "#/definitions/ParameterNotFound"
            }
          },
          "483": {
            "description": "ParameterVersionNotFound",
            "schema": {
              "$ref": "#/definitions/ParameterVersionNotFound"
            }
          },
          "484": {
            "description": "ParameterVersionLabelLimitExceeded",
            "schema": {
              "$ref": "#/definitions/ParameterVersionLabelLimitExceeded"
            }
          }
        },
        "description": "<p>A parameter label is a user-defined alias to help you manage different versions of a parameter. When you modify a parameter, Systems Manager automatically saves a new version and increments the version number by one. A label can help you remember the purpose of a parameter when there are multiple versions. </p> <p>Parameter labels have the following requirements and restrictions.</p> <ul> <li> <p>A version of a parameter can have a maximum of 10 labels.</p> </li> <li> <p>You can't attach the same label to different versions of the same parameter. For example, if version 1 has the label Production, then you can't attach Production to version 2.</p> </li> <li> <p>You can move a label from one version of a parameter to another.</p> </li> <li> <p>You can't create a label when you create a new parameter. You must attach a label to a specific version of a parameter.</p> </li> <li> <p>You can't delete a parameter label. If you no longer want to use a parameter label, then you must move it to a different version of a parameter.</p> </li> <li> <p>A label can have a maximum of 100 characters.</p> </li> <li> <p>Labels can contain letters (case sensitive), numbers, periods (.), hyphens (-), or underscores (_).</p> </li> <li> <p>Labels can't begin with a number, \"aws,\" or \"ssm\" (not case sensitive). If a label fails to meet these requirements, then the label is not associated with a parameter and the system displays it in the list of InvalidLabels.</p> </li> </ul>",
        "operationId": "LabelParameterVersion"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListAssociationVersions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListAssociationVersions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAssociationVersionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAssociationVersionsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          }
        },
        "description": "Retrieves all versions of an association for a specific association ID.",
        "operationId": "ListAssociationVersions"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListAssociations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListAssociations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAssociationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAssociationsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Returns all State Manager associations in the current AWS account and Region. You can limit the results to a specific State Manager association document or instance by specifying a filter.",
        "operationId": "ListAssociations"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListCommandInvocations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListCommandInvocations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCommandInvocationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCommandInvocationsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidCommandId",
            "schema": {
              "$ref": "#/definitions/InvalidCommandId"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user runs SendCommand against three instances, then a command invocation is created for each requested instance ID. ListCommandInvocations provide status about command execution.",
        "operationId": "ListCommandInvocations"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListCommands": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListCommands"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCommandsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCommandsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidCommandId",
            "schema": {
              "$ref": "#/definitions/InvalidCommandId"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Lists the commands requested by users of the AWS account.",
        "operationId": "ListCommands"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListComplianceItems": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListComplianceItems"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListComplianceItemsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListComplianceItemsResult"
            }
          },
          "480": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "For a specified resource ID, this API action returns a list of compliance statuses for different resource types. Currently, you can only specify one resource ID per call. List results depend on the criteria specified in the filter.",
        "operationId": "ListComplianceItems"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListComplianceSummaries": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListComplianceSummaries"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListComplianceSummariesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListComplianceSummariesResult"
            }
          },
          "480": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Returns a summary count of compliant and non-compliant resources for a compliance type. For example, this call can return State Manager associations, patches, or custom compliance types according to the filter criteria that you specify.",
        "operationId": "ListComplianceSummaries"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListDocumentMetadataHistory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.ListDocumentMetadataHistory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDocumentMetadataHistoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDocumentMetadataHistoryResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "483": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "Information about approval reviews for a version of an SSM document.",
        "operationId": "ListDocumentMetadataHistory"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListDocumentVersions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListDocumentVersions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDocumentVersionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDocumentVersionsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          }
        },
        "description": "List all versions for a document.",
        "operationId": "ListDocumentVersions"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListDocuments": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListDocuments"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDocumentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDocumentsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InvalidFilterKey",
            "schema": {
              "$ref": "#/definitions/InvalidFilterKey"
            }
          }
        },
        "description": "Returns all Systems Manager (SSM) documents in the current AWS account and Region. You can limit the results of this request by using a filter.",
        "operationId": "ListDocuments"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListInventoryEntries": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.ListInventoryEntries"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListInventoryEntriesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListInventoryEntriesResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "483": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "484": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "A list of inventory items returned by the request.",
        "operationId": "ListInventoryEntries"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListOpsItemEvents": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListOpsItemEvents"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOpsItemEventsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListOpsItemEventsResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "OpsItemNotFoundException",
            "schema": {
              "$ref": "#/definitions/OpsItemNotFoundException"
            }
          },
          "482": {
            "description": "OpsItemLimitExceededException",
            "schema": {
              "$ref": "#/definitions/OpsItemLimitExceededException"
            }
          },
          "483": {
            "description": "OpsItemInvalidParameterException",
            "schema": {
              "$ref": "#/definitions/OpsItemInvalidParameterException"
            }
          }
        },
        "description": "Returns a list of all OpsItem events in the current AWS account and Region. You can limit the results to events associated with specific OpsItems by specifying a filter.",
        "operationId": "ListOpsItemEvents"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListOpsMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListOpsMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOpsMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListOpsMetadataResult"
            }
          },
          "480": {
            "description": "OpsMetadataInvalidArgumentException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataInvalidArgumentException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Systems Manager calls this API action when displaying all Application Manager OpsMetadata objects or blobs.",
        "operationId": "ListOpsMetadata"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListResourceComplianceSummaries": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListResourceComplianceSummaries"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourceComplianceSummariesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourceComplianceSummariesResult"
            }
          },
          "480": {
            "description": "InvalidFilter",
            "schema": {
              "$ref": "#/definitions/InvalidFilter"
            }
          },
          "481": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Returns a resource-level summary count. The summary includes information about compliant and non-compliant statuses and detailed compliance-item severity counts, according to the filter criteria you specify.",
        "operationId": "ListResourceComplianceSummaries"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListResourceDataSync": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonSSM.ListResourceDataSync"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourceDataSyncRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourceDataSyncResult"
            }
          },
          "480": {
            "description": "ResourceDataSyncInvalidConfigurationException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncInvalidConfigurationException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "482": {
            "description": "InvalidNextToken",
            "schema": {
              "$ref": "#/definitions/InvalidNextToken"
            }
          }
        },
        "description": "<p>Lists your resource data sync configurations. Includes information about the last time a sync attempted to start, the last sync status, and the last time a sync successfully completed.</p> <p>The number of sync configurations might be too large to return using a single call to <code>ListResourceDataSync</code>. You can limit the number of sync configurations returned by using the <code>MaxResults</code> parameter. To determine whether there are more sync configurations to list, check the value of <code>NextToken</code> in the output. If there are more sync configurations to list, you can request them by specifying the <code>NextToken</code> returned in the call to the parameter of a subsequent call. </p>",
        "operationId": "ListResourceDataSync"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResult"
            }
          },
          "480": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Returns a list of the tags assigned to the specified resource.",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ModifyDocumentPermission": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.ModifyDocumentPermission"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModifyDocumentPermissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModifyDocumentPermissionResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidPermissionType",
            "schema": {
              "$ref": "#/definitions/InvalidPermissionType"
            }
          },
          "483": {
            "description": "DocumentPermissionLimit",
            "schema": {
              "$ref": "#/definitions/DocumentPermissionLimit"
            }
          },
          "484": {
            "description": "DocumentLimitExceeded",
            "schema": {
              "$ref": "#/definitions/DocumentLimitExceeded"
            }
          }
        },
        "description": "Shares a Systems Manager document publicly or privately. If you share a document privately, you must specify the AWS user account IDs for those people who can use the document. If you share a document publicly, you must specify <i>All</i> as the account ID.",
        "operationId": "ModifyDocumentPermission"
      }
    },
    "/#X-Amz-Target=AmazonSSM.PutComplianceItems": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.PutComplianceItems"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutComplianceItemsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutComplianceItemsResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidItemContentException",
            "schema": {
              "$ref": "#/definitions/InvalidItemContentException"
            }
          },
          "482": {
            "description": "TotalSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TotalSizeLimitExceededException"
            }
          },
          "483": {
            "description": "ItemSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ItemSizeLimitExceededException"
            }
          },
          "484": {
            "description": "ComplianceTypeCountLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ComplianceTypeCountLimitExceededException"
            }
          },
          "485": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "486": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          }
        },
        "description": "<p>Registers a compliance type and other compliance details on a designated resource. This action lets you register custom compliance details with a resource. This call overwrites existing compliance information on the resource, so you must provide a full list of compliance items each time that you send the request.</p> <p>ComplianceType can be one of the following:</p> <ul> <li> <p>ExecutionId: The execution ID when the patch, association, or custom compliance item was applied.</p> </li> <li> <p>ExecutionType: Specify patch, association, or Custom:<code>string</code>.</p> </li> <li> <p>ExecutionTime. The time the patch, association, or custom compliance item was applied to the instance.</p> </li> <li> <p>Id: The patch, association, or custom compliance ID.</p> </li> <li> <p>Title: A title.</p> </li> <li> <p>Status: The status of the compliance item. For example, <code>approved</code> for patches, or <code>Failed</code> for associations.</p> </li> <li> <p>Severity: A patch severity. For example, <code>critical</code>.</p> </li> <li> <p>DocumentName: A SSM document name. For example, AWS-RunPatchBaseline.</p> </li> <li> <p>DocumentVersion: An SSM document version number. For example, 4.</p> </li> <li> <p>Classification: A patch classification. For example, <code>security updates</code>.</p> </li> <li> <p>PatchBaselineId: A patch baseline ID.</p> </li> <li> <p>PatchSeverity: A patch severity. For example, <code>Critical</code>.</p> </li> <li> <p>PatchState: A patch state. For example, <code>InstancesWithFailedPatches</code>.</p> </li> <li> <p>PatchGroup: The name of a patch group.</p> </li> <li> <p>InstalledTime: The time the association, patch, or custom compliance item was applied to the resource. Specify the time by using the following format: yyyy-MM-dd'T'HH:mm:ss'Z'</p> </li> </ul>",
        "operationId": "PutComplianceItems"
      }
    },
    "/#X-Amz-Target=AmazonSSM.PutInventory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.PutInventory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutInventoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutInventoryResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidTypeNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTypeNameException"
            }
          },
          "483": {
            "description": "InvalidItemContentException",
            "schema": {
              "$ref": "#/definitions/InvalidItemContentException"
            }
          },
          "484": {
            "description": "TotalSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TotalSizeLimitExceededException"
            }
          },
          "485": {
            "description": "ItemSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ItemSizeLimitExceededException"
            }
          },
          "486": {
            "description": "ItemContentMismatchException",
            "schema": {
              "$ref": "#/definitions/ItemContentMismatchException"
            }
          },
          "487": {
            "description": "CustomSchemaCountLimitExceededException",
            "schema": {
              "$ref": "#/definitions/CustomSchemaCountLimitExceededException"
            }
          },
          "488": {
            "description": "UnsupportedInventorySchemaVersionException",
            "schema": {
              "$ref": "#/definitions/UnsupportedInventorySchemaVersionException"
            }
          },
          "489": {
            "description": "UnsupportedInventoryItemContextException",
            "schema": {
              "$ref": "#/definitions/UnsupportedInventoryItemContextException"
            }
          },
          "490": {
            "description": "InvalidInventoryItemContextException",
            "schema": {
              "$ref": "#/definitions/InvalidInventoryItemContextException"
            }
          },
          "491": {
            "description": "SubTypeCountLimitExceededException",
            "schema": {
              "$ref": "#/definitions/SubTypeCountLimitExceededException"
            }
          }
        },
        "description": "Bulk update custom inventory items on one more instance. The request adds an inventory item, if it doesn't already exist, or updates an inventory item, if it does exist.",
        "operationId": "PutInventory"
      }
    },
    "/#X-Amz-Target=AmazonSSM.PutParameter": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.PutParameter"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutParameterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutParameterResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidKeyId",
            "schema": {
              "$ref": "#/definitions/InvalidKeyId"
            }
          },
          "482": {
            "description": "ParameterLimitExceeded",
            "schema": {
              "$ref": "#/definitions/ParameterLimitExceeded"
            }
          },
          "483": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          },
          "484": {
            "description": "ParameterAlreadyExists",
            "schema": {
              "$ref": "#/definitions/ParameterAlreadyExists"
            }
          },
          "485": {
            "description": "HierarchyLevelLimitExceededException",
            "schema": {
              "$ref": "#/definitions/HierarchyLevelLimitExceededException"
            }
          },
          "486": {
            "description": "HierarchyTypeMismatchException",
            "schema": {
              "$ref": "#/definitions/HierarchyTypeMismatchException"
            }
          },
          "487": {
            "description": "InvalidAllowedPatternException",
            "schema": {
              "$ref": "#/definitions/InvalidAllowedPatternException"
            }
          },
          "488": {
            "description": "ParameterMaxVersionLimitExceeded",
            "schema": {
              "$ref": "#/definitions/ParameterMaxVersionLimitExceeded"
            }
          },
          "489": {
            "description": "ParameterPatternMismatchException",
            "schema": {
              "$ref": "#/definitions/ParameterPatternMismatchException"
            }
          },
          "490": {
            "description": "UnsupportedParameterType",
            "schema": {
              "$ref": "#/definitions/UnsupportedParameterType"
            }
          },
          "491": {
            "description": "PoliciesLimitExceededException",
            "schema": {
              "$ref": "#/definitions/PoliciesLimitExceededException"
            }
          },
          "492": {
            "description": "InvalidPolicyTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidPolicyTypeException"
            }
          },
          "493": {
            "description": "InvalidPolicyAttributeException",
            "schema": {
              "$ref": "#/definitions/InvalidPolicyAttributeException"
            }
          },
          "494": {
            "description": "IncompatiblePolicyException",
            "schema": {
              "$ref": "#/definitions/IncompatiblePolicyException"
            }
          }
        },
        "description": "Add a parameter to the system.",
        "operationId": "PutParameter"
      }
    },
    "/#X-Amz-Target=AmazonSSM.RegisterDefaultPatchBaseline": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.RegisterDefaultPatchBaseline"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterDefaultPatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterDefaultPatchBaselineResult"
            }
          },
          "480": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Defines the default patch baseline for the relevant operating system.</p> <p>To reset the AWS predefined patch baseline as the default, specify the full patch baseline ARN as the baseline ID value. For example, for CentOS, specify <code>arn:aws:ssm:us-east-2:733109147000:patchbaseline/pb-0574b43a65ea646ed</code> instead of <code>pb-0574b43a65ea646ed</code>.</p>",
        "operationId": "RegisterDefaultPatchBaseline"
      }
    },
    "/#X-Amz-Target=AmazonSSM.RegisterPatchBaselineForPatchGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.RegisterPatchBaselineForPatchGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterPatchBaselineForPatchGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterPatchBaselineForPatchGroupResult"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "483": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Registers a patch baseline for a patch group.",
        "operationId": "RegisterPatchBaselineForPatchGroup"
      }
    },
    "/#X-Amz-Target=AmazonSSM.RegisterTargetWithMaintenanceWindow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.RegisterTargetWithMaintenanceWindow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterTargetWithMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterTargetWithMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Registers a target with a maintenance window.",
        "operationId": "RegisterTargetWithMaintenanceWindow"
      }
    },
    "/#X-Amz-Target=AmazonSSM.RegisterTaskWithMaintenanceWindow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.RegisterTaskWithMaintenanceWindow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterTaskWithMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterTaskWithMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "481": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "FeatureNotAvailableException",
            "schema": {
              "$ref": "#/definitions/FeatureNotAvailableException"
            }
          },
          "484": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Adds a new task to a maintenance window.",
        "operationId": "RegisterTaskWithMaintenanceWindow"
      }
    },
    "/#X-Amz-Target=AmazonSSM.RemoveTagsFromResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.RemoveTagsFromResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveTagsFromResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RemoveTagsFromResourceResult"
            }
          },
          "480": {
            "description": "InvalidResourceType",
            "schema": {
              "$ref": "#/definitions/InvalidResourceType"
            }
          },
          "481": {
            "description": "InvalidResourceId",
            "schema": {
              "$ref": "#/definitions/InvalidResourceId"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          }
        },
        "description": "Removes tag keys from the specified resource.",
        "operationId": "RemoveTagsFromResource"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ResetServiceSetting": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.ResetServiceSetting"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetServiceSettingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResetServiceSettingResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ServiceSettingNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceSettingNotFound"
            }
          },
          "482": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          }
        },
        "description": "<p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of \"false\". This means the user can't use this feature unless they change the setting to \"true\" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>GetServiceSetting</a> API action to view the current value. Use the <a>UpdateServiceSetting</a> API action to change the default setting. </p> <p>Reset the service setting for the account to the default value as provisioned by the AWS service team. </p>",
        "operationId": "ResetServiceSetting"
      }
    },
    "/#X-Amz-Target=AmazonSSM.ResumeSession": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.ResumeSession"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResumeSessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResumeSessionResponse"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Reconnects a session to an instance after it has been disconnected. Connections can be resumed for disconnected sessions, but not terminated sessions.</p> <note> <p>This command is primarily for use by client machines to automatically reconnect during intermittent network issues. It is not intended for any other use.</p> </note>",
        "operationId": "ResumeSession"
      }
    },
    "/#X-Amz-Target=AmazonSSM.SendAutomationSignal": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.SendAutomationSignal"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendAutomationSignalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SendAutomationSignalResult"
            }
          },
          "480": {
            "description": "AutomationExecutionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionNotFoundException"
            }
          },
          "481": {
            "description": "AutomationStepNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationStepNotFoundException"
            }
          },
          "482": {
            "description": "InvalidAutomationSignalException",
            "schema": {
              "$ref": "#/definitions/InvalidAutomationSignalException"
            }
          },
          "483": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Sends a signal to an Automation execution to change the current behavior or status of the execution. ",
        "operationId": "SendAutomationSignal"
      }
    },
    "/#X-Amz-Target=AmazonSSM.SendCommand": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.SendCommand"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendCommandRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SendCommandResult"
            }
          },
          "480": {
            "description": "DuplicateInstanceId",
            "schema": {
              "$ref": "#/definitions/DuplicateInstanceId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "482": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "483": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "484": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "485": {
            "description": "InvalidOutputFolder",
            "schema": {
              "$ref": "#/definitions/InvalidOutputFolder"
            }
          },
          "486": {
            "description": "InvalidParameters",
            "schema": {
              "$ref": "#/definitions/InvalidParameters"
            }
          },
          "487": {
            "description": "UnsupportedPlatformType",
            "schema": {
              "$ref": "#/definitions/UnsupportedPlatformType"
            }
          },
          "488": {
            "description": "MaxDocumentSizeExceeded",
            "schema": {
              "$ref": "#/definitions/MaxDocumentSizeExceeded"
            }
          },
          "489": {
            "description": "InvalidRole",
            "schema": {
              "$ref": "#/definitions/InvalidRole"
            }
          },
          "490": {
            "description": "InvalidNotificationConfig",
            "schema": {
              "$ref": "#/definitions/InvalidNotificationConfig"
            }
          }
        },
        "description": "Runs commands on one or more managed instances.",
        "operationId": "SendCommand"
      }
    },
    "/#X-Amz-Target=AmazonSSM.StartAssociationsOnce": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.StartAssociationsOnce"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartAssociationsOnceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartAssociationsOnceResult"
            }
          },
          "480": {
            "description": "InvalidAssociation",
            "schema": {
              "$ref": "#/definitions/InvalidAssociation"
            }
          },
          "481": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          }
        },
        "description": "Use this API action to run an association immediately and only one time. This action can be helpful when troubleshooting associations.",
        "operationId": "StartAssociationsOnce"
      }
    },
    "/#X-Amz-Target=AmazonSSM.StartAutomationExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.StartAutomationExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartAutomationExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartAutomationExecutionResult"
            }
          },
          "480": {
            "description": "AutomationDefinitionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationDefinitionNotFoundException"
            }
          },
          "481": {
            "description": "InvalidAutomationExecutionParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidAutomationExecutionParametersException"
            }
          },
          "482": {
            "description": "AutomationExecutionLimitExceededException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionLimitExceededException"
            }
          },
          "483": {
            "description": "AutomationDefinitionVersionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationDefinitionVersionNotFoundException"
            }
          },
          "484": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "485": {
            "description": "InvalidTarget",
            "schema": {
              "$ref": "#/definitions/InvalidTarget"
            }
          },
          "486": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Initiates execution of an Automation document.",
        "operationId": "StartAutomationExecution"
      }
    },
    "/#X-Amz-Target=AmazonSSM.StartChangeRequestExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.StartChangeRequestExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartChangeRequestExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartChangeRequestExecutionResult"
            }
          },
          "480": {
            "description": "AutomationDefinitionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationDefinitionNotFoundException"
            }
          },
          "481": {
            "description": "InvalidAutomationExecutionParametersException",
            "schema": {
              "$ref": "#/definitions/InvalidAutomationExecutionParametersException"
            }
          },
          "482": {
            "description": "AutomationExecutionLimitExceededException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionLimitExceededException"
            }
          },
          "483": {
            "description": "AutomationDefinitionVersionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationDefinitionVersionNotFoundException"
            }
          },
          "484": {
            "description": "IdempotentParameterMismatch",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatch"
            }
          },
          "485": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "486": {
            "description": "AutomationDefinitionNotApprovedException",
            "schema": {
              "$ref": "#/definitions/AutomationDefinitionNotApprovedException"
            }
          }
        },
        "description": "Creates a change request for Change Manager. The runbooks (Automation documents) specified in the change request run only after all required approvals for the change request have been received.",
        "operationId": "StartChangeRequestExecution"
      }
    },
    "/#X-Amz-Target=AmazonSSM.StartSession": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.StartSession"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartSessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartSessionResponse"
            }
          },
          "480": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "481": {
            "description": "TargetNotConnected",
            "schema": {
              "$ref": "#/definitions/TargetNotConnected"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Initiates a connection to a target (for example, an instance) for a Session Manager session. Returns a URL and token that can be used to open a WebSocket connection for sending input and receiving outputs.</p> <note> <p>AWS CLI usage: <code>start-session</code> is an interactive command that requires the Session Manager plugin to be installed on the client machine making the call. For information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html\">Install the Session Manager plugin for the AWS CLI</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>AWS Tools for PowerShell usage: Start-SSMSession is not currently supported by AWS Tools for PowerShell on Windows local machines.</p> </note>",
        "operationId": "StartSession"
      }
    },
    "/#X-Amz-Target=AmazonSSM.StopAutomationExecution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.StopAutomationExecution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopAutomationExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopAutomationExecutionResult"
            }
          },
          "480": {
            "description": "AutomationExecutionNotFoundException",
            "schema": {
              "$ref": "#/definitions/AutomationExecutionNotFoundException"
            }
          },
          "481": {
            "description": "InvalidAutomationStatusUpdateException",
            "schema": {
              "$ref": "#/definitions/InvalidAutomationStatusUpdateException"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Stop an Automation that is currently running.",
        "operationId": "StopAutomationExecution"
      }
    },
    "/#X-Amz-Target=AmazonSSM.TerminateSession": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.TerminateSession"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TerminateSessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TerminateSessionResponse"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Permanently ends a session and closes the data connection between the Session Manager client and SSM Agent on the instance. A terminated session cannot be resumed.",
        "operationId": "TerminateSession"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateAssociation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateAssociation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssociationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAssociationResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidSchedule",
            "schema": {
              "$ref": "#/definitions/InvalidSchedule"
            }
          },
          "482": {
            "description": "InvalidParameters",
            "schema": {
              "$ref": "#/definitions/InvalidParameters"
            }
          },
          "483": {
            "description": "InvalidOutputLocation",
            "schema": {
              "$ref": "#/definitions/InvalidOutputLocation"
            }
          },
          "484": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "485": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "486": {
            "description": "InvalidUpdate",
            "schema": {
              "$ref": "#/definitions/InvalidUpdate"
            }
          },
          "487": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          },
          "488": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "489": {
            "description": "InvalidTarget",
            "schema": {
              "$ref": "#/definitions/InvalidTarget"
            }
          },
          "490": {
            "description": "InvalidAssociationVersion",
            "schema": {
              "$ref": "#/definitions/InvalidAssociationVersion"
            }
          },
          "491": {
            "description": "AssociationVersionLimitExceeded",
            "schema": {
              "$ref": "#/definitions/AssociationVersionLimitExceeded"
            }
          }
        },
        "description": "<p>Updates an association. You can update the association name and version, the document version, schedule, parameters, and Amazon S3 output. </p> <p>In order to call this API action, your IAM user account, group, or role must be configured with permission to call the <a>DescribeAssociation</a> API action. If you don't have permission to call DescribeAssociation, then you receive the following error: <code>An error occurred (AccessDeniedException) when calling the UpdateAssociation operation: User: &lt;user_arn&gt; is not authorized to perform: ssm:DescribeAssociation on resource: &lt;resource_arn&gt;</code> </p> <important> <p>When you update an association, the association immediately runs against the specified targets.</p> </important>",
        "operationId": "UpdateAssociation"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateAssociationStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateAssociationStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssociationStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateAssociationStatusResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "482": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "483": {
            "description": "AssociationDoesNotExist",
            "schema": {
              "$ref": "#/definitions/AssociationDoesNotExist"
            }
          },
          "484": {
            "description": "StatusUnchanged",
            "schema": {
              "$ref": "#/definitions/StatusUnchanged"
            }
          },
          "485": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          }
        },
        "description": "Updates the status of the Systems Manager document associated with the specified instance.",
        "operationId": "UpdateAssociationStatus"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateDocument": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateDocument"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDocumentResult"
            }
          },
          "480": {
            "description": "MaxDocumentSizeExceeded",
            "schema": {
              "$ref": "#/definitions/MaxDocumentSizeExceeded"
            }
          },
          "481": {
            "description": "DocumentVersionLimitExceeded",
            "schema": {
              "$ref": "#/definitions/DocumentVersionLimitExceeded"
            }
          },
          "482": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "483": {
            "description": "DuplicateDocumentContent",
            "schema": {
              "$ref": "#/definitions/DuplicateDocumentContent"
            }
          },
          "484": {
            "description": "DuplicateDocumentVersionName",
            "schema": {
              "$ref": "#/definitions/DuplicateDocumentVersionName"
            }
          },
          "485": {
            "description": "InvalidDocumentContent",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentContent"
            }
          },
          "486": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "487": {
            "description": "InvalidDocumentSchemaVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentSchemaVersion"
            }
          },
          "488": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "489": {
            "description": "InvalidDocumentOperation",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentOperation"
            }
          }
        },
        "description": "Updates one or more values for an SSM document.",
        "operationId": "UpdateDocument"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateDocumentDefaultVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateDocumentDefaultVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocumentDefaultVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDocumentDefaultVersionResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          },
          "483": {
            "description": "InvalidDocumentSchemaVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentSchemaVersion"
            }
          }
        },
        "description": "Set the default version of a document. ",
        "operationId": "UpdateDocumentDefaultVersion"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateDocumentMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateDocumentMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocumentMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDocumentMetadataResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "InvalidDocument",
            "schema": {
              "$ref": "#/definitions/InvalidDocument"
            }
          },
          "482": {
            "description": "InvalidDocumentOperation",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentOperation"
            }
          },
          "483": {
            "description": "InvalidDocumentVersion",
            "schema": {
              "$ref": "#/definitions/InvalidDocumentVersion"
            }
          }
        },
        "description": "Updates information related to approval reviews for a specific version of a document.",
        "operationId": "UpdateDocumentMetadata"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateMaintenanceWindow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateMaintenanceWindow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Updates an existing maintenance window. Only specified parameters are modified.</p> <note> <p>The value you specify for <code>Duration</code> determines the specific end time for the maintenance window based on the time it begins. No maintenance window tasks are permitted to start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>. For example, if the maintenance window starts at 3 PM, the duration is three hours, and the value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start after 5 PM.</p> </note>",
        "operationId": "UpdateMaintenanceWindow"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateMaintenanceWindowTarget": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateMaintenanceWindowTarget"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowTargetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowTargetResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Modifies the target of an existing maintenance window. You can change the following:</p> <ul> <li> <p>Name</p> </li> <li> <p>Description</p> </li> <li> <p>Owner</p> </li> <li> <p>IDs for an ID target</p> </li> <li> <p>Tags for a Tag target</p> </li> <li> <p>From any supported tag type to another. The three supported tag types are ID target, Tag target, and resource group. For more information, see <a>Target</a>.</p> </li> </ul> <note> <p>If a parameter is null, then the corresponding field is not modified.</p> </note>",
        "operationId": "UpdateMaintenanceWindowTarget"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateMaintenanceWindowTask": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateMaintenanceWindowTask"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMaintenanceWindowTaskResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Modifies a task assigned to a maintenance window. You can't change the task type, but you can change the following values:</p> <ul> <li> <p>TaskARN. For example, you can change a RUN_COMMAND task from AWS-RunPowerShellScript to AWS-RunShellScript.</p> </li> <li> <p>ServiceRoleArn</p> </li> <li> <p>TaskInvocationParameters</p> </li> <li> <p>Priority</p> </li> <li> <p>MaxConcurrency</p> </li> <li> <p>MaxErrors</p> </li> </ul> <p>If the value for a parameter in <code>UpdateMaintenanceWindowTask</code> is null, then the corresponding field is not modified. If you set <code>Replace</code> to true, then all fields required by the <a>RegisterTaskWithMaintenanceWindow</a> action are required for this request. Optional fields that aren't specified are set to null.</p> <important> <p>When you update a maintenance window task that has options specified in <code>TaskInvocationParameters</code>, you must provide again all the <code>TaskInvocationParameters</code> values that you want to retain. The values you do not specify again are removed. For example, suppose that when you registered a Run Command task, you specified <code>TaskInvocationParameters</code> values for <code>Comment</code>, <code>NotificationConfig</code>, and <code>OutputS3BucketName</code>. If you update the maintenance window task and specify only a different <code>OutputS3BucketName</code> value, the values for <code>Comment</code> and <code>NotificationConfig</code> are removed.</p> </important>",
        "operationId": "UpdateMaintenanceWindowTask"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateManagedInstanceRole": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateManagedInstanceRole"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateManagedInstanceRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateManagedInstanceRoleResult"
            }
          },
          "480": {
            "description": "InvalidInstanceId",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceId"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Changes the Amazon Identity and Access Management (IAM) role that is assigned to the on-premises instance or virtual machines (VM). IAM roles are first assigned to these hybrid instances during the activation process. For more information, see <a>CreateActivation</a>.",
        "operationId": "UpdateManagedInstanceRole"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateOpsItem": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateOpsItem"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOpsItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateOpsItemResponse"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "OpsItemNotFoundException",
            "schema": {
              "$ref": "#/definitions/OpsItemNotFoundException"
            }
          },
          "482": {
            "description": "OpsItemAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/OpsItemAlreadyExistsException"
            }
          },
          "483": {
            "description": "OpsItemLimitExceededException",
            "schema": {
              "$ref": "#/definitions/OpsItemLimitExceededException"
            }
          },
          "484": {
            "description": "OpsItemInvalidParameterException",
            "schema": {
              "$ref": "#/definitions/OpsItemInvalidParameterException"
            }
          }
        },
        "description": "<p>Edit or change an OpsItem. You must have permission in AWS Identity and Access Management (IAM) to update an OpsItem. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html\">Getting started with OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html\">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. </p>",
        "operationId": "UpdateOpsItem"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateOpsMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateOpsMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOpsMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateOpsMetadataResult"
            }
          },
          "480": {
            "description": "OpsMetadataNotFoundException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataNotFoundException"
            }
          },
          "481": {
            "description": "OpsMetadataInvalidArgumentException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataInvalidArgumentException"
            }
          },
          "482": {
            "description": "OpsMetadataKeyLimitExceededException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataKeyLimitExceededException"
            }
          },
          "483": {
            "description": "OpsMetadataTooManyUpdatesException",
            "schema": {
              "$ref": "#/definitions/OpsMetadataTooManyUpdatesException"
            }
          },
          "484": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "Systems Manager calls this API action when you edit OpsMetadata in Application Manager.",
        "operationId": "UpdateOpsMetadata"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdatePatchBaseline": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdatePatchBaseline"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePatchBaselineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePatchBaselineResult"
            }
          },
          "480": {
            "description": "DoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DoesNotExistException"
            }
          },
          "481": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Modifies an existing patch baseline. Fields not specified in the request are left unchanged.</p> <note> <p>For information about valid key and value pairs in <code>PatchFilters</code> for each supported operating system type, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html\">PatchFilter</a>.</p> </note>",
        "operationId": "UpdatePatchBaseline"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateResourceDataSync": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateResourceDataSync"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateResourceDataSyncRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateResourceDataSyncResult"
            }
          },
          "480": {
            "description": "ResourceDataSyncNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncNotFoundException"
            }
          },
          "481": {
            "description": "ResourceDataSyncInvalidConfigurationException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncInvalidConfigurationException"
            }
          },
          "482": {
            "description": "ResourceDataSyncConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceDataSyncConflictException"
            }
          },
          "483": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "description": "<p>Update a resource data sync. After you create a resource data sync for a Region, you can't change the account options for that sync. For example, if you create a sync in the us-east-2 (Ohio) Region and you choose the Include only the current account option, you can't edit that sync later and choose the Include all accounts from my AWS Organizations configuration option. Instead, you must delete the first resource data sync, and create a new one.</p> <note> <p>This API action only supports a resource data sync that was created with a SyncFromSource <code>SyncType</code>.</p> </note>",
        "operationId": "UpdateResourceDataSync"
      }
    },
    "/#X-Amz-Target=AmazonSSM.UpdateServiceSetting": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonSSM.UpdateServiceSetting"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceSettingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateServiceSettingResult"
            }
          },
          "480": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "481": {
            "description": "ServiceSettingNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceSettingNotFound"
            }
          },
          "482": {
            "description": "TooManyUpdates",
            "schema": {
              "$ref": "#/definitions/TooManyUpdates"
            }
          }
        },
        "description": "<p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of \"false\". This means the user can't use this feature unless they change the setting to \"true\" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>GetServiceSetting</a> API action to view the current value. Or, use the <a>ResetServiceSetting</a> to change the value back to the original value defined by the AWS service team.</p> <p>Update the service setting for the account. </p>",
        "operationId": "UpdateServiceSetting"
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "string"
    },
    "AccountId": {
      "pattern": "\\(\\?i\\)all\\|[0-9]\\{12\\}",
      "type": "string"
    },
    "AccountIdList": {
      "items": {
        "$ref": "#/definitions/AccountId"
      },
      "maxItems": 20,
      "type": "array"
    },
    "AccountSharingInfo": {
      "description": "Information includes the AWS account ID where the current document is shared and the version shared with that account.",
      "properties": {
        "AccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The AWS account ID where the current document is shared."
            }
          ]
        },
        "SharedDocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/SharedDocumentVersion"
            },
            {
              "description": "The version of the current document shared with the account."
            }
          ]
        }
      },
      "type": "object"
    },
    "AccountSharingInfoList": {
      "description": "A list of of AWS accounts where the current document is shared and the version shared with each account.",
      "items": {
        "$ref": "#/definitions/AccountSharingInfo"
      },
      "type": "array"
    },
    "Accounts": {
      "items": {
        "$ref": "#/definitions/Account"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "Activation": {
      "description": "An activation registers one or more on-premises servers or virtual machines (VMs) with AWS so that you can configure those servers or VMs using Run Command. A server or VM that has been registered with AWS is called a managed instance.",
      "properties": {
        "ActivationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ActivationId"
            },
            {
              "description": "The ID created by Systems Manager when you submitted the activation."
            }
          ]
        },
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedDate"
            },
            {
              "description": "The date the activation was created."
            }
          ]
        },
        "DefaultInstanceName": {
          "allOf": [
            {
              "$ref": "#/definitions/DefaultInstanceName"
            },
            {
              "description": "A name for the managed instance when it is created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ActivationDescription"
            },
            {
              "description": "A user defined description of the activation."
            }
          ]
        },
        "ExpirationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/ExpirationDate"
            },
            {
              "description": "The date when this activation can no longer be used to register managed instances."
            }
          ]
        },
        "Expired": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Whether or not the activation is expired."
            }
          ]
        },
        "IamRole": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRole"
            },
            {
              "description": "The Amazon Identity and Access Management (IAM) role to assign to the managed instance."
            }
          ]
        },
        "RegistrationLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistrationLimit"
            },
            {
              "description": "The maximum number of managed instances that can be registered using this activation."
            }
          ]
        },
        "RegistrationsCount": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistrationsCount"
            },
            {
              "description": "The number of managed instances already registered with this activation."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Tags assigned to the activation."
            }
          ]
        }
      },
      "type": "object"
    },
    "ActivationCode": {
      "maxLength": 250,
      "minLength": 20,
      "type": "string"
    },
    "ActivationDescription": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "ActivationId": {
      "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
      "type": "string"
    },
    "ActivationList": {
      "items": {
        "$ref": "#/definitions/Activation"
      },
      "type": "array"
    },
    "AddTagsToResourceRequest": {
      "properties": {
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "<p>The resource ID you want to tag.</p> <p>Use the ID of the resource. Here are some examples:</p> <p>ManagedInstance: mi-012345abcde</p> <p>MaintenanceWindow: mw-012345abcde</p> <p>PatchBaseline: pb-012345abcde</p> <p>For the Document and Parameter values, use the name of the resource.</p> <note> <p>The ManagedInstance type for this API action is only for on-premises managed instances. You must specify the name of the managed instance in the following format: mi-ID_number. For example, mi-1a2b3c4d5e6f.</p> </note>"
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceTypeForTagging"
            },
            {
              "description": "<p>Specifies the type of resource you are tagging.</p> <note> <p>The ManagedInstance type for this API action is for on-premises managed instances. You must specify the name of the managed instance in the following format: mi-ID_number. For example, mi-1a2b3c4d5e6f.</p> </note>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p> One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. </p> <important> <p>Do not enter personally identifiable information in this field.</p> </important>"
            }
          ]
        }
      },
      "required": [
        "ResourceType",
        "ResourceId",
        "Tags"
      ],
      "title": "AddTagsToResourceRequest",
      "type": "object"
    },
    "AddTagsToResourceResult": {
      "properties": {},
      "type": "object"
    },
    "AgentErrorCode": {
      "maxLength": 10,
      "type": "string"
    },
    "AggregatorSchemaOnly": {
      "type": "boolean"
    },
    "AllowedPattern": {
      "maxLength": 1024,
      "minLength": 0,
      "type": "string"
    },
    "AlreadyExistsException": {},
    "ApplyOnlyAtCronInterval": {
      "type": "boolean"
    },
    "ApproveAfterDays": {
      "maximum": 100,
      "minimum": 0,
      "type": "integer"
    },
    "AssociatedInstances": {},
    "Association": {
      "description": "Describes an association of a Systems Manager document and an instance.",
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The ID created by the system when you create an association. An association is a binding between a document and a set of targets with a schedule."
            }
          ]
        },
        "AssociationName": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationName"
            },
            {
              "description": "The association name."
            }
          ]
        },
        "AssociationVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersion"
            },
            {
              "description": "The association version."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the document used in the association."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the instance."
            }
          ]
        },
        "LastExecutionDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date on which the association was last run."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        },
        "Overview": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationOverview"
            },
            {
              "description": "Information about the association."
            }
          ]
        },
        "ScheduleExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/ScheduleExpression"
            },
            {
              "description": "A cron expression that specifies a schedule when the association runs."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The instances targeted by the request to create an association. "
            }
          ]
        }
      },
      "type": "object"
    },
    "AssociationAlreadyExists": {},
    "AssociationComplianceSeverity": {
      "enum": [
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "UNSPECIFIED"
      ],
      "type": "string"
    },
    "AssociationDescription": {
      "description": "Describes the parameters for a document.",
      "properties": {
        "ApplyOnlyAtCronInterval": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplyOnlyAtCronInterval"
            },
            {
              "description": "By default, when you create a new associations, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions."
            }
          ]
        },
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID."
            }
          ]
        },
        "AssociationName": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationName"
            },
            {
              "description": "The association name."
            }
          ]
        },
        "AssociationVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersion"
            },
            {
              "description": "The association version."
            }
          ]
        },
        "AutomationTargetParameterName": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationTargetParameterName"
            },
            {
              "description": "Specify the target for the association. This target is required for associations that use an Automation document and target resources by using rate controls."
            }
          ]
        },
        "ComplianceSeverity": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationComplianceSeverity"
            },
            {
              "description": "The severity level that is assigned to the association."
            }
          ]
        },
        "Date": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date when the association was made."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the instance."
            }
          ]
        },
        "LastExecutionDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date on which the association was last run."
            }
          ]
        },
        "LastSuccessfulExecutionDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The last date on which the association was successfully run."
            }
          ]
        },
        "LastUpdateAssociationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date when the association was last updated."
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "<p>The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.</p> <p>If a new instance starts and attempts to run an association while Systems Manager is running MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.</p>"
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "<p>The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received.</p> <p>Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.</p>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        },
        "OutputLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationOutputLocation"
            },
            {
              "description": "An S3 bucket where you want to store the output details of the request."
            }
          ]
        },
        "Overview": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationOverview"
            },
            {
              "description": "Information about the association."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "A description of the parameters for a document. "
            }
          ]
        },
        "ScheduleExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/ScheduleExpression"
            },
            {
              "description": "A cron expression that specifies a schedule when the association runs."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationStatus"
            },
            {
              "description": "The association status."
            }
          ]
        },
        "SyncCompliance": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationSyncCompliance"
            },
            {
              "description": "<p>The mode for generating association compliance. You can specify <code>AUTO</code> or <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is <code>COMPLIANT</code>. If the association execution doesn't run successfully, the association is <code>NON-COMPLIANT</code>.</p> <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter for the <a>PutComplianceItems</a> API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the <a>PutComplianceItems</a> API action.</p> <p>By default, all associations use <code>AUTO</code> mode.</p>"
            }
          ]
        },
        "TargetLocations": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLocations"
            },
            {
              "description": "The combination of AWS Regions and AWS accounts where you want to run the association."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The instances targeted by the request. "
            }
          ]
        }
      },
      "type": "object"
    },
    "AssociationDescriptionList": {
      "items": {
        "$ref": "#/definitions/AssociationDescription"
      },
      "type": "array"
    },
    "AssociationDoesNotExist": {},
    "AssociationExecution": {
      "description": "Includes information about the specified association.",
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID."
            }
          ]
        },
        "AssociationVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersion"
            },
            {
              "description": "The association version."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the execution started."
            }
          ]
        },
        "DetailedStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "Detailed status information about the execution."
            }
          ]
        },
        "ExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionId"
            },
            {
              "description": "The execution ID for the association."
            }
          ]
        },
        "LastExecutionDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date of the last execution."
            }
          ]
        },
        "ResourceCountByStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceCountByStatus"
            },
            {
              "description": "An aggregate status of the resources in the execution based on the status type."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "The status of the association execution."
            }
          ]
        }
      },
      "type": "object"
    },
    "AssociationExecutionDoesNotExist": {},
    "AssociationExecutionFilter": {
      "description": "Filters used in the request.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionFilterKey"
            },
            {
              "description": "The key value used in the request."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationFilterOperatorType"
            },
            {
              "description": "The filter type specified in the request."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionFilterValue"
            },
            {
              "description": "The value specified for the key."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Value",
        "Type"
      ],
      "type": "object"
    },
    "AssociationExecutionFilterKey": {
      "enum": [
        "ExecutionId",
        "Status",
        "CreatedTime"
      ],
      "type": "string"
    },
    "AssociationExecutionFilterList": {
      "items": {
        "$ref": "#/definitions/AssociationExecutionFilter"
      },
      "minItems": 1,
      "type": "array"
    },
    "AssociationExecutionFilterValue": {
      "minLength": 1,
      "type": "string"
    },
    "AssociationExecutionId": {
      "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
      "type": "string"
    },
    "AssociationExecutionTarget": {
      "description": "Includes information about the specified association execution.",
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID."
            }
          ]
        },
        "AssociationVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersion"
            },
            {
              "description": "The association version."
            }
          ]
        },
        "DetailedStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "Detailed information about the execution status."
            }
          ]
        },
        "ExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionId"
            },
            {
              "description": "The execution ID."
            }
          ]
        },
        "LastExecutionDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date of the last execution."
            }
          ]
        },
        "OutputSource": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputSource"
            },
            {
              "description": "The location where the association details are saved."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationResourceId"
            },
            {
              "description": "The resource ID, for example, the instance ID where the association ran."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationResourceType"
            },
            {
              "description": "The resource type, for example, instance."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "The association execution status."
            }
          ]
        }
      },
      "type": "object"
    },
    "AssociationExecutionTargetsFilter": {
      "description": "Filters for the association execution.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionTargetsFilterKey"
            },
            {
              "description": "The key value used in the request."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionTargetsFilterValue"
            },
            {
              "description": "The value specified for the key."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "AssociationExecutionTargetsFilterKey": {
      "enum": [
        "Status",
        "ResourceId",
        "ResourceType"
      ],
      "type": "string"
    },
    "AssociationExecutionTargetsFilterList": {
      "items": {
        "$ref": "#/definitions/AssociationExecutionTargetsFilter"
      },
      "minItems": 1,
      "type": "array"
    },
    "AssociationExecutionTargetsFilterValue": {
      "minLength": 1,
      "type": "string"
    },
    "AssociationExecutionTargetsList": {
      "items": {
        "$ref": "#/definitions/AssociationExecutionTarget"
      },
      "type": "array"
    },
    "AssociationExecutionsList": {
      "items": {
        "$ref": "#/definitions/AssociationExecution"
      },
      "type": "array"
    },
    "AssociationFilter": {
      "description": "Describes a filter.",
      "properties": {
        "key": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationFilterKey"
            },
            {
              "description": "<p>The name of the filter.</p> <note> <p> <code>InstanceId</code> has been deprecated.</p> </note>"
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationFilterValue"
            },
            {
              "description": "The filter value."
            }
          ]
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "AssociationFilterKey": {
      "enum": [
        "InstanceId",
        "Name",
        "AssociationId",
        "AssociationStatusName",
        "LastExecutedBefore",
        "LastExecutedAfter",
        "AssociationName",
        "ResourceGroupName"
      ],
      "type": "string"
    },
    "AssociationFilterList": {
      "items": {
        "$ref": "#/definitions/AssociationFilter"
      },
      "minItems": 1,
      "type": "array"
    },
    "AssociationFilterOperatorType": {
      "enum": [
        "EQUAL",
        "LESS_THAN",
        "GREATER_THAN"
      ],
      "type": "string"
    },
    "AssociationFilterValue": {
      "minLength": 1,
      "type": "string"
    },
    "AssociationId": {
      "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
      "type": "string"
    },
    "AssociationIdList": {
      "items": {
        "$ref": "#/definitions/AssociationId"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "AssociationLimitExceeded": {},
    "AssociationList": {
      "items": {
        "$ref": "#/definitions/Association"
      },
      "type": "array"
    },
    "AssociationName": {
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "AssociationOverview": {
      "description": "Information about the association.",
      "properties": {
        "AssociationStatusAggregatedCount": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationStatusAggregatedCount"
            },
            {
              "description": "Returns the number of targets for the association status. For example, if you created an association with two instances, and one of them was successful, this would return the count of instances by status."
            }
          ]
        },
        "DetailedStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "A detailed status of the association."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "The status of the association. Status can be: Pending, Success, or Failed."
            }
          ]
        }
      },
      "type": "object"
    },
    "AssociationResourceId": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "AssociationResourceType": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "AssociationStatus": {
      "description": "Describes an association status.",
      "properties": {
        "AdditionalInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusAdditionalInfo"
            },
            {
              "description": "A user-defined string."
            }
          ]
        },
        "Date": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date when the status changed."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusMessage"
            },
            {
              "description": "The reason for the status."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationStatusName"
            },
            {
              "description": "The status."
            }
          ]
        }
      },
      "required": [
        "Date",
        "Name",
        "Message"
      ],
      "type": "object"
    },
    "AssociationStatusAggregatedCount": {
      "additionalProperties": {
        "$ref": "#/definitions/InstanceCount"
      },
      "type": "object"
    },
    "AssociationStatusName": {
      "enum": [
        "Pending",
        "Success",
        "Failed"
      ],
      "type": "string"
    },
    "AssociationSyncCompliance": {
      "enum": [
        "AUTO",
        "MANUAL"
      ],
      "type": "string"
    },
    "AssociationVersion": {
      "pattern": "([$]LATEST)|([1-9][0-9]*)",
      "type": "string"
    },
    "AssociationVersionInfo": {
      "description": "Information about the association version.",
      "properties": {
        "ApplyOnlyAtCronInterval": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplyOnlyAtCronInterval"
            },
            {
              "description": "By default, when you create a new associations, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions."
            }
          ]
        },
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The ID created by the system when the association was created."
            }
          ]
        },
        "AssociationName": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationName"
            },
            {
              "description": "The name specified for the association version when the association version was created."
            }
          ]
        },
        "AssociationVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersion"
            },
            {
              "description": "The association version."
            }
          ]
        },
        "ComplianceSeverity": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationComplianceSeverity"
            },
            {
              "description": "The severity level that is assigned to the association."
            }
          ]
        },
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the association version was created."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of a Systems Manager document used when the association version was created."
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "<p>The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.</p> <p>If a new instance starts and attempts to run an association while Systems Manager is running MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.</p>"
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "<p>The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received.</p> <p>Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.</p>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name specified when the association was created."
            }
          ]
        },
        "OutputLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationOutputLocation"
            },
            {
              "description": "The location in Amazon S3 specified for the association when the association version was created."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "Parameters specified when the association version was created."
            }
          ]
        },
        "ScheduleExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/ScheduleExpression"
            },
            {
              "description": "The cron or rate schedule specified for the association when the association version was created."
            }
          ]
        },
        "SyncCompliance": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationSyncCompliance"
            },
            {
              "description": "<p>The mode for generating association compliance. You can specify <code>AUTO</code> or <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is <code>COMPLIANT</code>. If the association execution doesn't run successfully, the association is <code>NON-COMPLIANT</code>.</p> <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter for the <a>PutComplianceItems</a> API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the <a>PutComplianceItems</a> API action.</p> <p>By default, all associations use <code>AUTO</code> mode.</p>"
            }
          ]
        },
        "TargetLocations": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLocations"
            },
            {
              "description": "The combination of AWS Regions and AWS accounts where you wanted to run the association when this association version was created."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The targets specified for the association when the association version was created. "
            }
          ]
        }
      },
      "type": "object"
    },
    "AssociationVersionLimitExceeded": {},
    "AssociationVersionList": {
      "items": {
        "$ref": "#/definitions/AssociationVersionInfo"
      },
      "minItems": 1,
      "type": "array"
    },
    "AttachmentContent": {
      "description": "A structure that includes attributes that describe a document attachment.",
      "properties": {
        "Hash": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentHash"
            },
            {
              "description": "The cryptographic hash value of the document content."
            }
          ]
        },
        "HashType": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentHashType"
            },
            {
              "description": "The hash algorithm used to calculate the hash value."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentName"
            },
            {
              "description": "The name of an attachment."
            }
          ]
        },
        "Size": {
          "allOf": [
            {
              "$ref": "#/definitions/ContentLength"
            },
            {
              "description": "The size of an attachment in bytes."
            }
          ]
        },
        "Url": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentUrl"
            },
            {
              "description": "The URL location of the attachment content."
            }
          ]
        }
      },
      "type": "object"
    },
    "AttachmentContentList": {
      "items": {
        "$ref": "#/definitions/AttachmentContent"
      },
      "type": "array"
    },
    "AttachmentHash": {
      "maxLength": 256,
      "type": "string"
    },
    "AttachmentHashType": {
      "enum": [
        "Sha256"
      ],
      "type": "string"
    },
    "AttachmentIdentifier": {
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "AttachmentInformation": {
      "description": "An attribute of an attachment, such as the attachment name.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentName"
            },
            {
              "description": "The name of the attachment."
            }
          ]
        }
      },
      "type": "object"
    },
    "AttachmentInformationList": {
      "items": {
        "$ref": "#/definitions/AttachmentInformation"
      },
      "type": "array"
    },
    "AttachmentName": {
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "AttachmentUrl": {
      "type": "string"
    },
    "AttachmentsSource": {
      "description": "Identifying information about a document attachment, including the file name and a key-value pair that identifies the location of an attachment to a document.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentsSourceKey"
            },
            {
              "description": "The key of a key-value pair that identifies the location of an attachment to a document."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentIdentifier"
            },
            {
              "description": "The name of the document attachment file."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentsSourceValues"
            },
            {
              "description": "<p>The value of a key-value pair that identifies the location of an attachment to a document. The format for <b>Value</b> depends on the type of key you specify.</p> <ul> <li> <p>For the key <i>SourceUrl</i>, the value is an S3 bucket location. For example:</p> <p> <code>\"Values\": [ \"s3://doc-example-bucket/my-folder\" ]</code> </p> </li> <li> <p>For the key <i>S3FileUrl</i>, the value is a file in an S3 bucket. For example:</p> <p> <code>\"Values\": [ \"s3://doc-example-bucket/my-folder/my-file.py\" ]</code> </p> </li> <li> <p>For the key <i>AttachmentReference</i>, the value is constructed from the name of another SSM document in your account, a version number of that document, and a file attached to that document version that you want to reuse. For example:</p> <p> <code>\"Values\": [ \"MyOtherDocument/3/my-other-file.py\" ]</code> </p> <p>However, if the SSM document is shared with you from another account, the full SSM document ARN must be specified instead of the document name only. For example:</p> <p> <code>\"Values\": [ \"arn:aws:ssm:us-east-2:111122223333:document/OtherAccountDocument/3/their-file.py\" ]</code> </p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "AttachmentsSourceKey": {
      "enum": [
        "SourceUrl",
        "S3FileUrl",
        "AttachmentReference"
      ],
      "type": "string"
    },
    "AttachmentsSourceList": {
      "items": {
        "$ref": "#/definitions/AttachmentsSource"
      },
      "maxItems": 20,
      "minItems": 0,
      "type": "array"
    },
    "AttachmentsSourceValue": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "AttachmentsSourceValues": {
      "items": {
        "$ref": "#/definitions/AttachmentsSourceValue"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "AttributeName": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "AttributeValue": {
      "maxLength": 4096,
      "minLength": 0,
      "type": "string"
    },
    "AutomationActionName": {
      "pattern": "^aws:[a-zA-Z]{3,25}$",
      "type": "string"
    },
    "AutomationDefinitionNotApprovedException": {},
    "AutomationDefinitionNotFoundException": {},
    "AutomationDefinitionVersionNotFoundException": {},
    "AutomationExecution": {
      "description": "Detailed information about the current state of an individual Automation execution.",
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID of a State Manager association used in the Automation operation."
            }
          ]
        },
        "AutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The execution ID."
            }
          ]
        },
        "AutomationExecutionStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionStatus"
            },
            {
              "description": "The execution status of the Automation."
            }
          ]
        },
        "AutomationSubtype": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationSubtype"
            },
            {
              "description": "The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>."
            }
          ]
        },
        "ChangeRequestName": {
          "allOf": [
            {
              "$ref": "#/definitions/ChangeRequestName"
            },
            {
              "description": "The name of the Change Manager change request."
            }
          ]
        },
        "CurrentAction": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The action of the step that is currently running."
            }
          ]
        },
        "CurrentStepName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the step that is currently running."
            }
          ]
        },
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the Automation document used during the execution."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the document to use during execution."
            }
          ]
        },
        "ExecutedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the user who ran the automation."
            }
          ]
        },
        "ExecutionEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the execution finished."
            }
          ]
        },
        "ExecutionStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the execution started."
            }
          ]
        },
        "FailureMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A message describing why an execution has failed, if the status is set to Failed."
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The MaxConcurrency value specified by the user when the execution started."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The MaxErrors value specified by the user when the execution started."
            }
          ]
        },
        "Mode": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionMode"
            },
            {
              "description": "The automation execution mode."
            }
          ]
        },
        "OpsItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID of an OpsItem that is created to represent a Change Manager change request."
            }
          ]
        },
        "Outputs": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "The list of execution outputs as defined in the automation document."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "The key-value map of execution parameters, which were supplied when calling StartAutomationExecution."
            }
          ]
        },
        "ParentAutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The AutomationExecutionId of the parent automation."
            }
          ]
        },
        "ProgressCounters": {
          "allOf": [
            {
              "$ref": "#/definitions/ProgressCounters"
            },
            {
              "description": "An aggregate of step execution statuses displayed in the AWS Console for a multi-Region and multi-account Automation execution."
            }
          ]
        },
        "ResolvedTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/ResolvedTargets"
            },
            {
              "description": "A list of resolved targets in the rate control execution."
            }
          ]
        },
        "Runbooks": {
          "allOf": [
            {
              "$ref": "#/definitions/Runbooks"
            },
            {
              "description": "<p>Information about the Automation runbooks (Automation documents) that are run as part of a runbook workflow.</p> <note> <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p> </note>"
            }
          ]
        },
        "ScheduledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time the Automation operation is scheduled to start."
            }
          ]
        },
        "StepExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/StepExecutionList"
            },
            {
              "description": "A list of details about the current state of all steps that comprise an execution. An Automation document contains a list of steps that are run in order."
            }
          ]
        },
        "StepExecutionsTruncated": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A boolean value that indicates if the response contains the full list of the Automation step executions. If true, use the DescribeAutomationStepExecutions API action to get the full list of step executions."
            }
          ]
        },
        "Target": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The target of the execution."
            }
          ]
        },
        "TargetLocations": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLocations"
            },
            {
              "description": "The combination of AWS Regions and/or AWS accounts where you want to run the Automation."
            }
          ]
        },
        "TargetMaps": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetMaps"
            },
            {
              "description": "The specified key-value mapping of document parameters to target resources."
            }
          ]
        },
        "TargetParameterName": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterKey"
            },
            {
              "description": "The parameter name."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The specified targets."
            }
          ]
        }
      },
      "type": "object"
    },
    "AutomationExecutionFilter": {
      "description": "A filter used to match specific automation executions. This is used to limit the scope of Automation execution information returned.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionFilterKey"
            },
            {
              "description": "One or more keys to limit the results. Valid filter keys include the following: DocumentNamePrefix, ExecutionStatus, ExecutionId, ParentExecutionId, CurrentAction, StartTimeBefore, StartTimeAfter, TargetResourceGroup."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionFilterValueList"
            },
            {
              "description": "The values used to limit the execution information associated with the filter's key."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "AutomationExecutionFilterKey": {
      "enum": [
        "DocumentNamePrefix",
        "ExecutionStatus",
        "ExecutionId",
        "ParentExecutionId",
        "CurrentAction",
        "StartTimeBefore",
        "StartTimeAfter",
        "AutomationType",
        "TagKey",
        "TargetResourceGroup",
        "AutomationSubtype",
        "OpsItemId"
      ],
      "type": "string"
    },
    "AutomationExecutionFilterList": {
      "items": {
        "$ref": "#/definitions/AutomationExecutionFilter"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "AutomationExecutionFilterValue": {
      "maxLength": 150,
      "minLength": 1,
      "type": "string"
    },
    "AutomationExecutionFilterValueList": {
      "items": {
        "$ref": "#/definitions/AutomationExecutionFilterValue"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "AutomationExecutionId": {
      "maxLength": 36,
      "minLength": 36,
      "type": "string"
    },
    "AutomationExecutionLimitExceededException": {},
    "AutomationExecutionMetadata": {
      "description": "Details about a specific Automation execution.",
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID of a State Manager association used in the Automation operation."
            }
          ]
        },
        "AutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The execution ID."
            }
          ]
        },
        "AutomationExecutionStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionStatus"
            },
            {
              "description": "The status of the execution."
            }
          ]
        },
        "AutomationSubtype": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationSubtype"
            },
            {
              "description": "The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>."
            }
          ]
        },
        "AutomationType": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationType"
            },
            {
              "description": "Use this filter with <a>DescribeAutomationExecutions</a>. Specify either Local or CrossAccount. CrossAccount is an Automation that runs in multiple AWS Regions and accounts. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html\">Running Automation workflows in multiple AWS Regions and accounts</a> in the <i>AWS Systems Manager User Guide</i>. "
            }
          ]
        },
        "ChangeRequestName": {
          "allOf": [
            {
              "$ref": "#/definitions/ChangeRequestName"
            },
            {
              "description": "The name of the Change Manager change request."
            }
          ]
        },
        "CurrentAction": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The action of the step that is currently running."
            }
          ]
        },
        "CurrentStepName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the step that is currently running."
            }
          ]
        },
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the Automation document used during execution."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version used during the execution."
            }
          ]
        },
        "ExecutedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The IAM role ARN of the user who ran the Automation."
            }
          ]
        },
        "ExecutionEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the execution finished. This is not populated if the execution is still in progress."
            }
          ]
        },
        "ExecutionStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the execution started."
            }
          ]
        },
        "FailureMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The list of execution outputs as defined in the Automation document."
            }
          ]
        },
        "LogFile": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "An S3 bucket where execution information is stored."
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The MaxConcurrency value specified by the user when starting the Automation."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The MaxErrors value specified by the user when starting the Automation."
            }
          ]
        },
        "Mode": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionMode"
            },
            {
              "description": "The Automation execution mode."
            }
          ]
        },
        "OpsItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID of an OpsItem that is created to represent a Change Manager change request."
            }
          ]
        },
        "Outputs": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "The list of execution outputs as defined in the Automation document."
            }
          ]
        },
        "ParentAutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The ExecutionId of the parent Automation."
            }
          ]
        },
        "ResolvedTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/ResolvedTargets"
            },
            {
              "description": "A list of targets that resolved during the execution."
            }
          ]
        },
        "Runbooks": {
          "allOf": [
            {
              "$ref": "#/definitions/Runbooks"
            },
            {
              "description": "<p>Information about the Automation runbooks (Automation documents) that are run during a runbook workflow in Change Manager.</p> <note> <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p> </note>"
            }
          ]
        },
        "ScheduledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time the Automation operation is scheduled to start."
            }
          ]
        },
        "Target": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The list of execution outputs as defined in the Automation document."
            }
          ]
        },
        "TargetMaps": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetMaps"
            },
            {
              "description": "The specified key-value mapping of document parameters to target resources."
            }
          ]
        },
        "TargetParameterName": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterKey"
            },
            {
              "description": "The list of execution outputs as defined in the Automation document."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The targets defined by the user when starting the Automation."
            }
          ]
        }
      },
      "type": "object"
    },
    "AutomationExecutionMetadataList": {
      "items": {
        "$ref": "#/definitions/AutomationExecutionMetadata"
      },
      "type": "array"
    },
    "AutomationExecutionNotFoundException": {},
    "AutomationExecutionStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Waiting",
        "Success",
        "TimedOut",
        "Cancelling",
        "Cancelled",
        "Failed",
        "PendingApproval",
        "Approved",
        "Rejected",
        "Scheduled",
        "RunbookInProgress",
        "PendingChangeCalendarOverride",
        "ChangeCalendarOverrideApproved",
        "ChangeCalendarOverrideRejected",
        "CompletedWithSuccess",
        "CompletedWithFailure"
      ],
      "type": "string"
    },
    "AutomationParameterKey": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "AutomationParameterMap": {
      "additionalProperties": {
        "$ref": "#/definitions/AutomationParameterValueList"
      },
      "maxProperties": 200,
      "minProperties": 1,
      "type": "object"
    },
    "AutomationParameterValue": {
      "maxLength": 512,
      "minLength": 1,
      "type": "string"
    },
    "AutomationParameterValueList": {
      "items": {
        "$ref": "#/definitions/AutomationParameterValue"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "AutomationStepNotFoundException": {},
    "AutomationSubtype": {
      "enum": [
        "ChangeRequest"
      ],
      "type": "string"
    },
    "AutomationTargetParameterName": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "AutomationType": {
      "enum": [
        "CrossAccount",
        "Local"
      ],
      "type": "string"
    },
    "BaselineDescription": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "BaselineId": {
      "maxLength": 128,
      "minLength": 20,
      "pattern": "^[a-zA-Z0-9_\\-:/]{20,128}$",
      "type": "string"
    },
    "BaselineName": {
      "maxLength": 128,
      "minLength": 3,
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "BatchErrorMessage": {
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "CalendarNameOrARN": {
      "type": "string"
    },
    "CalendarNameOrARNList": {
      "items": {
        "$ref": "#/definitions/CalendarNameOrARN"
      },
      "type": "array"
    },
    "CalendarState": {
      "enum": [
        "OPEN",
        "CLOSED"
      ],
      "type": "string"
    },
    "CancelCommandRequest": {
      "description": "<p/>",
      "properties": {
        "CommandId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandId"
            },
            {
              "description": "The ID of the command you want to cancel."
            }
          ]
        },
        "InstanceIds": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceIdList"
            },
            {
              "description": "(Optional) A list of instance IDs on which you want to cancel the command. If not provided, the command is canceled on every instance on which it was requested."
            }
          ]
        }
      },
      "required": [
        "CommandId"
      ],
      "title": "CancelCommandRequest",
      "type": "object"
    },
    "CancelCommandResult": {
      "description": "Whether or not the command was successfully canceled. There is no guarantee that a request can be canceled.",
      "properties": {},
      "type": "object"
    },
    "CancelMaintenanceWindowExecutionRequest": {
      "properties": {
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution to stop."
            }
          ]
        }
      },
      "required": [
        "WindowExecutionId"
      ],
      "title": "CancelMaintenanceWindowExecutionRequest",
      "type": "object"
    },
    "CancelMaintenanceWindowExecutionResult": {
      "properties": {
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution that has been stopped."
            }
          ]
        }
      },
      "type": "object"
    },
    "ChangeRequestName": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "ClientToken": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "CloudWatchLogGroupName": {
      "maxLength": 512,
      "minLength": 1,
      "type": "string"
    },
    "CloudWatchOutputConfig": {
      "description": "Configuration options for sending command output to CloudWatch Logs.",
      "properties": {
        "CloudWatchLogGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudWatchLogGroupName"
            },
            {
              "description": "The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/<i>SystemsManagerDocumentName</i>."
            }
          ]
        },
        "CloudWatchOutputEnabled": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudWatchOutputEnabled"
            },
            {
              "description": "Enables Systems Manager to send command output to CloudWatch Logs."
            }
          ]
        }
      },
      "type": "object"
    },
    "CloudWatchOutputEnabled": {
      "type": "boolean"
    },
    "Command": {
      "description": "Describes a command request.",
      "properties": {
        "CloudWatchOutputConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudWatchOutputConfig"
            },
            {
              "description": "CloudWatch Logs information where you want Systems Manager to send the command output."
            }
          ]
        },
        "CommandId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandId"
            },
            {
              "description": "A unique identifier for this command."
            }
          ]
        },
        "Comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "User-specified information about the command, such as a brief description of what the command should do."
            }
          ]
        },
        "CompletedCount": {
          "allOf": [
            {
              "$ref": "#/definitions/CompletedCount"
            },
            {
              "description": "The number of targets for which the command invocation reached a terminal state. Terminal states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out, Canceled, Terminated, or Undeliverable."
            }
          ]
        },
        "DeliveryTimedOutCount": {
          "allOf": [
            {
              "$ref": "#/definitions/DeliveryTimedOutCount"
            },
            {
              "description": "The number of targets for which the status is Delivery Timed Out."
            }
          ]
        },
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document requested for execution."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The SSM document version."
            }
          ]
        },
        "ErrorCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorCount"
            },
            {
              "description": "The number of targets for which the status is Failed or Execution Timed Out."
            }
          ]
        },
        "ExpiresAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "If this time is reached and the command has not already started running, it will not run. Calculated based on the ExpiresAfter user input provided as part of the SendCommand API."
            }
          ]
        },
        "InstanceIds": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceIdList"
            },
            {
              "description": "The instance IDs against which this command was requested."
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The maximum number of instances that are allowed to run the command at the same time. You can specify a number of instances, such as 10, or a percentage of instances, such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html\">Running commands using Systems Manager Run Command</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The maximum number of errors allowed before the system stops sending the command to additional targets. You can specify a number of errors, such as 10, or a percentage or errors, such as 10%. The default value is 0. For more information about how to use MaxErrors, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html\">Running commands using Systems Manager Run Command</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "NotificationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationConfig"
            },
            {
              "description": "Configurations for sending notifications about command status changes. "
            }
          ]
        },
        "OutputS3BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/S3BucketName"
            },
            {
              "description": "The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command."
            }
          ]
        },
        "OutputS3KeyPrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/S3KeyPrefix"
            },
            {
              "description": "The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command."
            }
          ]
        },
        "OutputS3Region": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Region"
            },
            {
              "description": "(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Region of the S3 bucket."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "The parameter values to be inserted in the document when running the command."
            }
          ]
        },
        "RequestedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time the command was requested."
            }
          ]
        },
        "ServiceRole": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes. "
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandStatus"
            },
            {
              "description": "The status of the command."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusDetails"
            },
            {
              "description": "<p>A detailed status of the command execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html\">Understanding command statuses</a> in the <i>AWS Systems Manager User Guide</i>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to any instances.</p> </li> <li> <p>In Progress: The command has been sent to at least one instance but has not reached a final state on all instances.</p> </li> <li> <p>Success: The command successfully ran on all invocations. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of Delivery Timed Out. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: The value of MaxErrors or more command invocations shows a status of Execution Timed Out. This is a terminal state.</p> </li> <li> <p>Failed: The value of MaxErrors or more command invocations shows a status of Failed. This is a terminal state.</p> </li> <li> <p>Incomplete: The command was attempted on all instances and one or more invocations does not have a value of Success but not enough invocations failed for the status to be Failed. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Rate Exceeded: The number of instances targeted by the command exceeded the account limit for pending invocations. The system has canceled the command before running it on any instance. This is a terminal state.</p> </li> </ul>"
            }
          ]
        },
        "TargetCount": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetCount"
            },
            {
              "description": "The number of targets for the command."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "An array of search criteria that targets instances using a Key,Value combination that you specify. Targets is required if you don't provide one or more instance IDs in the call."
            }
          ]
        },
        "TimeoutSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/TimeoutSeconds"
            },
            {
              "description": "The <code>TimeoutSeconds</code> value specified for a command."
            }
          ]
        }
      },
      "type": "object"
    },
    "CommandFilter": {
      "description": "<p>Describes a command filter.</p> <note> <p>An instance ID can't be specified when a command status is <code>Pending</code> because the command hasn't run on the instance yet.</p> </note>",
      "properties": {
        "key": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandFilterKey"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandFilterValue"
            },
            {
              "description": "<p>The filter value. Valid values for each filter key are as follows:</p> <ul> <li> <p> <b>InvokedAfter</b>: Specify a timestamp to limit your results. For example, specify <code>2018-07-07T00:00:00Z</code> to see a list of command executions occurring July 7, 2018, and later.</p> </li> <li> <p> <b>InvokedBefore</b>: Specify a timestamp to limit your results. For example, specify <code>2018-07-07T00:00:00Z</code> to see a list of command executions from before July 7, 2018.</p> </li> <li> <p> <b>Status</b>: Specify a valid command status to see a list of all command executions with that status. Status values you can specify include:</p> <ul> <li> <p> <code>Pending</code> </p> </li> <li> <p> <code>InProgress</code> </p> </li> <li> <p> <code>Success</code> </p> </li> <li> <p> <code>Cancelled</code> </p> </li> <li> <p> <code>Failed</code> </p> </li> <li> <p> <code>TimedOut</code> </p> </li> <li> <p> <code>Cancelling</code> </p> </li> </ul> </li> <li> <p> <b>DocumentName</b>: Specify name of the SSM document for which you want to see command execution results. For example, specify <code>AWS-RunPatchBaseline</code> to see command executions that used this SSM document to perform security patching operations on instances. </p> </li> <li> <p> <b>ExecutionStage</b>: Specify one of the following values:</p> <ul> <li> <p> <code>Executing</code>: Returns a list of command executions that are currently still running.</p> </li> <li> <p> <code>Complete</code>: Returns a list of command executions that have already completed. </p> </li> </ul> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "CommandFilterKey": {
      "enum": [
        "InvokedAfter",
        "InvokedBefore",
        "Status",
        "ExecutionStage",
        "DocumentName"
      ],
      "type": "string"
    },
    "CommandFilterList": {
      "items": {
        "$ref": "#/definitions/CommandFilter"
      },
      "maxItems": 5,
      "minItems": 1,
      "type": "array"
    },
    "CommandFilterValue": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "CommandId": {
      "maxLength": 36,
      "minLength": 36,
      "type": "string"
    },
    "CommandInvocation": {
      "description": "An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user runs SendCommand against three instances, then a command invocation is created for each requested instance ID. A command invocation returns status and detail information about a command you ran. ",
      "properties": {
        "CloudWatchOutputConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudWatchOutputConfig"
            },
            {
              "description": "CloudWatch Logs information where you want Systems Manager to send the command output."
            }
          ]
        },
        "CommandId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandId"
            },
            {
              "description": "The command against which this invocation was requested."
            }
          ]
        },
        "CommandPlugins": {
          "$ref": "#/definitions/CommandPluginList"
        },
        "Comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "User-specified information about the command, such as a brief description of what the command should do."
            }
          ]
        },
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The document name that was requested for execution."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The SSM document version."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance ID in which this invocation was requested."
            }
          ]
        },
        "InstanceName": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceTagName"
            },
            {
              "description": "The name of the invocation target. For EC2 instances this is the value for the aws:Name tag. For on-premises instances, this is the name of the instance."
            }
          ]
        },
        "NotificationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationConfig"
            },
            {
              "description": "Configurations for sending notifications about command status changes on a per instance basis."
            }
          ]
        },
        "RequestedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time and date the request was sent to this instance."
            }
          ]
        },
        "ServiceRole": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "The IAM service role that Run Command uses to act on your behalf when sending notifications about command status changes on a per instance basis."
            }
          ]
        },
        "StandardErrorUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/Url"
            },
            {
              "description": "The URL to the plugin's StdErr file in Amazon S3, if the S3 bucket was defined for the parent command. For an invocation, StandardErrorUrl is populated if there is just one plugin defined for the command, and the S3 bucket was defined for the command."
            }
          ]
        },
        "StandardOutputUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/Url"
            },
            {
              "description": "The URL to the plugin's StdOut file in Amazon S3, if the S3 bucket was defined for the parent command. For an invocation, StandardOutputUrl is populated if there is just one plugin defined for the command, and the S3 bucket was defined for the command."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandInvocationStatus"
            },
            {
              "description": "Whether or not the invocation succeeded, failed, or is pending."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusDetails"
            },
            {
              "description": "<p>A detailed status of the command execution for each invocation (each instance targeted by the command). StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html\">Understanding command statuses</a> in the <i>AWS Systems Manager User Guide</i>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to the instance.</p> </li> <li> <p>In Progress: The command has been sent to the instance but has not reached a terminal state.</p> </li> <li> <p>Success: The execution of the command or plugin was successfully completed. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li> </ul>"
            }
          ]
        },
        "TraceOutput": {
          "allOf": [
            {
              "$ref": "#/definitions/InvocationTraceOutput"
            },
            {
              "description": " Gets the trace output sent by the agent. "
            }
          ]
        }
      },
      "type": "object"
    },
    "CommandInvocationList": {
      "items": {
        "$ref": "#/definitions/CommandInvocation"
      },
      "type": "array"
    },
    "CommandInvocationStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Delayed",
        "Success",
        "Cancelled",
        "TimedOut",
        "Failed",
        "Cancelling"
      ],
      "type": "string"
    },
    "CommandList": {
      "items": {
        "$ref": "#/definitions/Command"
      },
      "type": "array"
    },
    "CommandMaxResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "CommandPlugin": {
      "description": "Describes plugin details.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandPluginName"
            },
            {
              "description": "The name of the plugin. Must be one of the following: aws:updateAgent, aws:domainjoin, aws:applications, aws:runPowerShellScript, aws:psmodule, aws:cloudWatch, aws:runShellScript, or aws:updateSSMAgent. "
            }
          ]
        },
        "Output": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandPluginOutput"
            },
            {
              "description": "Output of the plugin execution."
            }
          ]
        },
        "OutputS3BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/S3BucketName"
            },
            {
              "description": "<p>The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:</p> <p>doc-example-bucket/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-02573cafcfEXAMPLE/awsrunShellScript </p> <p>doc-example-bucket is the name of the S3 bucket;</p> <p>ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;</p> <p>i-02573cafcfEXAMPLE is the instance ID;</p> <p>awsrunShellScript is the name of the plugin.</p>"
            }
          ]
        },
        "OutputS3KeyPrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/S3KeyPrefix"
            },
            {
              "description": "<p>The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command. For example, in the following response:</p> <p>doc-example-bucket/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-02573cafcfEXAMPLE/awsrunShellScript </p> <p>doc-example-bucket is the name of the S3 bucket;</p> <p>ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;</p> <p>i-02573cafcfEXAMPLE is the instance ID;</p> <p>awsrunShellScript is the name of the plugin.</p>"
            }
          ]
        },
        "OutputS3Region": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Region"
            },
            {
              "description": "(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the S3 bucket region."
            }
          ]
        },
        "ResponseCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResponseCode"
            },
            {
              "description": "A numeric response code generated after running the plugin. "
            }
          ]
        },
        "ResponseFinishDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the plugin stopped running. Could stop prematurely if, for example, a cancel command was sent. "
            }
          ]
        },
        "ResponseStartDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the plugin started running. "
            }
          ]
        },
        "StandardErrorUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/Url"
            },
            {
              "description": "The URL for the complete text written by the plugin to stderr. If execution is not yet complete, then this string is empty."
            }
          ]
        },
        "StandardOutputUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/Url"
            },
            {
              "description": "The URL for the complete text written by the plugin to stdout in Amazon S3. If the S3 bucket for the command was not specified, then this string is empty."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandPluginStatus"
            },
            {
              "description": "The status of this plugin. You can run a document with multiple plugins."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusDetails"
            },
            {
              "description": "<p>A detailed status of the plugin execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html\">Understanding command statuses</a> in the <i>AWS Systems Manager User Guide</i>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to the instance.</p> </li> <li> <p>In Progress: The command has been sent to the instance but has not reached a terminal state.</p> </li> <li> <p>Success: The execution of the command or plugin was successfully completed. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: Command execution started on the instance, but the execution was not complete before the execution timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Failed: The command was not successful on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Undeliverable: The command can't be delivered to the instance. The instance might not exist, or it might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit, and they don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "CommandPluginList": {
      "items": {
        "$ref": "#/definitions/CommandPlugin"
      },
      "type": "array"
    },
    "CommandPluginName": {
      "minLength": 4,
      "type": "string"
    },
    "CommandPluginOutput": {
      "maxLength": 2500,
      "type": "string"
    },
    "CommandPluginStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Success",
        "TimedOut",
        "Cancelled",
        "Failed"
      ],
      "type": "string"
    },
    "CommandStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Success",
        "Cancelled",
        "Failed",
        "TimedOut",
        "Cancelling"
      ],
      "type": "string"
    },
    "Comment": {
      "maxLength": 100,
      "type": "string"
    },
    "CompletedCount": {
      "type": "integer"
    },
    "ComplianceExecutionId": {
      "maxLength": 100,
      "type": "string"
    },
    "ComplianceExecutionSummary": {
      "description": "A summary of the call execution that includes an execution ID, the type of execution (for example, <code>Command</code>), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.",
      "properties": {
        "ExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceExecutionId"
            },
            {
              "description": "An ID created by the system when <code>PutComplianceItems</code> was called. For example, <code>CommandID</code> is a valid execution ID. You can use this ID in subsequent calls."
            }
          ]
        },
        "ExecutionTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the execution ran as a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'."
            }
          ]
        },
        "ExecutionType": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceExecutionType"
            },
            {
              "description": "The type of execution. For example, <code>Command</code> is a valid execution type."
            }
          ]
        }
      },
      "required": [
        "ExecutionTime"
      ],
      "type": "object"
    },
    "ComplianceExecutionType": {
      "maxLength": 50,
      "type": "string"
    },
    "ComplianceFilterValue": {
      "type": "string"
    },
    "ComplianceItem": {
      "description": "Information about the compliance as defined by the resource type. For example, for a patch resource type, <code>Items</code> includes information about the PatchSeverity, Classification, and so on.",
      "properties": {
        "ComplianceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceTypeName"
            },
            {
              "description": "The compliance type. For example, Association (for a State Manager association), Patch, or Custom:<code>string</code> are all valid compliance types."
            }
          ]
        },
        "Details": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceItemDetails"
            },
            {
              "description": "A \"Key\": \"Value\" tag combination for the compliance item."
            }
          ]
        },
        "ExecutionSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceExecutionSummary"
            },
            {
              "description": "A summary for the compliance item. The summary includes an execution ID, the execution type (for example, command), and the execution time."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceItemId"
            },
            {
              "description": "An ID for the compliance item. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article; for example: KB4010320."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceResourceId"
            },
            {
              "description": "An ID for the resource. For a managed instance, this is the instance ID."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceResourceType"
            },
            {
              "description": "The type of resource. <code>ManagedInstance</code> is currently the only supported resource type."
            }
          ]
        },
        "Severity": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSeverity"
            },
            {
              "description": "The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceStatus"
            },
            {
              "description": "The status of the compliance item. An item is either COMPLIANT, NON_COMPLIANT, or an empty string (for Windows patches that aren't applicable)."
            }
          ]
        },
        "Title": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceItemTitle"
            },
            {
              "description": "A title for the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch; for example: Security Update for Active Directory Federation Services."
            }
          ]
        }
      },
      "type": "object"
    },
    "ComplianceItemContentHash": {
      "maxLength": 256,
      "type": "string"
    },
    "ComplianceItemDetails": {
      "additionalProperties": {
        "$ref": "#/definitions/AttributeValue"
      },
      "type": "object"
    },
    "ComplianceItemEntry": {
      "description": "Information about a compliance item.",
      "properties": {
        "Details": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceItemDetails"
            },
            {
              "description": "A \"Key\": \"Value\" tag combination for the compliance item."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceItemId"
            },
            {
              "description": "The compliance item ID. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article."
            }
          ]
        },
        "Severity": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSeverity"
            },
            {
              "description": "The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceStatus"
            },
            {
              "description": "The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT."
            }
          ]
        },
        "Title": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceItemTitle"
            },
            {
              "description": "The title of the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch; for example: Security Update for Active Directory Federation Services. "
            }
          ]
        }
      },
      "required": [
        "Severity",
        "Status"
      ],
      "type": "object"
    },
    "ComplianceItemEntryList": {
      "items": {
        "$ref": "#/definitions/ComplianceItemEntry"
      },
      "maxItems": 10000,
      "minItems": 0,
      "type": "array"
    },
    "ComplianceItemId": {
      "type": "string"
    },
    "ComplianceItemList": {
      "items": {
        "$ref": "#/definitions/ComplianceItem"
      },
      "type": "array"
    },
    "ComplianceItemTitle": {
      "maxLength": 500,
      "type": "string"
    },
    "ComplianceQueryOperatorType": {
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "BEGIN_WITH",
        "LESS_THAN",
        "GREATER_THAN"
      ],
      "type": "string"
    },
    "ComplianceResourceId": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "ComplianceResourceIdList": {
      "items": {
        "$ref": "#/definitions/ComplianceResourceId"
      },
      "minItems": 1,
      "type": "array"
    },
    "ComplianceResourceType": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "ComplianceResourceTypeList": {
      "items": {
        "$ref": "#/definitions/ComplianceResourceType"
      },
      "minItems": 1,
      "type": "array"
    },
    "ComplianceSeverity": {
      "enum": [
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "INFORMATIONAL",
        "UNSPECIFIED"
      ],
      "type": "string"
    },
    "ComplianceStatus": {
      "enum": [
        "COMPLIANT",
        "NON_COMPLIANT"
      ],
      "type": "string"
    },
    "ComplianceStringFilter": {
      "description": "One or more filters. Use a filter to return a more specific list of results.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceStringFilterKey"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceQueryOperatorType"
            },
            {
              "description": "The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith, LessThan, or GreaterThan."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceStringFilterValueList"
            },
            {
              "description": "The value for which to search."
            }
          ]
        }
      },
      "type": "object"
    },
    "ComplianceStringFilterKey": {
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "ComplianceStringFilterList": {
      "items": {
        "$ref": "#/definitions/ComplianceStringFilter"
      },
      "type": "array"
    },
    "ComplianceStringFilterValueList": {
      "items": {
        "$ref": "#/definitions/ComplianceFilterValue"
      },
      "maxItems": 20,
      "minItems": 1,
      "type": "array"
    },
    "ComplianceSummaryCount": {
      "type": "integer"
    },
    "ComplianceSummaryItem": {
      "description": "A summary of compliance information by compliance type.",
      "properties": {
        "ComplianceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceTypeName"
            },
            {
              "description": "The type of compliance item. For example, the compliance type can be Association, Patch, or Custom:string."
            }
          ]
        },
        "CompliantSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/CompliantSummary"
            },
            {
              "description": "A list of COMPLIANT items for the specified compliance type."
            }
          ]
        },
        "NonCompliantSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/NonCompliantSummary"
            },
            {
              "description": "A list of NON_COMPLIANT items for the specified compliance type."
            }
          ]
        }
      },
      "type": "object"
    },
    "ComplianceSummaryItemList": {
      "items": {
        "$ref": "#/definitions/ComplianceSummaryItem"
      },
      "type": "array"
    },
    "ComplianceTypeCountLimitExceededException": {},
    "ComplianceTypeName": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "[A-Za-z0-9_\\-]\\w+|Custom:[a-zA-Z0-9_\\-]\\w+",
      "type": "string"
    },
    "ComplianceUploadType": {
      "enum": [
        "COMPLETE",
        "PARTIAL"
      ],
      "type": "string"
    },
    "CompliantSummary": {
      "description": "A summary of resources that are compliant. The summary is organized according to the resource count for each compliance type.",
      "properties": {
        "CompliantCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSummaryCount"
            },
            {
              "description": "The total number of resources that are compliant."
            }
          ]
        },
        "SeveritySummary": {
          "allOf": [
            {
              "$ref": "#/definitions/SeveritySummary"
            },
            {
              "description": "A summary of the compliance severity by compliance type."
            }
          ]
        }
      },
      "type": "object"
    },
    "ComputerName": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "ConnectionStatus": {
      "enum": [
        "Connected",
        "NotConnected"
      ],
      "type": "string"
    },
    "ContentLength": {
      "type": "integer"
    },
    "CreateActivationRequest": {
      "properties": {
        "DefaultInstanceName": {
          "allOf": [
            {
              "$ref": "#/definitions/DefaultInstanceName"
            },
            {
              "description": "<p>The name of the registered, managed instance as it will appear in the Systems Manager console or when you use the AWS command line tools to list Systems Manager resources.</p> <important> <p>Do not enter personally identifiable information in this field.</p> </important>"
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ActivationDescription"
            },
            {
              "description": "<p>A user-defined description of the resource that you want to register with Systems Manager. </p> <important> <p>Do not enter personally identifiable information in this field.</p> </important>"
            }
          ]
        },
        "ExpirationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/ExpirationDate"
            },
            {
              "description": "The date by which this activation request should expire. The default value is 24 hours."
            }
          ]
        },
        "IamRole": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRole"
            },
            {
              "description": "The Amazon Identity and Access Management (IAM) role that you want to assign to the managed instance. This IAM role must provide AssumeRole permissions for the Systems Manager service principal <code>ssm.amazonaws.com</code>. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-service-role.html\">Create an IAM service role for a hybrid environment</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "RegistrationLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistrationLimit"
            },
            {
              "description": "Specify the maximum number of managed instances you want to register. The default value is 1 instance."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag an activation to identify which servers or virtual machines (VMs) in your on-premises environment you intend to activate. In this case, you could specify the following key name/value pairs:</p> <ul> <li> <p> <code>Key=OS,Value=Windows</code> </p> </li> <li> <p> <code>Key=Environment,Value=Production</code> </p> </li> </ul> <important> <p>When you install SSM Agent on your on-premises servers and VMs, you specify an activation ID and code. When you specify the activation ID and code, tags assigned to the activation are automatically applied to the on-premises servers or VMs.</p> </important> <p>You can't add tags to or delete tags from an existing activation. You can tag your on-premises servers and VMs after they connect to Systems Manager for the first time and are assigned a managed instance ID. This means they are listed in the AWS Systems Manager console with an ID that is prefixed with \"mi-\". For information about how to add tags to your managed instances, see <a>AddTagsToResource</a>. For information about how to remove tags from your managed instances, see <a>RemoveTagsFromResource</a>.</p>"
            }
          ]
        }
      },
      "required": [
        "IamRole"
      ],
      "title": "CreateActivationRequest",
      "type": "object"
    },
    "CreateActivationResult": {
      "properties": {
        "ActivationCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ActivationCode"
            },
            {
              "description": "The code the system generates when it processes the activation. The activation code functions like a password to validate the activation ID. "
            }
          ]
        },
        "ActivationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ActivationId"
            },
            {
              "description": "The ID number generated by the system when it processed the activation. The activation ID functions like a user name."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateAssociationBatchRequest": {
      "properties": {
        "Entries": {
          "allOf": [
            {
              "$ref": "#/definitions/CreateAssociationBatchRequestEntries"
            },
            {
              "description": "One or more associations."
            }
          ]
        }
      },
      "required": [
        "Entries"
      ],
      "title": "CreateAssociationBatchRequest",
      "type": "object"
    },
    "CreateAssociationBatchRequestEntries": {
      "items": {
        "$ref": "#/definitions/CreateAssociationBatchRequestEntry"
      },
      "minItems": 1,
      "type": "array"
    },
    "CreateAssociationBatchRequestEntry": {
      "description": "Describes the association of a Systems Manager SSM document and an instance.",
      "properties": {
        "ApplyOnlyAtCronInterval": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplyOnlyAtCronInterval"
            },
            {
              "description": "By default, when you create a new associations, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions."
            }
          ]
        },
        "AssociationName": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationName"
            },
            {
              "description": "Specify a descriptive name for the association."
            }
          ]
        },
        "AutomationTargetParameterName": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationTargetParameterName"
            },
            {
              "description": "Specify the target for the association. This target is required for associations that use an Automation document and target resources by using rate controls."
            }
          ]
        },
        "ComplianceSeverity": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationComplianceSeverity"
            },
            {
              "description": "The severity level to assign to the association."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the instance. "
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "<p>The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.</p> <p>If a new instance starts and attempts to run an association while Systems Manager is running MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.</p>"
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "<p>The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received.</p> <p>Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.</p>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "<p>The name of the SSM document that contains the configuration information for the instance. You can specify Command or Automation documents.</p> <p>You can specify AWS-predefined documents, documents you created, or a document that is shared with you from another account.</p> <p>For SSM documents that are shared with you from other AWS accounts, you must specify the complete SSM document ARN, in the following format:</p> <p> <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:document/<i>document-name</i> </code> </p> <p>For example:</p> <p> <code>arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document</code> </p> <p>For AWS-predefined documents and SSM documents you created in your account, you only need to specify the document name. For example, <code>AWS-ApplyPatchBaseline</code> or <code>My-Document</code>.</p>"
            }
          ]
        },
        "OutputLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationOutputLocation"
            },
            {
              "description": "An S3 bucket where you want to store the results of this request."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "A description of the parameters for a document. "
            }
          ]
        },
        "ScheduleExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/ScheduleExpression"
            },
            {
              "description": "A cron expression that specifies a schedule when the association runs."
            }
          ]
        },
        "SyncCompliance": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationSyncCompliance"
            },
            {
              "description": "<p>The mode for generating association compliance. You can specify <code>AUTO</code> or <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is <code>COMPLIANT</code>. If the association execution doesn't run successfully, the association is <code>NON-COMPLIANT</code>. </p> <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter for the <a>PutComplianceItems</a> API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the <a>PutComplianceItems</a> API action.</p> <p>By default, all associations use <code>AUTO</code> mode.</p>"
            }
          ]
        },
        "TargetLocations": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLocations"
            },
            {
              "description": "Use this action to create an association in multiple Regions and multiple accounts."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The instances targeted by the request."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "CreateAssociationBatchResult": {
      "properties": {
        "Failed": {
          "allOf": [
            {
              "$ref": "#/definitions/FailedCreateAssociationList"
            },
            {
              "description": "Information about the associations that failed."
            }
          ]
        },
        "Successful": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationDescriptionList"
            },
            {
              "description": "Information about the associations that succeeded."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateAssociationRequest": {
      "properties": {
        "ApplyOnlyAtCronInterval": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplyOnlyAtCronInterval"
            },
            {
              "description": "By default, when you create a new associations, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions."
            }
          ]
        },
        "AssociationName": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationName"
            },
            {
              "description": "Specify a descriptive name for the association."
            }
          ]
        },
        "AutomationTargetParameterName": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationTargetParameterName"
            },
            {
              "description": "Specify the target for the association. This target is required for associations that use an Automation document and target resources by using rate controls."
            }
          ]
        },
        "ComplianceSeverity": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationComplianceSeverity"
            },
            {
              "description": "The severity level to assign to the association."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version you want to associate with the target(s). Can be a specific version or the default version."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "<p>The instance ID.</p> <note> <p> <code>InstanceId</code> has been deprecated. To specify an instance ID for an association, use the <code>Targets</code> parameter. Requests that include the parameter <code>InstanceID</code> with SSM documents that use schema version 2.0 or later will fail. In addition, if you use the parameter <code>InstanceId</code>, you cannot use the parameters <code>AssociationName</code>, <code>DocumentVersion</code>, <code>MaxErrors</code>, <code>MaxConcurrency</code>, <code>OutputLocation</code>, or <code>ScheduleExpression</code>. To use these parameters, you must use the <code>Targets</code> parameter.</p> </note>"
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "<p>The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.</p> <p>If a new instance starts and attempts to run an association while Systems Manager is running MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.</p>"
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "<p>The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received.</p> <p>Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.</p>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "<p>The name of the SSM document that contains the configuration information for the instance. You can specify Command or Automation documents.</p> <p>You can specify AWS-predefined documents, documents you created, or a document that is shared with you from another account.</p> <p>For SSM documents that are shared with you from other AWS accounts, you must specify the complete SSM document ARN, in the following format:</p> <p> <code>arn:<i>partition</i>:ssm:<i>region</i>:<i>account-id</i>:document/<i>document-name</i> </code> </p> <p>For example:</p> <p> <code>arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document</code> </p> <p>For AWS-predefined documents and SSM documents you created in your account, you only need to specify the document name. For example, <code>AWS-ApplyPatchBaseline</code> or <code>My-Document</code>.</p>"
            }
          ]
        },
        "OutputLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationOutputLocation"
            },
            {
              "description": "An S3 bucket where you want to store the output details of the request."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "The parameters for the runtime configuration of the document."
            }
          ]
        },
        "ScheduleExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/ScheduleExpression"
            },
            {
              "description": "A cron expression when the association will be applied to the target(s)."
            }
          ]
        },
        "SyncCompliance": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationSyncCompliance"
            },
            {
              "description": "<p>The mode for generating association compliance. You can specify <code>AUTO</code> or <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is <code>COMPLIANT</code>. If the association execution doesn't run successfully, the association is <code>NON-COMPLIANT</code>.</p> <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter for the <a>PutComplianceItems</a> API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the <a>PutComplianceItems</a> API action.</p> <p>By default, all associations use <code>AUTO</code> mode.</p>"
            }
          ]
        },
        "TargetLocations": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLocations"
            },
            {
              "description": "A location is a combination of AWS Regions and AWS accounts where you want to run the association. Use this action to create an association in multiple Regions and multiple accounts."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The targets for the association. You can target instances by using tags, AWS Resource Groups, all instances in an AWS account, or individual instance IDs. For more information about choosing targets for an association, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-state-manager-targets-and-rate-controls.html\">Using targets and rate controls with State Manager associations</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "CreateAssociationRequest",
      "type": "object"
    },
    "CreateAssociationResult": {
      "properties": {
        "AssociationDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationDescription"
            },
            {
              "description": "Information about the association."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateDocumentRequest": {
      "properties": {
        "Attachments": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentsSourceList"
            },
            {
              "description": "A list of key and value pairs that describe attachments to a version of a document."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentContent"
            },
            {
              "description": "<p>The content for the new SSM document in JSON or YAML format. We recommend storing the contents for your new document in an external JSON or YAML file and referencing the file in a command.</p> <p>For examples, see the following topics in the <i>AWS Systems Manager User Guide</i>.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/create-ssm-document-api.html\">Create an SSM document (AWS API)</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/create-ssm-document-cli.html\">Create an SSM document (AWS CLI)</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/create-ssm-document-api.html\">Create an SSM document (API)</a> </p> </li> </ul>"
            }
          ]
        },
        "DocumentFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFormat"
            },
            {
              "description": "Specify the document format for the request. The document format can be JSON, YAML, or TEXT. JSON is the default format."
            }
          ]
        },
        "DocumentType": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentType"
            },
            {
              "description": "The type of document to create."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "<p>A name for the Systems Manager document.</p> <important> <p>You can't use the following strings as document name prefixes. These are reserved by AWS for use as document name prefixes:</p> <ul> <li> <p> <code>aws-</code> </p> </li> <li> <p> <code>amazon</code> </p> </li> <li> <p> <code>amzn</code> </p> </li> </ul> </important>"
            }
          ]
        },
        "Requires": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentRequiresList"
            },
            {
              "description": "A list of SSM documents required by a document. This parameter is used exclusively by AWS AppConfig. When a user creates an AppConfig configuration in an SSM document, the user must also specify a required document for validation purposes. In this case, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document for validation purposes. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/appconfig.html\">AWS AppConfig</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag an SSM document to identify the types of targets or the environment where it will run. In this case, you could specify the following key name/value pairs:</p> <ul> <li> <p> <code>Key=OS,Value=Windows</code> </p> </li> <li> <p> <code>Key=Environment,Value=Production</code> </p> </li> </ul> <note> <p>To add tags to an existing SSM document, use the <a>AddTagsToResource</a> action.</p> </note>"
            }
          ]
        },
        "TargetType": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetType"
            },
            {
              "description": "Specify a target type to define the kinds of resources the document can run on. For example, to run a document on EC2 instances, specify the following value: /AWS::EC2::Instance. If you specify a value of '/' the document can run on all types of resources. If you don't specify a value, the document can't run on any resources. For a list of valid resource types, see <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html\">AWS resource and property types reference</a> in the <i>AWS CloudFormation User Guide</i>. "
            }
          ]
        },
        "VersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "An optional field specifying the version of the artifact you are creating with the document. For example, \"Release 12, Update 6\". This value is unique across all versions of a document, and cannot be changed."
            }
          ]
        }
      },
      "required": [
        "Content",
        "Name"
      ],
      "title": "CreateDocumentRequest",
      "type": "object"
    },
    "CreateDocumentResult": {
      "properties": {
        "DocumentDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentDescription"
            },
            {
              "description": "Information about the Systems Manager document."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateMaintenanceWindowRequest": {
      "properties": {
        "AllowUnassociatedTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowAllowUnassociatedTargets"
            },
            {
              "description": "<p>Enables a maintenance window task to run on managed instances, even if you have not registered those instances as targets. If enabled, then you must specify the unregistered instances (by instance ID) when you register a task with the maintenance window.</p> <p>If you don't enable this option, then you must specify previously-registered targets when you register a task with the maintenance window.</p>"
            }
          ]
        },
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientToken"
            },
            {
              "description": "User-provided idempotency token."
            }
          ]
        },
        "Cutoff": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowCutoff"
            },
            {
              "description": "The number of hours before the end of the maintenance window that Systems Manager stops scheduling new tasks for execution."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "An optional description for the maintenance window. We recommend specifying a description to help you organize your maintenance windows. "
            }
          ]
        },
        "Duration": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDurationHours"
            },
            {
              "description": "The duration of the maintenance window in hours."
            }
          ]
        },
        "EndDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, for when you want the maintenance window to become inactive. EndDate allows you to set a date and time in the future when the maintenance window will no longer run."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The name of the maintenance window."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowSchedule"
            },
            {
              "description": "The schedule of the maintenance window in the form of a cron or rate expression."
            }
          ]
        },
        "ScheduleOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowOffset"
            },
            {
              "description": "<p>The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.</p> <p>For example, the following cron expression schedules a maintenance window to run on the third Tuesday of every month at 11:30 PM.</p> <p> <code>cron(30 23 ? * TUE#3 *)</code> </p> <p>If the schedule offset is <code>2</code>, the maintenance window won't run until two days later.</p>"
            }
          ]
        },
        "ScheduleTimezone": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTimezone"
            },
            {
              "description": "The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: \"America/Los_Angeles\", \"UTC\", or \"Asia/Seoul\". For more information, see the <a href=\"https://www.iana.org/time-zones\">Time Zone Database</a> on the IANA website."
            }
          ]
        },
        "StartDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, for when you want the maintenance window to become active. StartDate allows you to delay activation of the maintenance window until the specified future date."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a maintenance window to identify the type of tasks it will run, the types of targets, and the environment it will run in. In this case, you could specify the following key name/value pairs:</p> <ul> <li> <p> <code>Key=TaskType,Value=AgentUpdate</code> </p> </li> <li> <p> <code>Key=OS,Value=Windows</code> </p> </li> <li> <p> <code>Key=Environment,Value=Production</code> </p> </li> </ul> <note> <p>To add tags to an existing maintenance window, use the <a>AddTagsToResource</a> action.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "Name",
        "Schedule",
        "Duration",
        "Cutoff",
        "AllowUnassociatedTargets"
      ],
      "title": "CreateMaintenanceWindowRequest",
      "type": "object"
    },
    "CreateMaintenanceWindowResult": {
      "properties": {
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the created maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateOpsItemRequest": {
      "properties": {
        "ActualEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time a runbook workflow ended. Currently reported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "ActualStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time a runbook workflow started. Currently reported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "Category": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemCategory"
            },
            {
              "description": "Specify a category to assign to an OpsItem. "
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemDescription"
            },
            {
              "description": "Information about the OpsItem. "
            }
          ]
        },
        "Notifications": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemNotifications"
            },
            {
              "description": "The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this OpsItem is edited or changed."
            }
          ]
        },
        "OperationalData": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemOperationalData"
            },
            {
              "description": "<p>Operational data is custom data that provides useful reference details about the OpsItem. For example, you can specify log files, error strings, license keys, troubleshooting tips, or other relevant data. You enter operational data as key-value pairs. The key has a maximum length of 128 characters. The value has a maximum size of 20 KB.</p> <important> <p>Operational data keys <i>can't</i> begin with the following: amazon, aws, amzn, ssm, /amazon, /aws, /amzn, /ssm.</p> </important> <p>You can choose to make the data searchable by other users in the account or you can restrict search access. Searchable data means that all users with access to the OpsItem Overview page (as provided by the <a>DescribeOpsItems</a> API action) can view and search on the specified data. Operational data that is not searchable is only viewable by users who have access to the OpsItem (as provided by the <a>GetOpsItem</a> API action).</p> <p>Use the <code>/aws/resources</code> key in OperationalData to specify a related resource in the request. Use the <code>/aws/automations</code> key in OperationalData to associate an Automation runbook with the OpsItem. To view AWS CLI example commands that use these keys, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-creating-OpsItems.html#OpsCenter-manually-create-OpsItems\">Creating OpsItems manually</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "OpsItemType": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemType"
            },
            {
              "description": "The type of OpsItem to create. Currently, the only valid values are <code>/aws/changerequest</code> and <code>/aws/issue</code>."
            }
          ]
        },
        "PlannedEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time specified in a change request for a runbook workflow to end. Currently supported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "PlannedStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time specified in a change request for a runbook workflow to start. Currently supported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemPriority"
            },
            {
              "description": "The importance of this OpsItem in relation to other OpsItems in the system."
            }
          ]
        },
        "RelatedOpsItems": {
          "allOf": [
            {
              "$ref": "#/definitions/RelatedOpsItems"
            },
            {
              "description": "One or more OpsItems that share something in common with the current OpsItems. For example, related OpsItems can include OpsItems with similar error messages, impacted resources, or statuses for the impacted resource."
            }
          ]
        },
        "Severity": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemSeverity"
            },
            {
              "description": "Specify a severity to assign to an OpsItem."
            }
          ]
        },
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemSource"
            },
            {
              "description": "<p>The origin of the OpsItem, such as Amazon EC2 or Systems Manager.</p> <note> <p>The source name can't contain the following strings: aws, amazon, and amzn. </p> </note>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p>Optional metadata that you assign to a resource. You can restrict access to OpsItems by using an inline IAM policy that specifies tags. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html#OpsCenter-getting-started-user-permissions\">Getting started with OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>Tags use a key-value pair. For example:</p> <p> <code>Key=Department,Value=Finance</code> </p> <note> <p>To add tags to an existing OpsItem, use the <a>AddTagsToResource</a> action.</p> </note>"
            }
          ]
        },
        "Title": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemTitle"
            },
            {
              "description": "A short heading that describes the nature of the OpsItem and the impacted resource."
            }
          ]
        }
      },
      "required": [
        "Description",
        "Source",
        "Title"
      ],
      "title": "CreateOpsItemRequest",
      "type": "object"
    },
    "CreateOpsItemResponse": {
      "properties": {
        "OpsItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID of the OpsItem."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateOpsMetadataRequest": {
      "properties": {
        "Metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataMap"
            },
            {
              "description": "Metadata for a new Application Manager application. "
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataResourceId"
            },
            {
              "description": "A resource ID for a new Application Manager application."
            }
          ]
        }
      },
      "required": [
        "ResourceId"
      ],
      "title": "CreateOpsMetadataRequest",
      "type": "object"
    },
    "CreateOpsMetadataResult": {
      "properties": {
        "OpsMetadataArn": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the OpsMetadata Object or blob created by the call."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreatePatchBaselineRequest": {
      "properties": {
        "ApprovalRules": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchRuleGroup"
            },
            {
              "description": "A set of rules used to include patches in the baseline."
            }
          ]
        },
        "ApprovedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchIdList"
            },
            {
              "description": "<p>A list of explicitly approved patches for the baseline.</p> <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html\">About package name formats for approved and rejected patch lists</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "ApprovedPatchesComplianceLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceLevel"
            },
            {
              "description": "Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED."
            }
          ]
        },
        "ApprovedPatchesEnableNonSecurity": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only."
            }
          ]
        },
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientToken"
            },
            {
              "description": "User-provided idempotency token."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineDescription"
            },
            {
              "description": "A description of the patch baseline."
            }
          ]
        },
        "GlobalFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchFilterGroup"
            },
            {
              "description": "A set of global filters used to include patches in the baseline."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineName"
            },
            {
              "description": "The name of the patch baseline."
            }
          ]
        },
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatingSystem"
            },
            {
              "description": "Defines the operating system the patch baseline applies to. The Default value is WINDOWS."
            }
          ]
        },
        "RejectedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchIdList"
            },
            {
              "description": "<p>A list of explicitly rejected patches for the baseline.</p> <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html\">About package name formats for approved and rejected patch lists</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "RejectedPatchesAction": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchAction"
            },
            {
              "description": "<p>The action for Patch Manager to take on patches included in the RejectedPackages list.</p> <ul> <li> <p> <b>ALLOW_AS_DEPENDENCY</b>: A package in the Rejected patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as <i>InstalledOther</i>. This is the default action if no option is specified.</p> </li> <li> <p> <b>BLOCK</b>: Packages in the RejectedPatches list, and packages that include them as dependencies, are not installed under any circumstances. If a package was installed before it was added to the Rejected patches list, it is considered non-compliant with the patch baseline, and its status is reported as <i>InstalledRejected</i>.</p> </li> </ul>"
            }
          ]
        },
        "Sources": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSourceList"
            },
            {
              "description": "Information about the patches to use to update the instances, including target operating systems and source repositories. Applies to Linux instances only."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a patch baseline to identify the severity level of patches it specifies and the operating system family it applies to. In this case, you could specify the following key name/value pairs:</p> <ul> <li> <p> <code>Key=PatchSeverity,Value=Critical</code> </p> </li> <li> <p> <code>Key=OS,Value=Windows</code> </p> </li> </ul> <note> <p>To add tags to an existing patch baseline, use the <a>AddTagsToResource</a> action.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "CreatePatchBaselineRequest",
      "type": "object"
    },
    "CreatePatchBaselineResult": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the created patch baseline."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateResourceDataSyncRequest": {
      "properties": {
        "S3Destination": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncS3Destination"
            },
            {
              "description": "Amazon S3 configuration details for the sync. This parameter is required if the <code>SyncType</code> value is SyncToDestination."
            }
          ]
        },
        "SyncName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncName"
            },
            {
              "description": "A name for the configuration."
            }
          ]
        },
        "SyncSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncSource"
            },
            {
              "description": "Specify information about the data sources to synchronize. This parameter is required if the <code>SyncType</code> value is SyncFromSource."
            }
          ]
        },
        "SyncType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncType"
            },
            {
              "description": "Specify <code>SyncToDestination</code> to create a resource data sync that synchronizes data to an S3 bucket for Inventory. If you specify <code>SyncToDestination</code>, you must provide a value for <code>S3Destination</code>. Specify <code>SyncFromSource</code> to synchronize data from a single account and multiple Regions, or multiple AWS accounts and Regions, as listed in AWS Organizations for Explorer. If you specify <code>SyncFromSource</code>, you must provide a value for <code>SyncSource</code>. The default value is <code>SyncToDestination</code>."
            }
          ]
        }
      },
      "required": [
        "SyncName"
      ],
      "title": "CreateResourceDataSyncRequest",
      "type": "object"
    },
    "CreateResourceDataSyncResult": {
      "properties": {},
      "type": "object"
    },
    "CreatedDate": {
      "format": "date-time",
      "type": "string"
    },
    "CustomSchemaCountLimitExceededException": {},
    "DateTime": {
      "format": "date-time",
      "type": "string"
    },
    "DefaultBaseline": {
      "type": "boolean"
    },
    "DefaultInstanceName": {
      "maxLength": 256,
      "minLength": 0,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "DeleteActivationRequest": {
      "properties": {
        "ActivationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ActivationId"
            },
            {
              "description": "The ID of the activation that you want to delete."
            }
          ]
        }
      },
      "required": [
        "ActivationId"
      ],
      "title": "DeleteActivationRequest",
      "type": "object"
    },
    "DeleteActivationResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteAssociationRequest": {
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID that you want to delete."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the instance."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        }
      },
      "title": "DeleteAssociationRequest",
      "type": "object"
    },
    "DeleteAssociationResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteDocumentRequest": {
      "properties": {
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the document that you want to delete. If not provided, all versions of the document are deleted."
            }
          ]
        },
        "Force": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Some SSM document types require that you specify a <code>Force</code> flag before you can delete the document. For example, you must specify a <code>Force</code> flag to delete a document of type <code>ApplicationConfigurationSchema</code>. You can restrict access to the <code>Force</code> flag in an AWS Identity and Access Management (IAM) policy."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document."
            }
          ]
        },
        "VersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "The version name of the document that you want to delete. If not provided, all versions of the document are deleted."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DeleteDocumentRequest",
      "type": "object"
    },
    "DeleteDocumentResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteInventoryRequest": {
      "properties": {
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/UUID"
            },
            {
              "description": "User-provided idempotency token."
            }
          ]
        },
        "DryRun": {
          "allOf": [
            {
              "$ref": "#/definitions/DryRun"
            },
            {
              "description": "Use this option to view a summary of the deletion request without deleting any data or the data type. This option is useful when you only want to understand what will be deleted. Once you validate that the data to be deleted is what you intend to delete, you can run the same command without specifying the <code>DryRun</code> option."
            }
          ]
        },
        "SchemaDeleteOption": {
          "allOf": [
            {
              "$ref": "#/definitions/InventorySchemaDeleteOption"
            },
            {
              "description": "<p>Use the <code>SchemaDeleteOption</code> to delete a custom inventory type (schema). If you don't choose this option, the system only deletes existing inventory data associated with the custom inventory type. Choose one of the following options:</p> <p>DisableSchema: If you choose this option, the system ignores all inventory data for the specified version, and any earlier versions. To enable this schema again, you must call the <code>PutInventory</code> action for a version greater than the disabled version.</p> <p>DeleteSchema: This option deletes the specified custom type from the Inventory service. You can recreate the schema later, if you want.</p>"
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeName"
            },
            {
              "description": "The name of the custom inventory type for which you want to delete either all previously collected data or the inventory type itself. "
            }
          ]
        }
      },
      "required": [
        "TypeName"
      ],
      "title": "DeleteInventoryRequest",
      "type": "object"
    },
    "DeleteInventoryResult": {
      "properties": {
        "DeletionId": {
          "allOf": [
            {
              "$ref": "#/definitions/UUID"
            },
            {
              "description": "Every <code>DeleteInventory</code> action is assigned a unique ID. This option returns a unique ID. You can use this ID to query the status of a delete operation. This option is useful for ensuring that a delete operation has completed before you begin other actions. "
            }
          ]
        },
        "DeletionSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryDeletionSummary"
            },
            {
              "description": "A summary of the delete operation. For more information about this summary, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete-summary\">Deleting custom inventory</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeName"
            },
            {
              "description": "The name of the inventory data type specified in the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteMaintenanceWindowRequest": {
      "properties": {
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window to delete."
            }
          ]
        }
      },
      "required": [
        "WindowId"
      ],
      "title": "DeleteMaintenanceWindowRequest",
      "type": "object"
    },
    "DeleteMaintenanceWindowResult": {
      "properties": {
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the deleted maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteOpsMetadataRequest": {
      "properties": {
        "OpsMetadataArn": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of an OpsMetadata Object to delete."
            }
          ]
        }
      },
      "required": [
        "OpsMetadataArn"
      ],
      "title": "DeleteOpsMetadataRequest",
      "type": "object"
    },
    "DeleteOpsMetadataResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteParameterRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterName"
            },
            {
              "description": "The name of the parameter to delete."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DeleteParameterRequest",
      "type": "object"
    },
    "DeleteParameterResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteParametersRequest": {
      "properties": {
        "Names": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterNameList"
            },
            {
              "description": "The names of the parameters to delete."
            }
          ]
        }
      },
      "required": [
        "Names"
      ],
      "title": "DeleteParametersRequest",
      "type": "object"
    },
    "DeleteParametersResult": {
      "properties": {
        "DeletedParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterNameList"
            },
            {
              "description": "The names of the deleted parameters."
            }
          ]
        },
        "InvalidParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterNameList"
            },
            {
              "description": "The names of parameters that weren't deleted because the parameters are not valid."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeletePatchBaselineRequest": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline to delete."
            }
          ]
        }
      },
      "required": [
        "BaselineId"
      ],
      "title": "DeletePatchBaselineRequest",
      "type": "object"
    },
    "DeletePatchBaselineResult": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the deleted patch baseline."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteResourceDataSyncRequest": {
      "properties": {
        "SyncName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncName"
            },
            {
              "description": "The name of the configuration to delete."
            }
          ]
        },
        "SyncType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncType"
            },
            {
              "description": "Specify the type of resource data sync to delete."
            }
          ]
        }
      },
      "required": [
        "SyncName"
      ],
      "title": "DeleteResourceDataSyncRequest",
      "type": "object"
    },
    "DeleteResourceDataSyncResult": {
      "properties": {},
      "type": "object"
    },
    "DeliveryTimedOutCount": {
      "type": "integer"
    },
    "DeregisterManagedInstanceRequest": {
      "properties": {
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ManagedInstanceId"
            },
            {
              "description": "The ID assigned to the managed instance when you registered it using the activation process. "
            }
          ]
        }
      },
      "required": [
        "InstanceId"
      ],
      "title": "DeregisterManagedInstanceRequest",
      "type": "object"
    },
    "DeregisterManagedInstanceResult": {
      "properties": {},
      "type": "object"
    },
    "DeregisterPatchBaselineForPatchGroupRequest": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline to deregister the patch group from."
            }
          ]
        },
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group that should be deregistered from the patch baseline."
            }
          ]
        }
      },
      "required": [
        "BaselineId",
        "PatchGroup"
      ],
      "title": "DeregisterPatchBaselineForPatchGroupRequest",
      "type": "object"
    },
    "DeregisterPatchBaselineForPatchGroupResult": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline the patch group was deregistered from."
            }
          ]
        },
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group deregistered from the patch baseline."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeregisterTargetFromMaintenanceWindowRequest": {
      "properties": {
        "Safe": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The system checks if the target is being referenced by a task. If the target is being referenced, the system returns an error and does not deregister the target from the maintenance window."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window the target should be removed from."
            }
          ]
        },
        "WindowTargetId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTargetId"
            },
            {
              "description": "The ID of the target definition to remove."
            }
          ]
        }
      },
      "required": [
        "WindowId",
        "WindowTargetId"
      ],
      "title": "DeregisterTargetFromMaintenanceWindowRequest",
      "type": "object"
    },
    "DeregisterTargetFromMaintenanceWindowResult": {
      "properties": {
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window the target was removed from."
            }
          ]
        },
        "WindowTargetId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTargetId"
            },
            {
              "description": "The ID of the removed target definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeregisterTaskFromMaintenanceWindowRequest": {
      "properties": {
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window the task should be removed from."
            }
          ]
        },
        "WindowTaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskId"
            },
            {
              "description": "The ID of the task to remove from the maintenance window."
            }
          ]
        }
      },
      "required": [
        "WindowId",
        "WindowTaskId"
      ],
      "title": "DeregisterTaskFromMaintenanceWindowRequest",
      "type": "object"
    },
    "DeregisterTaskFromMaintenanceWindowResult": {
      "properties": {
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window the task was removed from."
            }
          ]
        },
        "WindowTaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskId"
            },
            {
              "description": "The ID of the task removed from the maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeActivationsFilter": {
      "description": "Filter for the DescribeActivation API.",
      "properties": {
        "FilterKey": {
          "allOf": [
            {
              "$ref": "#/definitions/DescribeActivationsFilterKeys"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "FilterValues": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "The filter values."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeActivationsFilterKeys": {
      "enum": [
        "ActivationIds",
        "DefaultInstanceName",
        "IamRole"
      ],
      "type": "string"
    },
    "DescribeActivationsFilterList": {
      "items": {
        "$ref": "#/definitions/DescribeActivationsFilter"
      },
      "type": "array"
    },
    "DescribeActivationsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/DescribeActivationsFilterList"
            },
            {
              "description": "A filter to view information about your activations."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        }
      },
      "title": "DescribeActivationsRequest",
      "type": "object"
    },
    "DescribeActivationsResult": {
      "properties": {
        "ActivationList": {
          "allOf": [
            {
              "$ref": "#/definitions/ActivationList"
            },
            {
              "description": "A list of activations for your AWS account."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeAssociationExecutionTargetsRequest": {
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID that includes the execution for which you want to view details."
            }
          ]
        },
        "ExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionId"
            },
            {
              "description": "The execution ID for which you want to view details."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionTargetsFilterList"
            },
            {
              "description": "<p>Filters for the request. You can specify the following filters and values.</p> <p>Status (EQUAL)</p> <p>ResourceId (EQUAL)</p> <p>ResourceType (EQUAL)</p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        }
      },
      "required": [
        "AssociationId",
        "ExecutionId"
      ],
      "title": "DescribeAssociationExecutionTargetsRequest",
      "type": "object"
    },
    "DescribeAssociationExecutionTargetsResult": {
      "properties": {
        "AssociationExecutionTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionTargetsList"
            },
            {
              "description": "Information about the execution."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeAssociationExecutionsRequest": {
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID for which you want to view execution history details."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionFilterList"
            },
            {
              "description": "<p>Filters for the request. You can specify the following filters and values.</p> <p>ExecutionId (EQUAL)</p> <p>Status (EQUAL)</p> <p>CreatedTime (EQUAL, GREATER_THAN, LESS_THAN)</p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        }
      },
      "required": [
        "AssociationId"
      ],
      "title": "DescribeAssociationExecutionsRequest",
      "type": "object"
    },
    "DescribeAssociationExecutionsResult": {
      "properties": {
        "AssociationExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationExecutionsList"
            },
            {
              "description": "A list of the executions for the specified association ID."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeAssociationRequest": {
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID for which you want information."
            }
          ]
        },
        "AssociationVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersion"
            },
            {
              "description": "Specify the association version to retrieve. To view the latest version, either specify <code>$LATEST</code> for this parameter, or omit this parameter. To view a list of all associations for an instance, use <a>ListAssociations</a>. To get a list of versions for a specific association, use <a>ListAssociationVersions</a>. "
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance ID."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        }
      },
      "title": "DescribeAssociationRequest",
      "type": "object"
    },
    "DescribeAssociationResult": {
      "properties": {
        "AssociationDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationDescription"
            },
            {
              "description": "Information about the association."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeAutomationExecutionsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionFilterList"
            },
            {
              "description": "Filters used to limit the scope of executions that are requested."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "DescribeAutomationExecutionsRequest",
      "type": "object"
    },
    "DescribeAutomationExecutionsResult": {
      "properties": {
        "AutomationExecutionMetadataList": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionMetadataList"
            },
            {
              "description": "The list of details about each automation execution which has occurred which matches the filter specification, if any."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeAutomationStepExecutionsRequest": {
      "properties": {
        "AutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The Automation execution ID for which you want step execution descriptions."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/StepExecutionFilterList"
            },
            {
              "description": "One or more filters to limit the number of step executions returned by the request."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "ReverseOrder": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A boolean that indicates whether to list step executions in reverse order by start time. The default value is false."
            }
          ]
        }
      },
      "required": [
        "AutomationExecutionId"
      ],
      "title": "DescribeAutomationStepExecutionsRequest",
      "type": "object"
    },
    "DescribeAutomationStepExecutionsResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "StepExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/StepExecutionList"
            },
            {
              "description": "A list of details about the current state of all steps that make up an execution."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeAvailablePatchesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchOrchestratorFilterList"
            },
            {
              "description": "Filters used to scope down the returned patches."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchBaselineMaxResults"
            },
            {
              "description": "The maximum number of patches to return (per page)."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "DescribeAvailablePatchesRequest",
      "type": "object"
    },
    "DescribeAvailablePatchesResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "Patches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchList"
            },
            {
              "description": "An array of patches. Each entry in the array is a patch structure."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDocumentPermissionRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document for which you are the owner."
            }
          ]
        },
        "PermissionType": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentPermissionType"
            },
            {
              "description": "The permission type for the document. The permission type can be <i>Share</i>."
            }
          ]
        }
      },
      "required": [
        "Name",
        "PermissionType"
      ],
      "title": "DescribeDocumentPermissionRequest",
      "type": "object"
    },
    "DescribeDocumentPermissionResponse": {
      "properties": {
        "AccountIds": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountIdList"
            },
            {
              "description": "The account IDs that have permission to use this document. The ID can be either an AWS account or <i>All</i>."
            }
          ]
        },
        "AccountSharingInfoList": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountSharingInfoList"
            },
            {
              "description": "A list of AWS accounts where the current document is shared and the version shared with each account."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDocumentRequest": {
      "properties": {
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version for which you want information. Can be a specific version or the default version."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        },
        "VersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "An optional field specifying the version of the artifact associated with the document. For example, \"Release 12, Update 6\". This value is unique across all versions of a document, and cannot be changed."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DescribeDocumentRequest",
      "type": "object"
    },
    "DescribeDocumentResult": {
      "properties": {
        "Document": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentDescription"
            },
            {
              "description": "Information about the Systems Manager document."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeEffectiveInstanceAssociationsRequest": {
      "properties": {
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance ID for which you want to view all associations."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/EffectiveInstanceAssociationMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "required": [
        "InstanceId"
      ],
      "title": "DescribeEffectiveInstanceAssociationsRequest",
      "type": "object"
    },
    "DescribeEffectiveInstanceAssociationsResult": {
      "properties": {
        "Associations": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationList"
            },
            {
              "description": "The associations for the requested instance."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeEffectivePatchesForPatchBaselineRequest": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline to retrieve the effective patches for."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchBaselineMaxResults"
            },
            {
              "description": "The maximum number of patches to return (per page)."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "required": [
        "BaselineId"
      ],
      "title": "DescribeEffectivePatchesForPatchBaselineRequest",
      "type": "object"
    },
    "DescribeEffectivePatchesForPatchBaselineResult": {
      "properties": {
        "EffectivePatches": {
          "allOf": [
            {
              "$ref": "#/definitions/EffectivePatchList"
            },
            {
              "description": "An array of patches and patch status."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeInstanceAssociationsStatusRequest": {
      "properties": {
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance IDs for which you want association status information."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "required": [
        "InstanceId"
      ],
      "title": "DescribeInstanceAssociationsStatusRequest",
      "type": "object"
    },
    "DescribeInstanceAssociationsStatusResult": {
      "properties": {
        "InstanceAssociationStatusInfos": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationStatusInfos"
            },
            {
              "description": "Status information about the association."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeInstanceInformationRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceInformationStringFilterList"
            },
            {
              "description": "One or more filters. Use a filter to return a more specific list of instances. You can filter based on tags applied to EC2 instances. Use this <code>Filters</code> data type instead of <code>InstanceInformationFilterList</code>, which is deprecated."
            }
          ]
        },
        "InstanceInformationFilterList": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceInformationFilterList"
            },
            {
              "description": "<p>This is a legacy method. We recommend that you don't use this method. Instead, use the <code>Filters</code> data type. <code>Filters</code> enables you to return instance information by filtering based on tags applied to managed instances.</p> <note> <p>Attempting to use <code>InstanceInformationFilterList</code> and <code>Filters</code> leads to an exception error. </p> </note>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsEC2Compatible"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results. "
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "DescribeInstanceInformationRequest",
      "type": "object"
    },
    "DescribeInstanceInformationResult": {
      "properties": {
        "InstanceInformationList": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceInformationList"
            },
            {
              "description": "The instance information list."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeInstancePatchStatesForPatchGroupRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancePatchStateFilterList"
            },
            {
              "description": "<p>Each entry in the array is a structure containing:</p> <p>Key (string between 1 and 200 characters)</p> <p> Values (array containing a single string)</p> <p> Type (string \"Equal\", \"NotEqual\", \"LessThan\", \"GreaterThan\")</p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceMaxResults"
            },
            {
              "description": "The maximum number of patches to return (per page)."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group for which the patch state information should be retrieved."
            }
          ]
        }
      },
      "required": [
        "PatchGroup"
      ],
      "title": "DescribeInstancePatchStatesForPatchGroupRequest",
      "type": "object"
    },
    "DescribeInstancePatchStatesForPatchGroupResult": {
      "properties": {
        "InstancePatchStates": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancePatchStatesList"
            },
            {
              "description": "The high-level patch state for the requested instances. "
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeInstancePatchStatesRequest": {
      "properties": {
        "InstanceIds": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceIdList"
            },
            {
              "description": "The ID of the instance whose patch state information should be retrieved."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceMaxResults"
            },
            {
              "description": "The maximum number of instances to return (per page)."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "required": [
        "InstanceIds"
      ],
      "title": "DescribeInstancePatchStatesRequest",
      "type": "object"
    },
    "DescribeInstancePatchStatesResult": {
      "properties": {
        "InstancePatchStates": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancePatchStateList"
            },
            {
              "description": "The high-level patch state for the requested instances."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeInstancePatchesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchOrchestratorFilterList"
            },
            {
              "description": "An array of structures. Each entry in the array is a structure containing a Key, Value combination. Valid values for Key are <code>Classification</code> | <code>KBId</code> | <code>Severity</code> | <code>State</code>."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the instance whose patch state information should be retrieved."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceMaxResults"
            },
            {
              "description": "The maximum number of patches to return (per page)."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "required": [
        "InstanceId"
      ],
      "title": "DescribeInstancePatchesRequest",
      "type": "object"
    },
    "DescribeInstancePatchesResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "Patches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceDataList"
            },
            {
              "description": "<p>Each entry in the array is a structure containing:</p> <p>Title (string)</p> <p>KBId (string)</p> <p>Classification (string)</p> <p>Severity (string)</p> <p>State (string, such as \"INSTALLED\" or \"FAILED\")</p> <p>InstalledTime (DateTime)</p> <p>InstalledBy (string)</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeInventoryDeletionsRequest": {
      "properties": {
        "DeletionId": {
          "allOf": [
            {
              "$ref": "#/definitions/UUID"
            },
            {
              "description": "Specify the delete inventory ID for which you want information. This ID was returned by the <code>DeleteInventory</code> action."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        }
      },
      "title": "DescribeInventoryDeletionsRequest",
      "type": "object"
    },
    "DescribeInventoryDeletionsResult": {
      "properties": {
        "InventoryDeletions": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryDeletionsList"
            },
            {
              "description": "A list of status items for deleted inventory."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionTaskInvocationsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowFilterList"
            },
            {
              "description": "Optional filters used to scope down the returned task invocations. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "TaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskId"
            },
            {
              "description": "The ID of the specific task in the maintenance window task that should be retrieved."
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution the task is part of."
            }
          ]
        }
      },
      "required": [
        "WindowExecutionId",
        "TaskId"
      ],
      "title": "DescribeMaintenanceWindowExecutionTaskInvocationsRequest",
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionTaskInvocationsResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "WindowExecutionTaskInvocationIdentities": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationIdentityList"
            },
            {
              "description": "Information about the task invocation results per invocation."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionTasksRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowFilterList"
            },
            {
              "description": "Optional filters used to scope down the returned tasks. The supported filter key is STATUS with the corresponding values PENDING, IN_PROGRESS, SUCCESS, FAILED, TIMED_OUT, CANCELLING, and CANCELLED. "
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution whose task executions should be retrieved."
            }
          ]
        }
      },
      "required": [
        "WindowExecutionId"
      ],
      "title": "DescribeMaintenanceWindowExecutionTasksRequest",
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionTasksResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "WindowExecutionTaskIdentities": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskIdentityList"
            },
            {
              "description": "Information about the task executions."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowFilterList"
            },
            {
              "description": "<p>Each entry in the array is a structure containing:</p> <p>Key (string, between 1 and 128 characters)</p> <p>Values (array of strings, each string is between 1 and 256 characters)</p> <p>The supported Keys are ExecutedBefore and ExecutedAfter with the value being a date/time string such as 2016-11-04T05:00:00Z.</p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window whose executions should be retrieved."
            }
          ]
        }
      },
      "required": [
        "WindowId"
      ],
      "title": "DescribeMaintenanceWindowExecutionsRequest",
      "type": "object"
    },
    "DescribeMaintenanceWindowExecutionsResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "WindowExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionList"
            },
            {
              "description": "Information about the maintenance window executions."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowScheduleRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchOrchestratorFilterList"
            },
            {
              "description": "Filters used to limit the range of results. For example, you can limit maintenance window executions to only those scheduled before or after a certain date and time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowSearchMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowResourceType"
            },
            {
              "description": "The type of resource you want to retrieve information about. For example, \"INSTANCE\"."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The instance ID or key/value pair to retrieve information about."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window to retrieve information about."
            }
          ]
        }
      },
      "title": "DescribeMaintenanceWindowScheduleRequest",
      "type": "object"
    },
    "DescribeMaintenanceWindowScheduleResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You use this token in the next call.)"
            }
          ]
        },
        "ScheduledWindowExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/ScheduledWindowExecutionList"
            },
            {
              "description": "Information about maintenance window executions scheduled for the specified time range."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowTargetsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowFilterList"
            },
            {
              "description": "Optional filters that can be used to narrow down the scope of the returned window targets. The supported filter keys are Type, WindowTargetId and OwnerInformation."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window whose targets should be retrieved."
            }
          ]
        }
      },
      "required": [
        "WindowId"
      ],
      "title": "DescribeMaintenanceWindowTargetsRequest",
      "type": "object"
    },
    "DescribeMaintenanceWindowTargetsResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTargetList"
            },
            {
              "description": "Information about the targets in the maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowTasksRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowFilterList"
            },
            {
              "description": "Optional filters used to narrow down the scope of the returned tasks. The supported filter keys are WindowTaskId, TaskArn, Priority, and TaskType."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window whose tasks should be retrieved."
            }
          ]
        }
      },
      "required": [
        "WindowId"
      ],
      "title": "DescribeMaintenanceWindowTasksRequest",
      "type": "object"
    },
    "DescribeMaintenanceWindowTasksResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "Tasks": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskList"
            },
            {
              "description": "Information about the tasks in the maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowsForTargetRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowSearchMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowResourceType"
            },
            {
              "description": "The type of resource you want to retrieve information about. For example, \"INSTANCE\"."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The instance ID or key/value pair to retrieve information about."
            }
          ]
        }
      },
      "required": [
        "Targets",
        "ResourceType"
      ],
      "title": "DescribeMaintenanceWindowsForTargetRequest",
      "type": "object"
    },
    "DescribeMaintenanceWindowsForTargetResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You use this token in the next call.)"
            }
          ]
        },
        "WindowIdentities": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowsForTargetList"
            },
            {
              "description": "Information about the maintenance window targets and tasks an instance is associated with."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMaintenanceWindowsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowFilterList"
            },
            {
              "description": "Optional filters used to narrow down the scope of the returned maintenance windows. Supported filter keys are <b>Name</b> and <b>Enabled</b>."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "DescribeMaintenanceWindowsRequest",
      "type": "object"
    },
    "DescribeMaintenanceWindowsResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "WindowIdentities": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowIdentityList"
            },
            {
              "description": "Information about the maintenance windows."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeOpsItemsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results."
            }
          ]
        },
        "OpsItemFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemFilters"
            },
            {
              "description": "<p>One or more filters to limit the response.</p> <ul> <li> <p>Key: CreatedTime</p> <p>Operations: GreaterThan, LessThan</p> </li> <li> <p>Key: LastModifiedBy</p> <p>Operations: Contains, Equals</p> </li> <li> <p>Key: LastModifiedTime</p> <p>Operations: GreaterThan, LessThan</p> </li> <li> <p>Key: Priority</p> <p>Operations: Equals</p> </li> <li> <p>Key: Source</p> <p>Operations: Contains, Equals</p> </li> <li> <p>Key: Status</p> <p>Operations: Equals</p> </li> <li> <p>Key: Title</p> <p>Operations: Contains</p> </li> <li> <p>Key: OperationalData*</p> <p>Operations: Equals</p> </li> <li> <p>Key: OperationalDataKey</p> <p>Operations: Equals</p> </li> <li> <p>Key: OperationalDataValue</p> <p>Operations: Equals, Contains</p> </li> <li> <p>Key: OpsItemId</p> <p>Operations: Equals</p> </li> <li> <p>Key: ResourceId</p> <p>Operations: Contains</p> </li> <li> <p>Key: AutomationId</p> <p>Operations: Equals</p> </li> </ul> <p>*If you filter the response by using the OperationalData operator, specify a key-value pair by using the following JSON format: {\"key\":\"key_name\",\"value\":\"a_value\"}</p>"
            }
          ]
        }
      },
      "title": "DescribeOpsItemsRequest",
      "type": "object"
    },
    "DescribeOpsItemsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        },
        "OpsItemSummaries": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemSummaries"
            },
            {
              "description": "A list of OpsItems."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeParametersRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersFilterList"
            },
            {
              "description": "This data type is deprecated. Instead, use <code>ParameterFilters</code>."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "ParameterFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterStringFilterList"
            },
            {
              "description": "Filters to limit the request results."
            }
          ]
        }
      },
      "title": "DescribeParametersRequest",
      "type": "object"
    },
    "DescribeParametersResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterMetadataList"
            },
            {
              "description": "Parameters returned by the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribePatchBaselinesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchOrchestratorFilterList"
            },
            {
              "description": "<p>Each element in the array is a structure containing: </p> <p>Key: (string, \"NAME_PREFIX\" or \"OWNER\")</p> <p>Value: (array of strings, exactly 1 entry, between 1 and 255 characters)</p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchBaselineMaxResults"
            },
            {
              "description": "The maximum number of patch baselines to return (per page)."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "DescribePatchBaselinesRequest",
      "type": "object"
    },
    "DescribePatchBaselinesResult": {
      "properties": {
        "BaselineIdentities": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchBaselineIdentityList"
            },
            {
              "description": "An array of PatchBaselineIdentity elements."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribePatchGroupStateRequest": {
      "properties": {
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group whose patch snapshot should be retrieved."
            }
          ]
        }
      },
      "required": [
        "PatchGroup"
      ],
      "title": "DescribePatchGroupStateRequest",
      "type": "object"
    },
    "DescribePatchGroupStateResult": {
      "properties": {
        "Instances": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of instances in the patch group."
            }
          ]
        },
        "InstancesWithFailedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of instances with patches from the patch baseline that failed to install."
            }
          ]
        },
        "InstancesWithInstalledOtherPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of instances with patches installed that aren't defined in the patch baseline."
            }
          ]
        },
        "InstancesWithInstalledPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of instances with installed patches."
            }
          ]
        },
        "InstancesWithInstalledPendingRebootPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancesCount"
            },
            {
              "description": "The number of instances with patches installed by Patch Manager that have not been rebooted after the patch installation. The status of these instances is NON_COMPLIANT."
            }
          ]
        },
        "InstancesWithInstalledRejectedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancesCount"
            },
            {
              "description": "<p>The number of instances with patches installed that are specified in a RejectedPatches list. Patches with a status of <i>INSTALLED_REJECTED</i> were typically installed before they were added to a RejectedPatches list.</p> <note> <p>If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction, the value of InstancesWithInstalledRejectedPatches will always be 0 (zero).</p> </note>"
            }
          ]
        },
        "InstancesWithMissingPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of instances with missing patches from the patch baseline."
            }
          ]
        },
        "InstancesWithNotApplicablePatches": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of instances with patches that aren't applicable."
            }
          ]
        },
        "InstancesWithUnreportedNotApplicablePatches": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of instances with <code>NotApplicable</code> patches beyond the supported limit, which are not reported by name to Systems Manager Inventory."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribePatchGroupsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchOrchestratorFilterList"
            },
            {
              "description": "<p>One or more filters. Use a filter to return a more specific list of results.</p> <p>For <code>DescribePatchGroups</code>,valid filter keys include the following:</p> <ul> <li> <p> <code>NAME_PREFIX</code>: The name of the patch group. Wildcards (*) are accepted.</p> </li> <li> <p> <code>OPERATING_SYSTEM</code>: The supported operating system type to return results for. For valid operating system values, see <a>GetDefaultPatchBaselineRequest$OperatingSystem</a> in <a>CreatePatchBaseline</a>.</p> <p>Examples:</p> <ul> <li> <p> <code>--filters Key=NAME_PREFIX,Values=MyPatchGroup*</code> </p> </li> <li> <p> <code>--filters Key=OPERATING_SYSTEM,Values=AMAZON_LINUX_2</code> </p> </li> </ul> </li> </ul>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchBaselineMaxResults"
            },
            {
              "description": "The maximum number of patch groups to return (per page)."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "DescribePatchGroupsRequest",
      "type": "object"
    },
    "DescribePatchGroupsResult": {
      "properties": {
        "Mappings": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroupPatchBaselineMappingList"
            },
            {
              "description": "<p>Each entry in the array contains:</p> <p>PatchGroup: string (between 1 and 256 characters, Regex: ^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$)</p> <p>PatchBaselineIdentity: A PatchBaselineIdentity element. </p>"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribePatchPropertiesRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatingSystem"
            },
            {
              "description": "The operating system type for which to list patches."
            }
          ]
        },
        "PatchSet": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSet"
            },
            {
              "description": "Indicates whether to list patches for the Windows operating system or for Microsoft applications. Not applicable for the Linux or macOS operating systems."
            }
          ]
        },
        "Property": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchProperty"
            },
            {
              "description": "The patch property for which you want to view patch details. "
            }
          ]
        }
      },
      "required": [
        "OperatingSystem",
        "Property"
      ],
      "title": "DescribePatchPropertiesRequest",
      "type": "object"
    },
    "DescribePatchPropertiesResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You use this token in the next call.)"
            }
          ]
        },
        "Properties": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchPropertiesList"
            },
            {
              "description": "A list of the properties for patches matching the filter request parameters."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeSessionsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionFilterList"
            },
            {
              "description": "One or more filters to limit the type of sessions returned by the request."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionState"
            },
            {
              "description": "The session status to retrieve a list of sessions for. For example, \"Active\"."
            }
          ]
        }
      },
      "required": [
        "State"
      ],
      "title": "DescribeSessionsRequest",
      "type": "object"
    },
    "DescribeSessionsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "Sessions": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionList"
            },
            {
              "description": "A list of sessions meeting the request parameters."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescriptionInDocument": {
      "type": "string"
    },
    "DocumentARN": {
      "pattern": "^[a-zA-Z0-9_\\-.:/]{3,128}$",
      "type": "string"
    },
    "DocumentAlreadyExists": {},
    "DocumentAuthor": {
      "type": "string"
    },
    "DocumentContent": {
      "minLength": 1,
      "type": "string"
    },
    "DocumentDefaultVersionDescription": {
      "description": "A default version of a document.",
      "properties": {
        "DefaultVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The default version of the document."
            }
          ]
        },
        "DefaultVersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "The default version of the artifact associated with the document."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentDescription": {
      "description": "Describes a Systems Manager document. ",
      "properties": {
        "ApprovedVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the document currently approved for use in the organization."
            }
          ]
        },
        "AttachmentsInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentInformationList"
            },
            {
              "description": "Details about the document attachments, including names, locations, sizes, and so on."
            }
          ]
        },
        "Author": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentAuthor"
            },
            {
              "description": "The user in your organization who created the document."
            }
          ]
        },
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date when the document was created."
            }
          ]
        },
        "DefaultVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The default version."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionInDocument"
            },
            {
              "description": "A description of the document. "
            }
          ]
        },
        "DocumentFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFormat"
            },
            {
              "description": "The document format, either JSON or YAML."
            }
          ]
        },
        "DocumentType": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentType"
            },
            {
              "description": "The type of document."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version."
            }
          ]
        },
        "Hash": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentHash"
            },
            {
              "description": "<p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note> <p>Sha1 hashes have been deprecated.</p> </note>"
            }
          ]
        },
        "HashType": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentHashType"
            },
            {
              "description": "<p>The hash type of the document. Valid values include <code>Sha256</code> or <code>Sha1</code>.</p> <note> <p>Sha1 hashes have been deprecated.</p> </note>"
            }
          ]
        },
        "LatestVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The latest version of the document."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        },
        "Owner": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentOwner"
            },
            {
              "description": "The AWS user account that created the document."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentParameterList"
            },
            {
              "description": "A description of the parameters for a document."
            }
          ]
        },
        "PendingReviewVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the document that is currently under review."
            }
          ]
        },
        "PlatformTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/PlatformTypeList"
            },
            {
              "description": "The list of OS platforms compatible with this Systems Manager document. "
            }
          ]
        },
        "Requires": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentRequiresList"
            },
            {
              "description": "A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document."
            }
          ]
        },
        "ReviewInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/ReviewInformationList"
            },
            {
              "description": "Details about the review of a document."
            }
          ]
        },
        "ReviewStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ReviewStatus"
            },
            {
              "description": "The current status of the review."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentSchemaVersion"
            },
            {
              "description": "The schema version."
            }
          ]
        },
        "Sha1": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentSha1"
            },
            {
              "description": "The SHA1 hash of the document, which you can use for verification."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentStatus"
            },
            {
              "description": "The status of the Systems Manager document."
            }
          ]
        },
        "StatusInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentStatusInformation"
            },
            {
              "description": "A message returned by AWS Systems Manager that explains the <code>Status</code> value. For example, a <code>Failed</code> status might be explained by the <code>StatusInformation</code> message, \"The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct.\""
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags, or metadata, that have been applied to the document."
            }
          ]
        },
        "TargetType": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetType"
            },
            {
              "description": "The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html\">AWS resource and property types reference</a> in the <i>AWS CloudFormation User Guide</i>. "
            }
          ]
        },
        "VersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "The version of the artifact associated with the document."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentFilter": {
      "description": "This data type is deprecated. Instead, use <a>DocumentKeyValuesFilter</a>.",
      "properties": {
        "key": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFilterKey"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFilterValue"
            },
            {
              "description": "The value of the filter."
            }
          ]
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "DocumentFilterKey": {
      "enum": [
        "Name",
        "Owner",
        "PlatformTypes",
        "DocumentType"
      ],
      "type": "string"
    },
    "DocumentFilterList": {
      "items": {
        "$ref": "#/definitions/DocumentFilter"
      },
      "minItems": 1,
      "type": "array"
    },
    "DocumentFilterValue": {
      "minLength": 1,
      "type": "string"
    },
    "DocumentFormat": {
      "enum": [
        "YAML",
        "JSON",
        "TEXT"
      ],
      "type": "string"
    },
    "DocumentHash": {
      "maxLength": 256,
      "type": "string"
    },
    "DocumentHashType": {
      "enum": [
        "Sha256",
        "Sha1"
      ],
      "type": "string"
    },
    "DocumentIdentifier": {
      "description": "Describes the name of a Systems Manager document.",
      "properties": {
        "Author": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentAuthor"
            },
            {
              "description": "The user in your organization who created the document."
            }
          ]
        },
        "DocumentFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFormat"
            },
            {
              "description": "The document format, either JSON or YAML."
            }
          ]
        },
        "DocumentType": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentType"
            },
            {
              "description": "The document type."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        },
        "Owner": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentOwner"
            },
            {
              "description": "The AWS user account that created the document."
            }
          ]
        },
        "PlatformTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/PlatformTypeList"
            },
            {
              "description": "The operating system platform. "
            }
          ]
        },
        "Requires": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentRequiresList"
            },
            {
              "description": "A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document."
            }
          ]
        },
        "ReviewStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ReviewStatus"
            },
            {
              "description": "The current status of a document review."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentSchemaVersion"
            },
            {
              "description": "The schema version."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags, or metadata, that have been applied to the document."
            }
          ]
        },
        "TargetType": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetType"
            },
            {
              "description": "The target type which defines the kinds of resources the document can run on. For example, /AWS::EC2::Instance. For a list of valid resource types, see <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html\">AWS resource and property types reference</a> in the <i>AWS CloudFormation User Guide</i>. "
            }
          ]
        },
        "VersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "An optional field specifying the version of the artifact associated with the document. For example, \"Release 12, Update 6\". This value is unique across all versions of a document, and cannot be changed."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentIdentifierList": {
      "items": {
        "$ref": "#/definitions/DocumentIdentifier"
      },
      "type": "array"
    },
    "DocumentKeyValuesFilter": {
      "description": "<p>One or more filters. Use a filter to return a more specific list of documents.</p> <p>For keys, you can specify one or more tags that have been applied to a document. </p> <p>You can also use AWS-provided keys, some of which have specific allowed values. These keys and their associated values are as follows:</p> <dl> <dt>DocumentType</dt> <dd> <ul> <li> <p>ApplicationConfiguration</p> </li> <li> <p>ApplicationConfigurationSchema</p> </li> <li> <p>Automation</p> </li> <li> <p>ChangeCalendar</p> </li> <li> <p>Command</p> </li> <li> <p>DeploymentStrategy</p> </li> <li> <p>Package</p> </li> <li> <p>Policy</p> </li> <li> <p>Session</p> </li> </ul> </dd> <dt>Owner</dt> <dd> <p>Note that only one <code>Owner</code> can be specified in a request. For example: <code>Key=Owner,Values=Self</code>.</p> <ul> <li> <p>Amazon</p> </li> <li> <p>Private</p> </li> <li> <p>Public</p> </li> <li> <p>Self</p> </li> <li> <p>ThirdParty</p> </li> </ul> </dd> <dt>PlatformTypes</dt> <dd> <ul> <li> <p>Linux</p> </li> <li> <p>Windows</p> </li> </ul> </dd> </dl> <p> <code>Name</code> is another AWS-provided key. If you use <code>Name</code> as a key, you can use a name prefix to return a list of documents. For example, in the AWS CLI, to return a list of all documents that begin with <code>Te</code>, run the following command:</p> <p> <code>aws ssm list-documents --filters Key=Name,Values=Te</code> </p> <p>You can also use the <code>TargetType</code> AWS-provided key. For a list of valid resource type values that can be used with this key, see <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html\">AWS resource and property types reference</a> in the <i>AWS CloudFormation User Guide</i>.</p> <p>If you specify more than two keys, only documents that are identified by all the tags are returned in the results. If you specify more than two values for a key, documents that are identified by any of the values are returned in the results.</p> <p>To specify a custom key and value pair, use the format <code>Key=tag:tagName,Values=valueName</code>.</p> <p>For example, if you created a key called region and are using the AWS CLI to call the <code>list-documents</code> command: </p> <p> <code>aws ssm list-documents --filters Key=tag:region,Values=east,west Key=Owner,Values=Self</code> </p>",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentKeyValuesFilterKey"
            },
            {
              "description": "The name of the filter key."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentKeyValuesFilterValues"
            },
            {
              "description": "The value for the filter key."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentKeyValuesFilterKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "DocumentKeyValuesFilterList": {
      "items": {
        "$ref": "#/definitions/DocumentKeyValuesFilter"
      },
      "maxItems": 6,
      "minItems": 0,
      "type": "array"
    },
    "DocumentKeyValuesFilterValue": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "DocumentKeyValuesFilterValues": {
      "items": {
        "$ref": "#/definitions/DocumentKeyValuesFilterValue"
      },
      "type": "array"
    },
    "DocumentLimitExceeded": {},
    "DocumentMetadataEnum": {
      "enum": [
        "DocumentReviews"
      ],
      "type": "string"
    },
    "DocumentMetadataResponseInfo": {
      "description": "Details about the response to a document review request.",
      "properties": {
        "ReviewerResponse": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentReviewerResponseList"
            },
            {
              "description": "Details about a reviewer's response to a document review request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentName": {
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "DocumentOwner": {
      "type": "string"
    },
    "DocumentParameter": {
      "description": "Parameters specified in a System Manager document that run on the server when the command is run. ",
      "properties": {
        "DefaultValue": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentParameterDefaultValue"
            },
            {
              "description": "If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentParameterDescrption"
            },
            {
              "description": "A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentParameterName"
            },
            {
              "description": "The name of the parameter."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentParameterType"
            },
            {
              "description": "The type of parameter. The type can be either String or StringList."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentParameterDefaultValue": {
      "type": "string"
    },
    "DocumentParameterDescrption": {
      "type": "string"
    },
    "DocumentParameterList": {
      "items": {
        "$ref": "#/definitions/DocumentParameter"
      },
      "type": "array"
    },
    "DocumentParameterName": {
      "type": "string"
    },
    "DocumentParameterType": {
      "enum": [
        "String",
        "StringList"
      ],
      "type": "string"
    },
    "DocumentPermissionLimit": {},
    "DocumentPermissionType": {
      "enum": [
        "Share"
      ],
      "type": "string"
    },
    "DocumentRequires": {
      "description": "An SSM document required by the current document.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the required SSM document. The name can be an Amazon Resource Name (ARN)."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version required by the current document."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DocumentRequiresList": {
      "items": {
        "$ref": "#/definitions/DocumentRequires"
      },
      "minItems": 1,
      "type": "array"
    },
    "DocumentReviewAction": {
      "enum": [
        "SendForReview",
        "UpdateReview",
        "Approve",
        "Reject"
      ],
      "type": "string"
    },
    "DocumentReviewComment": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "^(?!\\s*$).+",
      "type": "string"
    },
    "DocumentReviewCommentList": {
      "items": {
        "$ref": "#/definitions/DocumentReviewCommentSource"
      },
      "maxItems": 1,
      "minItems": 0,
      "type": "array"
    },
    "DocumentReviewCommentSource": {
      "description": "Information about comments added to a document review request.",
      "properties": {
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentReviewComment"
            },
            {
              "description": "The content of a comment entered by a user who requests a review of a new document version, or who reviews the new version."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentReviewCommentType"
            },
            {
              "description": "The type of information added to a review request. Currently, only the value <code>Comment</code> is supported."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentReviewCommentType": {
      "enum": [
        "Comment"
      ],
      "type": "string"
    },
    "DocumentReviewerResponseList": {
      "items": {
        "$ref": "#/definitions/DocumentReviewerResponseSource"
      },
      "type": "array"
    },
    "DocumentReviewerResponseSource": {
      "description": "Information about a reviewer's response to a document review request.",
      "properties": {
        "Comment": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentReviewCommentList"
            },
            {
              "description": "The comment entered by a reviewer as part of their document review response."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time that a reviewer entered a response to a document review request."
            }
          ]
        },
        "ReviewStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ReviewStatus"
            },
            {
              "description": "<p>The current review status of a new custom SSM document created by a member of your organization, or of the latest version of an existing SSM document.</p> <p>Only one version of a document can be in the APPROVED state at a time. When a new version is approved, the status of the previous version changes to REJECTED.</p> <p>Only one version of a document can be in review, or PENDING, at a time.</p>"
            }
          ]
        },
        "Reviewer": {
          "allOf": [
            {
              "$ref": "#/definitions/Reviewer"
            },
            {
              "description": "The user in your organization assigned to review a document request."
            }
          ]
        },
        "UpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time that a reviewer last updated a response to a document review request."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentReviews": {
      "description": "Information about a document approval review.",
      "properties": {
        "Action": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentReviewAction"
            },
            {
              "description": "The action to take on a document approval review request."
            }
          ]
        },
        "Comment": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentReviewCommentList"
            },
            {
              "description": "A comment entered by a user in your organization about the document review request."
            }
          ]
        }
      },
      "required": [
        "Action"
      ],
      "type": "object"
    },
    "DocumentSchemaVersion": {
      "pattern": "([0-9]+)\\.([0-9]+)",
      "type": "string"
    },
    "DocumentSha1": {
      "type": "string"
    },
    "DocumentStatus": {
      "description": "The status of a document.",
      "enum": [
        "Creating",
        "Active",
        "Updating",
        "Deleting",
        "Failed"
      ],
      "type": "string"
    },
    "DocumentStatusInformation": {
      "type": "string"
    },
    "DocumentType": {
      "enum": [
        "Command",
        "Policy",
        "Automation",
        "Session",
        "Package",
        "ApplicationConfiguration",
        "ApplicationConfigurationSchema",
        "DeploymentStrategy",
        "ChangeCalendar",
        "Automation.ChangeTemplate"
      ],
      "type": "string"
    },
    "DocumentVersion": {
      "pattern": "([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)",
      "type": "string"
    },
    "DocumentVersionInfo": {
      "description": "Version information about the document.",
      "properties": {
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the document was created."
            }
          ]
        },
        "DocumentFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFormat"
            },
            {
              "description": "The document format, either JSON or YAML."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version."
            }
          ]
        },
        "IsDefaultVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "An identifier for the default version of the document."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The document name."
            }
          ]
        },
        "ReviewStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ReviewStatus"
            },
            {
              "description": "The current status of the approval review for the latest version of the document."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentStatus"
            },
            {
              "description": "The status of the Systems Manager document, such as <code>Creating</code>, <code>Active</code>, <code>Failed</code>, and <code>Deleting</code>."
            }
          ]
        },
        "StatusInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentStatusInformation"
            },
            {
              "description": "A message returned by AWS Systems Manager that explains the <code>Status</code> value. For example, a <code>Failed</code> status might be explained by the <code>StatusInformation</code> message, \"The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct.\""
            }
          ]
        },
        "VersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "The version of the artifact associated with the document. For example, \"Release 12, Update 6\". This value is unique across all versions of a document, and cannot be changed."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentVersionLimitExceeded": {},
    "DocumentVersionList": {
      "items": {
        "$ref": "#/definitions/DocumentVersionInfo"
      },
      "minItems": 1,
      "type": "array"
    },
    "DocumentVersionName": {
      "pattern": "^[a-zA-Z0-9_\\-.]{1,128}$",
      "type": "string"
    },
    "DocumentVersionNumber": {
      "pattern": "(^[1-9][0-9]*$)",
      "type": "string"
    },
    "DoesNotExistException": {},
    "DryRun": {
      "type": "boolean"
    },
    "DuplicateDocumentContent": {},
    "DuplicateDocumentVersionName": {},
    "DuplicateInstanceId": {},
    "EffectiveInstanceAssociationMaxResults": {
      "maximum": 5,
      "minimum": 1,
      "type": "integer"
    },
    "EffectivePatch": {
      "description": "The EffectivePatch structure defines metadata about a patch along with the approval state of the patch in a particular patch baseline. The approval state includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved.",
      "properties": {
        "Patch": {
          "allOf": [
            {
              "$ref": "#/definitions/Patch"
            },
            {
              "description": "Provides metadata for a patch, including information such as the KB ID, severity, classification and a URL for where more information can be obtained about the patch."
            }
          ]
        },
        "PatchStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchStatus"
            },
            {
              "description": "The status of the patch in a patch baseline. This includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved."
            }
          ]
        }
      },
      "type": "object"
    },
    "EffectivePatchList": {
      "items": {
        "$ref": "#/definitions/EffectivePatch"
      },
      "type": "array"
    },
    "ErrorCount": {
      "type": "integer"
    },
    "ExecutionMode": {
      "enum": [
        "Auto",
        "Interactive"
      ],
      "type": "string"
    },
    "ExecutionRoleName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[\\w+=,.@-]+",
      "type": "string"
    },
    "ExpirationDate": {
      "format": "date-time",
      "type": "string"
    },
    "FailedCreateAssociation": {
      "description": "Describes a failed association.",
      "properties": {
        "Entry": {
          "allOf": [
            {
              "$ref": "#/definitions/CreateAssociationBatchRequestEntry"
            },
            {
              "description": "The association."
            }
          ]
        },
        "Fault": {
          "allOf": [
            {
              "$ref": "#/definitions/Fault"
            },
            {
              "description": "The source of the failure."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchErrorMessage"
            },
            {
              "description": "A description of the failure."
            }
          ]
        }
      },
      "type": "object"
    },
    "FailedCreateAssociationList": {
      "items": {
        "$ref": "#/definitions/FailedCreateAssociation"
      },
      "type": "array"
    },
    "FailureDetails": {
      "description": "Information about an Automation failure.",
      "properties": {
        "Details": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "Detailed information about the Automation step failure."
            }
          ]
        },
        "FailureStage": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The stage of the Automation execution when the failure occurred. The stages include the following: InputValidation, PreVerification, Invocation, PostVerification."
            }
          ]
        },
        "FailureType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The type of Automation failure. Failure types include the following: Action, Permission, Throttling, Verification, Internal."
            }
          ]
        }
      },
      "type": "object"
    },
    "Fault": {
      "enum": [
        "Client",
        "Server",
        "Unknown"
      ],
      "type": "string"
    },
    "FeatureNotAvailableException": {},
    "GetAutomationExecutionRequest": {
      "properties": {
        "AutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The unique identifier for an existing automation execution to examine. The execution ID is returned by StartAutomationExecution when the execution of an Automation document is initiated."
            }
          ]
        }
      },
      "required": [
        "AutomationExecutionId"
      ],
      "title": "GetAutomationExecutionRequest",
      "type": "object"
    },
    "GetAutomationExecutionResult": {
      "properties": {
        "AutomationExecution": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecution"
            },
            {
              "description": "Detailed information about the current state of an automation execution."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetCalendarStateRequest": {
      "properties": {
        "AtTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601String"
            },
            {
              "description": "(Optional) The specific time for which you want to get calendar state information, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format. If you do not add <code>AtTime</code>, the current time is assumed."
            }
          ]
        },
        "CalendarNames": {
          "allOf": [
            {
              "$ref": "#/definitions/CalendarNameOrARNList"
            },
            {
              "description": "The names or Amazon Resource Names (ARNs) of the Systems Manager documents that represent the calendar entries for which you want to get the state."
            }
          ]
        }
      },
      "required": [
        "CalendarNames"
      ],
      "title": "GetCalendarStateRequest",
      "type": "object"
    },
    "GetCalendarStateResponse": {
      "properties": {
        "AtTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601String"
            },
            {
              "description": "The time, as an <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> string, that you specified in your command. If you did not specify a time, <code>GetCalendarState</code> uses the current time."
            }
          ]
        },
        "NextTransitionTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601String"
            },
            {
              "description": "The time, as an <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> string, that the calendar state will change. If the current calendar state is <code>OPEN</code>, <code>NextTransitionTime</code> indicates when the calendar state changes to <code>CLOSED</code>, and vice-versa."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/CalendarState"
            },
            {
              "description": "The state of the calendar. An <code>OPEN</code> calendar indicates that actions are allowed to proceed, and a <code>CLOSED</code> calendar indicates that actions are not allowed to proceed."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetCommandInvocationRequest": {
      "properties": {
        "CommandId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandId"
            },
            {
              "description": "(Required) The parent command ID of the invocation plugin."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "(Required) The ID of the managed instance targeted by the command. A managed instance can be an EC2 instance or an instance in your hybrid environment that is configured for Systems Manager."
            }
          ]
        },
        "PluginName": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandPluginName"
            },
            {
              "description": "<p>(Optional) The name of the plugin for which you want detailed results. If the document contains only one plugin, the name can be omitted and the details will be returned.</p> <p>Plugin names are also referred to as step names in Systems Manager documents.</p>"
            }
          ]
        }
      },
      "required": [
        "CommandId",
        "InstanceId"
      ],
      "title": "GetCommandInvocationRequest",
      "type": "object"
    },
    "GetCommandInvocationResult": {
      "properties": {
        "CloudWatchOutputConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudWatchOutputConfig"
            },
            {
              "description": "CloudWatch Logs information where Systems Manager sent the command output."
            }
          ]
        },
        "CommandId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandId"
            },
            {
              "description": "The parent command ID of the invocation plugin."
            }
          ]
        },
        "Comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "The comment text for the command."
            }
          ]
        },
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document that was run. For example, AWS-RunShellScript."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The SSM document version used in the request."
            }
          ]
        },
        "ExecutionElapsedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/StringDateTime"
            },
            {
              "description": "Duration since ExecutionStartDateTime."
            }
          ]
        },
        "ExecutionEndDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/StringDateTime"
            },
            {
              "description": "<p>The date and time the plugin was finished running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the <code>InvokedAfter</code> filter.</p> <p> <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code> </p> <p>If the plugin has not started to run, the string is empty.</p>"
            }
          ]
        },
        "ExecutionStartDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/StringDateTime"
            },
            {
              "description": "<p>The date and time the plugin started running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses the <code>InvokedBefore</code> filter.</p> <p> <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code> </p> <p>If the plugin has not started to run, the string is empty.</p>"
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the managed instance targeted by the command. A managed instance can be an EC2 instance or an instance in your hybrid environment that is configured for Systems Manager."
            }
          ]
        },
        "PluginName": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandPluginName"
            },
            {
              "description": "The name of the plugin for which you want detailed results. For example, aws:RunShellScript is a plugin."
            }
          ]
        },
        "ResponseCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResponseCode"
            },
            {
              "description": "The error level response code for the plugin script. If the response code is -1, then the command has not started running on the instance, or it was not received by the instance."
            }
          ]
        },
        "StandardErrorContent": {
          "allOf": [
            {
              "$ref": "#/definitions/StandardErrorContent"
            },
            {
              "description": "The first 8,000 characters written by the plugin to stderr. If the command has not finished running, then this string is empty."
            }
          ]
        },
        "StandardErrorUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/Url"
            },
            {
              "description": "The URL for the complete text written by the plugin to stderr. If the command has not finished running, then this string is empty."
            }
          ]
        },
        "StandardOutputContent": {
          "allOf": [
            {
              "$ref": "#/definitions/StandardOutputContent"
            },
            {
              "description": "The first 24,000 characters written by the plugin to stdout. If the command has not finished running, if ExecutionStatus is neither Succeeded nor Failed, then this string is empty."
            }
          ]
        },
        "StandardOutputUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/Url"
            },
            {
              "description": "The URL for the complete text written by the plugin to stdout in Amazon S3. If an S3 bucket was not specified, then this string is empty."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandInvocationStatus"
            },
            {
              "description": "The status of this invocation plugin. This status can be different than StatusDetails."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusDetails"
            },
            {
              "description": "<p>A detailed status of the command execution for an invocation. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html\">Understanding command statuses</a> in the <i>AWS Systems Manager User Guide</i>. StatusDetails can be one of the following values:</p> <ul> <li> <p>Pending: The command has not been sent to the instance.</p> </li> <li> <p>In Progress: The command has been sent to the instance but has not reached a terminal state.</p> </li> <li> <p>Delayed: The system attempted to send the command to the target, but the target was not available. The instance might not be available because of network issues, because the instance was stopped, or for similar reasons. The system will try to send the command again.</p> </li> <li> <p>Success: The command or plugin ran successfully. This is a terminal state.</p> </li> <li> <p>Delivery Timed Out: The command was not delivered to the instance before the delivery timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Execution Timed Out: The command started to run on the instance, but the execution was not complete before the timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Failed: The command wasn't run successfully on the instance. For a plugin, this indicates that the result code was not zero. For a command invocation, this indicates that the result code for one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.</p> </li> <li> <p>Canceled: The command was terminated before it was completed. This is a terminal state.</p> </li> <li> <p>Undeliverable: The command can't be delivered to the instance. The instance might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li> <li> <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "GetConnectionStatusRequest": {
      "properties": {
        "Target": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionTarget"
            },
            {
              "description": "The ID of the instance."
            }
          ]
        }
      },
      "required": [
        "Target"
      ],
      "title": "GetConnectionStatusRequest",
      "type": "object"
    },
    "GetConnectionStatusResponse": {
      "properties": {
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionStatus"
            },
            {
              "description": "The status of the connection to the instance. For example, 'Connected' or 'Not Connected'."
            }
          ]
        },
        "Target": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionTarget"
            },
            {
              "description": "The ID of the instance to check connection status. "
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDefaultPatchBaselineRequest": {
      "properties": {
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatingSystem"
            },
            {
              "description": "Returns the default patch baseline for the specified operating system."
            }
          ]
        }
      },
      "title": "GetDefaultPatchBaselineRequest",
      "type": "object"
    },
    "GetDefaultPatchBaselineResult": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the default patch baseline."
            }
          ]
        },
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatingSystem"
            },
            {
              "description": "The operating system for the returned patch baseline. "
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDeployablePatchSnapshotForInstanceRequest": {
      "properties": {
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the instance for which the appropriate patch snapshot should be retrieved."
            }
          ]
        },
        "SnapshotId": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotId"
            },
            {
              "description": "The user-defined snapshot ID."
            }
          ]
        }
      },
      "required": [
        "InstanceId",
        "SnapshotId"
      ],
      "title": "GetDeployablePatchSnapshotForInstanceRequest",
      "type": "object"
    },
    "GetDeployablePatchSnapshotForInstanceResult": {
      "properties": {
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the instance."
            }
          ]
        },
        "Product": {
          "allOf": [
            {
              "$ref": "#/definitions/Product"
            },
            {
              "description": "Returns the specific operating system (for example Windows Server 2012 or Amazon Linux 2015.09) on the instance for the specified patch snapshot."
            }
          ]
        },
        "SnapshotDownloadUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotDownloadUrl"
            },
            {
              "description": "A pre-signed Amazon S3 URL that can be used to download the patch snapshot."
            }
          ]
        },
        "SnapshotId": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotId"
            },
            {
              "description": "The user-defined snapshot ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDocumentRequest": {
      "properties": {
        "DocumentFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFormat"
            },
            {
              "description": "Returns the document in the specified format. The document format can be either JSON or YAML. JSON is the default format."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version for which you want information."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        },
        "VersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "An optional field specifying the version of the artifact associated with the document. For example, \"Release 12, Update 6\". This value is unique across all versions of a document and can't be changed."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetDocumentRequest",
      "type": "object"
    },
    "GetDocumentResult": {
      "properties": {
        "AttachmentsContent": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentContentList"
            },
            {
              "description": "A description of the document attachments, including names, locations, sizes, and so on."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentContent"
            },
            {
              "description": "The contents of the Systems Manager document."
            }
          ]
        },
        "DocumentFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFormat"
            },
            {
              "description": "The document format, either JSON or YAML."
            }
          ]
        },
        "DocumentType": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentType"
            },
            {
              "description": "The document type."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        },
        "Requires": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentRequiresList"
            },
            {
              "description": "A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document."
            }
          ]
        },
        "ReviewStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ReviewStatus"
            },
            {
              "description": "<p>The current review status of a new custom Systems Manager document (SSM document) created by a member of your organization, or of the latest version of an existing SSM document.</p> <p>Only one version of an SSM document can be in the APPROVED state at a time. When a new version is approved, the status of the previous version changes to REJECTED.</p> <p>Only one version of an SSM document can be in review, or PENDING, at a time.</p>"
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentStatus"
            },
            {
              "description": "The status of the Systems Manager document, such as <code>Creating</code>, <code>Active</code>, <code>Updating</code>, <code>Failed</code>, and <code>Deleting</code>."
            }
          ]
        },
        "StatusInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentStatusInformation"
            },
            {
              "description": "A message returned by AWS Systems Manager that explains the <code>Status</code> value. For example, a <code>Failed</code> status might be explained by the <code>StatusInformation</code> message, \"The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct.\""
            }
          ]
        },
        "VersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "The version of the artifact associated with the document. For example, \"Release 12, Update 6\". This value is unique across all versions of a document, and cannot be changed."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetInventoryRequest": {
      "properties": {
        "Aggregators": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryAggregatorList"
            },
            {
              "description": "Returns counts of inventory types based on one or more expressions. For example, if you aggregate by using an expression that uses the <code>AWS:InstanceInformation.PlatformType</code> type, you can see a count of how many Windows and Linux instances exist in your inventoried fleet."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryFilterList"
            },
            {
              "description": "One or more filters. Use a filter to return a more specific list of results."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "ResultAttributes": {
          "allOf": [
            {
              "$ref": "#/definitions/ResultAttributeList"
            },
            {
              "description": "The list of inventory item types to return."
            }
          ]
        }
      },
      "title": "GetInventoryRequest",
      "type": "object"
    },
    "GetInventoryResult": {
      "properties": {
        "Entities": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryResultEntityList"
            },
            {
              "description": "Collection of inventory entities such as a collection of instance inventory. "
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetInventorySchemaMaxResults": {
      "maximum": 200,
      "minimum": 50,
      "type": "integer"
    },
    "GetInventorySchemaRequest": {
      "properties": {
        "Aggregator": {
          "allOf": [
            {
              "$ref": "#/definitions/AggregatorSchemaOnly"
            },
            {
              "description": "Returns inventory schemas that support aggregation. For example, this call returns the <code>AWS:InstanceInformation</code> type, because it supports aggregation based on the <code>PlatformName</code>, <code>PlatformType</code>, and <code>PlatformVersion</code> attributes."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/GetInventorySchemaMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "SubType": {
          "allOf": [
            {
              "$ref": "#/definitions/IsSubTypeSchema"
            },
            {
              "description": "Returns the sub-type schema for a specified inventory type."
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeNameFilter"
            },
            {
              "description": "The type of inventory item to return."
            }
          ]
        }
      },
      "title": "GetInventorySchemaRequest",
      "type": "object"
    },
    "GetInventorySchemaResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "Schemas": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemSchemaResultList"
            },
            {
              "description": "Inventory schemas returned by the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowExecutionRequest": {
      "properties": {
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution that includes the task."
            }
          ]
        }
      },
      "required": [
        "WindowExecutionId"
      ],
      "title": "GetMaintenanceWindowExecutionRequest",
      "type": "object"
    },
    "GetMaintenanceWindowExecutionResult": {
      "properties": {
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the maintenance window finished running."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the maintenance window started running."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatus"
            },
            {
              "description": "The status of the maintenance window execution."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails"
            },
            {
              "description": "The details explaining the Status. Only available for certain status values."
            }
          ]
        },
        "TaskIds": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskIdList"
            },
            {
              "description": "The ID of the task executions from the maintenance window execution."
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowExecutionTaskInvocationRequest": {
      "properties": {
        "InvocationId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationId"
            },
            {
              "description": "The invocation ID to retrieve."
            }
          ]
        },
        "TaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskId"
            },
            {
              "description": "The ID of the specific task in the maintenance window task that should be retrieved. "
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution for which the task is a part."
            }
          ]
        }
      },
      "required": [
        "WindowExecutionId",
        "TaskId",
        "InvocationId"
      ],
      "title": "GetMaintenanceWindowExecutionTaskInvocationRequest",
      "type": "object"
    },
    "GetMaintenanceWindowExecutionTaskInvocationResult": {
      "properties": {
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time that the task finished running on the target."
            }
          ]
        },
        "ExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskExecutionId"
            },
            {
              "description": "The execution ID."
            }
          ]
        },
        "InvocationId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationId"
            },
            {
              "description": "The invocation ID."
            }
          ]
        },
        "OwnerInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/OwnerInformation"
            },
            {
              "description": "User-provided value to be included in any CloudWatch events raised while running tasks for these targets in this maintenance window. "
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationParameters"
            },
            {
              "description": "The parameters used at the time that the task ran."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time that the task started running on the target."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatus"
            },
            {
              "description": "The task status for an invocation."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails"
            },
            {
              "description": "The details explaining the status. Details are only available for certain status values."
            }
          ]
        },
        "TaskExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskId"
            },
            {
              "description": "The task execution ID."
            }
          ]
        },
        "TaskType": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskType"
            },
            {
              "description": "Retrieves the task type for a maintenance window. Task types include the following: LAMBDA, STEP_FUNCTIONS, AUTOMATION, RUN_COMMAND."
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The maintenance window execution ID."
            }
          ]
        },
        "WindowTargetId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskTargetId"
            },
            {
              "description": "The maintenance window target ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowExecutionTaskRequest": {
      "properties": {
        "TaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskId"
            },
            {
              "description": "The ID of the specific task execution in the maintenance window task that should be retrieved."
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution that includes the task."
            }
          ]
        }
      },
      "required": [
        "WindowExecutionId",
        "TaskId"
      ],
      "title": "GetMaintenanceWindowExecutionTaskRequest",
      "type": "object"
    },
    "GetMaintenanceWindowExecutionTaskResult": {
      "properties": {
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the task execution completed."
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The defined maximum number of task executions that could be run in parallel."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskPriority"
            },
            {
              "description": "The priority of the task."
            }
          ]
        },
        "ServiceRole": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "The role that was assumed when running the task."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the task execution started."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatus"
            },
            {
              "description": "The status of the task."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails"
            },
            {
              "description": "The details explaining the Status. Only available for certain status values."
            }
          ]
        },
        "TaskArn": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskArn"
            },
            {
              "description": "The ARN of the task that ran."
            }
          ]
        },
        "TaskExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskId"
            },
            {
              "description": "The ID of the specific task execution in the maintenance window task that was retrieved."
            }
          ]
        },
        "TaskParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskParametersList"
            },
            {
              "description": "<p>The parameters passed to the task when it was run.</p> <note> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note> <p>The map has the following format:</p> <p>Key: string, between 1 and 255 characters</p> <p>Value: an array of strings, each string is between 1 and 255 characters</p>"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskType"
            },
            {
              "description": "The type of task that was run."
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution that includes the task."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowRequest": {
      "properties": {
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window for which you want to retrieve information."
            }
          ]
        }
      },
      "required": [
        "WindowId"
      ],
      "title": "GetMaintenanceWindowRequest",
      "type": "object"
    },
    "GetMaintenanceWindowResult": {
      "properties": {
        "AllowUnassociatedTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowAllowUnassociatedTargets"
            },
            {
              "description": "Whether targets must be registered with the maintenance window before tasks can be defined for those targets."
            }
          ]
        },
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the maintenance window was created."
            }
          ]
        },
        "Cutoff": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowCutoff"
            },
            {
              "description": "The number of hours before the end of the maintenance window that Systems Manager stops scheduling new tasks for execution."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "The description of the maintenance window."
            }
          ]
        },
        "Duration": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDurationHours"
            },
            {
              "description": "The duration of the maintenance window in hours."
            }
          ]
        },
        "Enabled": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowEnabled"
            },
            {
              "description": "Indicates whether the maintenance window is enabled."
            }
          ]
        },
        "EndDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive. The maintenance window will not run after this specified time."
            }
          ]
        },
        "ModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the maintenance window was last modified."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The name of the maintenance window."
            }
          ]
        },
        "NextExecutionTime": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The next time the maintenance window will actually run, taking into account any specified times for the maintenance window to become active or inactive."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowSchedule"
            },
            {
              "description": "The schedule of the maintenance window in the form of a cron or rate expression."
            }
          ]
        },
        "ScheduleOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowOffset"
            },
            {
              "description": "The number of days to wait to run a maintenance window after the scheduled CRON expression date and time."
            }
          ]
        },
        "ScheduleTimezone": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTimezone"
            },
            {
              "description": "The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: \"America/Los_Angeles\", \"UTC\", or \"Asia/Seoul\". For more information, see the <a href=\"https://www.iana.org/time-zones\">Time Zone Database</a> on the IANA website."
            }
          ]
        },
        "StartDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active. The maintenance window will not run before this specified time."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the created maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMaintenanceWindowTaskRequest": {
      "properties": {
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The maintenance window ID that includes the task to retrieve."
            }
          ]
        },
        "WindowTaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskId"
            },
            {
              "description": "The maintenance window task ID to retrieve."
            }
          ]
        }
      },
      "required": [
        "WindowId",
        "WindowTaskId"
      ],
      "title": "GetMaintenanceWindowTaskRequest",
      "type": "object"
    },
    "GetMaintenanceWindowTaskResult": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "The retrieved task description."
            }
          ]
        },
        "LoggingInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LoggingInfo"
            },
            {
              "description": "<p>The location in Amazon S3 where the task results are logged.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>"
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The maximum number of targets allowed to run this task in parallel."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The maximum number of errors allowed before the task stops being scheduled."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The retrieved task name."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskPriority"
            },
            {
              "description": "The priority of the task when it runs. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel."
            }
          ]
        },
        "ServiceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The targets where the task should run."
            }
          ]
        },
        "TaskArn": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskArn"
            },
            {
              "description": "The resource that the task used during execution. For RUN_COMMAND and AUTOMATION task types, the TaskArn is the Systems Manager Document name/ARN. For LAMBDA tasks, the value is the function name/ARN. For STEP_FUNCTIONS tasks, the value is the state machine ARN."
            }
          ]
        },
        "TaskInvocationParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskInvocationParameters"
            },
            {
              "description": "The parameters to pass to the task when it runs."
            }
          ]
        },
        "TaskParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskParameters"
            },
            {
              "description": "<p>The parameters to pass to the task when it runs.</p> <note> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>"
            }
          ]
        },
        "TaskType": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskType"
            },
            {
              "description": "The type of task to run."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The retrieved maintenance window ID."
            }
          ]
        },
        "WindowTaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskId"
            },
            {
              "description": "The retrieved maintenance window task ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetOpsItemRequest": {
      "properties": {
        "OpsItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemId"
            },
            {
              "description": "The ID of the OpsItem that you want to get."
            }
          ]
        }
      },
      "required": [
        "OpsItemId"
      ],
      "title": "GetOpsItemRequest",
      "type": "object"
    },
    "GetOpsItemResponse": {
      "properties": {
        "OpsItem": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItem"
            },
            {
              "description": "The OpsItem."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetOpsMetadataMaxResults": {
      "maximum": 10,
      "minimum": 1,
      "type": "integer"
    },
    "GetOpsMetadataRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/GetOpsMetadataMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results."
            }
          ]
        },
        "OpsMetadataArn": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of an OpsMetadata Object to view."
            }
          ]
        }
      },
      "required": [
        "OpsMetadataArn"
      ],
      "title": "GetOpsMetadataRequest",
      "type": "object"
    },
    "GetOpsMetadataResult": {
      "properties": {
        "Metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataMap"
            },
            {
              "description": "OpsMetadata for an Application Manager application."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataResourceId"
            },
            {
              "description": "The resource ID of the Application Manager application."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetOpsSummaryRequest": {
      "properties": {
        "Aggregators": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsAggregatorList"
            },
            {
              "description": "Optional aggregators that return counts of OpsItems based on one or more expressions."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsFilterList"
            },
            {
              "description": "Optional filters used to scope down the returned OpsItems. "
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        },
        "ResultAttributes": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsResultAttributeList"
            },
            {
              "description": "The OpsItem data type to return."
            }
          ]
        },
        "SyncName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncName"
            },
            {
              "description": "Specify the name of a resource data sync to get."
            }
          ]
        }
      },
      "title": "GetOpsSummaryRequest",
      "type": "object"
    },
    "GetOpsSummaryResult": {
      "properties": {
        "Entities": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsEntityList"
            },
            {
              "description": "The list of aggregated and filtered OpsItems."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetParameterHistoryRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterName"
            },
            {
              "description": "The name of the parameter for which you want to review history."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "WithDecryption": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetParameterHistoryRequest",
      "type": "object"
    },
    "GetParameterHistoryResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterHistoryList"
            },
            {
              "description": "A list of parameters returned by the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetParameterRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterName"
            },
            {
              "description": "The name of the parameter you want to query."
            }
          ]
        },
        "WithDecryption": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetParameterRequest",
      "type": "object"
    },
    "GetParameterResult": {
      "properties": {
        "Parameter": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameter"
            },
            {
              "description": "Information about a parameter."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetParametersByPathMaxResults": {
      "maximum": 10,
      "minimum": 1,
      "type": "integer"
    },
    "GetParametersByPathRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/GetParametersByPathMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        },
        "ParameterFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterStringFilterList"
            },
            {
              "description": "<p>Filters to limit the request results.</p> <note> <p>For <code>GetParametersByPath</code>, the following filter <code>Key</code> names are supported: <code>Type</code>, <code>KeyId</code>, <code>Label</code>, and <code>DataType</code>.</p> <p>The following <code>Key</code> values are not supported for <code>GetParametersByPath</code>: <code>tag</code>, <code>Name</code>, <code>Path</code>, and <code>Tier</code>.</p> </note>"
            }
          ]
        },
        "Path": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterName"
            },
            {
              "description": "The hierarchy for the parameter. Hierarchies start with a forward slash (/) and end with the parameter name. A parameter name hierarchy can have a maximum of 15 levels. Here is an example of a hierarchy: <code>/Finance/Prod/IAD/WinServ2016/license33</code> "
            }
          ]
        },
        "Recursive": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p>Retrieve all parameters within a hierarchy.</p> <important> <p>If a user has access to a path, then the user can access all levels of that path. For example, if a user has permission to access path <code>/a</code>, then the user can also access <code>/a/b</code>. Even if a user has explicitly been denied access in IAM for parameter <code>/a/b</code>, they can still call the GetParametersByPath API action recursively for <code>/a</code> and view <code>/a/b</code>.</p> </important>"
            }
          ]
        },
        "WithDecryption": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Retrieve all parameters in a hierarchy with their value decrypted."
            }
          ]
        }
      },
      "required": [
        "Path"
      ],
      "title": "GetParametersByPathRequest",
      "type": "object"
    },
    "GetParametersByPathResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterList"
            },
            {
              "description": "A list of parameters found in the specified hierarchy."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetParametersRequest": {
      "properties": {
        "Names": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterNameList"
            },
            {
              "description": "Names of the parameters for which you want to query information."
            }
          ]
        },
        "WithDecryption": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types."
            }
          ]
        }
      },
      "required": [
        "Names"
      ],
      "title": "GetParametersRequest",
      "type": "object"
    },
    "GetParametersResult": {
      "properties": {
        "InvalidParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterNameList"
            },
            {
              "description": "A list of parameters that are not formatted correctly or do not run during an execution."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterList"
            },
            {
              "description": "A list of details for a parameter."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetPatchBaselineForPatchGroupRequest": {
      "properties": {
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatingSystem"
            },
            {
              "description": "Returns he operating system rule specified for patch groups using the patch baseline."
            }
          ]
        },
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group whose patch baseline should be retrieved."
            }
          ]
        }
      },
      "required": [
        "PatchGroup"
      ],
      "title": "GetPatchBaselineForPatchGroupRequest",
      "type": "object"
    },
    "GetPatchBaselineForPatchGroupResult": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline that should be used for the patch group."
            }
          ]
        },
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatingSystem"
            },
            {
              "description": "The operating system rule specified for patch groups using the patch baseline."
            }
          ]
        },
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetPatchBaselineRequest": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline to retrieve."
            }
          ]
        }
      },
      "required": [
        "BaselineId"
      ],
      "title": "GetPatchBaselineRequest",
      "type": "object"
    },
    "GetPatchBaselineResult": {
      "properties": {
        "ApprovalRules": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchRuleGroup"
            },
            {
              "description": "A set of rules used to include patches in the baseline."
            }
          ]
        },
        "ApprovedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchIdList"
            },
            {
              "description": "A list of explicitly approved patches for the baseline."
            }
          ]
        },
        "ApprovedPatchesComplianceLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceLevel"
            },
            {
              "description": "Returns the specified compliance severity level for approved patches in the patch baseline."
            }
          ]
        },
        "ApprovedPatchesEnableNonSecurity": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only."
            }
          ]
        },
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the retrieved patch baseline."
            }
          ]
        },
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the patch baseline was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineDescription"
            },
            {
              "description": "A description of the patch baseline."
            }
          ]
        },
        "GlobalFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchFilterGroup"
            },
            {
              "description": "A set of global filters used to exclude patches from the baseline."
            }
          ]
        },
        "ModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the patch baseline was last modified."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineName"
            },
            {
              "description": "The name of the patch baseline."
            }
          ]
        },
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatingSystem"
            },
            {
              "description": "Returns the operating system specified for the patch baseline."
            }
          ]
        },
        "PatchGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroupList"
            },
            {
              "description": "Patch groups included in the patch baseline."
            }
          ]
        },
        "RejectedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchIdList"
            },
            {
              "description": "A list of explicitly rejected patches for the baseline."
            }
          ]
        },
        "RejectedPatchesAction": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchAction"
            },
            {
              "description": "The action specified to take on patches included in the RejectedPatches list. A patch can be allowed only if it is a dependency of another package, or blocked entirely along with packages that include it as a dependency."
            }
          ]
        },
        "Sources": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSourceList"
            },
            {
              "description": "Information about the patches to use to update the instances, including target operating systems and source repositories. Applies to Linux instances only."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetServiceSettingRequest": {
      "description": "The request body of the GetServiceSetting API action.",
      "properties": {
        "SettingId": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceSettingId"
            },
            {
              "description": "The ID of the service setting to get. The setting ID can be <code>/ssm/parameter-store/default-parameter-tier</code>, <code>/ssm/parameter-store/high-throughput-enabled</code>, or <code>/ssm/managed-instance/activation-tier</code>."
            }
          ]
        }
      },
      "required": [
        "SettingId"
      ],
      "title": "GetServiceSettingRequest",
      "type": "object"
    },
    "GetServiceSettingResult": {
      "description": "The query result body of the GetServiceSetting API action.",
      "properties": {
        "ServiceSetting": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceSetting"
            },
            {
              "description": "The query result of the current service setting."
            }
          ]
        }
      },
      "type": "object"
    },
    "HierarchyLevelLimitExceededException": {},
    "HierarchyTypeMismatchException": {},
    "IPAddress": {
      "maxLength": 46,
      "minLength": 1,
      "type": "string"
    },
    "ISO8601String": {
      "type": "string"
    },
    "IamRole": {
      "maxLength": 64,
      "type": "string"
    },
    "IdempotencyToken": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
      "type": "string"
    },
    "IdempotentParameterMismatch": {},
    "IncompatiblePolicyException": {},
    "InstallOverrideList": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^https://.+$|^s3://([^/]+)/(.*?([^/]+))$",
      "type": "string"
    },
    "InstanceAggregatedAssociationOverview": {
      "description": "Status information about the aggregated associations.",
      "properties": {
        "DetailedStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "Detailed status information about the aggregated associations."
            }
          ]
        },
        "InstanceAssociationStatusAggregatedCount": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationStatusAggregatedCount"
            },
            {
              "description": "The number of associations for the instance(s)."
            }
          ]
        }
      },
      "type": "object"
    },
    "InstanceAssociation": {
      "description": "One or more association documents on the instance. ",
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID."
            }
          ]
        },
        "AssociationVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersion"
            },
            {
              "description": "Version information for the association on the instance."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentContent"
            },
            {
              "description": "The content of the association document for the instance(s)."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "InstanceAssociationExecutionSummary": {
      "maxLength": 512,
      "minLength": 1,
      "type": "string"
    },
    "InstanceAssociationList": {
      "items": {
        "$ref": "#/definitions/InstanceAssociation"
      },
      "type": "array"
    },
    "InstanceAssociationOutputLocation": {
      "description": "An S3 bucket where you want to store the results of this request.",
      "properties": {
        "S3Location": {
          "allOf": [
            {
              "$ref": "#/definitions/S3OutputLocation"
            },
            {
              "description": "An S3 bucket where you want to store the results of this request."
            }
          ]
        }
      },
      "type": "object"
    },
    "InstanceAssociationOutputUrl": {
      "description": "The URL of S3 bucket where you want to store the results of this request.",
      "properties": {
        "S3OutputUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/S3OutputUrl"
            },
            {
              "description": "The URL of S3 bucket where you want to store the results of this request."
            }
          ]
        }
      },
      "type": "object"
    },
    "InstanceAssociationStatusAggregatedCount": {
      "additionalProperties": {
        "$ref": "#/definitions/InstanceCount"
      },
      "type": "object"
    },
    "InstanceAssociationStatusInfo": {
      "description": "Status information about the instance association.",
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID."
            }
          ]
        },
        "AssociationName": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationName"
            },
            {
              "description": "The name of the association applied to the instance."
            }
          ]
        },
        "AssociationVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersion"
            },
            {
              "description": "The version of the association applied to the instance."
            }
          ]
        },
        "DetailedStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "Detailed status information about the instance association."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The association document versions."
            }
          ]
        },
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/AgentErrorCode"
            },
            {
              "description": "An error code returned by the request to create the association."
            }
          ]
        },
        "ExecutionDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the instance association ran. "
            }
          ]
        },
        "ExecutionSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationExecutionSummary"
            },
            {
              "description": "Summary information about association execution."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance ID where the association was created."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the association."
            }
          ]
        },
        "OutputUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationOutputUrl"
            },
            {
              "description": "A URL for an S3 bucket where you want to store the results of this request."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "Status information about the instance association."
            }
          ]
        }
      },
      "type": "object"
    },
    "InstanceAssociationStatusInfos": {
      "items": {
        "$ref": "#/definitions/InstanceAssociationStatusInfo"
      },
      "type": "array"
    },
    "InstanceCount": {
      "type": "integer"
    },
    "InstanceId": {
      "pattern": "(^i-(\\w{8}|\\w{17})$)|(^mi-\\w{17}$)",
      "type": "string"
    },
    "InstanceIdList": {
      "items": {
        "$ref": "#/definitions/InstanceId"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "InstanceInformation": {
      "description": "Describes a filter for a specific list of instances. ",
      "properties": {
        "ActivationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ActivationId"
            },
            {
              "description": "The activation ID created by Systems Manager when the server or VM was registered."
            }
          ]
        },
        "AgentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/Version"
            },
            {
              "description": "The version of SSM Agent running on your Linux instance. "
            }
          ]
        },
        "AssociationOverview": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAggregatedAssociationOverview"
            },
            {
              "description": "Information about the association."
            }
          ]
        },
        "AssociationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/StatusName"
            },
            {
              "description": "The status of the association."
            }
          ]
        },
        "ComputerName": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputerName"
            },
            {
              "description": "The fully qualified host name of the managed instance."
            }
          ]
        },
        "IPAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/IPAddress"
            },
            {
              "description": "The IP address of the managed instance."
            }
          ]
        },
        "IamRole": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRole"
            },
            {
              "description": "The Amazon Identity and Access Management (IAM) role assigned to the on-premises Systems Manager managed instance. This call does not return the IAM role for EC2 instances. To retrieve the IAM role for an EC2 instance, use the Amazon EC2 <code>DescribeInstances</code> action. For information, see <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\">DescribeInstances</a> in the <i>Amazon EC2 API Reference</i> or <a href=\"http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html\">describe-instances</a> in the <i>AWS CLI Command Reference</i>."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance ID. "
            }
          ]
        },
        "IsLatestVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether the latest version of SSM Agent is running on your Linux Managed Instance. This field does not indicate whether or not the latest version is installed on Windows managed instances, because some older versions of Windows Server use the EC2Config service to process SSM requests."
            }
          ]
        },
        "LastAssociationExecutionDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the association was last run."
            }
          ]
        },
        "LastPingDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time when the agent last pinged the Systems Manager service. "
            }
          ]
        },
        "LastSuccessfulAssociationExecutionDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The last date the association was successfully run."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name assigned to an on-premises server or virtual machine (VM) when it is activated as a Systems Manager managed instance. The name is specified as the <code>DefaultInstanceName</code> property using the <a>CreateActivation</a> command. It is applied to the managed instance by specifying the Activation Code and Activation ID when you install SSM Agent on the instance, as explained in <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-linux.html\">Install SSM Agent for a hybrid environment (Linux)</a> and <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-win.html\">Install SSM Agent for a hybrid environment (Windows)</a>. To retrieve the Name tag of an EC2 instance, use the Amazon EC2 <code>DescribeInstances</code> action. For information, see <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\">DescribeInstances</a> in the <i>Amazon EC2 API Reference</i> or <a href=\"http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html\">describe-instances</a> in the <i>AWS CLI Command Reference</i>."
            }
          ]
        },
        "PingStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/PingStatus"
            },
            {
              "description": "<p>Connection status of SSM Agent. </p> <note> <p>The status <code>Inactive</code> has been deprecated and is no longer in use.</p> </note>"
            }
          ]
        },
        "PlatformName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the operating system platform running on your instance. "
            }
          ]
        },
        "PlatformType": {
          "allOf": [
            {
              "$ref": "#/definitions/PlatformType"
            },
            {
              "description": "The operating system platform type. "
            }
          ]
        },
        "PlatformVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The version of the OS platform running on your instance. "
            }
          ]
        },
        "RegistrationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the server or VM was registered with AWS as a managed instance."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "The type of instance. Instances are either EC2 instances or managed instances. "
            }
          ]
        }
      },
      "type": "object"
    },
    "InstanceInformationFilter": {
      "description": "<p>Describes a filter for a specific list of instances. You can filter instances information by using tags. You specify tags by using a key-value mapping.</p> <p>Use this action instead of the <a>DescribeInstanceInformationRequest$InstanceInformationFilterList</a> method. The <code>InstanceInformationFilterList</code> method is a legacy method and does not support tags. </p>",
      "properties": {
        "key": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceInformationFilterKey"
            },
            {
              "description": "The name of the filter. "
            }
          ]
        },
        "valueSet": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceInformationFilterValueSet"
            },
            {
              "description": "The filter values."
            }
          ]
        }
      },
      "required": [
        "key",
        "valueSet"
      ],
      "type": "object"
    },
    "InstanceInformationFilterKey": {
      "enum": [
        "InstanceIds",
        "AgentVersion",
        "PingStatus",
        "PlatformTypes",
        "ActivationIds",
        "IamRole",
        "ResourceType",
        "AssociationStatus"
      ],
      "type": "string"
    },
    "InstanceInformationFilterList": {
      "items": {
        "$ref": "#/definitions/InstanceInformationFilter"
      },
      "minItems": 0,
      "type": "array"
    },
    "InstanceInformationFilterValue": {
      "minLength": 1,
      "type": "string"
    },
    "InstanceInformationFilterValueSet": {
      "items": {
        "$ref": "#/definitions/InstanceInformationFilterValue"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array"
    },
    "InstanceInformationList": {
      "items": {
        "$ref": "#/definitions/InstanceInformation"
      },
      "type": "array"
    },
    "InstanceInformationStringFilter": {
      "description": "The filters to describe or get information about your managed instances.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceInformationStringFilterKey"
            },
            {
              "description": "<p>The filter key name to describe your instances. For example:</p> <p>\"InstanceIds\"|\"AgentVersion\"|\"PingStatus\"|\"PlatformTypes\"|\"ActivationIds\"|\"IamRole\"|\"ResourceType\"|\"AssociationStatus\"|\"Tag Key\"</p>"
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceInformationFilterValueSet"
            },
            {
              "description": "The filter values."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "InstanceInformationStringFilterKey": {
      "minLength": 1,
      "type": "string"
    },
    "InstanceInformationStringFilterList": {
      "items": {
        "$ref": "#/definitions/InstanceInformationStringFilter"
      },
      "minItems": 0,
      "type": "array"
    },
    "InstancePatchState": {
      "description": "Defines the high-level patch compliance state for a managed instance, providing information about the number of installed, missing, not applicable, and failed patches along with metadata about the operation when this information was gathered for the instance.",
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline used to patch the instance."
            }
          ]
        },
        "FailedCount": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchFailedCount"
            },
            {
              "description": "The number of patches from the patch baseline that were attempted to be installed during the last patching operation, but failed to install."
            }
          ]
        },
        "InstallOverrideList": {
          "allOf": [
            {
              "$ref": "#/definitions/InstallOverrideList"
            },
            {
              "description": "<p>An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This patch installation list, which you maintain in an S3 bucket in YAML format and specify in the SSM document <code>AWS-RunPatchBaseline</code>, overrides the patches specified by the default patch baseline.</p> <p>For more information about the <code>InstallOverrideList</code> parameter, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html\">About the SSM document AWS-RunPatchBaseline</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "InstalledCount": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchInstalledCount"
            },
            {
              "description": "The number of patches from the patch baseline that are installed on the instance."
            }
          ]
        },
        "InstalledOtherCount": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchInstalledOtherCount"
            },
            {
              "description": "The number of patches not specified in the patch baseline that are installed on the instance."
            }
          ]
        },
        "InstalledPendingRebootCount": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchInstalledPendingRebootCount"
            },
            {
              "description": "The number of patches installed by Patch Manager since the last time the instance was rebooted."
            }
          ]
        },
        "InstalledRejectedCount": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchInstalledRejectedCount"
            },
            {
              "description": "<p>The number of patches installed on an instance that are specified in a <code>RejectedPatches</code> list. Patches with a status of <i>InstalledRejected</i> were typically installed before they were added to a <code>RejectedPatches</code> list.</p> <note> <p>If <code>ALLOW_AS_DEPENDENCY</code> is the specified option for <code>RejectedPatchesAction</code>, the value of <code>InstalledRejectedCount</code> will always be <code>0</code> (zero).</p> </note>"
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the managed instance the high-level patch compliance information was collected for."
            }
          ]
        },
        "LastNoRebootInstallOperationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time of the last attempt to patch the instance with <code>NoReboot</code> specified as the reboot option."
            }
          ]
        },
        "MissingCount": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchMissingCount"
            },
            {
              "description": "The number of patches from the patch baseline that are applicable for the instance but aren't currently installed."
            }
          ]
        },
        "NotApplicableCount": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchNotApplicableCount"
            },
            {
              "description": "The number of patches from the patch baseline that aren't applicable for the instance and therefore aren't installed on the instance. This number may be truncated if the list of patch names is very large. The number of patches beyond this limit are reported in <code>UnreportedNotApplicableCount</code>."
            }
          ]
        },
        "Operation": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchOperationType"
            },
            {
              "description": "The type of patching operation that was performed: <code>SCAN</code> (assess patch compliance state) or <code>INSTALL</code> (install missing patches)."
            }
          ]
        },
        "OperationEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the most recent patching operation completed on the instance."
            }
          ]
        },
        "OperationStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the most recent patching operation was started on the instance."
            }
          ]
        },
        "OwnerInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/OwnerInformation"
            },
            {
              "description": "Placeholder information. This field will always be empty in the current release of the service."
            }
          ]
        },
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group the managed instance belongs to."
            }
          ]
        },
        "RebootOption": {
          "allOf": [
            {
              "$ref": "#/definitions/RebootOption"
            },
            {
              "description": "<p>Indicates the reboot option specified in the patch baseline.</p> <note> <p>Reboot options apply to <code>Install</code> operations only. Reboots are not attempted for Patch Manager <code>Scan</code> operations.</p> </note> <ul> <li> <p> <b>RebootIfNeeded</b>: Patch Manager tries to reboot the instance if it installed any patches, or if any patches are detected with a status of <code>InstalledPendingReboot</code>.</p> </li> <li> <p> <b>NoReboot</b>: Patch Manager attempts to install missing packages without trying to reboot the system. Patches installed with this option are assigned a status of <code>InstalledPendingReboot</code>. These patches might not be in effect until a reboot is performed.</p> </li> </ul>"
            }
          ]
        },
        "SnapshotId": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotId"
            },
            {
              "description": "The ID of the patch baseline snapshot used during the patching operation when this compliance data was collected."
            }
          ]
        },
        "UnreportedNotApplicableCount": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchUnreportedNotApplicableCount"
            },
            {
              "description": "The number of patches beyond the supported limit of <code>NotApplicableCount</code> that are not reported by name to Systems Manager Inventory."
            }
          ]
        }
      },
      "required": [
        "InstanceId",
        "PatchGroup",
        "BaselineId",
        "OperationStartTime",
        "OperationEndTime",
        "Operation"
      ],
      "type": "object"
    },
    "InstancePatchStateFilter": {
      "description": "Defines a filter used in <a>DescribeInstancePatchStatesForPatchGroup</a> used to scope down the information returned by the API.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancePatchStateFilterKey"
            },
            {
              "description": "The key for the filter. Supported values are FailedCount, InstalledCount, InstalledOtherCount, MissingCount and NotApplicableCount."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancePatchStateOperatorType"
            },
            {
              "description": "The type of comparison that should be performed for the value: Equal, NotEqual, LessThan or GreaterThan."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancePatchStateFilterValues"
            },
            {
              "description": "The value for the filter, must be an integer greater than or equal to 0."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values",
        "Type"
      ],
      "type": "object"
    },
    "InstancePatchStateFilterKey": {
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "InstancePatchStateFilterList": {
      "items": {
        "$ref": "#/definitions/InstancePatchStateFilter"
      },
      "maxItems": 4,
      "minItems": 0,
      "type": "array"
    },
    "InstancePatchStateFilterValue": {
      "type": "string"
    },
    "InstancePatchStateFilterValues": {
      "items": {
        "$ref": "#/definitions/InstancePatchStateFilterValue"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "InstancePatchStateList": {
      "items": {
        "$ref": "#/definitions/InstancePatchState"
      },
      "type": "array"
    },
    "InstancePatchStateOperatorType": {
      "enum": [
        "Equal",
        "NotEqual",
        "LessThan",
        "GreaterThan"
      ],
      "type": "string"
    },
    "InstancePatchStatesList": {
      "items": {
        "$ref": "#/definitions/InstancePatchState"
      },
      "maxItems": 5,
      "minItems": 1,
      "type": "array"
    },
    "InstanceTagName": {
      "maxLength": 255,
      "type": "string"
    },
    "InstancesCount": {
      "type": "integer"
    },
    "Integer": {
      "type": "integer"
    },
    "InternalServerError": {},
    "InvalidActivation": {},
    "InvalidActivationId": {},
    "InvalidAggregatorException": {},
    "InvalidAllowedPatternException": {},
    "InvalidAssociation": {},
    "InvalidAssociationVersion": {},
    "InvalidAutomationExecutionParametersException": {},
    "InvalidAutomationSignalException": {},
    "InvalidAutomationStatusUpdateException": {},
    "InvalidCommandId": {},
    "InvalidDeleteInventoryParametersException": {},
    "InvalidDeletionIdException": {},
    "InvalidDocument": {},
    "InvalidDocumentContent": {},
    "InvalidDocumentOperation": {},
    "InvalidDocumentSchemaVersion": {},
    "InvalidDocumentType": {},
    "InvalidDocumentVersion": {},
    "InvalidFilter": {},
    "InvalidFilterKey": {},
    "InvalidFilterOption": {},
    "InvalidFilterValue": {},
    "InvalidInstanceId": {},
    "InvalidInstanceInformationFilterValue": {},
    "InvalidInventoryGroupException": {},
    "InvalidInventoryItemContextException": {},
    "InvalidInventoryRequestException": {},
    "InvalidItemContentException": {},
    "InvalidKeyId": {},
    "InvalidNextToken": {},
    "InvalidNotificationConfig": {},
    "InvalidOptionException": {},
    "InvalidOutputFolder": {},
    "InvalidOutputLocation": {},
    "InvalidParameters": {},
    "InvalidPermissionType": {},
    "InvalidPluginName": {},
    "InvalidPolicyAttributeException": {},
    "InvalidPolicyTypeException": {},
    "InvalidResourceId": {},
    "InvalidResourceType": {},
    "InvalidResultAttributeException": {},
    "InvalidRole": {},
    "InvalidSchedule": {},
    "InvalidTarget": {},
    "InvalidTypeNameException": {},
    "InvalidUpdate": {},
    "InventoryAggregator": {
      "description": "Specifies the inventory type and attribute for the aggregation execution.",
      "properties": {
        "Aggregators": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryAggregatorList"
            },
            {
              "description": "Nested aggregators to further refine aggregation for an inventory type."
            }
          ]
        },
        "Expression": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryAggregatorExpression"
            },
            {
              "description": "The inventory type and attribute name for aggregation."
            }
          ]
        },
        "Groups": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryGroupList"
            },
            {
              "description": "A user-defined set of one or more filters on which to aggregate inventory data. Groups return a count of resources that match and don't match the specified criteria."
            }
          ]
        }
      },
      "type": "object"
    },
    "InventoryAggregatorExpression": {
      "maxLength": 1000,
      "minLength": 1,
      "type": "string"
    },
    "InventoryAggregatorList": {
      "items": {
        "$ref": "#/definitions/InventoryAggregator"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "InventoryAttributeDataType": {
      "enum": [
        "string",
        "number"
      ],
      "type": "string"
    },
    "InventoryDeletionLastStatusMessage": {
      "type": "string"
    },
    "InventoryDeletionLastStatusUpdateTime": {
      "format": "date-time",
      "type": "string"
    },
    "InventoryDeletionStartTime": {
      "format": "date-time",
      "type": "string"
    },
    "InventoryDeletionStatus": {
      "enum": [
        "InProgress",
        "Complete"
      ],
      "type": "string"
    },
    "InventoryDeletionStatusItem": {
      "description": "Status information returned by the <code>DeleteInventory</code> action.",
      "properties": {
        "DeletionId": {
          "allOf": [
            {
              "$ref": "#/definitions/UUID"
            },
            {
              "description": "The deletion ID returned by the <code>DeleteInventory</code> action."
            }
          ]
        },
        "DeletionStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryDeletionStartTime"
            },
            {
              "description": "The UTC timestamp when the delete operation started."
            }
          ]
        },
        "DeletionSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryDeletionSummary"
            },
            {
              "description": "Information about the delete operation. For more information about this summary, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete\">Understanding the delete inventory summary</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "LastStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryDeletionStatus"
            },
            {
              "description": "The status of the operation. Possible values are InProgress and Complete."
            }
          ]
        },
        "LastStatusMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryDeletionLastStatusMessage"
            },
            {
              "description": "Information about the status."
            }
          ]
        },
        "LastStatusUpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryDeletionLastStatusUpdateTime"
            },
            {
              "description": "The UTC timestamp of when the last status report."
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeName"
            },
            {
              "description": "The name of the inventory data type."
            }
          ]
        }
      },
      "type": "object"
    },
    "InventoryDeletionSummary": {
      "description": "Information about the delete operation.",
      "properties": {
        "RemainingCount": {
          "allOf": [
            {
              "$ref": "#/definitions/RemainingCount"
            },
            {
              "description": "Remaining number of items to delete."
            }
          ]
        },
        "SummaryItems": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryDeletionSummaryItems"
            },
            {
              "description": "A list of counts and versions for deleted items."
            }
          ]
        },
        "TotalCount": {
          "allOf": [
            {
              "$ref": "#/definitions/TotalCount"
            },
            {
              "description": "The total number of items to delete. This count does not change during the delete operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "InventoryDeletionSummaryItem": {
      "description": "Either a count, remaining count, or a version number in a delete inventory summary.",
      "properties": {
        "Count": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceCount"
            },
            {
              "description": "A count of the number of deleted items."
            }
          ]
        },
        "RemainingCount": {
          "allOf": [
            {
              "$ref": "#/definitions/RemainingCount"
            },
            {
              "description": "The remaining number of items to delete."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemSchemaVersion"
            },
            {
              "description": "The inventory type version."
            }
          ]
        }
      },
      "type": "object"
    },
    "InventoryDeletionSummaryItems": {
      "items": {
        "$ref": "#/definitions/InventoryDeletionSummaryItem"
      },
      "type": "array"
    },
    "InventoryDeletionsList": {
      "items": {
        "$ref": "#/definitions/InventoryDeletionStatusItem"
      },
      "type": "array"
    },
    "InventoryFilter": {
      "description": "One or more filters. Use a filter to return a more specific list of results.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryFilterKey"
            },
            {
              "description": "The name of the filter key."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryQueryOperatorType"
            },
            {
              "description": "<p>The type of filter.</p> <note> <p>The <code>Exists</code> filter must be used with aggregators. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-aggregate.html\">Aggregating inventory data</a> in the <i>AWS Systems Manager User Guide</i>.</p> </note>"
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryFilterValueList"
            },
            {
              "description": "Inventory filter values. Example: inventory filter where instance IDs are specified as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g, i-1a2b3c4d5e6,Type=Equal "
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "InventoryFilterKey": {
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "InventoryFilterList": {
      "items": {
        "$ref": "#/definitions/InventoryFilter"
      },
      "maxItems": 5,
      "minItems": 1,
      "type": "array"
    },
    "InventoryFilterValue": {
      "type": "string"
    },
    "InventoryFilterValueList": {
      "items": {
        "$ref": "#/definitions/InventoryFilterValue"
      },
      "maxItems": 40,
      "minItems": 1,
      "type": "array"
    },
    "InventoryGroup": {
      "description": "A user-defined set of one or more filters on which to aggregate inventory data. Groups return a count of resources that match and don't match the specified criteria.",
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryFilterList"
            },
            {
              "description": "Filters define the criteria for the group. The <code>matchingCount</code> field displays the number of resources that match the criteria. The <code>notMatchingCount</code> field displays the number of resources that don't match the criteria. "
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryGroupName"
            },
            {
              "description": "The name of the group."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Filters"
      ],
      "type": "object"
    },
    "InventoryGroupList": {
      "items": {
        "$ref": "#/definitions/InventoryGroup"
      },
      "maxItems": 15,
      "minItems": 1,
      "type": "array"
    },
    "InventoryGroupName": {
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "InventoryItem": {
      "description": "Information collected from managed instances based on your inventory policy document",
      "properties": {
        "CaptureTime": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemCaptureTime"
            },
            {
              "description": "The time the inventory information was collected."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemEntryList"
            },
            {
              "description": "The inventory data of the inventory type."
            }
          ]
        },
        "ContentHash": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemContentHash"
            },
            {
              "description": "MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. "
            }
          ]
        },
        "Context": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemContentContext"
            },
            {
              "description": "A map of associated properties for a specified inventory type. For example, with this attribute, you can specify the <code>ExecutionId</code>, <code>ExecutionType</code>, <code>ComplianceType</code> properties of the <code>AWS:ComplianceItem</code> type."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemSchemaVersion"
            },
            {
              "description": "The schema version for the inventory item."
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeName"
            },
            {
              "description": "The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate."
            }
          ]
        }
      },
      "required": [
        "TypeName",
        "SchemaVersion",
        "CaptureTime"
      ],
      "type": "object"
    },
    "InventoryItemAttribute": {
      "description": "Attributes are the entries within the inventory item content. It contains name and value.",
      "properties": {
        "DataType": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryAttributeDataType"
            },
            {
              "description": "The data type of the inventory item attribute. "
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemAttributeName"
            },
            {
              "description": "Name of the inventory item attribute."
            }
          ]
        }
      },
      "required": [
        "Name",
        "DataType"
      ],
      "type": "object"
    },
    "InventoryItemAttributeList": {
      "items": {
        "$ref": "#/definitions/InventoryItemAttribute"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "InventoryItemAttributeName": {
      "type": "string"
    },
    "InventoryItemCaptureTime": {
      "pattern": "^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$",
      "type": "string"
    },
    "InventoryItemContentContext": {
      "additionalProperties": {
        "$ref": "#/definitions/AttributeValue"
      },
      "maxProperties": 50,
      "minProperties": 0,
      "type": "object"
    },
    "InventoryItemContentHash": {
      "maxLength": 256,
      "type": "string"
    },
    "InventoryItemEntry": {
      "additionalProperties": {
        "$ref": "#/definitions/AttributeValue"
      },
      "maxProperties": 50,
      "minProperties": 0,
      "type": "object"
    },
    "InventoryItemEntryList": {
      "items": {
        "$ref": "#/definitions/InventoryItemEntry"
      },
      "maxItems": 10000,
      "minItems": 0,
      "type": "array"
    },
    "InventoryItemList": {
      "items": {
        "$ref": "#/definitions/InventoryItem"
      },
      "maxItems": 30,
      "minItems": 1,
      "type": "array"
    },
    "InventoryItemSchema": {
      "description": "The inventory item schema definition. Users can use this to compose inventory query filters.",
      "properties": {
        "Attributes": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemAttributeList"
            },
            {
              "description": "The schema attributes for inventory. This contains data type and attribute name."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryTypeDisplayName"
            },
            {
              "description": "The alias name of the inventory type. The alias name is used for display purposes."
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeName"
            },
            {
              "description": "The name of the inventory type. Default inventory item type names start with AWS. Custom inventory type names will start with Custom. Default inventory item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation, AWS:Network, and AWS:WindowsUpdate."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemSchemaVersion"
            },
            {
              "description": "The schema version for the inventory item."
            }
          ]
        }
      },
      "required": [
        "TypeName",
        "Attributes"
      ],
      "type": "object"
    },
    "InventoryItemSchemaResultList": {
      "items": {
        "$ref": "#/definitions/InventoryItemSchema"
      },
      "type": "array"
    },
    "InventoryItemSchemaVersion": {
      "pattern": "^([0-9]{1,6})(\\.[0-9]{1,6})$",
      "type": "string"
    },
    "InventoryItemTypeName": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "^(AWS|Custom):.*$",
      "type": "string"
    },
    "InventoryItemTypeNameFilter": {
      "maxLength": 100,
      "minLength": 0,
      "type": "string"
    },
    "InventoryQueryOperatorType": {
      "enum": [
        "Equal",
        "NotEqual",
        "BeginWith",
        "LessThan",
        "GreaterThan",
        "Exists"
      ],
      "type": "string"
    },
    "InventoryResultEntity": {
      "description": "Inventory query results.",
      "properties": {
        "Data": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryResultItemMap"
            },
            {
              "description": "The data section in the inventory result entity JSON."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryResultEntityId"
            },
            {
              "description": "ID of the inventory result entity. For example, for managed instance inventory the result will be the managed instance ID. For EC2 instance inventory, the result will be the instance ID. "
            }
          ]
        }
      },
      "type": "object"
    },
    "InventoryResultEntityId": {
      "type": "string"
    },
    "InventoryResultEntityList": {
      "items": {
        "$ref": "#/definitions/InventoryResultEntity"
      },
      "type": "array"
    },
    "InventoryResultItem": {
      "description": "The inventory result item.",
      "properties": {
        "CaptureTime": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemCaptureTime"
            },
            {
              "description": "The time inventory item data was captured."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemEntryList"
            },
            {
              "description": "Contains all the inventory data of the item type. Results include attribute names and values. "
            }
          ]
        },
        "ContentHash": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemContentHash"
            },
            {
              "description": "MD5 hash of the inventory item type contents. The content hash is used to determine whether to update inventory information. The PutInventory API does not update the inventory item type contents if the MD5 hash has not changed since last update. "
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemSchemaVersion"
            },
            {
              "description": "The schema version for the inventory result item/"
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeName"
            },
            {
              "description": "The name of the inventory result item type."
            }
          ]
        }
      },
      "required": [
        "TypeName",
        "SchemaVersion",
        "Content"
      ],
      "type": "object"
    },
    "InventoryResultItemKey": {
      "type": "string"
    },
    "InventoryResultItemMap": {
      "additionalProperties": {
        "$ref": "#/definitions/InventoryResultItem"
      },
      "type": "object"
    },
    "InventorySchemaDeleteOption": {
      "enum": [
        "DisableSchema",
        "DeleteSchema"
      ],
      "type": "string"
    },
    "InventoryTypeDisplayName": {
      "type": "string"
    },
    "InvocationDoesNotExist": {},
    "InvocationTraceOutput": {
      "maxLength": 2500,
      "type": "string"
    },
    "IsSubTypeSchema": {
      "type": "boolean"
    },
    "ItemContentMismatchException": {},
    "ItemSizeLimitExceededException": {},
    "KeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "LabelParameterVersionRequest": {
      "properties": {
        "Labels": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterLabelList"
            },
            {
              "description": "One or more labels to attach to the specified parameter version."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterName"
            },
            {
              "description": "The parameter name on which you want to attach one or more labels."
            }
          ]
        },
        "ParameterVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterVersion"
            },
            {
              "description": "The specific version of the parameter on which you want to attach one or more labels. If no version is specified, the system attaches the label to the latest version."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Labels"
      ],
      "title": "LabelParameterVersionRequest",
      "type": "object"
    },
    "LabelParameterVersionResult": {
      "properties": {
        "InvalidLabels": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterLabelList"
            },
            {
              "description": "The label does not meet the requirements. For information about parameter label requirements, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-labels.html\">Labeling parameters</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "ParameterVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterVersion"
            },
            {
              "description": "The version of the parameter that has been labeled."
            }
          ]
        }
      },
      "type": "object"
    },
    "LastResourceDataSyncMessage": {
      "type": "string"
    },
    "LastResourceDataSyncStatus": {
      "enum": [
        "Successful",
        "Failed",
        "InProgress"
      ],
      "type": "string"
    },
    "LastResourceDataSyncTime": {
      "format": "date-time",
      "type": "string"
    },
    "LastSuccessfulResourceDataSyncTime": {
      "format": "date-time",
      "type": "string"
    },
    "ListAssociationVersionsRequest": {
      "properties": {
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The association ID for which you want to view all versions."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        }
      },
      "required": [
        "AssociationId"
      ],
      "title": "ListAssociationVersionsRequest",
      "type": "object"
    },
    "ListAssociationVersionsResult": {
      "properties": {
        "AssociationVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersionList"
            },
            {
              "description": "Information about all versions of the association for the specified association ID."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListAssociationsRequest": {
      "properties": {
        "AssociationFilterList": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationFilterList"
            },
            {
              "description": "<p>One or more filters. Use a filter to return a more specific list of results.</p> <note> <p>Filtering associations using the <code>InstanceID</code> attribute only returns legacy associations created using the <code>InstanceID</code> attribute. Associations targeting the instance that are part of the Target Attributes <code>ResourceGroup</code> or <code>Tags</code> are not returned.</p> </note>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "ListAssociationsRequest",
      "type": "object"
    },
    "ListAssociationsResult": {
      "properties": {
        "Associations": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationList"
            },
            {
              "description": "The associations."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListCommandInvocationsRequest": {
      "properties": {
        "CommandId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandId"
            },
            {
              "description": "(Optional) The invocations for a specific command ID."
            }
          ]
        },
        "Details": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "(Optional) If set this returns the response of the command executions and any command output. By default this is set to False. "
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandFilterList"
            },
            {
              "description": "(Optional) One or more filters. Use a filter to return a more specific list of results."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "(Optional) The command execution details for a specific instance ID."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandMaxResults"
            },
            {
              "description": "(Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "(Optional) The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "ListCommandInvocationsRequest",
      "type": "object"
    },
    "ListCommandInvocationsResult": {
      "properties": {
        "CommandInvocations": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandInvocationList"
            },
            {
              "description": "(Optional) A list of all invocations. "
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "(Optional) The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "type": "object"
    },
    "ListCommandsRequest": {
      "properties": {
        "CommandId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandId"
            },
            {
              "description": "(Optional) If provided, lists only the specified command."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandFilterList"
            },
            {
              "description": "(Optional) One or more filters. Use a filter to return a more specific list of results. "
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "<p>(Optional) Lists commands issued against this instance ID.</p> <note> <p>You can't specify an instance ID in the same command that you specify <code>Status</code> = <code>Pending</code>. This is because the command has not reached the instance yet.</p> </note>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandMaxResults"
            },
            {
              "description": "(Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "(Optional) The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "ListCommandsRequest",
      "type": "object"
    },
    "ListCommandsResult": {
      "properties": {
        "Commands": {
          "allOf": [
            {
              "$ref": "#/definitions/CommandList"
            },
            {
              "description": "(Optional) The list of commands requested by the user. "
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "(Optional) The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "type": "object"
    },
    "ListComplianceItemsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceStringFilterList"
            },
            {
              "description": "One or more compliance filters. Use a filter to return a more specific list of results."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        },
        "ResourceIds": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceResourceIdList"
            },
            {
              "description": "The ID for the resources from which to get compliance information. Currently, you can only specify one resource ID."
            }
          ]
        },
        "ResourceTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceResourceTypeList"
            },
            {
              "description": "The type of resource from which to get compliance information. Currently, the only supported resource type is <code>ManagedInstance</code>."
            }
          ]
        }
      },
      "title": "ListComplianceItemsRequest",
      "type": "object"
    },
    "ListComplianceItemsResult": {
      "properties": {
        "ComplianceItems": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceItemList"
            },
            {
              "description": "A list of compliance information for the specified resource ID. "
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListComplianceSummariesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceStringFilterList"
            },
            {
              "description": "One or more compliance or inventory filters. Use a filter to return a more specific list of results."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. Currently, you can specify null or 50. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        }
      },
      "title": "ListComplianceSummariesRequest",
      "type": "object"
    },
    "ListComplianceSummariesResult": {
      "properties": {
        "ComplianceSummaryItems": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSummaryItemList"
            },
            {
              "description": "A list of compliant and non-compliant summary counts based on compliance types. For example, this call returns State Manager associations, patches, or custom compliance types according to the filter criteria that you specified."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDocumentMetadataHistoryRequest": {
      "properties": {
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the document."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "Metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentMetadataEnum"
            },
            {
              "description": "The type of data for which details are being requested. Currently, the only supported value is <code>DocumentReviews</code>."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "required": [
        "Name",
        "Metadata"
      ],
      "title": "ListDocumentMetadataHistoryRequest",
      "type": "object"
    },
    "ListDocumentMetadataHistoryResponse": {
      "properties": {
        "Author": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentAuthor"
            },
            {
              "description": "The user ID of the person in the organization who requested the document review."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the document."
            }
          ]
        },
        "Metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentMetadataResponseInfo"
            },
            {
              "description": "Information about the response to the document approval request."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDocumentVersionsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the document. You can specify an Amazon Resource Name (ARN)."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "ListDocumentVersionsRequest",
      "type": "object"
    },
    "ListDocumentVersionsResult": {
      "properties": {
        "DocumentVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionList"
            },
            {
              "description": "The document versions."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDocumentsRequest": {
      "properties": {
        "DocumentFilterList": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFilterList"
            },
            {
              "description": "This data type is deprecated. Instead, use <code>Filters</code>."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentKeyValuesFilterList"
            },
            {
              "description": "One or more DocumentKeyValuesFilter objects. Use a filter to return a more specific list of results. For keys, you can specify one or more key-value pair tags that have been applied to a document. Other valid keys include <code>Owner</code>, <code>Name</code>, <code>PlatformTypes</code>, <code>DocumentType</code>, and <code>TargetType</code>. For example, to return documents you own use <code>Key=Owner,Values=Self</code>. To specify a custom key-value pair, use the format <code>Key=tag:tagName,Values=valueName</code>."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        }
      },
      "title": "ListDocumentsRequest",
      "type": "object"
    },
    "ListDocumentsResult": {
      "properties": {
        "DocumentIdentifiers": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentIdentifierList"
            },
            {
              "description": "The names of the Systems Manager documents."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListInventoryEntriesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryFilterList"
            },
            {
              "description": "One or more filters. Use a filter to return a more specific list of results."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance ID for which you want inventory information."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. (You received this token from a previous call.)"
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeName"
            },
            {
              "description": "The type of inventory item for which you want information."
            }
          ]
        }
      },
      "required": [
        "InstanceId",
        "TypeName"
      ],
      "title": "ListInventoryEntriesRequest",
      "type": "object"
    },
    "ListInventoryEntriesResult": {
      "properties": {
        "CaptureTime": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemCaptureTime"
            },
            {
              "description": "The time that inventory information was collected for the instance(s)."
            }
          ]
        },
        "Entries": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemEntryList"
            },
            {
              "description": "A list of inventory items on the instance(s)."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance ID targeted by the request to query inventory information."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use when requesting the next set of items. If there are no additional items to return, the string is empty."
            }
          ]
        },
        "SchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemSchemaVersion"
            },
            {
              "description": "The inventory schema version used by the instance(s)."
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeName"
            },
            {
              "description": "The type of inventory item returned by the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListOpsItemEventsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemEventFilters"
            },
            {
              "description": "One or more OpsItem filters. Use a filter to return a more specific list of results. "
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemEventMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results. "
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        }
      },
      "title": "ListOpsItemEventsRequest",
      "type": "object"
    },
    "ListOpsItemEventsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results. "
            }
          ]
        },
        "Summaries": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemEventSummaries"
            },
            {
              "description": "A list of event information for the specified OpsItems."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListOpsMetadataMaxResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "ListOpsMetadataRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataFilterList"
            },
            {
              "description": "One or more filters to limit the number of OpsMetadata objects returned by the call."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOpsMetadataMaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results."
            }
          ]
        }
      },
      "title": "ListOpsMetadataRequest",
      "type": "object"
    },
    "ListOpsMetadataResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        },
        "OpsMetadataList": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataList"
            },
            {
              "description": "Returns a list of OpsMetadata objects."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListResourceComplianceSummariesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceStringFilterList"
            },
            {
              "description": "One or more filters. Use a filter to return a more specific list of results."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        }
      },
      "title": "ListResourceComplianceSummariesRequest",
      "type": "object"
    },
    "ListResourceComplianceSummariesResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        },
        "ResourceComplianceSummaryItems": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceComplianceSummaryItemList"
            },
            {
              "description": "A summary count for specified or targeted managed instances. Summary count includes information about compliant and non-compliant State Manager associations, patch status, or custom items according to the filter criteria that you specify. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ListResourceDataSyncRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token to start the list. Use this token to get the next set of results. "
            }
          ]
        },
        "SyncType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncType"
            },
            {
              "description": "View a list of resource data syncs according to the sync type. Specify <code>SyncToDestination</code> to view resource data syncs that synchronize data to an Amazon S3 bucket. Specify <code>SyncFromSource</code> to view resource data syncs from AWS Organizations or from multiple AWS Regions."
            }
          ]
        }
      },
      "title": "ListResourceDataSyncRequest",
      "type": "object"
    },
    "ListResourceDataSyncResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return. Use this token to get the next set of results."
            }
          ]
        },
        "ResourceDataSyncItems": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncItemList"
            },
            {
              "description": "A list of your current Resource Data Sync configurations and their statuses."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The resource ID for which you want to see a list of tags."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceTypeForTagging"
            },
            {
              "description": "Returns a list of tags for a specific resource type."
            }
          ]
        }
      },
      "required": [
        "ResourceType",
        "ResourceId"
      ],
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResult": {
      "properties": {
        "TagList": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "A list of tags."
            }
          ]
        }
      },
      "type": "object"
    },
    "LoggingInfo": {
      "description": "<p>Information about an S3 bucket to write instance-level logs to.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>",
      "properties": {
        "S3BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/S3BucketName"
            },
            {
              "description": "The name of an S3 bucket where execution logs are stored ."
            }
          ]
        },
        "S3KeyPrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/S3KeyPrefix"
            },
            {
              "description": "(Optional) The S3 bucket subfolder. "
            }
          ]
        },
        "S3Region": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Region"
            },
            {
              "description": "The Region where the S3 bucket is located."
            }
          ]
        }
      },
      "required": [
        "S3BucketName",
        "S3Region"
      ],
      "type": "object"
    },
    "Long": {
      "type": "integer"
    },
    "MaintenanceWindowAllowUnassociatedTargets": {
      "type": "boolean"
    },
    "MaintenanceWindowAutomationParameters": {
      "description": "The parameters for an AUTOMATION task type.",
      "properties": {
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of an Automation document to use during task execution."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "<p>The parameters for the AUTOMATION task.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For AUTOMATION task types, Systems Manager ignores any values specified for these parameters.</p> </note>"
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowCutoff": {
      "maximum": 23,
      "minimum": 0,
      "type": "integer"
    },
    "MaintenanceWindowDescription": {
      "format": "password",
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowDurationHours": {
      "maximum": 24,
      "minimum": 1,
      "type": "integer"
    },
    "MaintenanceWindowEnabled": {
      "type": "boolean"
    },
    "MaintenanceWindowExecution": {
      "description": "Describes the information about an execution of a maintenance window. ",
      "properties": {
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the execution finished."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the execution started."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatus"
            },
            {
              "description": "The status of the execution."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails"
            },
            {
              "description": "The details explaining the Status. Only available for certain status values."
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowExecutionId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowExecutionList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowExecution"
      },
      "type": "array"
    },
    "MaintenanceWindowExecutionStatus": {
      "enum": [
        "PENDING",
        "IN_PROGRESS",
        "SUCCESS",
        "FAILED",
        "TIMED_OUT",
        "CANCELLING",
        "CANCELLED",
        "SKIPPED_OVERLAPPING"
      ],
      "type": "string"
    },
    "MaintenanceWindowExecutionStatusDetails": {
      "maxLength": 250,
      "minLength": 0,
      "type": "string"
    },
    "MaintenanceWindowExecutionTaskExecutionId": {
      "type": "string"
    },
    "MaintenanceWindowExecutionTaskId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowExecutionTaskIdList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowExecutionTaskId"
      },
      "type": "array"
    },
    "MaintenanceWindowExecutionTaskIdentity": {
      "description": "Information about a task execution performed as part of a maintenance window execution.",
      "properties": {
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the task execution finished."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the task execution started."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatus"
            },
            {
              "description": "The status of the task execution."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails"
            },
            {
              "description": "The details explaining the status of the task execution. Only available for certain status values."
            }
          ]
        },
        "TaskArn": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskArn"
            },
            {
              "description": "The ARN of the task that ran."
            }
          ]
        },
        "TaskExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskId"
            },
            {
              "description": "The ID of the specific task execution in the maintenance window execution."
            }
          ]
        },
        "TaskType": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskType"
            },
            {
              "description": "The type of task that ran."
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution that ran the task."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowExecutionTaskIdentityList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowExecutionTaskIdentity"
      },
      "type": "array"
    },
    "MaintenanceWindowExecutionTaskInvocationId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowExecutionTaskInvocationIdentity": {
      "description": "Describes the information about a task invocation for a particular target as part of a task execution performed as part of a maintenance window execution.",
      "properties": {
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the invocation finished."
            }
          ]
        },
        "ExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskExecutionId"
            },
            {
              "description": "The ID of the action performed in the service that actually handled the task invocation. If the task type is RUN_COMMAND, this value is the command ID."
            }
          ]
        },
        "InvocationId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationId"
            },
            {
              "description": "The ID of the task invocation."
            }
          ]
        },
        "OwnerInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/OwnerInformation"
            },
            {
              "description": "User-provided value that was specified when the target was registered with the maintenance window. This was also included in any CloudWatch events raised during the task invocation."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationParameters"
            },
            {
              "description": "The parameters that were provided for the invocation when it was run."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time the invocation started."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatus"
            },
            {
              "description": "The status of the task invocation."
            }
          ]
        },
        "StatusDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionStatusDetails"
            },
            {
              "description": "The details explaining the status of the task invocation. Only available for certain Status values. "
            }
          ]
        },
        "TaskExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionTaskId"
            },
            {
              "description": "The ID of the specific task execution in the maintenance window execution."
            }
          ]
        },
        "TaskType": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskType"
            },
            {
              "description": "The task type."
            }
          ]
        },
        "WindowExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowExecutionId"
            },
            {
              "description": "The ID of the maintenance window execution that ran the task."
            }
          ]
        },
        "WindowTargetId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskTargetId"
            },
            {
              "description": "The ID of the target definition in this maintenance window the invocation was performed for."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowExecutionTaskInvocationIdentityList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowExecutionTaskInvocationIdentity"
      },
      "type": "array"
    },
    "MaintenanceWindowExecutionTaskInvocationParameters": {
      "format": "password",
      "type": "string"
    },
    "MaintenanceWindowFilter": {
      "description": "Filter used in the request. Supported filter keys are Name and Enabled.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowFilterKey"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowFilterValues"
            },
            {
              "description": "The filter values."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowFilterKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowFilterList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowFilter"
      },
      "maxItems": 5,
      "minItems": 0,
      "type": "array"
    },
    "MaintenanceWindowFilterValue": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowFilterValues": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowFilterValue"
      },
      "type": "array"
    },
    "MaintenanceWindowId": {
      "maxLength": 20,
      "minLength": 20,
      "pattern": "^mw-[0-9a-f]{17}$",
      "type": "string"
    },
    "MaintenanceWindowIdentity": {
      "description": "Information about the maintenance window.",
      "properties": {
        "Cutoff": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowCutoff"
            },
            {
              "description": "The number of hours before the end of the maintenance window that Systems Manager stops scheduling new tasks for execution."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "A description of the maintenance window."
            }
          ]
        },
        "Duration": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDurationHours"
            },
            {
              "description": "The duration of the maintenance window in hours."
            }
          ]
        },
        "Enabled": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowEnabled"
            },
            {
              "description": "Indicates whether the maintenance window is enabled."
            }
          ]
        },
        "EndDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The name of the maintenance window."
            }
          ]
        },
        "NextExecutionTime": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The next time the maintenance window will actually run, taking into account any specified times for the maintenance window to become active or inactive."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowSchedule"
            },
            {
              "description": "The schedule of the maintenance window in the form of a cron or rate expression."
            }
          ]
        },
        "ScheduleOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowOffset"
            },
            {
              "description": "The number of days to wait to run a maintenance window after the scheduled CRON expression date and time."
            }
          ]
        },
        "ScheduleTimezone": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTimezone"
            },
            {
              "description": "The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format."
            }
          ]
        },
        "StartDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowIdentityForTarget": {
      "description": "The maintenance window to which the specified target belongs.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The name of the maintenance window."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowIdentityList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowIdentity"
      },
      "type": "array"
    },
    "MaintenanceWindowLambdaClientContext": {
      "maxLength": 8000,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowLambdaParameters": {
      "description": "<p>The parameters for a LAMBDA task type.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For Lambda tasks, Systems Manager ignores any values specified for TaskParameters and LoggingInfo.</p> </note>",
      "properties": {
        "ClientContext": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowLambdaClientContext"
            },
            {
              "description": "Pass client-specific information to the Lambda function that you are invoking. You can then process the client information in your Lambda function as you choose through the context variable."
            }
          ]
        },
        "Payload": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowLambdaPayload"
            },
            {
              "description": "JSON to provide to your Lambda function as input."
            }
          ]
        },
        "Qualifier": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowLambdaQualifier"
            },
            {
              "description": "(Optional) Specify a Lambda function version or alias name. If you specify a function version, the action uses the qualified function ARN to invoke a specific Lambda function. If you specify an alias name, the action uses the alias ARN to invoke the Lambda function version to which the alias points."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowLambdaPayload": {
      "format": "password",
      "maxLength": 4096,
      "type": "string"
    },
    "MaintenanceWindowLambdaQualifier": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowMaxResults": {
      "maximum": 100,
      "minimum": 10,
      "type": "integer"
    },
    "MaintenanceWindowName": {
      "maxLength": 128,
      "minLength": 3,
      "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
      "type": "string"
    },
    "MaintenanceWindowOffset": {
      "maximum": 6,
      "minimum": 1,
      "type": "integer"
    },
    "MaintenanceWindowResourceType": {
      "enum": [
        "INSTANCE",
        "RESOURCE_GROUP"
      ],
      "type": "string"
    },
    "MaintenanceWindowRunCommandParameters": {
      "description": "<p>The parameters for a RUN_COMMAND task type.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For Run Command tasks, Systems Manager uses specified values for <code>TaskParameters</code> and <code>LoggingInfo</code> only if no values are specified for <code>TaskInvocationParameters</code>. </p> </note>",
      "properties": {
        "CloudWatchOutputConfig": {
          "$ref": "#/definitions/CloudWatchOutputConfig"
        },
        "Comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "Information about the commands to run."
            }
          ]
        },
        "DocumentHash": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentHash"
            },
            {
              "description": "The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated."
            }
          ]
        },
        "DocumentHashType": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentHashType"
            },
            {
              "description": "SHA-256 or SHA-1. SHA-1 hashes have been deprecated."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "<p>The SSM document version to use in the request. You can specify $DEFAULT, $LATEST, or a specific version number. If you run commands by using the AWS CLI, then you must escape the first two options by using a backslash. If you specify a version number, then you don't need to use the backslash. For example:</p> <p>--document-version \"\\$DEFAULT\"</p> <p>--document-version \"\\$LATEST\"</p> <p>--document-version \"3\"</p>"
            }
          ]
        },
        "NotificationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationConfig"
            },
            {
              "description": "Configurations for sending notifications about command status changes on a per-instance basis."
            }
          ]
        },
        "OutputS3BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/S3BucketName"
            },
            {
              "description": "The name of the S3 bucket."
            }
          ]
        },
        "OutputS3KeyPrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/S3KeyPrefix"
            },
            {
              "description": "The S3 bucket subfolder."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "The parameters for the RUN_COMMAND task execution."
            }
          ]
        },
        "ServiceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks."
            }
          ]
        },
        "TimeoutSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/TimeoutSeconds"
            },
            {
              "description": "If this time is reached and the command has not already started running, it doesn't run."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowSchedule": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowSearchMaxResults": {
      "minimum": 1,
      "type": "integer"
    },
    "MaintenanceWindowStepFunctionsInput": {
      "format": "password",
      "maxLength": 4096,
      "type": "string"
    },
    "MaintenanceWindowStepFunctionsName": {
      "maxLength": 80,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowStepFunctionsParameters": {
      "description": "<p>The parameters for a STEP_FUNCTIONS task.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For Step Functions tasks, Systems Manager ignores any values specified for <code>TaskParameters</code> and <code>LoggingInfo</code>.</p> </note>",
      "properties": {
        "Input": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStepFunctionsInput"
            },
            {
              "description": "The inputs for the STEP_FUNCTIONS task."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStepFunctionsName"
            },
            {
              "description": "The name of the STEP_FUNCTIONS task."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowStringDateTime": {
      "type": "string"
    },
    "MaintenanceWindowTarget": {
      "description": "The target registered with the maintenance window.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "A description for the target."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The name for the maintenance window target."
            }
          ]
        },
        "OwnerInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/OwnerInformation"
            },
            {
              "description": "A user-provided value that will be included in any CloudWatch events that are raised while running tasks for these targets in this maintenance window."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowResourceType"
            },
            {
              "description": "The type of target that is being registered with the maintenance window."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "<p>The targets, either instances or tags.</p> <p>Specify instances using the following format:</p> <p> <code>Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;</code> </p> <p>Tags are specified using the following format:</p> <p> <code>Key=&lt;tag name&gt;,Values=&lt;tag value&gt;</code>.</p>"
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window to register the target with."
            }
          ]
        },
        "WindowTargetId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTargetId"
            },
            {
              "description": "The ID of the target."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowTargetId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowTargetList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowTarget"
      },
      "type": "array"
    },
    "MaintenanceWindowTask": {
      "description": "Information about a task defined for a maintenance window.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "A description of the task."
            }
          ]
        },
        "LoggingInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LoggingInfo"
            },
            {
              "description": "<p>Information about an S3 bucket to write task-level logs to.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>"
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The maximum number of targets this task can be run for, in parallel."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The maximum number of errors allowed before this task stops being scheduled."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The task name."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskPriority"
            },
            {
              "description": "The priority of the task in the maintenance window. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel."
            }
          ]
        },
        "ServiceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The targets (either instances or tags). Instances are specified using Key=instanceids,Values=&lt;instanceid1&gt;,&lt;instanceid2&gt;. Tags are specified using Key=&lt;tag name&gt;,Values=&lt;tag value&gt;."
            }
          ]
        },
        "TaskArn": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskArn"
            },
            {
              "description": "The resource that the task uses during execution. For RUN_COMMAND and AUTOMATION task types, <code>TaskArn</code> is the Systems Manager document name or ARN. For LAMBDA tasks, it's the function name or ARN. For STEP_FUNCTIONS tasks, it's the state machine ARN."
            }
          ]
        },
        "TaskParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskParameters"
            },
            {
              "description": "<p>The parameters that should be passed to the task when it is run.</p> <note> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskType"
            },
            {
              "description": "The type of task. The type can be one of the following: RUN_COMMAND, AUTOMATION, LAMBDA, or STEP_FUNCTIONS."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window where the task is registered."
            }
          ]
        },
        "WindowTaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskId"
            },
            {
              "description": "The task ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowTaskArn": {
      "maxLength": 1600,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowTaskId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "MaintenanceWindowTaskInvocationParameters": {
      "description": "The parameters for task execution.",
      "properties": {
        "Automation": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowAutomationParameters"
            },
            {
              "description": "The parameters for an AUTOMATION task type."
            }
          ]
        },
        "Lambda": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowLambdaParameters"
            },
            {
              "description": "The parameters for a LAMBDA task type."
            }
          ]
        },
        "RunCommand": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowRunCommandParameters"
            },
            {
              "description": "The parameters for a RUN_COMMAND task type."
            }
          ]
        },
        "StepFunctions": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStepFunctionsParameters"
            },
            {
              "description": "The parameters for a STEP_FUNCTIONS task type."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowTaskList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowTask"
      },
      "type": "array"
    },
    "MaintenanceWindowTaskParameterName": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowTaskParameterValue": {
      "format": "password",
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "MaintenanceWindowTaskParameterValueExpression": {
      "description": "Defines the values for a task parameter.",
      "properties": {
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskParameterValueList"
            },
            {
              "description": "This field contains an array of 0 or more strings, each 1 to 255 characters in length."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaintenanceWindowTaskParameterValueList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowTaskParameterValue"
      },
      "type": "array"
    },
    "MaintenanceWindowTaskParameters": {
      "additionalProperties": {
        "$ref": "#/definitions/MaintenanceWindowTaskParameterValueExpression"
      },
      "type": "object"
    },
    "MaintenanceWindowTaskParametersList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowTaskParameters"
      },
      "type": "array"
    },
    "MaintenanceWindowTaskPriority": {
      "minimum": 0,
      "type": "integer"
    },
    "MaintenanceWindowTaskTargetId": {
      "maxLength": 36,
      "type": "string"
    },
    "MaintenanceWindowTaskType": {
      "enum": [
        "RUN_COMMAND",
        "AUTOMATION",
        "STEP_FUNCTIONS",
        "LAMBDA"
      ],
      "type": "string"
    },
    "MaintenanceWindowTimezone": {
      "type": "string"
    },
    "MaintenanceWindowsForTargetList": {
      "items": {
        "$ref": "#/definitions/MaintenanceWindowIdentityForTarget"
      },
      "type": "array"
    },
    "ManagedInstanceId": {
      "pattern": "^mi-[0-9a-f]{17}$",
      "type": "string"
    },
    "MaxConcurrency": {
      "maxLength": 7,
      "minLength": 1,
      "pattern": "^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$",
      "type": "string"
    },
    "MaxDocumentSizeExceeded": {},
    "MaxErrors": {
      "maxLength": 7,
      "minLength": 1,
      "pattern": "^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$",
      "type": "string"
    },
    "MaxResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxResultsEC2Compatible": {
      "maximum": 50,
      "minimum": 5,
      "type": "integer"
    },
    "MetadataKey": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^(?!\\s*$).+",
      "type": "string"
    },
    "MetadataKeysToDeleteList": {
      "items": {
        "$ref": "#/definitions/MetadataKey"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "MetadataMap": {
      "additionalProperties": {
        "$ref": "#/definitions/MetadataValue"
      },
      "maxProperties": 5,
      "minProperties": 1,
      "type": "object"
    },
    "MetadataValue": {
      "description": "Metadata to assign to an Application Manager application.",
      "properties": {
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataValueString"
            },
            {
              "description": "Metadata value to assign to an Application Manager application."
            }
          ]
        }
      },
      "type": "object"
    },
    "MetadataValueString": {
      "maxLength": 4096,
      "minLength": 1,
      "type": "string"
    },
    "ModifyDocumentPermissionRequest": {
      "properties": {
        "AccountIdsToAdd": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountIdList"
            },
            {
              "description": "The AWS user accounts that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>."
            }
          ]
        },
        "AccountIdsToRemove": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountIdList"
            },
            {
              "description": "The AWS user accounts that should no longer have access to the document. The AWS user account can either be a group of account IDs or <i>All</i>. This action has a higher priority than <i>AccountIdsToAdd</i>. If you specify an account ID to add and the same ID to remove, the system removes access to the document."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document that you want to share."
            }
          ]
        },
        "PermissionType": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentPermissionType"
            },
            {
              "description": "The permission type for the document. The permission type can be <i>Share</i>."
            }
          ]
        },
        "SharedDocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/SharedDocumentVersion"
            },
            {
              "description": "(Optional) The version of the document to share. If it's not specified, the system choose the <code>Default</code> version to share."
            }
          ]
        }
      },
      "required": [
        "Name",
        "PermissionType"
      ],
      "title": "ModifyDocumentPermissionRequest",
      "type": "object"
    },
    "ModifyDocumentPermissionResponse": {
      "properties": {},
      "type": "object"
    },
    "NextToken": {
      "type": "string"
    },
    "NonCompliantSummary": {
      "description": "A summary of resources that are not compliant. The summary is organized according to resource type.",
      "properties": {
        "NonCompliantCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSummaryCount"
            },
            {
              "description": "The total number of compliance items that are not compliant."
            }
          ]
        },
        "SeveritySummary": {
          "allOf": [
            {
              "$ref": "#/definitions/SeveritySummary"
            },
            {
              "description": "A summary of the non-compliance severity by compliance type"
            }
          ]
        }
      },
      "type": "object"
    },
    "NormalStringMap": {
      "additionalProperties": {
        "$ref": "#/definitions/String"
      },
      "type": "object"
    },
    "NotificationArn": {
      "type": "string"
    },
    "NotificationConfig": {
      "description": "Configurations for sending notifications.",
      "properties": {
        "NotificationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationArn"
            },
            {
              "description": "An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic. Run Command pushes notifications about command status changes to this topic."
            }
          ]
        },
        "NotificationEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationEventList"
            },
            {
              "description": "The different events for which you can receive notifications. These events include the following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more about these events, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html\">Monitoring Systems Manager status changes using Amazon SNS notifications</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "NotificationType": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationType"
            },
            {
              "description": "Command: Receive notification when the status of a command changes. Invocation: For commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. "
            }
          ]
        }
      },
      "type": "object"
    },
    "NotificationEvent": {
      "enum": [
        "All",
        "InProgress",
        "Success",
        "TimedOut",
        "Cancelled",
        "Failed"
      ],
      "type": "string"
    },
    "NotificationEventList": {
      "items": {
        "$ref": "#/definitions/NotificationEvent"
      },
      "type": "array"
    },
    "NotificationType": {
      "enum": [
        "Command",
        "Invocation"
      ],
      "type": "string"
    },
    "OperatingSystem": {
      "enum": [
        "WINDOWS",
        "AMAZON_LINUX",
        "AMAZON_LINUX_2",
        "UBUNTU",
        "REDHAT_ENTERPRISE_LINUX",
        "SUSE",
        "CENTOS",
        "ORACLE_LINUX",
        "DEBIAN",
        "MACOS"
      ],
      "type": "string"
    },
    "OpsAggregator": {
      "description": "One or more aggregators for viewing counts of OpsItems using different dimensions such as <code>Source</code>, <code>CreatedTime</code>, or <code>Source and CreatedTime</code>, to name a few.",
      "properties": {
        "AggregatorType": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsAggregatorType"
            },
            {
              "description": "Either a Range or Count aggregator for limiting an OpsItem summary."
            }
          ]
        },
        "Aggregators": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsAggregatorList"
            },
            {
              "description": "A nested aggregator for viewing counts of OpsItems."
            }
          ]
        },
        "AttributeName": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsDataAttributeName"
            },
            {
              "description": "The name of an OpsItem attribute on which to limit the count of OpsItems."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsFilterList"
            },
            {
              "description": "The aggregator filters."
            }
          ]
        },
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsDataTypeName"
            },
            {
              "description": "The data type name to use for viewing counts of OpsItems."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsAggregatorValueMap"
            },
            {
              "description": "The aggregator value."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsAggregatorList": {
      "items": {
        "$ref": "#/definitions/OpsAggregator"
      },
      "maxItems": 12,
      "minItems": 1,
      "type": "array"
    },
    "OpsAggregatorType": {
      "maxLength": 20,
      "minLength": 1,
      "pattern": "^(range|count|sum)",
      "type": "string"
    },
    "OpsAggregatorValue": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string"
    },
    "OpsAggregatorValueKey": {
      "maxLength": 32,
      "minLength": 1,
      "type": "string"
    },
    "OpsAggregatorValueMap": {
      "additionalProperties": {
        "$ref": "#/definitions/OpsAggregatorValue"
      },
      "maxProperties": 5,
      "minProperties": 0,
      "type": "object"
    },
    "OpsDataAttributeName": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "OpsDataTypeName": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "^(AWS|Custom):.*$",
      "type": "string"
    },
    "OpsEntity": {
      "description": "The result of the query.",
      "properties": {
        "Data": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsEntityItemMap"
            },
            {
              "description": "The data returned by the query."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsEntityId"
            },
            {
              "description": "The query ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsEntityId": {
      "type": "string"
    },
    "OpsEntityItem": {
      "description": "The OpsItem summaries result item.",
      "properties": {
        "CaptureTime": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsEntityItemCaptureTime"
            },
            {
              "description": "The time OpsItem data was captured."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsEntityItemEntryList"
            },
            {
              "description": "The detailed data content for an OpsItem summaries result item."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsEntityItemCaptureTime": {
      "pattern": "^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$",
      "type": "string"
    },
    "OpsEntityItemEntry": {
      "additionalProperties": {
        "$ref": "#/definitions/AttributeValue"
      },
      "maxProperties": 50,
      "minProperties": 0,
      "type": "object"
    },
    "OpsEntityItemEntryList": {
      "items": {
        "$ref": "#/definitions/OpsEntityItemEntry"
      },
      "maxItems": 10000,
      "minItems": 0,
      "type": "array"
    },
    "OpsEntityItemKey": {
      "type": "string"
    },
    "OpsEntityItemMap": {
      "additionalProperties": {
        "$ref": "#/definitions/OpsEntityItem"
      },
      "type": "object"
    },
    "OpsEntityList": {
      "items": {
        "$ref": "#/definitions/OpsEntity"
      },
      "type": "array"
    },
    "OpsFilter": {
      "description": "A filter for viewing OpsItem summaries.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsFilterKey"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsFilterOperatorType"
            },
            {
              "description": "The type of filter."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsFilterValueList"
            },
            {
              "description": "The filter value."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "OpsFilterKey": {
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "OpsFilterList": {
      "items": {
        "$ref": "#/definitions/OpsFilter"
      },
      "maxItems": 5,
      "minItems": 1,
      "type": "array"
    },
    "OpsFilterOperatorType": {
      "enum": [
        "Equal",
        "NotEqual",
        "BeginWith",
        "LessThan",
        "GreaterThan",
        "Exists"
      ],
      "type": "string"
    },
    "OpsFilterValue": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "OpsFilterValueList": {
      "items": {
        "$ref": "#/definitions/OpsFilterValue"
      },
      "maxItems": 40,
      "minItems": 1,
      "type": "array"
    },
    "OpsItem": {
      "description": "Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html\">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. ",
      "properties": {
        "ActualEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time a runbook workflow ended. Currently reported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "ActualStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time a runbook workflow started. Currently reported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "Category": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemCategory"
            },
            {
              "description": "An OpsItem category. Category options include: Availability, Cost, Performance, Recovery, Security."
            }
          ]
        },
        "CreatedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ARN of the AWS account that created the OpsItem."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time the OpsItem was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemDescription"
            },
            {
              "description": "The OpsItem description."
            }
          ]
        },
        "LastModifiedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ARN of the AWS account that last updated the OpsItem."
            }
          ]
        },
        "LastModifiedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time the OpsItem was last updated."
            }
          ]
        },
        "Notifications": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemNotifications"
            },
            {
              "description": "The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this OpsItem is edited or changed."
            }
          ]
        },
        "OperationalData": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemOperationalData"
            },
            {
              "description": "<p>Operational data is custom data that provides useful reference details about the OpsItem. For example, you can specify log files, error strings, license keys, troubleshooting tips, or other relevant data. You enter operational data as key-value pairs. The key has a maximum length of 128 characters. The value has a maximum size of 20 KB.</p> <important> <p>Operational data keys <i>can't</i> begin with the following: amazon, aws, amzn, ssm, /amazon, /aws, /amzn, /ssm.</p> </important> <p>You can choose to make the data searchable by other users in the account or you can restrict search access. Searchable data means that all users with access to the OpsItem Overview page (as provided by the <a>DescribeOpsItems</a> API action) can view and search on the specified data. Operational data that is not searchable is only viewable by users who have access to the OpsItem (as provided by the <a>GetOpsItem</a> API action).</p> <p>Use the <code>/aws/resources</code> key in OperationalData to specify a related resource in the request. Use the <code>/aws/automations</code> key in OperationalData to associate an Automation runbook with the OpsItem. To view AWS CLI example commands that use these keys, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-creating-OpsItems.html#OpsCenter-manually-create-OpsItems\">Creating OpsItems manually</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "OpsItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemId"
            },
            {
              "description": "The ID of the OpsItem."
            }
          ]
        },
        "OpsItemType": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemType"
            },
            {
              "description": "The type of OpsItem. Currently, the only valid values are <code>/aws/changerequest</code> and <code>/aws/issue</code>."
            }
          ]
        },
        "PlannedEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time specified in a change request for a runbook workflow to end. Currently supported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "PlannedStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time specified in a change request for a runbook workflow to start. Currently supported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemPriority"
            },
            {
              "description": "The importance of this OpsItem in relation to other OpsItems in the system."
            }
          ]
        },
        "RelatedOpsItems": {
          "allOf": [
            {
              "$ref": "#/definitions/RelatedOpsItems"
            },
            {
              "description": "One or more OpsItems that share something in common with the current OpsItem. For example, related OpsItems can include OpsItems with similar error messages, impacted resources, or statuses for the impacted resource."
            }
          ]
        },
        "Severity": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemSeverity"
            },
            {
              "description": "The severity of the OpsItem. Severity options range from 1 to 4."
            }
          ]
        },
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemSource"
            },
            {
              "description": "The origin of the OpsItem, such as Amazon EC2 or Systems Manager. The impacted resource is a subset of source."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemStatus"
            },
            {
              "description": "The OpsItem status. Status can be <code>Open</code>, <code>In Progress</code>, or <code>Resolved</code>. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-working-with-OpsItems-editing-details.html\">Editing OpsItem details</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "Title": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemTitle"
            },
            {
              "description": "A short heading that describes the nature of the OpsItem and the impacted resource."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The version of this OpsItem. Each time the OpsItem is edited the version number increments by one."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsItemAlreadyExistsException": {},
    "OpsItemCategory": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^(?!\\s*$).+",
      "type": "string"
    },
    "OpsItemDataKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^(?!\\s*$).+",
      "type": "string"
    },
    "OpsItemDataType": {
      "enum": [
        "SearchableString",
        "String"
      ],
      "type": "string"
    },
    "OpsItemDataValue": {
      "description": "An object that defines the value of the key and its type in the OperationalData map.",
      "properties": {
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemDataType"
            },
            {
              "description": "The type of key-value pair. Valid types include <code>SearchableString</code> and <code>String</code>."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemDataValueString"
            },
            {
              "description": "The value of the OperationalData key."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsItemDataValueString": {
      "pattern": "[\\s\\S]*\\S[\\s\\S]*",
      "type": "string"
    },
    "OpsItemDescription": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "[\\s\\S]*\\S[\\s\\S]*",
      "type": "string"
    },
    "OpsItemEventFilter": {
      "description": "Describes a filter for a specific list of OpsItem events. You can filter event information by using tags. You specify tags by using a key-value pair mapping. ",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemEventFilterKey"
            },
            {
              "description": "The name of the filter key. Currently, the only supported value is <code>OpsItemId</code>."
            }
          ]
        },
        "Operator": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemEventFilterOperator"
            },
            {
              "description": "The operator used by the filter call. Currently, the only supported value is <code>Equal</code>."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemEventFilterValues"
            },
            {
              "description": "The values for the filter, consisting of one or more OpsItem IDs."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values",
        "Operator"
      ],
      "type": "object"
    },
    "OpsItemEventFilterKey": {
      "enum": [
        "OpsItemId"
      ],
      "type": "string"
    },
    "OpsItemEventFilterOperator": {
      "enum": [
        "Equal"
      ],
      "type": "string"
    },
    "OpsItemEventFilterValue": {
      "maxLength": 15,
      "minLength": 1,
      "pattern": "^(oi)-[0-9a-f]{12}$",
      "type": "string"
    },
    "OpsItemEventFilterValues": {
      "items": {
        "$ref": "#/definitions/OpsItemEventFilterValue"
      },
      "type": "array"
    },
    "OpsItemEventFilters": {
      "items": {
        "$ref": "#/definitions/OpsItemEventFilter"
      },
      "type": "array"
    },
    "OpsItemEventMaxResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "OpsItemEventSummaries": {
      "items": {
        "$ref": "#/definitions/OpsItemEventSummary"
      },
      "type": "array"
    },
    "OpsItemEventSummary": {
      "description": "Summary information about an OpsItem event.",
      "properties": {
        "CreatedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemIdentity"
            },
            {
              "description": "Information about the user or resource that created the OpsItem event."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time the OpsItem event was created."
            }
          ]
        },
        "Detail": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Specific information about the OpsItem event."
            }
          ]
        },
        "DetailType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The type of information provided as a detail."
            }
          ]
        },
        "EventId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID of the OpsItem event."
            }
          ]
        },
        "OpsItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID of the OpsItem."
            }
          ]
        },
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The source of the OpsItem event."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsItemFilter": {
      "description": "Describes an OpsItem filter.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemFilterKey"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "Operator": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemFilterOperator"
            },
            {
              "description": "The operator used by the filter call."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemFilterValues"
            },
            {
              "description": "The filter value."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values",
        "Operator"
      ],
      "type": "object"
    },
    "OpsItemFilterKey": {
      "enum": [
        "Status",
        "CreatedBy",
        "Source",
        "Priority",
        "Title",
        "OpsItemId",
        "CreatedTime",
        "LastModifiedTime",
        "ActualStartTime",
        "ActualEndTime",
        "PlannedStartTime",
        "PlannedEndTime",
        "OperationalData",
        "OperationalDataKey",
        "OperationalDataValue",
        "ResourceId",
        "AutomationId",
        "Category",
        "Severity",
        "OpsItemType",
        "ChangeRequestByRequesterArn",
        "ChangeRequestByRequesterName",
        "ChangeRequestByApproverArn",
        "ChangeRequestByApproverName",
        "ChangeRequestByTemplate",
        "ChangeRequestByTargetsResourceGroup"
      ],
      "type": "string"
    },
    "OpsItemFilterOperator": {
      "enum": [
        "Equal",
        "Contains",
        "GreaterThan",
        "LessThan"
      ],
      "type": "string"
    },
    "OpsItemFilterValue": {
      "type": "string"
    },
    "OpsItemFilterValues": {
      "items": {
        "$ref": "#/definitions/OpsItemFilterValue"
      },
      "type": "array"
    },
    "OpsItemFilters": {
      "items": {
        "$ref": "#/definitions/OpsItemFilter"
      },
      "type": "array"
    },
    "OpsItemId": {
      "pattern": "^(oi)-[0-9a-f]{12}$",
      "type": "string"
    },
    "OpsItemIdentity": {
      "description": "Information about the user or resource that created an OpsItem event.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem event."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsItemInvalidParameterException": {},
    "OpsItemLimitExceededException": {},
    "OpsItemMaxResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "OpsItemNotFoundException": {},
    "OpsItemNotification": {
      "description": "A notification about the OpsItem.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this OpsItem is edited or changed."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsItemNotifications": {
      "items": {
        "$ref": "#/definitions/OpsItemNotification"
      },
      "type": "array"
    },
    "OpsItemOperationalData": {
      "additionalProperties": {
        "$ref": "#/definitions/OpsItemDataValue"
      },
      "type": "object"
    },
    "OpsItemOpsDataKeysList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "OpsItemPriority": {
      "maximum": 5,
      "minimum": 1,
      "type": "integer"
    },
    "OpsItemSeverity": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^(?!\\s*$).+",
      "type": "string"
    },
    "OpsItemSource": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^(?!\\s*$).+",
      "type": "string"
    },
    "OpsItemStatus": {
      "enum": [
        "Open",
        "InProgress",
        "Resolved",
        "Pending",
        "TimedOut",
        "Cancelling",
        "Cancelled",
        "Failed",
        "CompletedWithSuccess",
        "CompletedWithFailure",
        "Scheduled",
        "RunbookInProgress",
        "PendingChangeCalendarOverride",
        "ChangeCalendarOverrideApproved",
        "ChangeCalendarOverrideRejected",
        "PendingApproval",
        "Approved",
        "Rejected"
      ],
      "type": "string"
    },
    "OpsItemSummaries": {
      "items": {
        "$ref": "#/definitions/OpsItemSummary"
      },
      "type": "array"
    },
    "OpsItemSummary": {
      "description": "A count of OpsItems.",
      "properties": {
        "ActualEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time a runbook workflow ended. Currently reported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "ActualStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time a runbook workflow started. Currently reported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "Category": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemCategory"
            },
            {
              "description": "A list of OpsItems by category."
            }
          ]
        },
        "CreatedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time the OpsItem was created."
            }
          ]
        },
        "LastModifiedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem."
            }
          ]
        },
        "LastModifiedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time the OpsItem was last updated."
            }
          ]
        },
        "OperationalData": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemOperationalData"
            },
            {
              "description": "Operational data is custom data that provides useful reference details about the OpsItem. "
            }
          ]
        },
        "OpsItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemId"
            },
            {
              "description": "The ID of the OpsItem."
            }
          ]
        },
        "OpsItemType": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemType"
            },
            {
              "description": "The type of OpsItem. Currently, the only valid values are <code>/aws/changerequest</code> and <code>/aws/issue</code>."
            }
          ]
        },
        "PlannedEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time specified in a change request for a runbook workflow to end. Currently supported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "PlannedStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time specified in a change request for a runbook workflow to start. Currently supported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemPriority"
            },
            {
              "description": "The importance of this OpsItem in relation to other OpsItems in the system."
            }
          ]
        },
        "Severity": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemSeverity"
            },
            {
              "description": "A list of OpsItems by severity."
            }
          ]
        },
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemSource"
            },
            {
              "description": "The impacted AWS resource."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemStatus"
            },
            {
              "description": "The OpsItem status. Status can be <code>Open</code>, <code>In Progress</code>, or <code>Resolved</code>."
            }
          ]
        },
        "Title": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemTitle"
            },
            {
              "description": "A short heading that describes the nature of the OpsItem and the impacted resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsItemTitle": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "^(?!\\s*$).+",
      "type": "string"
    },
    "OpsItemType": {
      "type": "string"
    },
    "OpsMetadata": {
      "description": "Operational metadata for an application in Application Manager.",
      "properties": {
        "CreationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the OpsMetadata objects was created."
            }
          ]
        },
        "LastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the OpsMetadata object was last updated."
            }
          ]
        },
        "LastModifiedUser": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The user name who last updated the OpsMetadata object."
            }
          ]
        },
        "OpsMetadataArn": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the OpsMetadata Object or blob."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataResourceId"
            },
            {
              "description": "The ID of the Application Manager application."
            }
          ]
        }
      },
      "type": "object"
    },
    "OpsMetadataAlreadyExistsException": {},
    "OpsMetadataArn": {
      "maxLength": 1011,
      "minLength": 1,
      "pattern": "arn:(aws[a-zA-Z-]*)?:ssm:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:opsmetadata\\/([a-zA-Z0-9-_\\.\\/]*)",
      "type": "string"
    },
    "OpsMetadataFilter": {
      "description": "A filter to limit the number of OpsMetadata objects displayed.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataFilterKey"
            },
            {
              "description": "A filter key."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataFilterValueList"
            },
            {
              "description": "A filter value."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "OpsMetadataFilterKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^(?!\\s*$).+",
      "type": "string"
    },
    "OpsMetadataFilterList": {
      "items": {
        "$ref": "#/definitions/OpsMetadataFilter"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "OpsMetadataFilterValue": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "OpsMetadataFilterValueList": {
      "items": {
        "$ref": "#/definitions/OpsMetadataFilterValue"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "OpsMetadataInvalidArgumentException": {},
    "OpsMetadataKeyLimitExceededException": {},
    "OpsMetadataLimitExceededException": {},
    "OpsMetadataList": {
      "items": {
        "$ref": "#/definitions/OpsMetadata"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "OpsMetadataNotFoundException": {},
    "OpsMetadataResourceId": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "^(?!\\s*$).+",
      "type": "string"
    },
    "OpsMetadataTooManyUpdatesException": {},
    "OpsResultAttribute": {
      "description": "The OpsItem data type to return.",
      "properties": {
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsDataTypeName"
            },
            {
              "description": "Name of the data type. Valid value: AWS:OpsItem, AWS:EC2InstanceInformation, AWS:OpsItemTrendline, or AWS:ComplianceSummary."
            }
          ]
        }
      },
      "required": [
        "TypeName"
      ],
      "type": "object"
    },
    "OpsResultAttributeList": {
      "items": {
        "$ref": "#/definitions/OpsResultAttribute"
      },
      "minItems": 1,
      "type": "array"
    },
    "OutputSource": {
      "description": "Information about the source where the association execution details are stored.",
      "properties": {
        "OutputSourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputSourceId"
            },
            {
              "description": "The ID of the output source, for example the URL of an S3 bucket."
            }
          ]
        },
        "OutputSourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputSourceType"
            },
            {
              "description": "The type of source where the association execution details are stored, for example, Amazon S3."
            }
          ]
        }
      },
      "type": "object"
    },
    "OutputSourceId": {
      "maxLength": 36,
      "minLength": 36,
      "type": "string"
    },
    "OutputSourceType": {
      "type": "string"
    },
    "OwnerInformation": {
      "format": "password",
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "PSParameterName": {
      "maxLength": 2048,
      "minLength": 1,
      "type": "string"
    },
    "PSParameterSelector": {
      "maxLength": 128,
      "minLength": 0,
      "type": "string"
    },
    "PSParameterValue": {
      "type": "string"
    },
    "PSParameterVersion": {
      "type": "integer"
    },
    "Parameter": {
      "description": "An Systems Manager parameter in Parameter Store.",
      "properties": {
        "ARN": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the parameter."
            }
          ]
        },
        "DataType": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterDataType"
            },
            {
              "description": "The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The default is <code>text</code>."
            }
          ]
        },
        "LastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "Date the parameter was last changed or updated and the parameter version was created."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterName"
            },
            {
              "description": "The name of the parameter."
            }
          ]
        },
        "Selector": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterSelector"
            },
            {
              "description": "<p>Either the version number or the label used to retrieve the parameter value. Specify selectors by using one of the following formats:</p> <p>parameter_name:version</p> <p>parameter_name:label</p>"
            }
          ]
        },
        "SourceResult": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Applies to parameters that reference information in other AWS services. SourceResult is the raw result or response from the source."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterType"
            },
            {
              "description": "The type of parameter. Valid values include the following: <code>String</code>, <code>StringList</code>, and <code>SecureString</code>."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterValue"
            },
            {
              "description": "The parameter value."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterVersion"
            },
            {
              "description": "The parameter version."
            }
          ]
        }
      },
      "type": "object"
    },
    "ParameterAlreadyExists": {},
    "ParameterDataType": {
      "maxLength": 128,
      "minLength": 0,
      "type": "string"
    },
    "ParameterDescription": {
      "maxLength": 1024,
      "minLength": 0,
      "type": "string"
    },
    "ParameterHistory": {
      "description": "Information about parameter usage.",
      "properties": {
        "AllowedPattern": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedPattern"
            },
            {
              "description": "<p>Parameter names can include the following letters and symbols.</p> <p>a-zA-Z0-9_.-</p>"
            }
          ]
        },
        "DataType": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterDataType"
            },
            {
              "description": "The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The default is <code>text</code>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterDescription"
            },
            {
              "description": "Information about the parameter."
            }
          ]
        },
        "KeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterKeyId"
            },
            {
              "description": "The ID of the query key used for this parameter."
            }
          ]
        },
        "Labels": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterLabelList"
            },
            {
              "description": "Labels assigned to the parameter version."
            }
          ]
        },
        "LastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "Date the parameter was last changed or updated."
            }
          ]
        },
        "LastModifiedUser": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the AWS user who last changed the parameter."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterName"
            },
            {
              "description": "The name of the parameter."
            }
          ]
        },
        "Policies": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterPolicyList"
            },
            {
              "description": "<p>Information about the policies assigned to a parameter.</p> <p> <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html\">Assigning parameter policies</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "Tier": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterTier"
            },
            {
              "description": "The parameter tier."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterType"
            },
            {
              "description": "The type of parameter used."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterValue"
            },
            {
              "description": "The parameter value."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterVersion"
            },
            {
              "description": "The parameter version."
            }
          ]
        }
      },
      "type": "object"
    },
    "ParameterHistoryList": {
      "items": {
        "$ref": "#/definitions/ParameterHistory"
      },
      "type": "array"
    },
    "ParameterInlinePolicy": {
      "description": "One or more policies assigned to a parameter.",
      "properties": {
        "PolicyStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The status of the policy. Policies report the following statuses: Pending (the policy has not been enforced or applied yet), Finished (the policy was applied), Failed (the policy was not applied), or InProgress (the policy is being applied now). "
            }
          ]
        },
        "PolicyText": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The JSON text of the policy."
            }
          ]
        },
        "PolicyType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The type of policy. Parameter Store supports the following policy types: Expiration, ExpirationNotification, and NoChangeNotification. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ParameterKeyId": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([a-zA-Z0-9:/_-]+)$",
      "type": "string"
    },
    "ParameterLabel": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "ParameterLabelList": {
      "items": {
        "$ref": "#/definitions/ParameterLabel"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "ParameterLimitExceeded": {},
    "ParameterList": {
      "items": {
        "$ref": "#/definitions/Parameter"
      },
      "type": "array"
    },
    "ParameterMaxVersionLimitExceeded": {},
    "ParameterMetadata": {
      "description": "Metadata includes information like the ARN of the last user and the date/time the parameter was last used.",
      "properties": {
        "AllowedPattern": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedPattern"
            },
            {
              "description": "<p>A parameter name can include only the following letters and symbols.</p> <p>a-zA-Z0-9_.-</p>"
            }
          ]
        },
        "DataType": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterDataType"
            },
            {
              "description": "The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The default is <code>text</code>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterDescription"
            },
            {
              "description": "Description of the parameter actions."
            }
          ]
        },
        "KeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterKeyId"
            },
            {
              "description": "The ID of the query key used for this parameter."
            }
          ]
        },
        "LastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "Date the parameter was last changed or updated."
            }
          ]
        },
        "LastModifiedUser": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the AWS user who last changed the parameter."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterName"
            },
            {
              "description": "The parameter name."
            }
          ]
        },
        "Policies": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterPolicyList"
            },
            {
              "description": "A list of policies associated with a parameter."
            }
          ]
        },
        "Tier": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterTier"
            },
            {
              "description": "The parameter tier."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterType"
            },
            {
              "description": "The type of parameter. Valid parameter types include the following: <code>String</code>, <code>StringList</code>, and <code>SecureString</code>."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterVersion"
            },
            {
              "description": "The parameter version."
            }
          ]
        }
      },
      "type": "object"
    },
    "ParameterMetadataList": {
      "items": {
        "$ref": "#/definitions/ParameterMetadata"
      },
      "type": "array"
    },
    "ParameterName": {
      "type": "string"
    },
    "ParameterNameList": {
      "items": {
        "$ref": "#/definitions/PSParameterName"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "ParameterNotFound": {},
    "ParameterPatternMismatchException": {},
    "ParameterPolicies": {
      "maxLength": 4096,
      "minLength": 1,
      "type": "string"
    },
    "ParameterPolicyList": {
      "items": {
        "$ref": "#/definitions/ParameterInlinePolicy"
      },
      "type": "array"
    },
    "ParameterStringFilter": {
      "description": "One or more filters. Use a filter to return a more specific list of results.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterStringFilterKey"
            },
            {
              "description": "<p>The name of the filter.</p> <note> <p>The <code>ParameterStringFilter</code> object is used by the <a>DescribeParameters</a> and <a>GetParametersByPath</a> API actions. However, not all of the pattern values listed for <code>Key</code> can be used with both actions.</p> <p>For <code>DescribeActions</code>, all of the listed patterns are valid, with the exception of <code>Label</code>.</p> <p>For <code>GetParametersByPath</code>, the following patterns listed for <code>Key</code> are not valid: <code>tag</code>, <code>Name</code>, <code>Path</code>, and <code>Tier</code>.</p> <p>For examples of CLI commands demonstrating valid parameter filter constructions, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-search.html\">Searching for Systems Manager parameters</a> in the <i>AWS Systems Manager User Guide</i>.</p> </note>"
            }
          ]
        },
        "Option": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterStringQueryOption"
            },
            {
              "description": "<p>For all filters used with <a>DescribeParameters</a>, valid options include <code>Equals</code> and <code>BeginsWith</code>. The <code>Name</code> filter additionally supports the <code>Contains</code> option. (Exception: For filters using the key <code>Path</code>, valid options include <code>Recursive</code> and <code>OneLevel</code>.)</p> <p>For filters used with <a>GetParametersByPath</a>, valid options include <code>Equals</code> and <code>BeginsWith</code>. (Exception: For filters using <code>Label</code> as the Key name, the only valid option is <code>Equals</code>.)</p>"
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterStringFilterValueList"
            },
            {
              "description": "The value you want to search for."
            }
          ]
        }
      },
      "required": [
        "Key"
      ],
      "type": "object"
    },
    "ParameterStringFilterKey": {
      "maxLength": 132,
      "minLength": 1,
      "pattern": "tag:.+|Name|Type|KeyId|Path|Label|Tier|DataType",
      "type": "string"
    },
    "ParameterStringFilterList": {
      "items": {
        "$ref": "#/definitions/ParameterStringFilter"
      },
      "type": "array"
    },
    "ParameterStringFilterValue": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "ParameterStringFilterValueList": {
      "items": {
        "$ref": "#/definitions/ParameterStringFilterValue"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "ParameterStringQueryOption": {
      "maxLength": 10,
      "minLength": 1,
      "type": "string"
    },
    "ParameterTier": {
      "enum": [
        "Standard",
        "Advanced",
        "Intelligent-Tiering"
      ],
      "type": "string"
    },
    "ParameterType": {
      "enum": [
        "String",
        "StringList",
        "SecureString"
      ],
      "type": "string"
    },
    "ParameterValue": {
      "type": "string"
    },
    "ParameterValueList": {
      "items": {
        "$ref": "#/definitions/ParameterValue"
      },
      "type": "array"
    },
    "ParameterVersionLabelLimitExceeded": {},
    "ParameterVersionNotFound": {},
    "Parameters": {
      "additionalProperties": {
        "$ref": "#/definitions/ParameterValueList"
      },
      "type": "object"
    },
    "ParametersFilter": {
      "description": "This data type is deprecated. Instead, use <a>ParameterStringFilter</a>.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersFilterKey"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersFilterValueList"
            },
            {
              "description": "The filter values."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "ParametersFilterKey": {
      "enum": [
        "Name",
        "Type",
        "KeyId"
      ],
      "type": "string"
    },
    "ParametersFilterList": {
      "items": {
        "$ref": "#/definitions/ParametersFilter"
      },
      "type": "array"
    },
    "ParametersFilterValue": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "ParametersFilterValueList": {
      "items": {
        "$ref": "#/definitions/ParametersFilterValue"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "Patch": {
      "description": "Represents metadata about a patch.",
      "properties": {
        "AdvisoryIds": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchAdvisoryIdList"
            },
            {
              "description": "The Advisory ID of the patch. For example, <code>RHSA-2020:3779</code>. Applies to Linux-based instances only."
            }
          ]
        },
        "Arch": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchArch"
            },
            {
              "description": "The architecture of the patch. For example, in <code>example-pkg-0.710.10-2.7.abcd.x86_64</code>, the architecture is indicated by <code>x86_64</code>. Applies to Linux-based instances only."
            }
          ]
        },
        "BugzillaIds": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchBugzillaIdList"
            },
            {
              "description": "The Bugzilla ID of the patch. For example, <code>1600646</code>. Applies to Linux-based instances only."
            }
          ]
        },
        "CVEIds": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchCVEIdList"
            },
            {
              "description": "The Common Vulnerabilities and Exposures (CVE) ID of the patch. For example, <code>CVE-2011-3192</code>. Applies to Linux-based instances only."
            }
          ]
        },
        "Classification": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchClassification"
            },
            {
              "description": "The classification of the patch. For example, <code>SecurityUpdates</code>, <code>Updates</code>, or <code>CriticalUpdates</code>."
            }
          ]
        },
        "ContentUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchContentUrl"
            },
            {
              "description": "The URL where more information can be obtained about the patch."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchDescription"
            },
            {
              "description": "The description of the patch."
            }
          ]
        },
        "Epoch": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchEpoch"
            },
            {
              "description": "The epoch of the patch. For example in <code>pkg-example-EE-20180914-2.2.amzn1.noarch</code>, the epoch value is <code>20180914-2</code>. Applies to Linux-based instances only."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchId"
            },
            {
              "description": "<p>The ID of the patch. Applies to Windows patches only.</p> <note> <p>This ID is not the same as the Microsoft Knowledge Base ID.</p> </note>"
            }
          ]
        },
        "KbNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchKbNumber"
            },
            {
              "description": "The Microsoft Knowledge Base ID of the patch. Applies to Windows patches only."
            }
          ]
        },
        "Language": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchLanguage"
            },
            {
              "description": "The language of the patch if it's language-specific."
            }
          ]
        },
        "MsrcNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchMsrcNumber"
            },
            {
              "description": "The ID of the Microsoft Security Response Center (MSRC) bulletin the patch is related to. For example, <code>MS14-045</code>. Applies to Windows patches only."
            }
          ]
        },
        "MsrcSeverity": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchMsrcSeverity"
            },
            {
              "description": "The severity of the patch, such as <code>Critical</code>, <code>Important</code>, or <code>Moderate</code>. Applies to Windows patches only."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchName"
            },
            {
              "description": "The name of the patch. Applies to Linux-based instances only."
            }
          ]
        },
        "Product": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchProduct"
            },
            {
              "description": "The specific product the patch is applicable for. For example, <code>WindowsServer2016</code> or <code>AmazonLinux2018.03</code>."
            }
          ]
        },
        "ProductFamily": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchProductFamily"
            },
            {
              "description": "The product family the patch is applicable for. For example, <code>Windows</code> or <code>Amazon Linux 2</code>."
            }
          ]
        },
        "Release": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchRelease"
            },
            {
              "description": "The particular release of a patch. For example, in <code>pkg-example-EE-20180914-2.2.amzn1.noarch</code>, the release is <code>2.amaz1</code>. Applies to Linux-based instances only."
            }
          ]
        },
        "ReleaseDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the patch was released."
            }
          ]
        },
        "Repository": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchRepository"
            },
            {
              "description": "The source patch repository for the operating system and version, such as <code>trusty-security</code> for Ubuntu Server 14.04 LTE and <code>focal-security</code> for Ubuntu Server 20.04 LTE. Applies to Linux-based instances only."
            }
          ]
        },
        "Severity": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSeverity"
            },
            {
              "description": "The severity level of the patch. For example, <code>CRITICAL</code> or <code>MODERATE</code>."
            }
          ]
        },
        "Title": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchTitle"
            },
            {
              "description": "The title of the patch."
            }
          ]
        },
        "Vendor": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchVendor"
            },
            {
              "description": "The name of the vendor providing the patch."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchVersion"
            },
            {
              "description": "The version number of the patch. For example, in <code>example-pkg-1.710.10-2.7.abcd.x86_64</code>, the version number is indicated by <code>-1</code>. Applies to Linux-based instances only."
            }
          ]
        }
      },
      "type": "object"
    },
    "PatchAction": {
      "enum": [
        "ALLOW_AS_DEPENDENCY",
        "BLOCK"
      ],
      "type": "string"
    },
    "PatchAdvisoryId": {
      "type": "string"
    },
    "PatchAdvisoryIdList": {
      "items": {
        "$ref": "#/definitions/PatchAdvisoryId"
      },
      "type": "array"
    },
    "PatchArch": {
      "type": "string"
    },
    "PatchBaselineIdentity": {
      "description": "Defines the basic information about a patch baseline.",
      "properties": {
        "BaselineDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineDescription"
            },
            {
              "description": "The description of the patch baseline."
            }
          ]
        },
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline."
            }
          ]
        },
        "BaselineName": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineName"
            },
            {
              "description": "The name of the patch baseline."
            }
          ]
        },
        "DefaultBaseline": {
          "allOf": [
            {
              "$ref": "#/definitions/DefaultBaseline"
            },
            {
              "description": "Whether this is the default baseline. Note that Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system."
            }
          ]
        },
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatingSystem"
            },
            {
              "description": "Defines the operating system the patch baseline applies to. The Default value is WINDOWS. "
            }
          ]
        }
      },
      "type": "object"
    },
    "PatchBaselineIdentityList": {
      "items": {
        "$ref": "#/definitions/PatchBaselineIdentity"
      },
      "type": "array"
    },
    "PatchBaselineMaxResults": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "PatchBugzillaId": {
      "type": "string"
    },
    "PatchBugzillaIdList": {
      "items": {
        "$ref": "#/definitions/PatchBugzillaId"
      },
      "type": "array"
    },
    "PatchCVEId": {
      "type": "string"
    },
    "PatchCVEIdList": {
      "items": {
        "$ref": "#/definitions/PatchCVEId"
      },
      "type": "array"
    },
    "PatchCVEIds": {
      "type": "string"
    },
    "PatchClassification": {
      "type": "string"
    },
    "PatchComplianceData": {
      "description": "Information about the state of a patch on a particular instance as it relates to the patch baseline used to patch the instance.",
      "properties": {
        "CVEIds": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchCVEIds"
            },
            {
              "description": "The IDs of one or more Common Vulnerabilities and Exposure (CVE) issues that are resolved by the patch."
            }
          ]
        },
        "Classification": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchClassification"
            },
            {
              "description": "The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates)."
            }
          ]
        },
        "InstalledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date/time the patch was installed on the instance. Note that not all operating systems provide this level of information."
            }
          ]
        },
        "KBId": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchKbNumber"
            },
            {
              "description": "The operating system-specific ID of the patch."
            }
          ]
        },
        "Severity": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSeverity"
            },
            {
              "description": "The severity of the patch (for example, Critical, Important, Moderate)."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceDataState"
            },
            {
              "description": "<p>The state of the patch on the instance, such as INSTALLED or FAILED.</p> <p>For descriptions of each patch state, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch\">About patch compliance</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "Title": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchTitle"
            },
            {
              "description": "The title of the patch."
            }
          ]
        }
      },
      "required": [
        "Title",
        "KBId",
        "Classification",
        "Severity",
        "State",
        "InstalledTime"
      ],
      "type": "object"
    },
    "PatchComplianceDataList": {
      "items": {
        "$ref": "#/definitions/PatchComplianceData"
      },
      "type": "array"
    },
    "PatchComplianceDataState": {
      "enum": [
        "INSTALLED",
        "INSTALLED_OTHER",
        "INSTALLED_PENDING_REBOOT",
        "INSTALLED_REJECTED",
        "MISSING",
        "NOT_APPLICABLE",
        "FAILED"
      ],
      "type": "string"
    },
    "PatchComplianceLevel": {
      "enum": [
        "CRITICAL",
        "HIGH",
        "MEDIUM",
        "LOW",
        "INFORMATIONAL",
        "UNSPECIFIED"
      ],
      "type": "string"
    },
    "PatchComplianceMaxResults": {
      "maximum": 100,
      "minimum": 10,
      "type": "integer"
    },
    "PatchContentUrl": {
      "type": "string"
    },
    "PatchDeploymentStatus": {
      "enum": [
        "APPROVED",
        "PENDING_APPROVAL",
        "EXPLICIT_APPROVED",
        "EXPLICIT_REJECTED"
      ],
      "type": "string"
    },
    "PatchDescription": {
      "type": "string"
    },
    "PatchEpoch": {
      "type": "integer"
    },
    "PatchFailedCount": {
      "type": "integer"
    },
    "PatchFilter": {
      "description": "<p> Defines which patches should be included in a patch baseline.</p> <p>A patch filter consists of a key and a set of values. The filter key is a patch property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching criterion for the patch property indicated by the key. For example, if the filter key is PRODUCT and the filter values are [\"Office 2013\", \"Office 2016\"], then the filter accepts all patches where product name is either \"Office 2013\" or \"Office 2016\". The filter values can be exact values for the patch property given as a key, or a wildcard (*), which matches all values.</p> <p>You can view lists of valid values for the patch properties by running the <code>DescribePatchProperties</code> command. For information about which patch properties can be used with each major operating system, see <a>DescribePatchProperties</a>.</p>",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchFilterKey"
            },
            {
              "description": "<p>The key for the filter.</p> <p>Run the <a>DescribePatchProperties</a> command to view lists of valid keys for each operating system type.</p>"
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchFilterValueList"
            },
            {
              "description": "<p>The value for the filter key.</p> <p>Run the <a>DescribePatchProperties</a> command to view lists of valid values for each key based on operating system type.</p>"
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "PatchFilterGroup": {
      "description": "A set of patch filters, typically used for approval rules.",
      "properties": {
        "PatchFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchFilterList"
            },
            {
              "description": "The set of patch filters that make up the group."
            }
          ]
        }
      },
      "required": [
        "PatchFilters"
      ],
      "type": "object"
    },
    "PatchFilterKey": {
      "enum": [
        "ARCH",
        "ADVISORY_ID",
        "BUGZILLA_ID",
        "PATCH_SET",
        "PRODUCT",
        "PRODUCT_FAMILY",
        "CLASSIFICATION",
        "CVE_ID",
        "EPOCH",
        "MSRC_SEVERITY",
        "NAME",
        "PATCH_ID",
        "SECTION",
        "PRIORITY",
        "REPOSITORY",
        "RELEASE",
        "SEVERITY",
        "SECURITY",
        "VERSION"
      ],
      "type": "string"
    },
    "PatchFilterList": {
      "items": {
        "$ref": "#/definitions/PatchFilter"
      },
      "maxItems": 4,
      "minItems": 0,
      "type": "array"
    },
    "PatchFilterValue": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "PatchFilterValueList": {
      "items": {
        "$ref": "#/definitions/PatchFilterValue"
      },
      "maxItems": 20,
      "minItems": 1,
      "type": "array"
    },
    "PatchGroup": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "PatchGroupList": {
      "items": {
        "$ref": "#/definitions/PatchGroup"
      },
      "type": "array"
    },
    "PatchGroupPatchBaselineMapping": {
      "description": "The mapping between a patch group and the patch baseline the patch group is registered with.",
      "properties": {
        "BaselineIdentity": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchBaselineIdentity"
            },
            {
              "description": "The patch baseline the patch group is registered with."
            }
          ]
        },
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group registered with the patch baseline."
            }
          ]
        }
      },
      "type": "object"
    },
    "PatchGroupPatchBaselineMappingList": {
      "items": {
        "$ref": "#/definitions/PatchGroupPatchBaselineMapping"
      },
      "type": "array"
    },
    "PatchId": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "PatchIdList": {
      "items": {
        "$ref": "#/definitions/PatchId"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "PatchInstalledCount": {
      "type": "integer"
    },
    "PatchInstalledOtherCount": {
      "type": "integer"
    },
    "PatchInstalledPendingRebootCount": {
      "type": "integer"
    },
    "PatchInstalledRejectedCount": {
      "type": "integer"
    },
    "PatchKbNumber": {
      "type": "string"
    },
    "PatchLanguage": {
      "type": "string"
    },
    "PatchList": {
      "items": {
        "$ref": "#/definitions/Patch"
      },
      "type": "array"
    },
    "PatchMissingCount": {
      "type": "integer"
    },
    "PatchMsrcNumber": {
      "type": "string"
    },
    "PatchMsrcSeverity": {
      "type": "string"
    },
    "PatchName": {
      "type": "string"
    },
    "PatchNotApplicableCount": {
      "type": "integer"
    },
    "PatchOperationType": {
      "enum": [
        "Scan",
        "Install"
      ],
      "type": "string"
    },
    "PatchOrchestratorFilter": {
      "description": "Defines a filter used in Patch Manager APIs.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchOrchestratorFilterKey"
            },
            {
              "description": "The key for the filter."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchOrchestratorFilterValues"
            },
            {
              "description": "The value for the filter."
            }
          ]
        }
      },
      "type": "object"
    },
    "PatchOrchestratorFilterKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "PatchOrchestratorFilterList": {
      "items": {
        "$ref": "#/definitions/PatchOrchestratorFilter"
      },
      "maxItems": 5,
      "minItems": 0,
      "type": "array"
    },
    "PatchOrchestratorFilterValue": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "PatchOrchestratorFilterValues": {
      "items": {
        "$ref": "#/definitions/PatchOrchestratorFilterValue"
      },
      "type": "array"
    },
    "PatchProduct": {
      "type": "string"
    },
    "PatchProductFamily": {
      "type": "string"
    },
    "PatchPropertiesList": {
      "items": {
        "$ref": "#/definitions/PatchPropertyEntry"
      },
      "type": "array"
    },
    "PatchProperty": {
      "enum": [
        "PRODUCT",
        "PRODUCT_FAMILY",
        "CLASSIFICATION",
        "MSRC_SEVERITY",
        "PRIORITY",
        "SEVERITY"
      ],
      "type": "string"
    },
    "PatchPropertyEntry": {
      "additionalProperties": {
        "$ref": "#/definitions/AttributeValue"
      },
      "type": "object"
    },
    "PatchRelease": {
      "type": "string"
    },
    "PatchRepository": {
      "type": "string"
    },
    "PatchRule": {
      "description": "Defines an approval rule for a patch baseline.",
      "properties": {
        "ApproveAfterDays": {
          "allOf": [
            {
              "$ref": "#/definitions/ApproveAfterDays"
            },
            {
              "description": "The number of days after the release date of each patch matched by the rule that the patch is marked as approved in the patch baseline. For example, a value of <code>7</code> means that patches are approved seven days after they are released. Not supported on Ubuntu Server."
            }
          ]
        },
        "ApproveUntilDate": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchStringDateTime"
            },
            {
              "description": "<p>The cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Not supported on Ubuntu Server.</p> <p>Enter dates in the format <code>YYYY-MM-DD</code>. For example, <code>2020-12-31</code>.</p>"
            }
          ]
        },
        "ComplianceLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceLevel"
            },
            {
              "description": "A compliance severity level for all approved patches in a patch baseline."
            }
          ]
        },
        "EnableNonSecurity": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "For instances identified by the approval rule filters, enables a patch baseline to apply non-security updates available in the specified repository. The default value is 'false'. Applies to Linux instances only."
            }
          ]
        },
        "PatchFilterGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchFilterGroup"
            },
            {
              "description": "The patch filter group that defines the criteria for the rule."
            }
          ]
        }
      },
      "required": [
        "PatchFilterGroup"
      ],
      "type": "object"
    },
    "PatchRuleGroup": {
      "description": "A set of rules defining the approval rules for a patch baseline.",
      "properties": {
        "PatchRules": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchRuleList"
            },
            {
              "description": "The rules that make up the rule group."
            }
          ]
        }
      },
      "required": [
        "PatchRules"
      ],
      "type": "object"
    },
    "PatchRuleList": {
      "items": {
        "$ref": "#/definitions/PatchRule"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "PatchSet": {
      "enum": [
        "OS",
        "APPLICATION"
      ],
      "type": "string"
    },
    "PatchSeverity": {
      "type": "string"
    },
    "PatchSource": {
      "description": "Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.",
      "properties": {
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSourceConfiguration"
            },
            {
              "description": "<p>The value of the yum repo configuration. For example:</p> <p> <code>[main]</code> </p> <p> <code>cachedir=/var/cache/yum/$basesearch$releasever</code> </p> <p> <code>keepcache=0</code> </p> <p> <code>debuglevel=2</code> </p>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSourceName"
            },
            {
              "description": "The name specified to identify the patch source."
            }
          ]
        },
        "Products": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSourceProductList"
            },
            {
              "description": "The specific operating system versions a patch repository applies to, such as \"Ubuntu16.04\", \"AmazonLinux2016.09\", \"RedhatEnterpriseLinux7.2\" or \"Suse12.7\". For lists of supported product values, see <a>PatchFilter</a>."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Products",
        "Configuration"
      ],
      "type": "object"
    },
    "PatchSourceConfiguration": {
      "format": "password",
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "PatchSourceList": {
      "items": {
        "$ref": "#/definitions/PatchSource"
      },
      "maxItems": 20,
      "minItems": 0,
      "type": "array"
    },
    "PatchSourceName": {
      "pattern": "^[a-zA-Z0-9_\\-.]{3,50}$",
      "type": "string"
    },
    "PatchSourceProduct": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "PatchSourceProductList": {
      "items": {
        "$ref": "#/definitions/PatchSourceProduct"
      },
      "maxItems": 20,
      "minItems": 1,
      "type": "array"
    },
    "PatchStatus": {
      "description": "Information about the approval status of a patch.",
      "properties": {
        "ApprovalDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date the patch was approved (or will be approved if the status is PENDING_APPROVAL)."
            }
          ]
        },
        "ComplianceLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceLevel"
            },
            {
              "description": "The compliance severity level for a patch."
            }
          ]
        },
        "DeploymentStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchDeploymentStatus"
            },
            {
              "description": "The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED, EXPLICIT_REJECTED)."
            }
          ]
        }
      },
      "type": "object"
    },
    "PatchStringDateTime": {
      "maxLength": 10,
      "minLength": 1,
      "type": "string"
    },
    "PatchTitle": {
      "type": "string"
    },
    "PatchUnreportedNotApplicableCount": {
      "type": "integer"
    },
    "PatchVendor": {
      "type": "string"
    },
    "PatchVersion": {
      "type": "string"
    },
    "PingStatus": {
      "enum": [
        "Online",
        "ConnectionLost",
        "Inactive"
      ],
      "type": "string"
    },
    "PlatformType": {
      "enum": [
        "Windows",
        "Linux"
      ],
      "type": "string"
    },
    "PlatformTypeList": {
      "items": {
        "$ref": "#/definitions/PlatformType"
      },
      "type": "array"
    },
    "PoliciesLimitExceededException": {},
    "Product": {
      "type": "string"
    },
    "ProgressCounters": {
      "description": "An aggregate of step execution statuses displayed in the AWS Console for a multi-Region and multi-account Automation execution.",
      "properties": {
        "CancelledSteps": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The total number of steps that the system cancelled in all specified AWS Regions and accounts for the current Automation execution."
            }
          ]
        },
        "FailedSteps": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The total number of steps that failed to run in all specified AWS Regions and accounts for the current Automation execution."
            }
          ]
        },
        "SuccessSteps": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The total number of steps that successfully completed in all specified AWS Regions and accounts for the current Automation execution."
            }
          ]
        },
        "TimedOutSteps": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The total number of steps that timed out in all specified AWS Regions and accounts for the current Automation execution."
            }
          ]
        },
        "TotalSteps": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The total number of steps run in all specified AWS Regions and accounts for the current Automation execution."
            }
          ]
        }
      },
      "type": "object"
    },
    "PutComplianceItemsRequest": {
      "properties": {
        "ComplianceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceTypeName"
            },
            {
              "description": "Specify the compliance type. For example, specify Association (for a State Manager association), Patch, or Custom:<code>string</code>."
            }
          ]
        },
        "ExecutionSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceExecutionSummary"
            },
            {
              "description": "A summary of the call execution that includes an execution ID, the type of execution (for example, <code>Command</code>), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'."
            }
          ]
        },
        "ItemContentHash": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceItemContentHash"
            },
            {
              "description": "MD5 or SHA-256 content hash. The content hash is used to determine if existing information should be overwritten or ignored. If the content hashes match, the request to put compliance information is ignored."
            }
          ]
        },
        "Items": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceItemEntryList"
            },
            {
              "description": "Information about the compliance as defined by the resource type. For example, for a patch compliance type, <code>Items</code> includes information about the PatchSeverity, Classification, and so on."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceResourceId"
            },
            {
              "description": "Specify an ID for this resource. For a managed instance, this is the instance ID."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceResourceType"
            },
            {
              "description": "Specify the type of resource. <code>ManagedInstance</code> is currently the only supported resource type."
            }
          ]
        },
        "UploadType": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceUploadType"
            },
            {
              "description": "<p>The mode for uploading compliance items. You can specify <code>COMPLETE</code> or <code>PARTIAL</code>. In <code>COMPLETE</code> mode, the system overwrites all existing compliance information for the resource. You must provide a full list of compliance items each time you send the request.</p> <p>In <code>PARTIAL</code> mode, the system overwrites compliance information for a specific association. The association must be configured with <code>SyncCompliance</code> set to <code>MANUAL</code>. By default, all requests use <code>COMPLETE</code> mode.</p> <note> <p>This attribute is only valid for association compliance.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "ResourceId",
        "ResourceType",
        "ComplianceType",
        "ExecutionSummary",
        "Items"
      ],
      "title": "PutComplianceItemsRequest",
      "type": "object"
    },
    "PutComplianceItemsResult": {
      "properties": {},
      "type": "object"
    },
    "PutInventoryMessage": {
      "type": "string"
    },
    "PutInventoryRequest": {
      "properties": {
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "An instance ID where you want to add or update inventory items."
            }
          ]
        },
        "Items": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemList"
            },
            {
              "description": "The inventory items that you want to add or update on instances."
            }
          ]
        }
      },
      "required": [
        "InstanceId",
        "Items"
      ],
      "title": "PutInventoryRequest",
      "type": "object"
    },
    "PutInventoryResult": {
      "properties": {
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/PutInventoryMessage"
            },
            {
              "description": "Information about the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "PutParameterRequest": {
      "properties": {
        "AllowedPattern": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedPattern"
            },
            {
              "description": "A regular expression used to validate the parameter value. For example, for String types with values restricted to numbers, you can specify the following: AllowedPattern=^\\d+$ "
            }
          ]
        },
        "DataType": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterDataType"
            },
            {
              "description": "<p>The data type for a <code>String</code> parameter. Supported data types include plain text and Amazon Machine Image IDs.</p> <p> <b>The following data type values are supported.</b> </p> <ul> <li> <p> <code>text</code> </p> </li> <li> <p> <code>aws:ec2:image</code> </p> </li> </ul> <p>When you create a <code>String</code> parameter and specify <code>aws:ec2:image</code>, Systems Manager validates the parameter value is in the required format, such as <code>ami-12345abcdeEXAMPLE</code>, and that the specified AMI is available in your AWS account. For more information, see <a href=\"http://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-ec2-aliases.html\">Native parameter support for Amazon Machine Image IDs</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterDescription"
            },
            {
              "description": "<p>Information about the parameter that you want to add to the system. Optional but recommended.</p> <important> <p>Do not enter personally identifiable information in this field.</p> </important>"
            }
          ]
        },
        "KeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterKeyId"
            },
            {
              "description": "<p>The KMS Key ID that you want to use to encrypt a parameter. Either the default AWS Key Management Service (AWS KMS) key automatically assigned to your AWS account or a custom key. Required for parameters that use the <code>SecureString</code> data type.</p> <p>If you don't specify a key ID, the system uses the default key associated with your AWS account.</p> <ul> <li> <p>To use your default AWS KMS key, choose the <code>SecureString</code> data type, and do <i>not</i> specify the <code>Key ID</code> when you create the parameter. The system automatically populates <code>Key ID</code> with your default KMS key.</p> </li> <li> <p>To use a custom KMS key, choose the <code>SecureString</code> data type with the <code>Key ID</code> parameter.</p> </li> </ul>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterName"
            },
            {
              "description": "<p>The fully qualified name of the parameter that you want to add to the system. The fully qualified name includes the complete hierarchy of the parameter path and name. For parameters in a hierarchy, you must include a leading forward slash character (/) when you create or reference a parameter. For example: <code>/Dev/DBServer/MySQL/db-string13</code> </p> <p>Naming Constraints:</p> <ul> <li> <p>Parameter names are case sensitive.</p> </li> <li> <p>A parameter name must be unique within an AWS Region</p> </li> <li> <p>A parameter name can't be prefixed with \"aws\" or \"ssm\" (case-insensitive).</p> </li> <li> <p>Parameter names can include only the following symbols and letters: <code>a-zA-Z0-9_.-/</code> </p> </li> <li> <p>A parameter name can't include spaces.</p> </li> <li> <p>Parameter hierarchies are limited to a maximum depth of fifteen levels.</p> </li> </ul> <p>For additional information about valid values for parameter names, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-parameter-name-constraints.html\">About requirements and constraints for parameter names</a> in the <i>AWS Systems Manager User Guide</i>.</p> <note> <p>The maximum length constraint listed below includes capacity for additional system attributes that are not part of the name. The maximum length for a parameter name, including the full length of the parameter ARN, is 1011 characters. For example, the length of the following parameter name is 65 characters, not 20 characters:</p> <p> <code>arn:aws:ssm:us-east-2:111122223333:parameter/ExampleParameterName</code> </p> </note>"
            }
          ]
        },
        "Overwrite": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Overwrite an existing parameter. If not specified, will default to \"false\"."
            }
          ]
        },
        "Policies": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterPolicies"
            },
            {
              "description": "<p>One or more policies to apply to a parameter. This action takes a JSON array. Parameter Store supports the following policy types:</p> <p>Expiration: This policy deletes the parameter after it expires. When you create the policy, you specify the expiration date. You can update the expiration date and time by updating the policy. Updating the <i>parameter</i> does not affect the expiration date and time. When the expiration time is reached, Parameter Store deletes the parameter.</p> <p>ExpirationNotification: This policy triggers an event in Amazon CloudWatch Events that notifies you about the expiration. By using this policy, you can receive notification before or after the expiration time is reached, in units of days or hours.</p> <p>NoChangeNotification: This policy triggers a CloudWatch event if a parameter has not been modified for a specified period of time. This policy type is useful when, for example, a secret needs to be changed within a period of time, but it has not been changed.</p> <p>All existing policies are preserved until you send new policies or an empty policy. For more information about parameter policies, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html\">Assigning parameter policies</a>. </p>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a Systems Manager parameter to identify the type of resource to which it applies, the environment, or the type of configuration data referenced by the parameter. In this case, you could specify the following key name/value pairs:</p> <ul> <li> <p> <code>Key=Resource,Value=S3bucket</code> </p> </li> <li> <p> <code>Key=OS,Value=Windows</code> </p> </li> <li> <p> <code>Key=ParameterType,Value=LicenseKey</code> </p> </li> </ul> <note> <p>To add tags to an existing Systems Manager parameter, use the <a>AddTagsToResource</a> action.</p> </note>"
            }
          ]
        },
        "Tier": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterTier"
            },
            {
              "description": "<p>The parameter tier to assign to a parameter.</p> <p>Parameter Store offers a standard tier and an advanced tier for parameters. Standard parameters have a content size limit of 4 KB and can't be configured to use parameter policies. You can create a maximum of 10,000 standard parameters for each Region in an AWS account. Standard parameters are offered at no additional cost. </p> <p>Advanced parameters have a content size limit of 8 KB and can be configured to use parameter policies. You can create a maximum of 100,000 advanced parameters for each Region in an AWS account. Advanced parameters incur a charge. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html\">Standard and advanced parameter tiers</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>You can change a standard parameter to an advanced parameter any time. But you can't revert an advanced parameter to a standard parameter. Reverting an advanced parameter to a standard parameter would result in data loss because the system would truncate the size of the parameter from 8 KB to 4 KB. Reverting would also remove any policies attached to the parameter. Lastly, advanced parameters use a different form of encryption than standard parameters. </p> <p>If you no longer need an advanced parameter, or if you no longer want to incur charges for an advanced parameter, you must delete it and recreate it as a new standard parameter. </p> <p> <b>Using the Default Tier Configuration</b> </p> <p>In <code>PutParameter</code> requests, you can specify the tier to create the parameter in. Whenever you specify a tier in the request, Parameter Store creates or updates the parameter according to that request. However, if you do not specify a tier in a request, Parameter Store assigns the tier based on the current Parameter Store default tier configuration.</p> <p>The default tier when you begin using Parameter Store is the standard-parameter tier. If you use the advanced-parameter tier, you can specify one of the following as the default:</p> <ul> <li> <p> <b>Advanced</b>: With this option, Parameter Store evaluates all requests as advanced parameters. </p> </li> <li> <p> <b>Intelligent-Tiering</b>: With this option, Parameter Store evaluates each request to determine if the parameter is standard or advanced. </p> <p>If the request doesn't include any options that require an advanced parameter, the parameter is created in the standard-parameter tier. If one or more options requiring an advanced parameter are included in the request, Parameter Store create a parameter in the advanced-parameter tier.</p> <p>This approach helps control your parameter-related costs by always creating standard parameters unless an advanced parameter is necessary. </p> </li> </ul> <p>Options that require an advanced parameter include the following:</p> <ul> <li> <p>The content size of the parameter is more than 4 KB.</p> </li> <li> <p>The parameter uses a parameter policy.</p> </li> <li> <p>More than 10,000 parameters already exist in your AWS account in the current Region.</p> </li> </ul> <p>For more information about configuring the default tier option, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/ps-default-tier.html\">Specifying a default parameter tier</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterType"
            },
            {
              "description": "<p>The type of parameter that you want to add to the system.</p> <note> <p> <code>SecureString</code> is not currently supported for AWS CloudFormation templates.</p> </note> <p>Items in a <code>StringList</code> must be separated by a comma (,). You can't use other punctuation or special character to escape items in the list. If you have a parameter value that requires a comma, then use the <code>String</code> data type.</p> <important> <p>Specifying a parameter type is not required when updating a parameter. You must specify a parameter type when creating a parameter.</p> </important>"
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterValue"
            },
            {
              "description": "<p>The parameter value that you want to add to the system. Standard parameters have a value limit of 4 KB. Advanced parameters have a value limit of 8 KB.</p> <note> <p>Parameters can't be referenced or nested in the values of other parameters. You can't include <code>{{}}</code> or <code>{{ssm:<i>parameter-name</i>}}</code> in a parameter value.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "Name",
        "Value"
      ],
      "title": "PutParameterRequest",
      "type": "object"
    },
    "PutParameterResult": {
      "properties": {
        "Tier": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterTier"
            },
            {
              "description": "The tier assigned to the parameter."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/PSParameterVersion"
            },
            {
              "description": "The new version number of a parameter. If you edit a parameter value, Parameter Store automatically creates a new version and assigns this new version a unique ID. You can reference a parameter version ID in API actions or in Systems Manager documents (SSM documents). By default, if you don't specify a specific version, the system returns the latest parameter value when a parameter is called."
            }
          ]
        }
      },
      "type": "object"
    },
    "RebootOption": {
      "enum": [
        "RebootIfNeeded",
        "NoReboot"
      ],
      "type": "string"
    },
    "Region": {
      "type": "string"
    },
    "Regions": {
      "items": {
        "$ref": "#/definitions/Region"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "RegisterDefaultPatchBaselineRequest": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline that should be the default patch baseline."
            }
          ]
        }
      },
      "required": [
        "BaselineId"
      ],
      "title": "RegisterDefaultPatchBaselineRequest",
      "type": "object"
    },
    "RegisterDefaultPatchBaselineResult": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the default patch baseline."
            }
          ]
        }
      },
      "type": "object"
    },
    "RegisterPatchBaselineForPatchGroupRequest": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline to register the patch group with."
            }
          ]
        },
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group that should be registered with the patch baseline."
            }
          ]
        }
      },
      "required": [
        "BaselineId",
        "PatchGroup"
      ],
      "title": "RegisterPatchBaselineForPatchGroupRequest",
      "type": "object"
    },
    "RegisterPatchBaselineForPatchGroupResult": {
      "properties": {
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline the patch group was registered with."
            }
          ]
        },
        "PatchGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchGroup"
            },
            {
              "description": "The name of the patch group registered with the patch baseline."
            }
          ]
        }
      },
      "type": "object"
    },
    "RegisterTargetWithMaintenanceWindowRequest": {
      "properties": {
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientToken"
            },
            {
              "description": "User-provided idempotency token."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "An optional description for the target."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "An optional name for the target."
            }
          ]
        },
        "OwnerInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/OwnerInformation"
            },
            {
              "description": "User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this maintenance window."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowResourceType"
            },
            {
              "description": "The type of target being registered with the maintenance window."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "<p>The targets to register with the maintenance window. In other words, the instances to run commands on when the maintenance window runs.</p> <p>You can specify targets using instance IDs, resource group names, or tags that have been applied to instances.</p> <p> <b>Example 1</b>: Specify instance IDs</p> <p> <code>Key=InstanceIds,Values=<i>instance-id-1</i>,<i>instance-id-2</i>,<i>instance-id-3</i> </code> </p> <p> <b>Example 2</b>: Use tag key-pairs applied to instances</p> <p> <code>Key=tag:<i>my-tag-key</i>,Values=<i>my-tag-value-1</i>,<i>my-tag-value-2</i> </code> </p> <p> <b>Example 3</b>: Use tag-keys applied to instances</p> <p> <code>Key=tag-key,Values=<i>my-tag-key-1</i>,<i>my-tag-key-2</i> </code> </p> <p> <b>Example 4</b>: Use resource group names</p> <p> <code>Key=resource-groups:Name,Values=<i>resource-group-name</i> </code> </p> <p> <b>Example 5</b>: Use filters for resource group types</p> <p> <code>Key=resource-groups:ResourceTypeFilters,Values=<i>resource-type-1</i>,<i>resource-type-2</i> </code> </p> <note> <p>For <code>Key=resource-groups:ResourceTypeFilters</code>, specify resource types in the following format</p> <p> <code>Key=resource-groups:ResourceTypeFilters,Values=<i>AWS::EC2::INSTANCE</i>,<i>AWS::EC2::VPC</i> </code> </p> </note> <p>For more information about these examples formats, including the best use case for each one, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html\">Examples: Register targets with a maintenance window</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window the target should be registered with."
            }
          ]
        }
      },
      "required": [
        "WindowId",
        "ResourceType",
        "Targets"
      ],
      "title": "RegisterTargetWithMaintenanceWindowRequest",
      "type": "object"
    },
    "RegisterTargetWithMaintenanceWindowResult": {
      "properties": {
        "WindowTargetId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTargetId"
            },
            {
              "description": "The ID of the target definition in this maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "RegisterTaskWithMaintenanceWindowRequest": {
      "properties": {
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientToken"
            },
            {
              "description": "User-provided idempotency token."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "An optional description for the task."
            }
          ]
        },
        "LoggingInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LoggingInfo"
            },
            {
              "description": "<p>A structure containing information about an S3 bucket to write instance-level logs to. </p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>"
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The maximum number of targets this task can be run for in parallel."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The maximum number of errors allowed before this task stops being scheduled."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "An optional name for the task."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskPriority"
            },
            {
              "description": "The priority of the task in the maintenance window, the lower the number the higher the priority. Tasks in a maintenance window are scheduled in priority order with tasks that have the same priority scheduled in parallel."
            }
          ]
        },
        "ServiceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "<p>The ARN of the IAM service role for Systems Manager to assume when running a maintenance window task. If you do not specify a service role ARN, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created when you run <code>RegisterTaskWithMaintenanceWindow</code>.</p> <p>For more information, see the following topics in the in the <i>AWS Systems Manager User Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/using-service-linked-roles.html#slr-permissions\">Using service-linked roles for Systems Manager</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-permissions.html#maintenance-window-tasks-service-role\">Should I use a service-linked role or a custom service role to run maintenance window tasks? </a> </p> </li> </ul>"
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "<p>The targets (either instances or maintenance window targets).</p> <p>Specify instances using the following format: </p> <p> <code>Key=InstanceIds,Values=&lt;instance-id-1&gt;,&lt;instance-id-2&gt;</code> </p> <p>Specify maintenance window targets using the following format:</p> <p> <code>Key=WindowTargetIds,Values=&lt;window-target-id-1&gt;,&lt;window-target-id-2&gt;</code> </p>"
            }
          ]
        },
        "TaskArn": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskArn"
            },
            {
              "description": "The ARN of the task to run."
            }
          ]
        },
        "TaskInvocationParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskInvocationParameters"
            },
            {
              "description": "The parameters that the task should use during execution. Populate only the fields that match the task type. All other fields should be empty. "
            }
          ]
        },
        "TaskParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskParameters"
            },
            {
              "description": "<p>The parameters that should be passed to the task when it is run.</p> <note> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>"
            }
          ]
        },
        "TaskType": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskType"
            },
            {
              "description": "The type of task being registered."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window the task should be added to."
            }
          ]
        }
      },
      "required": [
        "WindowId",
        "Targets",
        "TaskArn",
        "TaskType",
        "MaxConcurrency",
        "MaxErrors"
      ],
      "title": "RegisterTaskWithMaintenanceWindowRequest",
      "type": "object"
    },
    "RegisterTaskWithMaintenanceWindowResult": {
      "properties": {
        "WindowTaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskId"
            },
            {
              "description": "The ID of the task in the maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "RegistrationLimit": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "RegistrationsCount": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "RelatedOpsItem": {
      "description": "An OpsItems that shares something in common with the current OpsItem. For example, related OpsItems can include OpsItems with similar error messages, impacted resources, or statuses for the impacted resource.",
      "properties": {
        "OpsItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ID of an OpsItem related to the current OpsItem."
            }
          ]
        }
      },
      "required": [
        "OpsItemId"
      ],
      "type": "object"
    },
    "RelatedOpsItems": {
      "items": {
        "$ref": "#/definitions/RelatedOpsItem"
      },
      "type": "array"
    },
    "RemainingCount": {
      "type": "integer"
    },
    "RemoveTagsFromResourceRequest": {
      "properties": {
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "<p>The ID of the resource from which you want to remove tags. For example:</p> <p>ManagedInstance: mi-012345abcde</p> <p>MaintenanceWindow: mw-012345abcde</p> <p>PatchBaseline: pb-012345abcde</p> <p>For the Document and Parameter values, use the name of the resource.</p> <note> <p>The ManagedInstance type for this API action is only for on-premises managed instances. Specify the name of the managed instance in the following format: mi-ID_number. For example, mi-1a2b3c4d5e6f.</p> </note>"
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceTypeForTagging"
            },
            {
              "description": "<p>The type of resource from which you want to remove a tag.</p> <note> <p>The ManagedInstance type for this API action is only for on-premises managed instances. Specify the name of the managed instance in the following format: mi-ID_number. For example, mi-1a2b3c4d5e6f.</p> </note>"
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyList"
            },
            {
              "description": "Tag keys that you want to remove from the specified resource."
            }
          ]
        }
      },
      "required": [
        "ResourceType",
        "ResourceId",
        "TagKeys"
      ],
      "title": "RemoveTagsFromResourceRequest",
      "type": "object"
    },
    "RemoveTagsFromResourceResult": {
      "properties": {},
      "type": "object"
    },
    "ResetServiceSettingRequest": {
      "description": "The request body of the ResetServiceSetting API action.",
      "properties": {
        "SettingId": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceSettingId"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the service setting to reset. The setting ID can be <code>/ssm/parameter-store/default-parameter-tier</code>, <code>/ssm/parameter-store/high-throughput-enabled</code>, or <code>/ssm/managed-instance/activation-tier</code>. For example, <code>arn:aws:ssm:us-east-1:111122223333:servicesetting/ssm/parameter-store/high-throughput-enabled</code>."
            }
          ]
        }
      },
      "required": [
        "SettingId"
      ],
      "title": "ResetServiceSettingRequest",
      "type": "object"
    },
    "ResetServiceSettingResult": {
      "description": "The result body of the ResetServiceSetting API action.",
      "properties": {
        "ServiceSetting": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceSetting"
            },
            {
              "description": "The current, effective service setting after calling the ResetServiceSetting API action."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResolvedTargets": {
      "description": "Information about targets that resolved during the Automation execution.",
      "properties": {
        "ParameterValues": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetParameterList"
            },
            {
              "description": "A list of parameter values sent to targets that resolved during the Automation execution."
            }
          ]
        },
        "Truncated": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "A boolean value indicating whether the resolved target list is truncated."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceComplianceSummaryItem": {
      "description": "Compliance summary information for a specific resource. ",
      "properties": {
        "ComplianceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceTypeName"
            },
            {
              "description": "The compliance type."
            }
          ]
        },
        "CompliantSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/CompliantSummary"
            },
            {
              "description": "A list of items that are compliant for the resource."
            }
          ]
        },
        "ExecutionSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceExecutionSummary"
            },
            {
              "description": "Information about the execution."
            }
          ]
        },
        "NonCompliantSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/NonCompliantSummary"
            },
            {
              "description": "A list of items that aren't compliant for the resource."
            }
          ]
        },
        "OverallSeverity": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSeverity"
            },
            {
              "description": "The highest severity item found for the resource. The resource is compliant for this item."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceResourceId"
            },
            {
              "description": "The resource ID."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceResourceType"
            },
            {
              "description": "The resource type."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceStatus"
            },
            {
              "description": "The compliance status for the resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceComplianceSummaryItemList": {
      "items": {
        "$ref": "#/definitions/ResourceComplianceSummaryItem"
      },
      "type": "array"
    },
    "ResourceCount": {
      "type": "integer"
    },
    "ResourceCountByStatus": {
      "type": "string"
    },
    "ResourceDataSyncAWSKMSKeyARN": {
      "maxLength": 512,
      "minLength": 1,
      "pattern": "arn:.*",
      "type": "string"
    },
    "ResourceDataSyncAlreadyExistsException": {},
    "ResourceDataSyncAwsOrganizationsSource": {
      "description": "Information about the AwsOrganizationsSource resource data sync source. A sync source of this type can synchronize data from AWS Organizations or, if an AWS Organization is not present, from multiple AWS Regions.",
      "properties": {
        "OrganizationSourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncOrganizationSourceType"
            },
            {
              "description": "If an AWS Organization is present, this is either <code>OrganizationalUnits</code> or <code>EntireOrganization</code>. For <code>OrganizationalUnits</code>, the data is aggregated from a set of organization units. For <code>EntireOrganization</code>, the data is aggregated from the entire AWS Organization. "
            }
          ]
        },
        "OrganizationalUnits": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncOrganizationalUnitList"
            },
            {
              "description": "The AWS Organizations organization units included in the sync."
            }
          ]
        }
      },
      "required": [
        "OrganizationSourceType"
      ],
      "type": "object"
    },
    "ResourceDataSyncConflictException": {},
    "ResourceDataSyncCountExceededException": {},
    "ResourceDataSyncCreatedTime": {
      "format": "date-time",
      "type": "string"
    },
    "ResourceDataSyncDestinationDataSharing": {
      "description": "Synchronize Systems Manager Inventory data from multiple AWS accounts defined in AWS Organizations to a centralized S3 bucket. Data is synchronized to individual key prefixes in the central bucket. Each key prefix represents a different AWS account ID.",
      "properties": {
        "DestinationDataSharingType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncDestinationDataSharingType"
            },
            {
              "description": "The sharing data type. Only <code>Organization</code> is supported."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceDataSyncDestinationDataSharingType": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncIncludeFutureRegions": {
      "type": "boolean"
    },
    "ResourceDataSyncInvalidConfigurationException": {},
    "ResourceDataSyncItem": {
      "description": "Information about a Resource Data Sync configuration, including its current status and last successful sync.",
      "properties": {
        "LastStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/LastResourceDataSyncStatus"
            },
            {
              "description": "The status reported by the last sync."
            }
          ]
        },
        "LastSuccessfulSyncTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LastSuccessfulResourceDataSyncTime"
            },
            {
              "description": "The last time the sync operations returned a status of <code>SUCCESSFUL</code> (UTC)."
            }
          ]
        },
        "LastSyncStatusMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/LastResourceDataSyncMessage"
            },
            {
              "description": "The status message details reported by the last sync."
            }
          ]
        },
        "LastSyncTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LastResourceDataSyncTime"
            },
            {
              "description": "The last time the configuration attempted to sync (UTC)."
            }
          ]
        },
        "S3Destination": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncS3Destination"
            },
            {
              "description": "Configuration information for the target S3 bucket."
            }
          ]
        },
        "SyncCreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncCreatedTime"
            },
            {
              "description": "The date and time the configuration was created (UTC)."
            }
          ]
        },
        "SyncLastModifiedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncLastModifiedTime"
            },
            {
              "description": "The date and time the resource data sync was changed. "
            }
          ]
        },
        "SyncName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncName"
            },
            {
              "description": "The name of the Resource Data Sync."
            }
          ]
        },
        "SyncSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncSourceWithState"
            },
            {
              "description": "Information about the source where the data was synchronized. "
            }
          ]
        },
        "SyncType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncType"
            },
            {
              "description": "The type of resource data sync. If <code>SyncType</code> is <code>SyncToDestination</code>, then the resource data sync synchronizes data to an S3 bucket. If the <code>SyncType</code> is <code>SyncFromSource</code> then the resource data sync synchronizes data from AWS Organizations or from multiple AWS Regions."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceDataSyncItemList": {
      "items": {
        "$ref": "#/definitions/ResourceDataSyncItem"
      },
      "type": "array"
    },
    "ResourceDataSyncLastModifiedTime": {
      "format": "date-time",
      "type": "string"
    },
    "ResourceDataSyncName": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncNotFoundException": {},
    "ResourceDataSyncOrganizationSourceType": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncOrganizationalUnit": {
      "description": "The AWS Organizations organizational unit data source for the sync.",
      "properties": {
        "OrganizationalUnitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncOrganizationalUnitId"
            },
            {
              "description": "The AWS Organization unit ID data source for the sync."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceDataSyncOrganizationalUnitId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$",
      "type": "string"
    },
    "ResourceDataSyncOrganizationalUnitList": {
      "items": {
        "$ref": "#/definitions/ResourceDataSyncOrganizationalUnit"
      },
      "maxItems": 1000,
      "minItems": 1,
      "type": "array"
    },
    "ResourceDataSyncS3BucketName": {
      "maxLength": 2048,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncS3Destination": {
      "description": "Information about the target S3 bucket for the Resource Data Sync.",
      "properties": {
        "AWSKMSKeyARN": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncAWSKMSKeyARN"
            },
            {
              "description": "The ARN of an encryption key for a destination in Amazon S3. Must belong to the same Region as the destination S3 bucket."
            }
          ]
        },
        "BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncS3BucketName"
            },
            {
              "description": "The name of the S3 bucket where the aggregated data is stored."
            }
          ]
        },
        "DestinationDataSharing": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncDestinationDataSharing"
            },
            {
              "description": "Enables destination data sharing. By default, this field is <code>null</code>."
            }
          ]
        },
        "Prefix": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncS3Prefix"
            },
            {
              "description": "An Amazon S3 prefix for the bucket."
            }
          ]
        },
        "Region": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncS3Region"
            },
            {
              "description": "The AWS Region with the S3 bucket targeted by the Resource Data Sync."
            }
          ]
        },
        "SyncFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncS3Format"
            },
            {
              "description": "A supported sync format. The following format is currently supported: JsonSerDe"
            }
          ]
        }
      },
      "required": [
        "BucketName",
        "SyncFormat",
        "Region"
      ],
      "type": "object"
    },
    "ResourceDataSyncS3Format": {
      "enum": [
        "JsonSerDe"
      ],
      "type": "string"
    },
    "ResourceDataSyncS3Prefix": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncS3Region": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncSource": {
      "description": "Information about the source of the data included in the resource data sync.",
      "properties": {
        "AwsOrganizationsSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncAwsOrganizationsSource"
            },
            {
              "description": "Information about the AwsOrganizationsSource resource data sync source. A sync source of this type can synchronize data from AWS Organizations."
            }
          ]
        },
        "IncludeFutureRegions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncIncludeFutureRegions"
            },
            {
              "description": "Whether to automatically synchronize and aggregate data from new AWS Regions when those Regions come online."
            }
          ]
        },
        "SourceRegions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncSourceRegionList"
            },
            {
              "description": "The <code>SyncSource</code> AWS Regions included in the resource data sync."
            }
          ]
        },
        "SourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncSourceType"
            },
            {
              "description": "The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in AWS Organizations) or <code>singleAccountMultiRegions</code>."
            }
          ]
        }
      },
      "required": [
        "SourceType",
        "SourceRegions"
      ],
      "type": "object"
    },
    "ResourceDataSyncSourceRegion": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncSourceRegionList": {
      "items": {
        "$ref": "#/definitions/ResourceDataSyncSourceRegion"
      },
      "type": "array"
    },
    "ResourceDataSyncSourceType": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncSourceWithState": {
      "description": "<p>The data type name for including resource data sync state. There are four sync states:</p> <p> <code>OrganizationNotExists</code> (Your organization doesn't exist)</p> <p> <code>NoPermissions</code> (The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Explorer.)</p> <p> <code>InvalidOrganizationalUnit</code> (You specified or selected an invalid unit in the resource data sync configuration.)</p> <p> <code>TrustedAccessDisabled</code> (You disabled Systems Manager access in the organization in AWS Organizations.)</p>",
      "properties": {
        "AwsOrganizationsSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncAwsOrganizationsSource"
            },
            {
              "description": "The field name in <code>SyncSource</code> for the <code>ResourceDataSyncAwsOrganizationsSource</code> type."
            }
          ]
        },
        "IncludeFutureRegions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncIncludeFutureRegions"
            },
            {
              "description": "Whether to automatically synchronize and aggregate data from new AWS Regions when those Regions come online."
            }
          ]
        },
        "SourceRegions": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncSourceRegionList"
            },
            {
              "description": "The <code>SyncSource</code> AWS Regions included in the resource data sync."
            }
          ]
        },
        "SourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncSourceType"
            },
            {
              "description": "The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in AWS Organizations) or <code>singleAccountMultiRegions</code>."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncState"
            },
            {
              "description": "<p>The data type name for including resource data sync state. There are four sync states:</p> <p> <code>OrganizationNotExists</code>: Your organization doesn't exist.</p> <p> <code>NoPermissions</code>: The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Explorer.</p> <p> <code>InvalidOrganizationalUnit</code>: You specified or selected an invalid unit in the resource data sync configuration.</p> <p> <code>TrustedAccessDisabled</code>: You disabled Systems Manager access in the organization in AWS Organizations.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceDataSyncState": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceDataSyncType": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "ResourceId": {
      "type": "string"
    },
    "ResourceInUseException": {},
    "ResourceLimitExceededException": {},
    "ResourceType": {
      "enum": [
        "ManagedInstance",
        "Document",
        "EC2Instance"
      ],
      "type": "string"
    },
    "ResourceTypeForTagging": {
      "enum": [
        "Document",
        "ManagedInstance",
        "MaintenanceWindow",
        "Parameter",
        "PatchBaseline",
        "OpsItem"
      ],
      "type": "string"
    },
    "ResponseCode": {
      "type": "integer"
    },
    "ResultAttribute": {
      "description": "The inventory item result attribute.",
      "properties": {
        "TypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryItemTypeName"
            },
            {
              "description": "Name of the inventory item type. Valid value: AWS:InstanceInformation. Default Value: AWS:InstanceInformation."
            }
          ]
        }
      },
      "required": [
        "TypeName"
      ],
      "type": "object"
    },
    "ResultAttributeList": {
      "items": {
        "$ref": "#/definitions/ResultAttribute"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "ResumeSessionRequest": {
      "properties": {
        "SessionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionId"
            },
            {
              "description": "The ID of the disconnected session to resume."
            }
          ]
        }
      },
      "required": [
        "SessionId"
      ],
      "title": "ResumeSessionRequest",
      "type": "object"
    },
    "ResumeSessionResponse": {
      "properties": {
        "SessionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionId"
            },
            {
              "description": "The ID of the session."
            }
          ]
        },
        "StreamUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamUrl"
            },
            {
              "description": "<p>A URL back to SSM Agent on the instance that the Session Manager client uses to send commands and receive output from the instance. Format: <code>wss://ssmmessages.<b>region</b>.amazonaws.com/v1/data-channel/<b>session-id</b>?stream=(input|output)</code>.</p> <p> <b>region</b> represents the Region identifier for an AWS Region supported by AWS Systems Manager, such as <code>us-east-2</code> for the US East (Ohio) Region. For a list of supported <b>region</b> values, see the <b>Region</b> column in <a href=\"http://docs.aws.amazon.com/general/latest/gr/ssm.html#ssm_region\">Systems Manager service endpoints</a> in the <i>AWS General Reference</i>.</p> <p> <b>session-id</b> represents the ID of a Session Manager session, such as <code>1a2b3c4dEXAMPLE</code>.</p>"
            }
          ]
        },
        "TokenValue": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenValue"
            },
            {
              "description": "An encrypted token value containing session and caller information. Used to authenticate the connection to the instance."
            }
          ]
        }
      },
      "type": "object"
    },
    "ReviewInformation": {
      "description": "Information about the result of a document review request.",
      "properties": {
        "ReviewedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time that the reviewer took action on the document review request."
            }
          ]
        },
        "Reviewer": {
          "allOf": [
            {
              "$ref": "#/definitions/Reviewer"
            },
            {
              "description": "The reviewer assigned to take action on the document review request."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ReviewStatus"
            },
            {
              "description": "The current status of the document review request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ReviewInformationList": {
      "items": {
        "$ref": "#/definitions/ReviewInformation"
      },
      "minItems": 1,
      "type": "array"
    },
    "ReviewStatus": {
      "enum": [
        "APPROVED",
        "NOT_REVIEWED",
        "PENDING",
        "REJECTED"
      ],
      "type": "string"
    },
    "Reviewer": {
      "maxLength": 50,
      "pattern": "^[a-zA-Z0-9_\\-.]{1,128}$",
      "type": "string"
    },
    "Runbook": {
      "description": "<p>Information about an Automation runbook (Automation document) used in a runbook workflow in Change Manager.</p> <note> <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p> </note>",
      "properties": {
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Automation runbook (Automation document) used in a runbook workflow."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the Automation runbook (Automation document) used in a runbook workflow."
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The <code>MaxConcurrency</code> value specified by the user when the operation started, indicating the maximum number of resources that the runbook operation can run on at the same time."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The <code>MaxErrors</code> value specified by the user when the execution started, indicating the maximum number of errors that can occur during the operation before the updates are stopped or rolled back."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "The key-value map of execution parameters, which were supplied when calling <code>StartChangeRequestExecution</code>."
            }
          ]
        },
        "TargetLocations": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLocations"
            },
            {
              "description": "Information about the AWS Regions and accounts targeted by the current Runbook operation."
            }
          ]
        },
        "TargetParameterName": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterKey"
            },
            {
              "description": "The name of the parameter used as the target resource for the rate-controlled runbook workflow. Required if you specify <code>Targets</code>. "
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "A key-value mapping to target resources that the Runbook operation performs tasks on. Required if you specify <code>TargetParameterName</code>."
            }
          ]
        }
      },
      "required": [
        "DocumentName"
      ],
      "type": "object"
    },
    "Runbooks": {
      "items": {
        "$ref": "#/definitions/Runbook"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "S3BucketName": {
      "maxLength": 63,
      "minLength": 3,
      "type": "string"
    },
    "S3KeyPrefix": {
      "maxLength": 500,
      "type": "string"
    },
    "S3OutputLocation": {
      "description": "An S3 bucket where you want to store the results of this request.",
      "properties": {
        "OutputS3BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/S3BucketName"
            },
            {
              "description": "The name of the S3 bucket."
            }
          ]
        },
        "OutputS3KeyPrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/S3KeyPrefix"
            },
            {
              "description": "The S3 bucket subfolder."
            }
          ]
        },
        "OutputS3Region": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Region"
            },
            {
              "description": "(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Region of the S3 bucket."
            }
          ]
        }
      },
      "type": "object"
    },
    "S3OutputUrl": {
      "description": "A URL for the S3 bucket where you want to store the results of this request.",
      "properties": {
        "OutputUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/Url"
            },
            {
              "description": "A URL for an S3 bucket where you want to store the results of this request."
            }
          ]
        }
      },
      "type": "object"
    },
    "S3Region": {
      "maxLength": 20,
      "minLength": 3,
      "type": "string"
    },
    "ScheduleExpression": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "ScheduledWindowExecution": {
      "description": "Information about a scheduled execution for a maintenance window.",
      "properties": {
        "ExecutionTime": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The name of the maintenance window to be run."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window to be run."
            }
          ]
        }
      },
      "type": "object"
    },
    "ScheduledWindowExecutionList": {
      "items": {
        "$ref": "#/definitions/ScheduledWindowExecution"
      },
      "type": "array"
    },
    "SendAutomationSignalRequest": {
      "properties": {
        "AutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The unique identifier for an existing Automation execution that you want to send the signal to."
            }
          ]
        },
        "Payload": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "<p>The data sent with the signal. The data schema depends on the type of signal used in the request.</p> <p>For <code>Approve</code> and <code>Reject</code> signal types, the payload is an optional comment that you can send with the signal type. For example:</p> <p> <code>Comment=\"Looks good\"</code> </p> <p>For <code>StartStep</code> and <code>Resume</code> signal types, you must send the name of the Automation step to start or resume as the payload. For example:</p> <p> <code>StepName=\"step1\"</code> </p> <p>For the <code>StopStep</code> signal type, you must send the step execution ID as the payload. For example:</p> <p> <code>StepExecutionId=\"97fff367-fc5a-4299-aed8-0123456789ab\"</code> </p>"
            }
          ]
        },
        "SignalType": {
          "allOf": [
            {
              "$ref": "#/definitions/SignalType"
            },
            {
              "description": "The type of signal to send to an Automation execution. "
            }
          ]
        }
      },
      "required": [
        "AutomationExecutionId",
        "SignalType"
      ],
      "title": "SendAutomationSignalRequest",
      "type": "object"
    },
    "SendAutomationSignalResult": {
      "properties": {},
      "type": "object"
    },
    "SendCommandRequest": {
      "properties": {
        "CloudWatchOutputConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudWatchOutputConfig"
            },
            {
              "description": "Enables Systems Manager to send Run Command output to Amazon CloudWatch Logs. "
            }
          ]
        },
        "Comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "User-specified information about the command, such as a brief description of what the command should do."
            }
          ]
        },
        "DocumentHash": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentHash"
            },
            {
              "description": "<p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note> <p>Sha1 hashes have been deprecated.</p> </note>"
            }
          ]
        },
        "DocumentHashType": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentHashType"
            },
            {
              "description": "<p>Sha256 or Sha1.</p> <note> <p>Sha1 hashes have been deprecated.</p> </note>"
            }
          ]
        },
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "Required. The name of the Systems Manager document to run. This can be a public document or a custom document."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "<p>The SSM document version to use in the request. You can specify $DEFAULT, $LATEST, or a specific version number. If you run commands by using the AWS CLI, then you must escape the first two options by using a backslash. If you specify a version number, then you don't need to use the backslash. For example:</p> <p>--document-version \"\\$DEFAULT\"</p> <p>--document-version \"\\$LATEST\"</p> <p>--document-version \"3\"</p>"
            }
          ]
        },
        "InstanceIds": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceIdList"
            },
            {
              "description": "<p>The IDs of the instances where the command should run. Specifying instance IDs is most useful when you are targeting a limited number of instances, though you can specify up to 50 IDs.</p> <p>To target a larger number of instances, or if you prefer not to list individual instance IDs, we recommend using the <code>Targets</code> option instead. Using <code>Targets</code>, which accepts tag key-value pairs to identify the instances to send commands to, you can a send command to tens, hundreds, or thousands of instances at once.</p> <p>For more information about how to use targets, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html\">Using targets and rate controls to send commands to a fleet</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "(Optional) The maximum number of instances that are allowed to run the command at the same time. You can specify a number such as 10 or a percentage such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-velocity\">Using concurrency controls</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The maximum number of errors allowed without the command failing. When the command fails one more time beyond the value of MaxErrors, the systems stops sending the command to additional targets. You can specify a number like 10 or a percentage like 10%. The default value is 0. For more information about how to use MaxErrors, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-maxerrors\">Using error controls</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "NotificationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationConfig"
            },
            {
              "description": "Configurations for sending notifications."
            }
          ]
        },
        "OutputS3BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/S3BucketName"
            },
            {
              "description": "The name of the S3 bucket where command execution responses should be stored."
            }
          ]
        },
        "OutputS3KeyPrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/S3KeyPrefix"
            },
            {
              "description": "The directory structure within the S3 bucket where the responses should be stored."
            }
          ]
        },
        "OutputS3Region": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Region"
            },
            {
              "description": "(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Region of the S3 bucket."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "The required and optional parameters specified in the document being run."
            }
          ]
        },
        "ServiceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for Run Command commands."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "<p>An array of search criteria that targets instances using a <code>Key,Value</code> combination that you specify. Specifying targets is most useful when you want to send a command to a large number of instances at once. Using <code>Targets</code>, which accepts tag key-value pairs to identify instances, you can send a command to tens, hundreds, or thousands of instances at once.</p> <p>To send a command to a smaller number of instances, you can use the <code>InstanceIds</code> option instead.</p> <p>For more information about how to use targets, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html\">Sending commands to a fleet</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "TimeoutSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/TimeoutSeconds"
            },
            {
              "description": "If this time is reached and the command has not already started running, it will not run."
            }
          ]
        }
      },
      "required": [
        "DocumentName"
      ],
      "title": "SendCommandRequest",
      "type": "object"
    },
    "SendCommandResult": {
      "properties": {
        "Command": {
          "allOf": [
            {
              "$ref": "#/definitions/Command"
            },
            {
              "description": "The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ServiceRole": {
      "type": "string"
    },
    "ServiceSetting": {
      "description": "<p>The service setting data structure.</p> <p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of \"false\". This means the user can't use this feature unless they change the setting to \"true\" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>UpdateServiceSetting</a> API action to change the default setting. Or, use the <a>ResetServiceSetting</a> to change the value back to the original value defined by the AWS service team.</p>",
      "properties": {
        "ARN": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ARN of the service setting."
            }
          ]
        },
        "LastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The last time the service setting was modified."
            }
          ]
        },
        "LastModifiedUser": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The ARN of the last modified user. This field is populated only if the setting value was overwritten."
            }
          ]
        },
        "SettingId": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceSettingId"
            },
            {
              "description": "The ID of the service setting."
            }
          ]
        },
        "SettingValue": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceSettingValue"
            },
            {
              "description": "The value of the service setting."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "<p>The status of the service setting. The value can be Default, Customized or PendingUpdate.</p> <ul> <li> <p>Default: The current setting uses a default value provisioned by the AWS service team.</p> </li> <li> <p>Customized: The current setting use a custom value specified by the customer.</p> </li> <li> <p>PendingUpdate: The current setting uses a default or custom value, but a setting change request is pending approval.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "ServiceSettingId": {
      "maxLength": 1000,
      "minLength": 1,
      "type": "string"
    },
    "ServiceSettingNotFound": {},
    "ServiceSettingValue": {
      "maxLength": 4096,
      "minLength": 1,
      "type": "string"
    },
    "Session": {
      "description": "Information about a Session Manager connection to an instance.",
      "properties": {
        "Details": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionDetails"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        },
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the Session Manager SSM document used to define the parameters and plugin settings for the session. For example, <code>SSM-SessionManagerRunShell</code>."
            }
          ]
        },
        "EndDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, when the session was terminated."
            }
          ]
        },
        "OutputUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionManagerOutputUrl"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        },
        "Owner": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionOwner"
            },
            {
              "description": "The ID of the AWS user account that started the session."
            }
          ]
        },
        "SessionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionId"
            },
            {
              "description": "The ID of the session."
            }
          ]
        },
        "StartDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, when the session began."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionStatus"
            },
            {
              "description": "The status of the session. For example, \"Connected\" or \"Terminated\"."
            }
          ]
        },
        "Target": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionTarget"
            },
            {
              "description": "The instance that the Session Manager session connected to."
            }
          ]
        }
      },
      "type": "object"
    },
    "SessionDetails": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "SessionFilter": {
      "description": "Describes a filter for Session Manager information.",
      "properties": {
        "key": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionFilterKey"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionFilterValue"
            },
            {
              "description": "<p>The filter value. Valid values for each filter key are as follows:</p> <ul> <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li> <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li> <li> <p>Target: Specify an instance to which session connections have been made.</p> </li> <li> <p>Owner: Specify an AWS user account to see a list of sessions started by that user.</p> </li> <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p> <ul> <li> <p>Connected</p> </li> <li> <p>Connecting</p> </li> <li> <p>Disconnected</p> </li> <li> <p>Terminated</p> </li> <li> <p>Terminating</p> </li> <li> <p>Failed</p> </li> </ul> </li> <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "SessionFilterKey": {
      "enum": [
        "InvokedAfter",
        "InvokedBefore",
        "Target",
        "Owner",
        "Status",
        "SessionId"
      ],
      "type": "string"
    },
    "SessionFilterList": {
      "items": {
        "$ref": "#/definitions/SessionFilter"
      },
      "maxItems": 6,
      "minItems": 1,
      "type": "array"
    },
    "SessionFilterValue": {
      "maxLength": 400,
      "minLength": 1,
      "type": "string"
    },
    "SessionId": {
      "maxLength": 96,
      "minLength": 1,
      "type": "string"
    },
    "SessionList": {
      "items": {
        "$ref": "#/definitions/Session"
      },
      "type": "array"
    },
    "SessionManagerCloudWatchOutputUrl": {
      "maxLength": 2083,
      "minLength": 1,
      "type": "string"
    },
    "SessionManagerOutputUrl": {
      "description": "Reserved for future use.",
      "properties": {
        "CloudWatchOutputUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionManagerCloudWatchOutputUrl"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        },
        "S3OutputUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionManagerS3OutputUrl"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        }
      },
      "type": "object"
    },
    "SessionManagerParameterName": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "SessionManagerParameterValue": {
      "maxLength": 65535,
      "minLength": 1,
      "type": "string"
    },
    "SessionManagerParameterValueList": {
      "items": {
        "$ref": "#/definitions/SessionManagerParameterValue"
      },
      "type": "array"
    },
    "SessionManagerParameters": {
      "additionalProperties": {
        "$ref": "#/definitions/SessionManagerParameterValueList"
      },
      "type": "object"
    },
    "SessionManagerS3OutputUrl": {
      "maxLength": 2083,
      "minLength": 1,
      "type": "string"
    },
    "SessionMaxResults": {
      "maximum": 200,
      "minimum": 1,
      "type": "integer"
    },
    "SessionOwner": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "SessionState": {
      "enum": [
        "Active",
        "History"
      ],
      "type": "string"
    },
    "SessionStatus": {
      "enum": [
        "Connected",
        "Connecting",
        "Disconnected",
        "Terminated",
        "Terminating",
        "Failed"
      ],
      "type": "string"
    },
    "SessionTarget": {
      "maxLength": 400,
      "minLength": 1,
      "type": "string"
    },
    "SeveritySummary": {
      "description": "The number of managed instances found for each patch severity level defined in the request filter.",
      "properties": {
        "CriticalCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSummaryCount"
            },
            {
              "description": "The total number of resources or compliance items that have a severity level of critical. Critical severity is determined by the organization that published the compliance items."
            }
          ]
        },
        "HighCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSummaryCount"
            },
            {
              "description": "The total number of resources or compliance items that have a severity level of high. High severity is determined by the organization that published the compliance items."
            }
          ]
        },
        "InformationalCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSummaryCount"
            },
            {
              "description": "The total number of resources or compliance items that have a severity level of informational. Informational severity is determined by the organization that published the compliance items."
            }
          ]
        },
        "LowCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSummaryCount"
            },
            {
              "description": "The total number of resources or compliance items that have a severity level of low. Low severity is determined by the organization that published the compliance items."
            }
          ]
        },
        "MediumCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSummaryCount"
            },
            {
              "description": "The total number of resources or compliance items that have a severity level of medium. Medium severity is determined by the organization that published the compliance items."
            }
          ]
        },
        "UnspecifiedCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ComplianceSummaryCount"
            },
            {
              "description": "The total number of resources or compliance items that have a severity level of unspecified. Unspecified severity is determined by the organization that published the compliance items."
            }
          ]
        }
      },
      "type": "object"
    },
    "SharedDocumentVersion": {
      "description": "The document version shared with other accounts. You can share <code>Latest</code>, <code>Default</code> or <code>All versions</code>.",
      "maxLength": 8,
      "pattern": "([$]LATEST|[$]DEFAULT|[$]ALL)",
      "type": "string"
    },
    "SignalType": {
      "enum": [
        "Approve",
        "Reject",
        "StartStep",
        "StopStep",
        "Resume"
      ],
      "type": "string"
    },
    "SnapshotDownloadUrl": {
      "type": "string"
    },
    "SnapshotId": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
      "type": "string"
    },
    "StandardErrorContent": {
      "maxLength": 8000,
      "type": "string"
    },
    "StandardOutputContent": {
      "maxLength": 24000,
      "type": "string"
    },
    "StartAssociationsOnceRequest": {
      "properties": {
        "AssociationIds": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationIdList"
            },
            {
              "description": "The association IDs that you want to run immediately and only one time."
            }
          ]
        }
      },
      "required": [
        "AssociationIds"
      ],
      "title": "StartAssociationsOnceRequest",
      "type": "object"
    },
    "StartAssociationsOnceResult": {
      "properties": {},
      "type": "object"
    },
    "StartAutomationExecutionRequest": {
      "properties": {
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/IdempotencyToken"
            },
            {
              "description": "User-provided idempotency token. The token must be unique, is case insensitive, enforces the UUID format, and can't be reused."
            }
          ]
        },
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Automation document to use for this execution."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the Automation document to use for this execution."
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The maximum number of targets allowed to run this task in parallel. You can specify a number, such as 10, or a percentage, such as 10%. The default value is 10."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "<p>The number of errors that are allowed before the system stops running the automation on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops running the automation when the fourth error is received. If you specify 0, then the system stops running the automation on additional targets after the first error result is returned. If you run an automation on 50 resources and set max-errors to 10%, then the system stops running the automation on additional targets when the sixth error is received.</p> <p>Executions that are already running an automation when max-errors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set max-concurrency to 1 so the executions proceed one at a time.</p>"
            }
          ]
        },
        "Mode": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionMode"
            },
            {
              "description": "The execution mode of the automation. Valid modes include the following: Auto and Interactive. The default mode is Auto."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "A key-value map of execution parameters, which match the declared parameters in the Automation document."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p>Optional metadata that you assign to a resource. You can specify a maximum of five tags for an automation. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag an automation to identify an environment or operating system. In this case, you could specify the following key name/value pairs:</p> <ul> <li> <p> <code>Key=environment,Value=test</code> </p> </li> <li> <p> <code>Key=OS,Value=Windows</code> </p> </li> </ul> <note> <p>To add tags to an existing patch baseline, use the <a>AddTagsToResource</a> action.</p> </note>"
            }
          ]
        },
        "TargetLocations": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLocations"
            },
            {
              "description": "A location is a combination of AWS Regions and/or AWS accounts where you want to run the Automation. Use this action to start an Automation in multiple Regions and multiple accounts. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html\">Running Automation workflows in multiple AWS Regions and accounts</a> in the <i>AWS Systems Manager User Guide</i>. "
            }
          ]
        },
        "TargetMaps": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetMaps"
            },
            {
              "description": "A key-value mapping of document parameters to target resources. Both Targets and TargetMaps cannot be specified together."
            }
          ]
        },
        "TargetParameterName": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterKey"
            },
            {
              "description": "The name of the parameter used as the target resource for the rate-controlled execution. Required if you specify targets."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "A key-value mapping to target resources. Required if you specify TargetParameterName."
            }
          ]
        }
      },
      "required": [
        "DocumentName"
      ],
      "title": "StartAutomationExecutionRequest",
      "type": "object"
    },
    "StartAutomationExecutionResult": {
      "properties": {
        "AutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The unique ID of a newly scheduled automation execution."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartChangeRequestExecutionRequest": {
      "properties": {
        "ChangeRequestName": {
          "allOf": [
            {
              "$ref": "#/definitions/ChangeRequestName"
            },
            {
              "description": "The name of the change request associated with the runbook workflow to be run."
            }
          ]
        },
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/IdempotencyToken"
            },
            {
              "description": "The user-provided idempotency token. The token must be unique, is case insensitive, enforces the UUID format, and can't be reused."
            }
          ]
        },
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the change template document to run during the runbook workflow."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of the change template document to run during the runbook workflow."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "A key-value map of parameters that match the declared parameters in the change template document."
            }
          ]
        },
        "Runbooks": {
          "allOf": [
            {
              "$ref": "#/definitions/Runbooks"
            },
            {
              "description": "<p>Information about the Automation runbooks (Automation documents) that are run during the runbook workflow.</p> <note> <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p> </note>"
            }
          ]
        },
        "ScheduledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "<p>The date and time specified in the change request to run the Automation runbooks.</p> <note> <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p> </note>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p>Optional metadata that you assign to a resource. You can specify a maximum of five tags for a change request. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a change request to identify an environment or target AWS Region. In this case, you could specify the following key-value pairs:</p> <ul> <li> <p> <code>Key=Environment,Value=Production</code> </p> </li> <li> <p> <code>Key=Region,Value=us-east-2</code> </p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "DocumentName",
        "Runbooks"
      ],
      "title": "StartChangeRequestExecutionRequest",
      "type": "object"
    },
    "StartChangeRequestExecutionResult": {
      "properties": {
        "AutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The unique ID of a runbook workflow operation. (A runbook workflow is a type of Automation operation.) "
            }
          ]
        }
      },
      "type": "object"
    },
    "StartSessionRequest": {
      "properties": {
        "DocumentName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the SSM document to define the parameters and plugin settings for the session. For example, <code>SSM-SessionManagerRunShell</code>. You can call the <a>GetDocument</a> API to verify the document exists before attempting to start a session. If no document name is provided, a shell to the instance is launched by default."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionManagerParameters"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        },
        "Target": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionTarget"
            },
            {
              "description": "The instance to connect to for the session."
            }
          ]
        }
      },
      "required": [
        "Target"
      ],
      "title": "StartSessionRequest",
      "type": "object"
    },
    "StartSessionResponse": {
      "properties": {
        "SessionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionId"
            },
            {
              "description": "The ID of the session."
            }
          ]
        },
        "StreamUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamUrl"
            },
            {
              "description": "<p>A URL back to SSM Agent on the instance that the Session Manager client uses to send commands and receive output from the instance. Format: <code>wss://ssmmessages.<b>region</b>.amazonaws.com/v1/data-channel/<b>session-id</b>?stream=(input|output)</code> </p> <p> <b>region</b> represents the Region identifier for an AWS Region supported by AWS Systems Manager, such as <code>us-east-2</code> for the US East (Ohio) Region. For a list of supported <b>region</b> values, see the <b>Region</b> column in <a href=\"http://docs.aws.amazon.com/general/latest/gr/ssm.html#ssm_region\">Systems Manager service endpoints</a> in the <i>AWS General Reference</i>.</p> <p> <b>session-id</b> represents the ID of a Session Manager session, such as <code>1a2b3c4dEXAMPLE</code>.</p>"
            }
          ]
        },
        "TokenValue": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenValue"
            },
            {
              "description": "An encrypted token value containing session and caller information. Used to authenticate the connection to the instance."
            }
          ]
        }
      },
      "type": "object"
    },
    "StatusAdditionalInfo": {
      "maxLength": 1024,
      "type": "string"
    },
    "StatusDetails": {
      "maxLength": 100,
      "minLength": 0,
      "type": "string"
    },
    "StatusMessage": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "StatusName": {
      "type": "string"
    },
    "StatusUnchanged": {},
    "StepExecution": {
      "description": "Detailed information about an the execution state of an Automation step.",
      "properties": {
        "Action": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationActionName"
            },
            {
              "description": "The action this step performs. The action determines the behavior of the step."
            }
          ]
        },
        "ExecutionEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "If a step has finished execution, this contains the time the execution ended. If the step has not yet concluded, this field is not populated."
            }
          ]
        },
        "ExecutionStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "If a step has begun execution, this contains the time the step started. If the step is in Pending status, this field is not populated."
            }
          ]
        },
        "FailureDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureDetails"
            },
            {
              "description": "Information about the Automation failure."
            }
          ]
        },
        "FailureMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "If a step failed, this message explains why the execution failed."
            }
          ]
        },
        "Inputs": {
          "allOf": [
            {
              "$ref": "#/definitions/NormalStringMap"
            },
            {
              "description": "Fully-resolved values passed into the step before execution."
            }
          ]
        },
        "IsCritical": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The flag which can be used to help decide whether the failure of current step leads to the Automation failure."
            }
          ]
        },
        "IsEnd": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The flag which can be used to end automation no matter whether the step succeeds or fails."
            }
          ]
        },
        "MaxAttempts": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The maximum number of tries to run the action of the step. The default value is 1."
            }
          ]
        },
        "NextStep": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The next step after the step succeeds."
            }
          ]
        },
        "OnFailure": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The action to take if the step fails. The default value is Abort."
            }
          ]
        },
        "Outputs": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "Returned values from the execution of the step."
            }
          ]
        },
        "OverriddenParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationParameterMap"
            },
            {
              "description": "A user-specified list of parameters to override when running a step."
            }
          ]
        },
        "Response": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A message associated with the response code for an execution."
            }
          ]
        },
        "ResponseCode": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The response code returned by the execution of the step."
            }
          ]
        },
        "StepExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The unique ID of a step execution."
            }
          ]
        },
        "StepName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of this execution step."
            }
          ]
        },
        "StepStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionStatus"
            },
            {
              "description": "The execution status for this step."
            }
          ]
        },
        "TargetLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLocation"
            },
            {
              "description": "The combination of AWS Regions and accounts targeted by the current Automation execution."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The targets for the step execution."
            }
          ]
        },
        "TimeoutSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The timeout seconds of the step."
            }
          ]
        },
        "ValidNextSteps": {
          "allOf": [
            {
              "$ref": "#/definitions/ValidNextStepList"
            },
            {
              "description": "Strategies used when step fails, we support Continue and Abort. Abort will fail the automation when the step fails. Continue will ignore the failure of current step and allow automation to run the next step. With conditional branching, we add step:stepName to support the automation to go to another specific step."
            }
          ]
        }
      },
      "type": "object"
    },
    "StepExecutionFilter": {
      "description": "A filter to limit the amount of step execution information returned by the call.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/StepExecutionFilterKey"
            },
            {
              "description": "One or more keys to limit the results. Valid filter keys include the following: StepName, Action, StepExecutionId, StepExecutionStatus, StartTimeBefore, StartTimeAfter."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/StepExecutionFilterValueList"
            },
            {
              "description": "The values of the filter key."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Values"
      ],
      "type": "object"
    },
    "StepExecutionFilterKey": {
      "enum": [
        "StartTimeBefore",
        "StartTimeAfter",
        "StepExecutionStatus",
        "StepExecutionId",
        "StepName",
        "Action"
      ],
      "type": "string"
    },
    "StepExecutionFilterList": {
      "items": {
        "$ref": "#/definitions/StepExecutionFilter"
      },
      "maxItems": 6,
      "minItems": 1,
      "type": "array"
    },
    "StepExecutionFilterValue": {
      "maxLength": 150,
      "minLength": 1,
      "type": "string"
    },
    "StepExecutionFilterValueList": {
      "items": {
        "$ref": "#/definitions/StepExecutionFilterValue"
      },
      "maxItems": 10,
      "minItems": 1,
      "type": "array"
    },
    "StepExecutionList": {
      "items": {
        "$ref": "#/definitions/StepExecution"
      },
      "type": "array"
    },
    "StopAutomationExecutionRequest": {
      "properties": {
        "AutomationExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationExecutionId"
            },
            {
              "description": "The execution ID of the Automation to stop."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/StopType"
            },
            {
              "description": "The stop request type. Valid types include the following: Cancel and Complete. The default type is Cancel."
            }
          ]
        }
      },
      "required": [
        "AutomationExecutionId"
      ],
      "title": "StopAutomationExecutionRequest",
      "type": "object"
    },
    "StopAutomationExecutionResult": {
      "properties": {},
      "type": "object"
    },
    "StopType": {
      "enum": [
        "Complete",
        "Cancel"
      ],
      "type": "string"
    },
    "StreamUrl": {
      "type": "string"
    },
    "String": {
      "type": "string"
    },
    "StringDateTime": {
      "pattern": "^([\\-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d(?!:))?)?(\\17[0-5]\\d([\\.,]\\d)?)?([zZ]|([\\-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$",
      "type": "string"
    },
    "StringList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "SubTypeCountLimitExceededException": {},
    "Tag": {
      "description": "Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. In Systems Manager, you can apply tags to documents, managed instances, maintenance windows, Parameter Store parameters, and patch baselines.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKey"
            },
            {
              "description": "The name of the tag."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/TagValue"
            },
            {
              "description": "The value of the tag."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "maxItems": 1000,
      "type": "array"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "Target": {
      "description": "<p>An array of search criteria that targets instances using a Key,Value combination that you specify. </p> <p>Supported formats include the following.</p> <ul> <li> <p> <code>Key=InstanceIds,Values=<i>instance-id-1</i>,<i>instance-id-2</i>,<i>instance-id-3</i> </code> </p> </li> <li> <p> <code>Key=tag:<i>my-tag-key</i>,Values=<i>my-tag-value-1</i>,<i>my-tag-value-2</i> </code> </p> </li> <li> <p> <code>Key=tag-key,Values=<i>my-tag-key-1</i>,<i>my-tag-key-2</i> </code> </p> </li> <li> <p> <b>Run Command and Maintenance window targets only</b>: <code>Key=resource-groups:Name,Values=<i>resource-group-name</i> </code> </p> </li> <li> <p> <b>Maintenance window targets only</b>: <code>Key=resource-groups:ResourceTypeFilters,Values=<i>resource-type-1</i>,<i>resource-type-2</i> </code> </p> </li> <li> <p> <b>Automation targets only</b>: <code>Key=ResourceGroup;Values=<i>resource-group-name</i> </code> </p> </li> </ul> <p>For example:</p> <ul> <li> <p> <code>Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE</code> </p> </li> <li> <p> <code>Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3</code> </p> </li> <li> <p> <code>Key=tag-key,Values=Name,Instance-Type,CostCenter</code> </p> </li> <li> <p> <b>Run Command and Maintenance window targets only</b>: <code>Key=resource-groups:Name,Values=ProductionResourceGroup</code> </p> <p>This example demonstrates how to target all resources in the resource group <b>ProductionResourceGroup</b> in your maintenance window.</p> </li> <li> <p> <b>Maintenance window targets only</b>: <code>Key=resource-groups:ResourceTypeFilters,Values=<i>AWS::EC2::INSTANCE</i>,<i>AWS::EC2::VPC</i> </code> </p> <p>This example demonstrates how to target only EC2 instances and VPCs in your maintenance window.</p> </li> <li> <p> <b>Automation targets only</b>: <code>Key=ResourceGroup,Values=MyResourceGroup</code> </p> </li> <li> <p> <b>State Manager association targets only</b>: <code>Key=InstanceIds,Values=<i>*</i> </code> </p> <p>This example demonstrates how to target all managed instances in the AWS Region where the association was created.</p> </li> </ul> <p>For more information about how to send commands that target instances using <code>Key,Value</code> parameters, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting\">Targeting multiple instances</a> in the <i>AWS Systems Manager User Guide</i>.</p>",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetKey"
            },
            {
              "description": "User-defined criteria for sending commands that target instances that meet the criteria."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetValues"
            },
            {
              "description": "User-defined criteria that maps to <code>Key</code>. For example, if you specified <code>tag:ServerRole</code>, you could specify <code>value:WebServer</code> to run a command on instances that include EC2 tags of <code>ServerRole,WebServer</code>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "TargetCount": {
      "type": "integer"
    },
    "TargetInUseException": {},
    "TargetKey": {
      "maxLength": 163,
      "minLength": 1,
      "pattern": "^[\\p{L}\\p{Z}\\p{N}_.:/=\\-@]*$|resource-groups:ResourceTypeFilters|resource-groups:Name",
      "type": "string"
    },
    "TargetLocation": {
      "description": "The combination of AWS Regions and accounts targeted by the current Automation execution.",
      "properties": {
        "Accounts": {
          "allOf": [
            {
              "$ref": "#/definitions/Accounts"
            },
            {
              "description": "The AWS accounts targeted by the current Automation execution."
            }
          ]
        },
        "ExecutionRoleName": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionRoleName"
            },
            {
              "description": "The Automation execution role used by the currently running Automation. If not specified, the default value is <code>AWS-SystemsManager-AutomationExecutionRole</code>."
            }
          ]
        },
        "Regions": {
          "allOf": [
            {
              "$ref": "#/definitions/Regions"
            },
            {
              "description": "The AWS Regions targeted by the current Automation execution."
            }
          ]
        },
        "TargetLocationMaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The maximum number of AWS accounts and AWS regions allowed to run the Automation concurrently."
            }
          ]
        },
        "TargetLocationMaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The maximum number of errors allowed before the system stops queueing additional Automation executions for the currently running Automation."
            }
          ]
        }
      },
      "type": "object"
    },
    "TargetLocations": {
      "items": {
        "$ref": "#/definitions/TargetLocation"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array"
    },
    "TargetMap": {
      "additionalProperties": {
        "$ref": "#/definitions/TargetMapValueList"
      },
      "maxProperties": 20,
      "minProperties": 1,
      "type": "object"
    },
    "TargetMapKey": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "TargetMapValue": {
      "maxLength": 50,
      "minLength": 1,
      "type": "string"
    },
    "TargetMapValueList": {
      "items": {
        "$ref": "#/definitions/TargetMapValue"
      },
      "maxItems": 25,
      "minItems": 0,
      "type": "array"
    },
    "TargetMaps": {
      "items": {
        "$ref": "#/definitions/TargetMap"
      },
      "maxItems": 300,
      "minItems": 0,
      "type": "array"
    },
    "TargetNotConnected": {},
    "TargetParameterList": {
      "items": {
        "$ref": "#/definitions/ParameterValue"
      },
      "type": "array"
    },
    "TargetType": {
      "maxLength": 200,
      "pattern": "^\\/[\\w\\.\\-\\:\\/]*$",
      "type": "string"
    },
    "TargetValue": {
      "type": "string"
    },
    "TargetValues": {
      "items": {
        "$ref": "#/definitions/TargetValue"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "Targets": {
      "items": {
        "$ref": "#/definitions/Target"
      },
      "maxItems": 5,
      "minItems": 0,
      "type": "array"
    },
    "TerminateSessionRequest": {
      "properties": {
        "SessionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionId"
            },
            {
              "description": "The ID of the session to terminate."
            }
          ]
        }
      },
      "required": [
        "SessionId"
      ],
      "title": "TerminateSessionRequest",
      "type": "object"
    },
    "TerminateSessionResponse": {
      "properties": {
        "SessionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionId"
            },
            {
              "description": "The ID of the session that has been terminated."
            }
          ]
        }
      },
      "type": "object"
    },
    "TimeoutSeconds": {
      "maximum": 2592000,
      "minimum": 30,
      "type": "integer"
    },
    "TokenValue": {
      "maxLength": 300,
      "minLength": 0,
      "type": "string"
    },
    "TooManyTagsError": {},
    "TooManyUpdates": {},
    "TotalCount": {
      "type": "integer"
    },
    "TotalSizeLimitExceededException": {},
    "UUID": {
      "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
      "type": "string"
    },
    "UnsupportedCalendarException": {},
    "UnsupportedFeatureRequiredException": {},
    "UnsupportedInventoryItemContextException": {},
    "UnsupportedInventorySchemaVersionException": {},
    "UnsupportedOperatingSystem": {},
    "UnsupportedParameterType": {},
    "UnsupportedPlatformType": {},
    "UpdateAssociationRequest": {
      "properties": {
        "ApplyOnlyAtCronInterval": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplyOnlyAtCronInterval"
            },
            {
              "description": "<p>By default, when you update an association, the system runs it immediately after it is updated and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you update it. This parameter is not supported for rate expressions.</p> <p>Also, if you specified this option when you created the association, you can reset it. To do so, specify the <code>no-apply-only-at-cron-interval</code> parameter when you update the association from the command line. This parameter forces the association to run immediately after updating it and according to the interval specified.</p>"
            }
          ]
        },
        "AssociationId": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationId"
            },
            {
              "description": "The ID of the association you want to update. "
            }
          ]
        },
        "AssociationName": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationName"
            },
            {
              "description": "The name of the association that you want to update."
            }
          ]
        },
        "AssociationVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationVersion"
            },
            {
              "description": "This parameter is provided for concurrency control purposes. You must specify the latest association version in the service. If you want to ensure that this request succeeds, either specify <code>$LATEST</code>, or omit this parameter."
            }
          ]
        },
        "AutomationTargetParameterName": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomationTargetParameterName"
            },
            {
              "description": "Specify the target for the association. This target is required for associations that use an Automation document and target resources by using rate controls."
            }
          ]
        },
        "ComplianceSeverity": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationComplianceSeverity"
            },
            {
              "description": "The severity level to assign to the association."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The document version you want update for the association. "
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "<p>The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.</p> <p>If a new instance starts and attempts to run an association while Systems Manager is running MaxConcurrency associations, the association is allowed to run. During the next association interval, the new instance will process its association within the limit specified for MaxConcurrency.</p>"
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "<p>The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 instances and set MaxError to 10%, then the system stops sending the request when the sixth error is received.</p> <p>Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.</p>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "<p>The name of the SSM document that contains the configuration information for the instance. You can specify Command or Automation documents.</p> <p>You can specify AWS-predefined documents, documents you created, or a document that is shared with you from another account.</p> <p>For SSM documents that are shared with you from other AWS accounts, you must specify the complete SSM document ARN, in the following format:</p> <p> <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:document/<i>document-name</i> </code> </p> <p>For example:</p> <p> <code>arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document</code> </p> <p>For AWS-predefined documents and SSM documents you created in your account, you only need to specify the document name. For example, <code>AWS-ApplyPatchBaseline</code> or <code>My-Document</code>.</p>"
            }
          ]
        },
        "OutputLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAssociationOutputLocation"
            },
            {
              "description": "An S3 bucket where you want to store the results of this request."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Parameters"
            },
            {
              "description": "The parameters you want to update for the association. If you create a parameter using Parameter Store, you can reference the parameter using {{ssm:parameter-name}}"
            }
          ]
        },
        "ScheduleExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/ScheduleExpression"
            },
            {
              "description": "The cron expression used to schedule the association that you want to update."
            }
          ]
        },
        "SyncCompliance": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationSyncCompliance"
            },
            {
              "description": "<p>The mode for generating association compliance. You can specify <code>AUTO</code> or <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is <code>COMPLIANT</code>. If the association execution doesn't run successfully, the association is <code>NON-COMPLIANT</code>.</p> <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter for the <a>PutComplianceItems</a> API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the <a>PutComplianceItems</a> API action.</p> <p>By default, all associations use <code>AUTO</code> mode.</p>"
            }
          ]
        },
        "TargetLocations": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLocations"
            },
            {
              "description": "A location is a combination of AWS Regions and AWS accounts where you want to run the association. Use this action to update an association in multiple Regions and multiple accounts."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The targets of the association."
            }
          ]
        }
      },
      "required": [
        "AssociationId"
      ],
      "title": "UpdateAssociationRequest",
      "type": "object"
    },
    "UpdateAssociationResult": {
      "properties": {
        "AssociationDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationDescription"
            },
            {
              "description": "The description of the association that was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateAssociationStatusRequest": {
      "properties": {
        "AssociationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationStatus"
            },
            {
              "description": "The association status."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The ID of the instance."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentARN"
            },
            {
              "description": "The name of the Systems Manager document."
            }
          ]
        }
      },
      "required": [
        "Name",
        "InstanceId",
        "AssociationStatus"
      ],
      "title": "UpdateAssociationStatusRequest",
      "type": "object"
    },
    "UpdateAssociationStatusResult": {
      "properties": {
        "AssociationDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/AssociationDescription"
            },
            {
              "description": "Information about the association."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDocumentDefaultVersionRequest": {
      "properties": {
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionNumber"
            },
            {
              "description": "The version of a custom document that you want to set as the default version."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of a custom document that you want to set as the default version."
            }
          ]
        }
      },
      "required": [
        "Name",
        "DocumentVersion"
      ],
      "title": "UpdateDocumentDefaultVersionRequest",
      "type": "object"
    },
    "UpdateDocumentDefaultVersionResult": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentDefaultVersionDescription"
            },
            {
              "description": "The description of a custom document that you want to set as the default version."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDocumentMetadataRequest": {
      "properties": {
        "DocumentReviews": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentReviews"
            },
            {
              "description": "The document review details to update."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "The version of a document to update."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document for which a version is to be updated."
            }
          ]
        }
      },
      "required": [
        "Name",
        "DocumentReviews"
      ],
      "title": "UpdateDocumentMetadataRequest",
      "type": "object"
    },
    "UpdateDocumentMetadataResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateDocumentRequest": {
      "properties": {
        "Attachments": {
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentsSourceList"
            },
            {
              "description": "A list of key and value pairs that describe attachments to a version of a document."
            }
          ]
        },
        "Content": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentContent"
            },
            {
              "description": "A valid JSON or YAML string."
            }
          ]
        },
        "DocumentFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentFormat"
            },
            {
              "description": "Specify the document format for the new document version. Systems Manager supports JSON and YAML documents. JSON is the default format."
            }
          ]
        },
        "DocumentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersion"
            },
            {
              "description": "(Required) The latest version of the document that you want to update. The latest document version can be specified using the $LATEST variable or by the version number. Updating a previous version of a document is not supported."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentName"
            },
            {
              "description": "The name of the document that you want to update."
            }
          ]
        },
        "TargetType": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetType"
            },
            {
              "description": "Specify a new target type for the document."
            }
          ]
        },
        "VersionName": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentVersionName"
            },
            {
              "description": "An optional field specifying the version of the artifact you are updating with the document. For example, \"Release 12, Update 6\". This value is unique across all versions of a document, and cannot be changed."
            }
          ]
        }
      },
      "required": [
        "Content",
        "Name"
      ],
      "title": "UpdateDocumentRequest",
      "type": "object"
    },
    "UpdateDocumentResult": {
      "properties": {
        "DocumentDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentDescription"
            },
            {
              "description": "A description of the document that was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateMaintenanceWindowRequest": {
      "properties": {
        "AllowUnassociatedTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowAllowUnassociatedTargets"
            },
            {
              "description": "Whether targets must be registered with the maintenance window before tasks can be defined for those targets."
            }
          ]
        },
        "Cutoff": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowCutoff"
            },
            {
              "description": "The number of hours before the end of the maintenance window that Systems Manager stops scheduling new tasks for execution."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "An optional description for the update request."
            }
          ]
        },
        "Duration": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDurationHours"
            },
            {
              "description": "The duration of the maintenance window in hours."
            }
          ]
        },
        "Enabled": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowEnabled"
            },
            {
              "description": "Whether the maintenance window is enabled."
            }
          ]
        },
        "EndDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, for when you want the maintenance window to become inactive. EndDate allows you to set a date and time in the future when the maintenance window will no longer run."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The name of the maintenance window."
            }
          ]
        },
        "Replace": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "If True, then all fields that are required by the CreateMaintenanceWindow action are also required for this API request. Optional fields that are not specified are set to null. "
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowSchedule"
            },
            {
              "description": "The schedule of the maintenance window in the form of a cron or rate expression."
            }
          ]
        },
        "ScheduleOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowOffset"
            },
            {
              "description": "<p>The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.</p> <p>For example, the following cron expression schedules a maintenance window to run the third Tuesday of every month at 11:30 PM.</p> <p> <code>cron(30 23 ? * TUE#3 *)</code> </p> <p>If the schedule offset is <code>2</code>, the maintenance window won't run until two days later.</p>"
            }
          ]
        },
        "ScheduleTimezone": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTimezone"
            },
            {
              "description": "The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: \"America/Los_Angeles\", \"UTC\", or \"Asia/Seoul\". For more information, see the <a href=\"https://www.iana.org/time-zones\">Time Zone Database</a> on the IANA website."
            }
          ]
        },
        "StartDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: \"America/Los_Angeles\", \"UTC\", or \"Asia/Seoul\". For more information, see the <a href=\"https://www.iana.org/time-zones\">Time Zone Database</a> on the IANA website."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window to update."
            }
          ]
        }
      },
      "required": [
        "WindowId"
      ],
      "title": "UpdateMaintenanceWindowRequest",
      "type": "object"
    },
    "UpdateMaintenanceWindowResult": {
      "properties": {
        "AllowUnassociatedTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowAllowUnassociatedTargets"
            },
            {
              "description": "Whether targets must be registered with the maintenance window before tasks can be defined for those targets."
            }
          ]
        },
        "Cutoff": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowCutoff"
            },
            {
              "description": "The number of hours before the end of the maintenance window that Systems Manager stops scheduling new tasks for execution."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "An optional description of the update."
            }
          ]
        },
        "Duration": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDurationHours"
            },
            {
              "description": "The duration of the maintenance window in hours."
            }
          ]
        },
        "Enabled": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowEnabled"
            },
            {
              "description": "Whether the maintenance window is enabled."
            }
          ]
        },
        "EndDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive. The maintenance window will not run after this specified time."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The name of the maintenance window."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowSchedule"
            },
            {
              "description": "The schedule of the maintenance window in the form of a cron or rate expression."
            }
          ]
        },
        "ScheduleOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowOffset"
            },
            {
              "description": "The number of days to wait to run a maintenance window after the scheduled CRON expression date and time."
            }
          ]
        },
        "ScheduleTimezone": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTimezone"
            },
            {
              "description": "The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: \"America/Los_Angeles\", \"UTC\", or \"Asia/Seoul\". For more information, see the <a href=\"https://www.iana.org/time-zones\">Time Zone Database</a> on the IANA website."
            }
          ]
        },
        "StartDate": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowStringDateTime"
            },
            {
              "description": "The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active. The maintenance window will not run before this specified time."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the created maintenance window."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateMaintenanceWindowTargetRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "An optional description for the update."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "A name for the update."
            }
          ]
        },
        "OwnerInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/OwnerInformation"
            },
            {
              "description": "User-provided value that will be included in any CloudWatch events raised while running tasks for these targets in this maintenance window."
            }
          ]
        },
        "Replace": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "If True, then all fields that are required by the RegisterTargetWithMaintenanceWindow action are also required for this API request. Optional fields that are not specified are set to null."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The targets to add or replace."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The maintenance window ID with which to modify the target."
            }
          ]
        },
        "WindowTargetId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTargetId"
            },
            {
              "description": "The target ID to modify."
            }
          ]
        }
      },
      "required": [
        "WindowId",
        "WindowTargetId"
      ],
      "title": "UpdateMaintenanceWindowTargetRequest",
      "type": "object"
    },
    "UpdateMaintenanceWindowTargetResult": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "The updated description."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The updated name."
            }
          ]
        },
        "OwnerInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/OwnerInformation"
            },
            {
              "description": "The updated owner."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The updated targets."
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The maintenance window ID specified in the update request."
            }
          ]
        },
        "WindowTargetId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTargetId"
            },
            {
              "description": "The target ID specified in the update request."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateMaintenanceWindowTaskRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "The new task description to specify."
            }
          ]
        },
        "LoggingInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LoggingInfo"
            },
            {
              "description": "<p>The new logging location in Amazon S3 to specify.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>"
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The new <code>MaxConcurrency</code> value you want to specify. <code>MaxConcurrency</code> is the number of targets that are allowed to run this task in parallel."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The new <code>MaxErrors</code> value to specify. <code>MaxErrors</code> is the maximum number of errors that are allowed before the task stops being scheduled."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The new task name to specify."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskPriority"
            },
            {
              "description": "The new task priority to specify. The lower the number, the higher the priority. Tasks that have the same priority are scheduled in parallel."
            }
          ]
        },
        "Replace": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "If True, then all fields that are required by the RegisterTaskWithMaintenanceWindow action are also required for this API request. Optional fields that are not specified are set to null."
            }
          ]
        },
        "ServiceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "<p>The ARN of the IAM service role for Systems Manager to assume when running a maintenance window task. If you do not specify a service role ARN, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created when you run <code>RegisterTaskWithMaintenanceWindow</code>.</p> <p>For more information, see the following topics in the in the <i>AWS Systems Manager User Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/using-service-linked-roles.html#slr-permissions\">Using service-linked roles for Systems Manager</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-permissions.html#maintenance-window-tasks-service-role\">Should I use a service-linked role or a custom service role to run maintenance window tasks? </a> </p> </li> </ul>"
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The targets (either instances or tags) to modify. Instances are specified using Key=instanceids,Values=instanceID_1,instanceID_2. Tags are specified using Key=tag_name,Values=tag_value. "
            }
          ]
        },
        "TaskArn": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskArn"
            },
            {
              "description": "The task ARN to modify."
            }
          ]
        },
        "TaskInvocationParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskInvocationParameters"
            },
            {
              "description": "<p>The parameters that the task should use during execution. Populate only the fields that match the task type. All other fields should be empty.</p> <important> <p>When you update a maintenance window task that has options specified in <code>TaskInvocationParameters</code>, you must provide again all the <code>TaskInvocationParameters</code> values that you want to retain. The values you do not specify again are removed. For example, suppose that when you registered a Run Command task, you specified <code>TaskInvocationParameters</code> values for <code>Comment</code>, <code>NotificationConfig</code>, and <code>OutputS3BucketName</code>. If you update the maintenance window task and specify only a different <code>OutputS3BucketName</code> value, the values for <code>Comment</code> and <code>NotificationConfig</code> are removed.</p> </important>"
            }
          ]
        },
        "TaskParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskParameters"
            },
            {
              "description": "<p>The parameters to modify.</p> <note> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note> <p>The map has the following format:</p> <p>Key: string, between 1 and 255 characters</p> <p>Value: an array of strings, each string is between 1 and 255 characters</p>"
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The maintenance window ID that contains the task to modify."
            }
          ]
        },
        "WindowTaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskId"
            },
            {
              "description": "The task ID to modify."
            }
          ]
        }
      },
      "required": [
        "WindowId",
        "WindowTaskId"
      ],
      "title": "UpdateMaintenanceWindowTaskRequest",
      "type": "object"
    },
    "UpdateMaintenanceWindowTaskResult": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowDescription"
            },
            {
              "description": "The updated task description."
            }
          ]
        },
        "LoggingInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LoggingInfo"
            },
            {
              "description": "<p>The updated logging information in Amazon S3.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>"
            }
          ]
        },
        "MaxConcurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrency"
            },
            {
              "description": "The updated MaxConcurrency value."
            }
          ]
        },
        "MaxErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxErrors"
            },
            {
              "description": "The updated MaxErrors value."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowName"
            },
            {
              "description": "The updated task name."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskPriority"
            },
            {
              "description": "The updated priority value."
            }
          ]
        },
        "ServiceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceRole"
            },
            {
              "description": "The ARN of the IAM service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/Targets"
            },
            {
              "description": "The updated target values."
            }
          ]
        },
        "TaskArn": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskArn"
            },
            {
              "description": "The updated task ARN value."
            }
          ]
        },
        "TaskInvocationParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskInvocationParameters"
            },
            {
              "description": "The updated parameter values."
            }
          ]
        },
        "TaskParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskParameters"
            },
            {
              "description": "<p>The updated parameter values.</p> <note> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>"
            }
          ]
        },
        "WindowId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowId"
            },
            {
              "description": "The ID of the maintenance window that was updated."
            }
          ]
        },
        "WindowTaskId": {
          "allOf": [
            {
              "$ref": "#/definitions/MaintenanceWindowTaskId"
            },
            {
              "description": "The task ID of the maintenance window that was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateManagedInstanceRoleRequest": {
      "properties": {
        "IamRole": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRole"
            },
            {
              "description": "The IAM role you want to assign or change."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ManagedInstanceId"
            },
            {
              "description": "The ID of the managed instance where you want to update the role."
            }
          ]
        }
      },
      "required": [
        "InstanceId",
        "IamRole"
      ],
      "title": "UpdateManagedInstanceRoleRequest",
      "type": "object"
    },
    "UpdateManagedInstanceRoleResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateOpsItemRequest": {
      "properties": {
        "ActualEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time a runbook workflow ended. Currently reported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "ActualStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time a runbook workflow started. Currently reported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "Category": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemCategory"
            },
            {
              "description": "Specify a new category for an OpsItem."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemDescription"
            },
            {
              "description": "Update the information about the OpsItem. Provide enough information so that users reading this OpsItem for the first time understand the issue. "
            }
          ]
        },
        "Notifications": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemNotifications"
            },
            {
              "description": "The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this OpsItem is edited or changed."
            }
          ]
        },
        "OperationalData": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemOperationalData"
            },
            {
              "description": "<p>Add new keys or edit existing key-value pairs of the OperationalData map in the OpsItem object.</p> <p>Operational data is custom data that provides useful reference details about the OpsItem. For example, you can specify log files, error strings, license keys, troubleshooting tips, or other relevant data. You enter operational data as key-value pairs. The key has a maximum length of 128 characters. The value has a maximum size of 20 KB.</p> <important> <p>Operational data keys <i>can't</i> begin with the following: amazon, aws, amzn, ssm, /amazon, /aws, /amzn, /ssm.</p> </important> <p>You can choose to make the data searchable by other users in the account or you can restrict search access. Searchable data means that all users with access to the OpsItem Overview page (as provided by the <a>DescribeOpsItems</a> API action) can view and search on the specified data. Operational data that is not searchable is only viewable by users who have access to the OpsItem (as provided by the <a>GetOpsItem</a> API action).</p> <p>Use the <code>/aws/resources</code> key in OperationalData to specify a related resource in the request. Use the <code>/aws/automations</code> key in OperationalData to associate an Automation runbook with the OpsItem. To view AWS CLI example commands that use these keys, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-creating-OpsItems.html#OpsCenter-manually-create-OpsItems\">Creating OpsItems manually</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "OperationalDataToDelete": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemOpsDataKeysList"
            },
            {
              "description": "Keys that you want to remove from the OperationalData map."
            }
          ]
        },
        "OpsItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemId"
            },
            {
              "description": "The ID of the OpsItem."
            }
          ]
        },
        "PlannedEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time specified in a change request for a runbook workflow to end. Currently supported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "PlannedStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The time specified in a change request for a runbook workflow to start. Currently supported only for the OpsItem type <code>/aws/changerequest</code>."
            }
          ]
        },
        "Priority": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemPriority"
            },
            {
              "description": "The importance of this OpsItem in relation to other OpsItems in the system."
            }
          ]
        },
        "RelatedOpsItems": {
          "allOf": [
            {
              "$ref": "#/definitions/RelatedOpsItems"
            },
            {
              "description": "One or more OpsItems that share something in common with the current OpsItems. For example, related OpsItems can include OpsItems with similar error messages, impacted resources, or statuses for the impacted resource."
            }
          ]
        },
        "Severity": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemSeverity"
            },
            {
              "description": "Specify a new severity for an OpsItem."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemStatus"
            },
            {
              "description": "The OpsItem status. Status can be <code>Open</code>, <code>In Progress</code>, or <code>Resolved</code>. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-working-with-OpsItems.html#OpsCenter-working-with-OpsItems-editing-details\">Editing OpsItem details</a> in the <i>AWS Systems Manager User Guide</i>."
            }
          ]
        },
        "Title": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsItemTitle"
            },
            {
              "description": "A short heading that describes the nature of the OpsItem and the impacted resource."
            }
          ]
        }
      },
      "required": [
        "OpsItemId"
      ],
      "title": "UpdateOpsItemRequest",
      "type": "object"
    },
    "UpdateOpsItemResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateOpsMetadataRequest": {
      "properties": {
        "KeysToDelete": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataKeysToDeleteList"
            },
            {
              "description": "The metadata keys to delete from the OpsMetadata object. "
            }
          ]
        },
        "MetadataToUpdate": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataMap"
            },
            {
              "description": "Metadata to add to an OpsMetadata object."
            }
          ]
        },
        "OpsMetadataArn": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataArn"
            },
            {
              "description": "The Amazon Resoure Name (ARN) of the OpsMetadata Object to update."
            }
          ]
        }
      },
      "required": [
        "OpsMetadataArn"
      ],
      "title": "UpdateOpsMetadataRequest",
      "type": "object"
    },
    "UpdateOpsMetadataResult": {
      "properties": {
        "OpsMetadataArn": {
          "allOf": [
            {
              "$ref": "#/definitions/OpsMetadataArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the OpsMetadata Object that was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdatePatchBaselineRequest": {
      "properties": {
        "ApprovalRules": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchRuleGroup"
            },
            {
              "description": "A set of rules used to include patches in the baseline."
            }
          ]
        },
        "ApprovedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchIdList"
            },
            {
              "description": "<p>A list of explicitly approved patches for the baseline.</p> <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html\">About package name formats for approved and rejected patch lists</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "ApprovedPatchesComplianceLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceLevel"
            },
            {
              "description": "Assigns a new compliance severity level to an existing patch baseline."
            }
          ]
        },
        "ApprovedPatchesEnableNonSecurity": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only."
            }
          ]
        },
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the patch baseline to update."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineDescription"
            },
            {
              "description": "A description of the patch baseline."
            }
          ]
        },
        "GlobalFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchFilterGroup"
            },
            {
              "description": "A set of global filters used to include patches in the baseline."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineName"
            },
            {
              "description": "The name of the patch baseline."
            }
          ]
        },
        "RejectedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchIdList"
            },
            {
              "description": "<p>A list of explicitly rejected patches for the baseline.</p> <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html\">About package name formats for approved and rejected patch lists</a> in the <i>AWS Systems Manager User Guide</i>.</p>"
            }
          ]
        },
        "RejectedPatchesAction": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchAction"
            },
            {
              "description": "<p>The action for Patch Manager to take on patches included in the RejectedPackages list.</p> <ul> <li> <p> <b>ALLOW_AS_DEPENDENCY</b>: A package in the Rejected patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as <i>InstalledOther</i>. This is the default action if no option is specified.</p> </li> <li> <p> <b>BLOCK</b>: Packages in the RejectedPatches list, and packages that include them as dependencies, are not installed under any circumstances. If a package was installed before it was added to the Rejected patches list, it is considered non-compliant with the patch baseline, and its status is reported as <i>InstalledRejected</i>.</p> </li> </ul>"
            }
          ]
        },
        "Replace": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "If True, then all fields that are required by the CreatePatchBaseline action are also required for this API request. Optional fields that are not specified are set to null."
            }
          ]
        },
        "Sources": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSourceList"
            },
            {
              "description": "Information about the patches to use to update the instances, including target operating systems and source repositories. Applies to Linux instances only."
            }
          ]
        }
      },
      "required": [
        "BaselineId"
      ],
      "title": "UpdatePatchBaselineRequest",
      "type": "object"
    },
    "UpdatePatchBaselineResult": {
      "properties": {
        "ApprovalRules": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchRuleGroup"
            },
            {
              "description": "A set of rules used to include patches in the baseline."
            }
          ]
        },
        "ApprovedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchIdList"
            },
            {
              "description": "A list of explicitly approved patches for the baseline."
            }
          ]
        },
        "ApprovedPatchesComplianceLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchComplianceLevel"
            },
            {
              "description": "The compliance severity level assigned to the patch baseline after the update completed."
            }
          ]
        },
        "ApprovedPatchesEnableNonSecurity": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only."
            }
          ]
        },
        "BaselineId": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineId"
            },
            {
              "description": "The ID of the deleted patch baseline."
            }
          ]
        },
        "CreatedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date when the patch baseline was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineDescription"
            },
            {
              "description": "A description of the Patch Baseline."
            }
          ]
        },
        "GlobalFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchFilterGroup"
            },
            {
              "description": "A set of global filters used to exclude patches from the baseline."
            }
          ]
        },
        "ModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "The date when the patch baseline was last modified."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/BaselineName"
            },
            {
              "description": "The name of the patch baseline."
            }
          ]
        },
        "OperatingSystem": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatingSystem"
            },
            {
              "description": "The operating system rule used by the updated patch baseline."
            }
          ]
        },
        "RejectedPatches": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchIdList"
            },
            {
              "description": "A list of explicitly rejected patches for the baseline."
            }
          ]
        },
        "RejectedPatchesAction": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchAction"
            },
            {
              "description": "The action specified to take on patches included in the RejectedPatches list. A patch can be allowed only if it is a dependency of another package, or blocked entirely along with packages that include it as a dependency."
            }
          ]
        },
        "Sources": {
          "allOf": [
            {
              "$ref": "#/definitions/PatchSourceList"
            },
            {
              "description": "Information about the patches to use to update the instances, including target operating systems and source repositories. Applies to Linux instances only."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateResourceDataSyncRequest": {
      "properties": {
        "SyncName": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncName"
            },
            {
              "description": "The name of the resource data sync you want to update."
            }
          ]
        },
        "SyncSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncSource"
            },
            {
              "description": "Specify information about the data sources to synchronize."
            }
          ]
        },
        "SyncType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDataSyncType"
            },
            {
              "description": "The type of resource data sync. The supported <code>SyncType</code> is SyncFromSource."
            }
          ]
        }
      },
      "required": [
        "SyncName",
        "SyncType",
        "SyncSource"
      ],
      "title": "UpdateResourceDataSyncRequest",
      "type": "object"
    },
    "UpdateResourceDataSyncResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateServiceSettingRequest": {
      "description": "The request body of the UpdateServiceSetting API action.",
      "properties": {
        "SettingId": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceSettingId"
            },
            {
              "description": "<p>The Amazon Resource Name (ARN) of the service setting to reset. For example, <code>arn:aws:ssm:us-east-1:111122223333:servicesetting/ssm/parameter-store/high-throughput-enabled</code>. The setting ID can be one of the following.</p> <ul> <li> <p> <code>/ssm/parameter-store/default-parameter-tier</code> </p> </li> <li> <p> <code>/ssm/parameter-store/high-throughput-enabled</code> </p> </li> <li> <p> <code>/ssm/managed-instance/activation-tier</code> </p> </li> </ul>"
            }
          ]
        },
        "SettingValue": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceSettingValue"
            },
            {
              "description": "<p>The new value to specify for the service setting. For the <code>/ssm/parameter-store/default-parameter-tier</code> setting ID, the setting value can be one of the following.</p> <ul> <li> <p>Standard</p> </li> <li> <p>Advanced</p> </li> <li> <p>Intelligent-Tiering</p> </li> </ul> <p>For the <code>/ssm/parameter-store/high-throughput-enabled</code>, and <code>/ssm/managed-instance/activation-tier</code> setting IDs, the setting value can be true or false.</p>"
            }
          ]
        }
      },
      "required": [
        "SettingId",
        "SettingValue"
      ],
      "title": "UpdateServiceSettingRequest",
      "type": "object"
    },
    "UpdateServiceSettingResult": {
      "description": "The result body of the UpdateServiceSetting API action.",
      "properties": {},
      "type": "object"
    },
    "Url": {
      "type": "string"
    },
    "ValidNextStep": {
      "maxLength": 65535,
      "minLength": 1,
      "type": "string"
    },
    "ValidNextStepList": {
      "items": {
        "$ref": "#/definitions/ValidNextStep"
      },
      "type": "array"
    },
    "Version": {
      "pattern": "^[0-9]{1,6}(\\.[0-9]{1,6}){2,3}$",
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/ssm/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}