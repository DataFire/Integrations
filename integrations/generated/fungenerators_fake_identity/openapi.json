{
  "swagger": "2.0",
  "schemes": [
    "https",
    "http"
  ],
  "host": "api.fungenerators.com",
  "info": {
    "contact": {
      "name": "Fun Generators",
      "url": "http://fungenerators.com/"
    },
    "description": "Generate random fake identities (name, address, email, phone , credit card info etc). [Click here to subscribe](http://fungenerators.com/api/fakeidentity/)\n",
    "termsOfService": "https://fungenerators.com/terms",
    "title": "Fake identity generation API",
    "version": "1.5",
    "x-apisguru-categories": [
      "text"
    ],
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://fungenerators.com/yaml/fake-identity.yaml",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "fungenerators.com",
    "x-serviceName": "fake-identity",
    "x-datafire": {
      "name": "fungenerators_fake_identity",
      "type": "openapi"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "application/js"
  ],
  "securityDefinitions": {
    "X-Fungenerators-Api-Secret": {
      "in": "header",
      "name": "X-Fungenerators-Api-Secret",
      "type": "apiKey"
    }
  },
  "tags": [
    {
      "description": "Fake Identity Generation API",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://fungenerators.com/api/fakeidentity/"
      },
      "name": "Fake Identity"
    }
  ],
  "paths": {
    "/identity/company": {
      "get": {
        "description": "Generate full company identity",
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n    \"success\": {\n      \"total\": 5\n    },\n    \"contents\": {\n      \"name\": \"Walker-Crist\",\n      \"phone\": \"1-800-307-1546\",\n      \"domain\": \"walker-crist.xyz\",\n      \"email\": \"request@walker-crist.xyz\",\n      \"address\": {\n        \"address\": \"17487 Steuber Locks Suite 996\",\n        \"city\": \"South Einarchester\",\n        \"state\": \"New Mexico\",\n        \"country\": \"USA\",\n        \"postalcode\": \"46493\"\n      }\n    },\n    \"copyright\": \"https://fungenerators.com/\"\n}"
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.company.get"
      }
    },
    "/identity/company/address": {
      "get": {
        "description": "Generate postal addresses",
        "parameters": [
          {
            "description": "No of addresses to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"addresses\": [\n      {\n        \"address\": \"880 Lessie Cove Apt. 110\",\n        \"city\": \"West Marge\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"USA\",\n        \"postalcode\": \"09983\"\n      },\n      {\n        \"address\": \"48726 Curtis Station\",\n        \"city\": \"Baileystad\",\n        \"state\": \"Iowa\",\n        \"country\": \"USA\",\n        \"postalcode\": \"64152-3296\"\n      },\n      {\n        \"address\": \"49595 Myra Loop Apt. 925\",\n        \"city\": \"Coleport\",\n        \"state\": \"Oregon\",\n        \"country\": \"USA\",\n        \"postalcode\": \"02499\"\n      },\n      {\n        \"address\": \"60581 Pearl Inlet\",\n        \"city\": \"Wuckertmouth\",\n        \"state\": \"Connecticut\",\n        \"country\": \"USA\",\n        \"postalcode\": \"18376\"\n      },\n      {\n        \"address\": \"38440 Cassandre Circles\",\n        \"city\": \"Port Ezekiel\",\n        \"state\": \"Alabama\",\n        \"country\": \"USA\",\n        \"postalcode\": \"05904-0794\"\n      }\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}"
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.company.address.get"
      }
    },
    "/identity/company/name": {
      "get": {
        "description": "Generate company name(s)",
        "parameters": [
          {
            "description": "No of names to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": \"5\"\n  },\n  \"contents\": {\n    \"names\": [\n      \"Johnston-Weissnat Ltd\",\n      \"Wisoky Group Inc\",\n      \"Pfannerstill Ltd and Sons\",\n      \"Rempel Ltd PLC\",\n      \"Wolf-Streich and Sons\"\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}            "
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.company.name.get"
      }
    },
    "/identity/company/phonenumber": {
      "get": {
        "description": "Generate random company phone number(s)",
        "parameters": [
          {
            "description": "No of phone numbers to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"phonenumbers\": [\n      \"1-800-976-4219\",\n      \"(808) 423-7981\",\n      \"(888) 963-6939 x028\",\n      \"800-793-6143 x2948\",\n      \"1-808-351-9690 x026\"\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}"
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.company.phonenumber.get"
      }
    },
    "/identity/person": {
      "get": {
        "description": "Generate full identity name, phone, email, address, credit card etc.",
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"name\": {\n      \"first\": \"Brittany\",\n      \"last\": \"Mohr\",\n      \"full\": \"Brittany Mohr\"\n    },\n    \"phone\": \"1-542-830-8666 x4187\",\n    \"email\": \"mohr1963@hotmail.com\",\n    \"birthday\": \"1975/03/13\",\n    \"address\": {\n      \"address\": \"6029 Homenick Ridges Suite 551\",\n      \"city\": \"Adelbertshire\",\n      \"state\": \"Connecticut\",\n      \"country\": \"USA\",\n      \"postalcode\": \"06305-2706\"\n    },\n    \"credit-card\": {\n      \"type\": \"MasterCard\",\n      \"number\": \"4539572808851695\",\n      \"expiration\": \"12/20\"\n    }\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}        "
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.person.get"
      }
    },
    "/identity/person/address": {
      "get": {
        "description": "Generate postal addresses",
        "parameters": [
          {
            "description": "No of addresses to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"addresses\": [\n      {\n        \"address\": \"880 Lessie Cove Apt. 110\",\n        \"city\": \"West Marge\",\n        \"state\": \"Massachusetts\",\n        \"country\": \"USA\",\n        \"postalcode\": \"09983\"\n      },\n      {\n        \"address\": \"48726 Curtis Station\",\n        \"city\": \"Baileystad\",\n        \"state\": \"Iowa\",\n        \"country\": \"USA\",\n        \"postalcode\": \"64152-3296\"\n      },\n      {\n        \"address\": \"49595 Myra Loop Apt. 925\",\n        \"city\": \"Coleport\",\n        \"state\": \"Oregon\",\n        \"country\": \"USA\",\n        \"postalcode\": \"02499\"\n      },\n      {\n        \"address\": \"60581 Pearl Inlet\",\n        \"city\": \"Wuckertmouth\",\n        \"state\": \"Connecticut\",\n        \"country\": \"USA\",\n        \"postalcode\": \"18376\"\n      },\n      {\n        \"address\": \"38440 Cassandre Circles\",\n        \"city\": \"Port Ezekiel\",\n        \"state\": \"Alabama\",\n        \"country\": \"USA\",\n        \"postalcode\": \"05904-0794\"\n      }\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}"
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.person.address.get"
      }
    },
    "/identity/person/creditcard": {
      "get": {
        "description": "Generate credit card details (number, type, expiration date, name on the card etc).",
        "parameters": [
          {
            "description": "No of credit card details to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"creditcards\": [\n      {\n        \"name\": \"Una Nikolaus\",\n        \"type\": \"Visa\",\n        \"number\": \"4556029936375707\",\n        \"expiration\": \"02/21\"\n      },\n      {\n        \"name\": \"Dessie Runolfsson\",\n        \"type\": \"Visa\",\n        \"number\": \"6011247607523686\",\n        \"expiration\": \"11/19\"\n      },\n      {\n        \"name\": \"Dax Kunze\",\n        \"type\": \"MasterCard\",\n        \"number\": \"2221543215045897\",\n        \"expiration\": \"11/20\"\n      },\n      {\n        \"name\": \"Natalia Nicolas\",\n        \"type\": \"Visa\",\n        \"number\": \"345851764439527\",\n        \"expiration\": \"03/22\"\n      },\n      {\n        \"name\": \"Leda Von\",\n        \"type\": \"Visa\",\n        \"number\": \"4868179383681744\",\n        \"expiration\": \"12/21\"\n      }\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}        "
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.person.creditcard.get"
      }
    },
    "/identity/person/email": {
      "get": {
        "description": "Generate random email ids",
        "parameters": [
          {
            "description": "No of email ids to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"emails\": [\n      \"lehner.alta@gmail.com\",\n      \"amitchell@gmail.com\",\n      \"chesley03@gmail.com\",\n      \"nhowell@hotmail.com\",\n      \"ottilie.oconner@hotmail.com\"\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}"
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.person.email.get"
      }
    },
    "/identity/person/name": {
      "get": {
        "description": "Generate full name(s)",
        "parameters": [
          {
            "description": "Gender of the names. If not specified both gender names will be returned.",
            "format": "string",
            "in": "query",
            "name": "gender",
            "required": false,
            "type": "string"
          },
          {
            "description": "No of names to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"names\": [\n      \"Shanna Hagenes\",\n      \"Therese Beatty II\",\n      \"Mrs. Electa Cruickshank MD\",\n      \"Rachael Quigley\",\n      \"Kyra Bins\"\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}"
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.person.name.get"
      }
    },
    "/identity/person/name/first": {
      "get": {
        "description": "Generate first name (in a given gender)",
        "parameters": [
          {
            "description": "Gender of the names. If not specified both gender names will be returned.",
            "format": "string",
            "in": "query",
            "name": "gender",
            "required": false,
            "type": "string"
          },
          {
            "description": "No of names to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"names\": [\n      \"Dedrick\",\n      \"Jedidiah\",\n      \"Helga\",\n      \"Berniece\",\n      \"Jammie\"\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}"
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.person.name.first.get"
      }
    },
    "/identity/person/name/last": {
      "get": {
        "description": "Generate last name(s)",
        "parameters": [
          {
            "description": "No of names to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"names\": [\n      \"Trantow\",\n      \"Abshire\",\n      \"Bode\",\n      \"Dickens\",\n      \"Harris\"\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}"
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.person.name.last.get"
      }
    },
    "/identity/person/phonenumber": {
      "get": {
        "description": "Generate random phone number(s)",
        "parameters": [
          {
            "description": "No of phone numbers to return. Defaults to 1.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/js"
        ],
        "responses": {
          "200": {
            "description": "200  response",
            "examples": {
              "application/json": "{\n  \"success\": {\n    \"total\": 5\n  },\n  \"contents\": {\n    \"phonenumbers\": [\n      \"1-501-976-4219\",\n      \"(808) 423-7981\",\n      \"(295) 963-6939 x028\",\n      \"324-793-6143 x2948\",\n      \"1-931-351-9690 x026\"\n    ]\n  },\n  \"copyright\": \"https://fungenerators.com/\"\n}"
            }
          },
          "401": {
            "description": "401  response",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": 401,\n        \"message\": \"Unauthorized\"\n    }\n}"
            }
          }
        },
        "security": [
          {
            "X-Fungenerators-Api-Secret": []
          }
        ],
        "tags": [
          "Fake Identity"
        ],
        "operationId": "identity.person.phonenumber.get"
      }
    }
  }
}