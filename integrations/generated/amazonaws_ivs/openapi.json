{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<p> <b>Introduction</b> </p> <p>The Amazon Interactive Video Service (IVS) API is REST compatible, using a standard HTTP API and an <a href=\"http://aws.amazon.com/sns\">AWS SNS</a> event stream for responses. JSON is used for both requests and responses, including errors.</p> <p>The API is an AWS regional service, currently in these regions: us-west-2, us-east-1, and eu-west-1.</p> <p> <i> <b>All API request parameters and URLs are case sensitive. </b> </i> </p> <p>For a summary of notable documentation changes in each release, see <a href=\"https://docs.aws.amazon.com/ivs/latest/userguide/doc-history.html\"> Document History</a>.</p> <p> <b>Service Endpoints</b> </p> <p>The following are the Amazon IVS service endpoints (all HTTPS): </p> <p>Region name: US West (Oregon)</p> <ul> <li> <p>Region: <code>us-west-2</code> </p> </li> <li> <p>Endpoint: <code>ivs.us-west-2.amazonaws.com</code> </p> </li> </ul> <p>Region name: US East (Virginia)</p> <ul> <li> <p>Region: <code>us-east-1</code> </p> </li> <li> <p>Endpoint: <code>ivs.us-east-1.amazonaws.com</code> </p> </li> </ul> <p>Region name: EU West (Dublin)</p> <ul> <li> <p>Region: <code>eu-west-1</code> </p> </li> <li> <p>Endpoint: <code>ivs.eu-west-1.amazonaws.com</code> </p> </li> </ul> <p> <b>Allowed Header Values</b> </p> <ul> <li> <p> <code> <b>Accept:</b> </code> application/json</p> </li> <li> <p> <code> <b>Accept-Encoding:</b> </code> gzip, deflate</p> </li> <li> <p> <code> <b>Content-Type:</b> </code>application/json</p> </li> </ul> <p> <b>Resources</b> </p> <p>The following resources contain information about your IVS live stream (see <a href=\"https://docs.aws.amazon.com/ivs/latest/userguide/GSIVS.html\"> Getting Started with Amazon IVS</a>):</p> <ul> <li> <p>Channel — Stores configuration data related to your live stream. You first create a channel and then use the channel’s stream key to start your live stream. See the Channel endpoints for more information. </p> </li> <li> <p>Stream key — An identifier assigned by Amazon IVS when you create a channel, which is then used to authorize streaming. See the StreamKey endpoints for more information. <i> <b>Treat the stream key like a secret, since it allows anyone to stream to the channel.</b> </i> </p> </li> <li> <p>Playback key pair — Video playback may be restricted using playback-authorization tokens, which use public-key encryption. A playback key pair is the public-private pair of keys used to sign and validate the playback-authorization token. See the PlaybackKeyPair endpoints for more information.</p> </li> </ul> <p> <b>Tagging</b> </p> <p>A <i>tag</i> is a metadata label that you assign to an AWS resource. A tag comprises a <i>key</i> and a <i>value</i>, both set by you. For example, you might set a tag as <code>topic:nature</code> to label a particular video category. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging AWS Resources</a> for more information, including restrictions that apply to tags.</p> <p>Tags can help you identify and organize your AWS resources. For example, you can use the same tag for different resources to indicate that they are related. You can also use tags to manage access (see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\"> Access Tags</a>). </p> <p>The Amazon IVS API has these tag-related endpoints: <a>TagResource</a>, <a>UntagResource</a>, and <a>ListTagsForResource</a>. The following resources support tagging: Channels, Stream Keys, and Playback Key Pairs.</p> <p> <b>Channel Endpoints</b> </p> <ul> <li> <p> <a>CreateChannel</a> — Creates a new channel and an associated stream key to start streaming.</p> </li> <li> <p> <a>GetChannel</a> — Gets the channel configuration for the specified channel ARN (Amazon Resource Name).</p> </li> <li> <p> <a>BatchGetChannel</a> — Performs <a>GetChannel</a> on multiple ARNs simultaneously.</p> </li> <li> <p> <a>ListChannels</a> — Gets summary information about all channels in your account, in the AWS region where the API request is processed. This list can be filtered to match a specified string.</p> </li> <li> <p> <a>UpdateChannel</a> — Updates a channel's configuration. This does not affect an ongoing stream of this channel. You must stop and restart the stream for the changes to take effect.</p> </li> <li> <p> <a>DeleteChannel</a> — Deletes the specified channel.</p> </li> </ul> <p> <b>StreamKey Endpoints</b> </p> <ul> <li> <p> <a>CreateStreamKey</a> — Creates a stream key, used to initiate a stream, for the specified channel ARN.</p> </li> <li> <p> <a>GetStreamKey</a> — Gets stream key information for the specified ARN.</p> </li> <li> <p> <a>BatchGetStreamKey</a> — Performs <a>GetStreamKey</a> on multiple ARNs simultaneously.</p> </li> <li> <p> <a>ListStreamKeys</a> — Gets summary information about stream keys for the specified channel.</p> </li> <li> <p> <a>DeleteStreamKey</a> — Deletes the stream key for the specified ARN, so it can no longer be used to stream.</p> </li> </ul> <p> <b>Stream Endpoints</b> </p> <ul> <li> <p> <a>GetStream</a> — Gets information about the active (live) stream on a specified channel.</p> </li> <li> <p> <a>ListStreams</a> — Gets summary information about live streams in your account, in the AWS region where the API request is processed.</p> </li> <li> <p> <a>StopStream</a> — Disconnects the incoming RTMPS stream for the specified channel. Can be used in conjunction with <a>DeleteStreamKey</a> to prevent further streaming to a channel.</p> </li> <li> <p> <a>PutMetadata</a> — Inserts metadata into an RTMPS stream for the specified channel. A maximum of 5 requests per second per channel is allowed, each with a maximum 1KB payload.</p> </li> </ul> <p> <b>PlaybackKeyPair Endpoints</b> </p> <ul> <li> <p> <a>ImportPlaybackKeyPair</a> — Imports the public portion of a new key pair and returns its <code>arn</code> and <code>fingerprint</code>. The <code>privateKey</code> can then be used to generate viewer authorization tokens, to grant viewers access to authorized channels.</p> </li> <li> <p> <a>GetPlaybackKeyPair</a> — Gets a specified playback authorization key pair and returns the <code>arn</code> and <code>fingerprint</code>. The <code>privateKey</code> held by the caller can be used to generate viewer authorization tokens, to grant viewers access to authorized channels.</p> </li> <li> <p> <a>ListPlaybackKeyPairs</a> — Gets summary information about playback key pairs.</p> </li> <li> <p> <a>DeletePlaybackKeyPair</a> — Deletes a specified authorization key pair. This invalidates future viewer tokens generated using the key pair’s <code>privateKey</code>.</p> </li> </ul> <p> <b>AWS Tags Endpoints</b> </p> <ul> <li> <p> <a>TagResource</a> — Adds or updates tags for the AWS resource with the specified ARN.</p> </li> <li> <p> <a>UntagResource</a> — Removes tags from the resource with the specified ARN.</p> </li> <li> <p> <a>ListTagsForResource</a> — Gets information about AWS tags for the specified ARN.</p> </li> </ul>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Interactive Video Service",
    "version": "2020-07-14",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ivs-2020-07-14.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "ivs",
    "x-datafire": {
      "name": "amazonaws_ivs",
      "type": "openapi"
    }
  },
  "host": "ivs.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/BatchGetChannel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "arns": {
                  "description": "Array of ARNs, one per channel.",
                  "items": {
                    "$ref": "#/definitions/ChannelArn"
                  },
                  "maxItems": 50,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "arns"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetChannelResponse"
            }
          }
        },
        "description": "Performs <a>GetChannel</a> on multiple ARNs simultaneously.",
        "operationId": "BatchGetChannel"
      }
    },
    "/BatchGetStreamKey": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "arns": {
                  "description": "Array of ARNs, one per channel.",
                  "items": {
                    "$ref": "#/definitions/StreamKeyArn"
                  },
                  "maxItems": 50,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "arns"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetStreamKeyResponse"
            }
          }
        },
        "description": "Performs <a>GetStreamKey</a> on multiple ARNs simultaneously.",
        "operationId": "BatchGetStreamKey"
      }
    },
    "/CreateChannel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/TagValue"
                  },
                  "description": "See <a>Channel$tags</a>.",
                  "maxProperties": 50,
                  "minProperties": 0,
                  "type": "object"
                },
                "authorized": {
                  "description": "Whether the channel is authorized. Default: <code>false</code>.",
                  "type": "boolean"
                },
                "latencyMode": {
                  "description": "Channel latency mode. Default: <code>LOW</code>.",
                  "enum": [
                    "NORMAL",
                    "LOW"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Channel name.",
                  "maxLength": 128,
                  "minLength": 0,
                  "pattern": "^[a-zA-Z0-9-_]*$",
                  "type": "string"
                },
                "type": {
                  "description": "<p>Channel type, which determines the allowable resolution and bitrate. <i>If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.</i> Valid values:</p> <ul> <li> <p> <code>STANDARD</code>: Multiple qualities are generated from the original input, to automatically give viewers the best experience for their devices and network conditions. Vertical resolution can be up to 1080 and bitrate can be up to 8.5 Mbps.</p> </li> <li> <p> <code>BASIC</code>: Amazon IVS delivers the original input to viewers. The viewer’s video-quality choice is limited to the original input. Vertical resolution can be up to 480 and bitrate can be up to 1.5 Mbps.</p> </li> </ul> <p>Default: <code>STANDARD</code>.</p>",
                  "enum": [
                    "BASIC",
                    "STANDARD"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateChannelResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ServiceQuotaExceededException",
            "schema": {
              "$ref": "#/definitions/ServiceQuotaExceededException"
            }
          },
          "483": {
            "description": "PendingVerification",
            "schema": {
              "$ref": "#/definitions/PendingVerification"
            }
          }
        },
        "description": "Creates a new channel and an associated stream key to start streaming.",
        "operationId": "CreateChannel"
      }
    },
    "/CreateStreamKey": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/TagValue"
                  },
                  "description": "See <a>Channel$tags</a>.",
                  "maxProperties": 50,
                  "minProperties": 0,
                  "type": "object"
                },
                "channelArn": {
                  "description": "ARN of the channel for which to create the stream key.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$",
                  "type": "string"
                }
              },
              "required": [
                "channelArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateStreamKeyResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ServiceQuotaExceededException",
            "schema": {
              "$ref": "#/definitions/ServiceQuotaExceededException"
            }
          },
          "484": {
            "description": "PendingVerification",
            "schema": {
              "$ref": "#/definitions/PendingVerification"
            }
          }
        },
        "description": "<p>Creates a stream key, used to initiate a stream, for the specified channel ARN.</p> <p>Note that <a>CreateChannel</a> creates a stream key. If you subsequently use CreateStreamKey on the same channel, it will fail because a stream key already exists and there is a limit of 1 stream key per channel. To reset the stream key on a channel, use <a>DeleteStreamKey</a> and then CreateStreamKey.</p>",
        "operationId": "CreateStreamKey"
      }
    },
    "/DeleteChannel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "arn": {
                  "description": "ARN of the channel to be deleted.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$",
                  "type": "string"
                }
              },
              "required": [
                "arn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "484": {
            "description": "PendingVerification",
            "schema": {
              "$ref": "#/definitions/PendingVerification"
            }
          }
        },
        "description": "Deletes the specified channel and its associated stream keys.",
        "operationId": "DeleteChannel"
      }
    },
    "/DeletePlaybackKeyPair": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "arn": {
                  "description": "ARN of the key pair to be deleted.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:playback-key/[a-zA-Z0-9-]+$",
                  "type": "string"
                }
              },
              "required": [
                "arn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePlaybackKeyPairResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "PendingVerification",
            "schema": {
              "$ref": "#/definitions/PendingVerification"
            }
          }
        },
        "description": "Deletes a specified authorization key pair. This invalidates future viewer tokens generated using the key pair’s <code>privateKey</code>.",
        "operationId": "DeletePlaybackKeyPair"
      }
    },
    "/DeleteStreamKey": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "arn": {
                  "description": "ARN of the stream key to be deleted.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:stream-key/[a-zA-Z0-9-]+$",
                  "type": "string"
                }
              },
              "required": [
                "arn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "PendingVerification",
            "schema": {
              "$ref": "#/definitions/PendingVerification"
            }
          }
        },
        "description": "Deletes the stream key for the specified ARN, so it can no longer be used to stream.",
        "operationId": "DeleteStreamKey"
      }
    },
    "/GetChannel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "arn": {
                  "description": "ARN of the channel for which the configuration is to be retrieved.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$",
                  "type": "string"
                }
              },
              "required": [
                "arn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetChannelResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Gets the channel configuration for the specified channel ARN. See also <a>BatchGetChannel</a>.",
        "operationId": "GetChannel"
      }
    },
    "/GetPlaybackKeyPair": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "arn": {
                  "description": "ARN of the key pair to be returned.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:playback-key/[a-zA-Z0-9-]+$",
                  "type": "string"
                }
              },
              "required": [
                "arn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPlaybackKeyPairResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Gets a specified playback authorization key pair and returns the <code>arn</code> and <code>fingerprint</code>. The <code>privateKey</code> held by the caller can be used to generate viewer authorization tokens, to grant viewers access to authorized channels.",
        "operationId": "GetPlaybackKeyPair"
      }
    },
    "/GetStream": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "channelArn": {
                  "description": "Channel ARN for stream to be accessed.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$",
                  "type": "string"
                }
              },
              "required": [
                "channelArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetStreamResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ChannelNotBroadcasting",
            "schema": {
              "$ref": "#/definitions/ChannelNotBroadcasting"
            }
          }
        },
        "description": "Gets information about the active (live) stream on a specified channel.",
        "operationId": "GetStream"
      }
    },
    "/GetStreamKey": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "arn": {
                  "description": "ARN for the stream key to be retrieved.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:stream-key/[a-zA-Z0-9-]+$",
                  "type": "string"
                }
              },
              "required": [
                "arn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetStreamKeyResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Gets stream-key information for a specified ARN.",
        "operationId": "GetStreamKey"
      }
    },
    "/ImportPlaybackKeyPair": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/TagValue"
                  },
                  "description": "Any tags provided with the request are added to the playback key pair tags.",
                  "maxProperties": 50,
                  "minProperties": 0,
                  "type": "object"
                },
                "name": {
                  "description": "An arbitrary string (a nickname) assigned to a playback key pair that helps the customer identify that resource. The value does not need to be unique.",
                  "maxLength": 128,
                  "minLength": 0,
                  "pattern": "^[a-zA-Z0-9-_]*$",
                  "type": "string"
                },
                "publicKeyMaterial": {
                  "description": "The public portion of a customer-generated key pair.",
                  "type": "string"
                }
              },
              "required": [
                "publicKeyMaterial"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImportPlaybackKeyPairResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ServiceQuotaExceededException",
            "schema": {
              "$ref": "#/definitions/ServiceQuotaExceededException"
            }
          },
          "484": {
            "description": "PendingVerification",
            "schema": {
              "$ref": "#/definitions/PendingVerification"
            }
          }
        },
        "description": "Imports the public portion of a new key pair and returns its <code>arn</code> and <code>fingerprint</code>. The <code>privateKey</code> can then be used to generate viewer authorization tokens, to grant viewers access to authorized channels.",
        "operationId": "ImportPlaybackKeyPair"
      }
    },
    "/ListChannels": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "filterByName": {
                  "description": "Filters the channel list to match the specified name.",
                  "maxLength": 128,
                  "minLength": 0,
                  "pattern": "^[a-zA-Z0-9-_]*$",
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of channels to return.",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "integer"
                },
                "nextToken": {
                  "description": "The first channel to retrieve. This is used for pagination; see the <code>nextToken</code> response field.",
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListChannelsResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets summary information about all channels in your account, in the AWS region where the API request is processed. This list can be filtered to match a specified string.",
        "operationId": "ListChannels"
      }
    },
    "/ListPlaybackKeyPairs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "maxResults": {
                  "description": "The first key pair to retrieve. This is used for pagination; see the <code>nextToken</code> response field.",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "integer"
                },
                "nextToken": {
                  "description": "Maximum number of key pairs to return.",
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPlaybackKeyPairsResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets summary information about playback key pairs.",
        "operationId": "ListPlaybackKeyPairs"
      }
    },
    "/ListStreamKeys": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "channelArn": {
                  "description": "Channel ARN used to filter the list.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$",
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of streamKeys to return.",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "integer"
                },
                "nextToken": {
                  "description": "The first stream key to retrieve. This is used for pagination; see the <code>nextToken</code> response field.",
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "required": [
                "channelArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListStreamKeysResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Gets summary information about stream keys for the specified channel.",
        "operationId": "ListStreamKeys"
      }
    },
    "/ListStreams": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "maxResults": {
                  "description": "Maximum number of streams to return.",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "integer"
                },
                "nextToken": {
                  "description": "The first stream to retrieve. This is used for pagination; see the <code>nextToken</code> response field.",
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListStreamsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets summary information about live streams in your account, in the AWS region where the API request is processed.",
        "operationId": "ListStreams"
      }
    },
    "/PutMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "channelArn": {
                  "description": "ARN of the channel into which metadata is inserted. This channel must have an active stream.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$",
                  "type": "string"
                },
                "metadata": {
                  "description": "Metadata to insert into the stream. Maximum: 1 KB per request.",
                  "type": "string"
                }
              },
              "required": [
                "channelArn",
                "metadata"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ChannelNotBroadcasting",
            "schema": {
              "$ref": "#/definitions/ChannelNotBroadcasting"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Inserts metadata into an RTMPS stream for the specified channel. A maximum of 5 requests per second per channel is allowed, each with a maximum 1KB payload.",
        "operationId": "PutMetadata"
      }
    },
    "/StopStream": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "channelArn": {
                  "description": "ARN of the channel for which the stream is to be stopped.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$",
                  "type": "string"
                }
              },
              "required": [
                "channelArn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopStreamResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "ChannelNotBroadcasting",
            "schema": {
              "$ref": "#/definitions/ChannelNotBroadcasting"
            }
          },
          "482": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "StreamUnavailable",
            "schema": {
              "$ref": "#/definitions/StreamUnavailable"
            }
          }
        },
        "description": "<p>Disconnects the incoming RTMPS stream for the specified channel. Can be used in conjunction with <a>DeleteStreamKey</a> to prevent further streaming to a channel.</p> <note> <p>Many streaming client-software libraries automatically reconnect a dropped RTMPS session, so to stop the stream permanently, you may want to first revoke the <code>streamKey</code> attached to the channel.</p> </note>",
        "operationId": "StopStream"
      }
    },
    "/UpdateChannel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "arn": {
                  "description": "ARN of the channel to be updated.",
                  "maxLength": 128,
                  "minLength": 1,
                  "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$",
                  "type": "string"
                },
                "authorized": {
                  "description": "Whether the channel is authorized. Default: <code>false</code>.",
                  "type": "boolean"
                },
                "latencyMode": {
                  "description": "Channel latency mode. Default: <code>LOW</code>.",
                  "enum": [
                    "NORMAL",
                    "LOW"
                  ],
                  "type": "string"
                },
                "name": {
                  "description": "Channel name.",
                  "maxLength": 128,
                  "minLength": 0,
                  "pattern": "^[a-zA-Z0-9-_]*$",
                  "type": "string"
                },
                "type": {
                  "description": "<p>Channel type, which determines the allowable resolution and bitrate. <i>If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.</i> Valid values:</p> <ul> <li> <p> <code>STANDARD</code>: Multiple qualities are generated from the original input, to automatically give viewers the best experience for their devices and network conditions. Vertical resolution can be up to 1080 and bitrate can be up to 8.5 Mbps.</p> </li> <li> <p> <code>BASIC</code>: Amazon IVS delivers the original input to viewers. The viewer’s video-quality choice is limited to the original input. Vertical resolution can be up to 480 and bitrate can be up to 1.5 Mbps.</p> </li> </ul> <p>Default: <code>STANDARD</code>.</p>",
                  "enum": [
                    "BASIC",
                    "STANDARD"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "arn"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateChannelResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "484": {
            "description": "PendingVerification",
            "schema": {
              "$ref": "#/definitions/PendingVerification"
            }
          }
        },
        "description": "Updates a channel's configuration. This does not affect an ongoing stream of this channel. You must stop and restart the stream for the changes to take effect.",
        "operationId": "UpdateChannel"
      }
    },
    "/tags/{resourceArn}": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ARN of the resource to be retrieved.",
            "in": "path",
            "maxLength": 128,
            "minLength": 1,
            "name": "resourceArn",
            "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "maxResults": {
                  "description": "Maximum number of tags to return.",
                  "maximum": 50,
                  "minimum": 1,
                  "type": "integer"
                },
                "nextToken": {
                  "description": "The first tag to retrieve. This is used for pagination; see the <code>nextToken</code> response field.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Gets information about AWS tags for the specified ARN.",
        "operationId": "ListTagsForResource"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ARN of the resource for which tags are to be added or updated.",
            "in": "path",
            "maxLength": 128,
            "minLength": 1,
            "name": "resourceArn",
            "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "tags": {
                  "additionalProperties": {
                    "$ref": "#/definitions/TagValue"
                  },
                  "description": "Array of tags to be added or updated.",
                  "maxProperties": 50,
                  "minProperties": 0,
                  "type": "object"
                }
              },
              "required": [
                "tags"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Adds or updates tags for the AWS resource with the specified ARN.",
        "operationId": "TagResource"
      }
    },
    "/tags/{resourceArn}#tagKeys": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ARN of the resource for which tags are to be removed.",
            "in": "path",
            "maxLength": 128,
            "minLength": 1,
            "name": "resourceArn",
            "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Array of tags to be removed.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/TagKey"
            },
            "maxItems": 50,
            "minItems": 0,
            "name": "tagKeys",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Removes tags from the resource with the specified ARN.",
        "operationId": "UntagResource"
      }
    }
  },
  "definitions": {
    "AccessDeniedException": {},
    "BatchError": {
      "description": "Error related to a specific channel, specified by its ARN.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceArn"
            },
            {
              "description": "Channel ARN."
            }
          ]
        },
        "code": {
          "allOf": [
            {
              "$ref": "#/definitions/errorCode"
            },
            {
              "description": "Error code."
            }
          ]
        },
        "message": {
          "allOf": [
            {
              "$ref": "#/definitions/errorMessage"
            },
            {
              "description": "Error message, determined by the application."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchErrors": {
      "items": {
        "$ref": "#/definitions/BatchError"
      },
      "type": "array"
    },
    "BatchGetChannelRequest": {
      "properties": {
        "arns": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArnList"
            },
            {
              "description": "Array of ARNs, one per channel."
            }
          ]
        }
      },
      "required": [
        "arns"
      ],
      "title": "BatchGetChannelRequest",
      "type": "object"
    },
    "BatchGetChannelResponse": {
      "properties": {
        "channels": {
          "$ref": "#/definitions/Channels"
        },
        "errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchErrors"
            },
            {
              "description": "Each error object is related to a specific ARN in the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetStreamKeyRequest": {
      "properties": {
        "arns": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamKeyArnList"
            },
            {
              "description": "Array of ARNs, one per channel."
            }
          ]
        }
      },
      "required": [
        "arns"
      ],
      "title": "BatchGetStreamKeyRequest",
      "type": "object"
    },
    "BatchGetStreamKeyResponse": {
      "properties": {
        "errors": {
          "$ref": "#/definitions/BatchErrors"
        },
        "streamKeys": {
          "$ref": "#/definitions/StreamKeys"
        }
      },
      "type": "object"
    },
    "Boolean": {
      "type": "boolean"
    },
    "Channel": {
      "description": "Object specifying a channel.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Array of 1-50 maps, each of the form <code>string:string (key:value)</code>."
            }
          ]
        },
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "Channel ARN."
            }
          ]
        },
        "authorized": {
          "allOf": [
            {
              "$ref": "#/definitions/IsAuthorized"
            },
            {
              "description": "Whether the channel is authorized."
            }
          ]
        },
        "ingestEndpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/IngestEndpoint"
            },
            {
              "description": "Channel ingest endpoint, part of the definition of an ingest server, used when you set up streaming software."
            }
          ]
        },
        "latencyMode": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelLatencyMode"
            },
            {
              "description": "Channel latency mode. Default: <code>LOW</code>."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelName"
            },
            {
              "description": "Channel name."
            }
          ]
        },
        "playbackUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackURL"
            },
            {
              "description": "Channel playback URL."
            }
          ]
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelType"
            },
            {
              "description": "<p>Channel type, which determines the allowable resolution and bitrate. <i>If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.</i> Valid values:</p> <ul> <li> <p> <code>STANDARD</code>: Multiple qualities are generated from the original input, to automatically give viewers the best experience for their devices and network conditions. Vertical resolution can be up to 1080 and bitrate can be up to 8.5 Mbps.</p> </li> <li> <p> <code>BASIC</code>: Amazon IVS delivers the original input to viewers. The viewer’s video-quality choice is limited to the original input. Vertical resolution can be up to 480 and bitrate can be up to 1.5 Mbps.</p> </li> </ul> <p>Default: <code>STANDARD</code>.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "ChannelArn": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$",
      "type": "string"
    },
    "ChannelArnList": {
      "items": {
        "$ref": "#/definitions/ChannelArn"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "ChannelLatencyMode": {
      "enum": [
        "NORMAL",
        "LOW"
      ],
      "type": "string"
    },
    "ChannelList": {
      "items": {
        "$ref": "#/definitions/ChannelSummary"
      },
      "type": "array"
    },
    "ChannelName": {
      "maxLength": 128,
      "minLength": 0,
      "pattern": "^[a-zA-Z0-9-_]*$",
      "type": "string"
    },
    "ChannelNotBroadcasting": {},
    "ChannelSummary": {
      "description": "Summary information about a channel.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Array of 1-50 maps, each of the form <code>string:string (key:value)</code>."
            }
          ]
        },
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "Channel ARN."
            }
          ]
        },
        "authorized": {
          "allOf": [
            {
              "$ref": "#/definitions/IsAuthorized"
            },
            {
              "description": "Whether the channel is authorized."
            }
          ]
        },
        "latencyMode": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelLatencyMode"
            },
            {
              "description": "Channel latency mode. Default: <code>LOW</code>."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelName"
            },
            {
              "description": "Channel name."
            }
          ]
        }
      },
      "type": "object"
    },
    "ChannelType": {
      "enum": [
        "BASIC",
        "STANDARD"
      ],
      "type": "string"
    },
    "Channels": {
      "items": {
        "$ref": "#/definitions/Channel"
      },
      "type": "array"
    },
    "ConflictException": {},
    "CreateChannelRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "See <a>Channel$tags</a>."
            }
          ]
        },
        "authorized": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Whether the channel is authorized. Default: <code>false</code>."
            }
          ]
        },
        "latencyMode": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelLatencyMode"
            },
            {
              "description": "Channel latency mode. Default: <code>LOW</code>."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelName"
            },
            {
              "description": "Channel name."
            }
          ]
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelType"
            },
            {
              "description": "<p>Channel type, which determines the allowable resolution and bitrate. <i>If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.</i> Valid values:</p> <ul> <li> <p> <code>STANDARD</code>: Multiple qualities are generated from the original input, to automatically give viewers the best experience for their devices and network conditions. Vertical resolution can be up to 1080 and bitrate can be up to 8.5 Mbps.</p> </li> <li> <p> <code>BASIC</code>: Amazon IVS delivers the original input to viewers. The viewer’s video-quality choice is limited to the original input. Vertical resolution can be up to 480 and bitrate can be up to 1.5 Mbps.</p> </li> </ul> <p>Default: <code>STANDARD</code>.</p>"
            }
          ]
        }
      },
      "title": "CreateChannelRequest",
      "type": "object"
    },
    "CreateChannelResponse": {
      "properties": {
        "channel": {
          "$ref": "#/definitions/Channel"
        },
        "streamKey": {
          "$ref": "#/definitions/StreamKey"
        }
      },
      "type": "object"
    },
    "CreateStreamKeyRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "See <a>Channel$tags</a>."
            }
          ]
        },
        "channelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "ARN of the channel for which to create the stream key."
            }
          ]
        }
      },
      "required": [
        "channelArn"
      ],
      "title": "CreateStreamKeyRequest",
      "type": "object"
    },
    "CreateStreamKeyResponse": {
      "properties": {
        "streamKey": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamKey"
            },
            {
              "description": "Stream key used to authenticate an RTMPS stream for ingestion."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteChannelRequest": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "ARN of the channel to be deleted."
            }
          ]
        }
      },
      "required": [
        "arn"
      ],
      "title": "DeleteChannelRequest",
      "type": "object"
    },
    "DeletePlaybackKeyPairRequest": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackKeyPairArn"
            },
            {
              "description": "ARN of the key pair to be deleted."
            }
          ]
        }
      },
      "required": [
        "arn"
      ],
      "title": "DeletePlaybackKeyPairRequest",
      "type": "object"
    },
    "DeletePlaybackKeyPairResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteStreamKeyRequest": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamKeyArn"
            },
            {
              "description": "ARN of the stream key to be deleted."
            }
          ]
        }
      },
      "required": [
        "arn"
      ],
      "title": "DeleteStreamKeyRequest",
      "type": "object"
    },
    "GetChannelRequest": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "ARN of the channel for which the configuration is to be retrieved."
            }
          ]
        }
      },
      "required": [
        "arn"
      ],
      "title": "GetChannelRequest",
      "type": "object"
    },
    "GetChannelResponse": {
      "properties": {
        "channel": {
          "$ref": "#/definitions/Channel"
        }
      },
      "type": "object"
    },
    "GetPlaybackKeyPairRequest": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackKeyPairArn"
            },
            {
              "description": "ARN of the key pair to be returned."
            }
          ]
        }
      },
      "required": [
        "arn"
      ],
      "title": "GetPlaybackKeyPairRequest",
      "type": "object"
    },
    "GetPlaybackKeyPairResponse": {
      "properties": {
        "keyPair": {
          "$ref": "#/definitions/PlaybackKeyPair"
        }
      },
      "type": "object"
    },
    "GetStreamKeyRequest": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamKeyArn"
            },
            {
              "description": "ARN for the stream key to be retrieved."
            }
          ]
        }
      },
      "required": [
        "arn"
      ],
      "title": "GetStreamKeyRequest",
      "type": "object"
    },
    "GetStreamKeyResponse": {
      "properties": {
        "streamKey": {
          "$ref": "#/definitions/StreamKey"
        }
      },
      "type": "object"
    },
    "GetStreamRequest": {
      "properties": {
        "channelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "Channel ARN for stream to be accessed."
            }
          ]
        }
      },
      "required": [
        "channelArn"
      ],
      "title": "GetStreamRequest",
      "type": "object"
    },
    "GetStreamResponse": {
      "properties": {
        "stream": {
          "$ref": "#/definitions/Stream"
        }
      },
      "type": "object"
    },
    "ImportPlaybackKeyPairRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Any tags provided with the request are added to the playback key pair tags."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackKeyPairName"
            },
            {
              "description": "An arbitrary string (a nickname) assigned to a playback key pair that helps the customer identify that resource. The value does not need to be unique."
            }
          ]
        },
        "publicKeyMaterial": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackPublicKeyMaterial"
            },
            {
              "description": "The public portion of a customer-generated key pair."
            }
          ]
        }
      },
      "required": [
        "publicKeyMaterial"
      ],
      "title": "ImportPlaybackKeyPairRequest",
      "type": "object"
    },
    "ImportPlaybackKeyPairResponse": {
      "properties": {
        "keyPair": {
          "$ref": "#/definitions/PlaybackKeyPair"
        }
      },
      "type": "object"
    },
    "IngestEndpoint": {
      "type": "string"
    },
    "InternalServerException": {},
    "IsAuthorized": {
      "type": "boolean"
    },
    "ListChannelsRequest": {
      "properties": {
        "filterByName": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelName"
            },
            {
              "description": "Filters the channel list to match the specified name."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxChannelResults"
            },
            {
              "description": "Maximum number of channels to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "The first channel to retrieve. This is used for pagination; see the <code>nextToken</code> response field."
            }
          ]
        }
      },
      "title": "ListChannelsRequest",
      "type": "object"
    },
    "ListChannelsResponse": {
      "properties": {
        "channels": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelList"
            },
            {
              "description": "List of the matching channels."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "If there are more channels than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set."
            }
          ]
        }
      },
      "required": [
        "channels"
      ],
      "type": "object"
    },
    "ListPlaybackKeyPairsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxPlaybackKeyPairResults"
            },
            {
              "description": "The first key pair to retrieve. This is used for pagination; see the <code>nextToken</code> response field."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "Maximum number of key pairs to return."
            }
          ]
        }
      },
      "title": "ListPlaybackKeyPairsRequest",
      "type": "object"
    },
    "ListPlaybackKeyPairsResponse": {
      "properties": {
        "keyPairs": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackKeyPairList"
            },
            {
              "description": "List of key pairs."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "If there are more key pairs than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set."
            }
          ]
        }
      },
      "required": [
        "keyPairs"
      ],
      "type": "object"
    },
    "ListStreamKeysRequest": {
      "properties": {
        "channelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "Channel ARN used to filter the list."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxStreamKeyResults"
            },
            {
              "description": "Maximum number of streamKeys to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "The first stream key to retrieve. This is used for pagination; see the <code>nextToken</code> response field."
            }
          ]
        }
      },
      "required": [
        "channelArn"
      ],
      "title": "ListStreamKeysRequest",
      "type": "object"
    },
    "ListStreamKeysResponse": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "If there are more stream keys than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set."
            }
          ]
        },
        "streamKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamKeyList"
            },
            {
              "description": "List of stream keys."
            }
          ]
        }
      },
      "required": [
        "streamKeys"
      ],
      "type": "object"
    },
    "ListStreamsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxStreamResults"
            },
            {
              "description": "Maximum number of streams to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "The first stream to retrieve. This is used for pagination; see the <code>nextToken</code> response field."
            }
          ]
        }
      },
      "title": "ListStreamsRequest",
      "type": "object"
    },
    "ListStreamsResponse": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "If there are more streams than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set."
            }
          ]
        },
        "streams": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamList"
            },
            {
              "description": "List of streams."
            }
          ]
        }
      },
      "required": [
        "streams"
      ],
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxTagResults"
            },
            {
              "description": "Maximum number of tags to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The first tag to retrieve. This is used for pagination; see the <code>nextToken</code> response field."
            }
          ]
        }
      },
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "If there are more tags than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set."
            }
          ]
        }
      },
      "required": [
        "tags"
      ],
      "type": "object"
    },
    "MaxChannelResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxPlaybackKeyPairResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxStreamKeyResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxStreamResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "MaxTagResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "PaginationToken": {
      "maxLength": 500,
      "minLength": 0,
      "type": "string"
    },
    "PendingVerification": {},
    "PlaybackKeyPair": {
      "description": "A key pair used to sign and validate a playback authorization token.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Array of 1-50 maps, each of the form <code>string:string (key:value)</code>."
            }
          ]
        },
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackKeyPairArn"
            },
            {
              "description": "Key-pair ARN."
            }
          ]
        },
        "fingerprint": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackKeyPairFingerprint"
            },
            {
              "description": "Key-pair identifier."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackKeyPairName"
            },
            {
              "description": "Key-pair name."
            }
          ]
        }
      },
      "type": "object"
    },
    "PlaybackKeyPairArn": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:playback-key/[a-zA-Z0-9-]+$",
      "type": "string"
    },
    "PlaybackKeyPairFingerprint": {
      "type": "string"
    },
    "PlaybackKeyPairList": {
      "items": {
        "$ref": "#/definitions/PlaybackKeyPairSummary"
      },
      "type": "array"
    },
    "PlaybackKeyPairName": {
      "maxLength": 128,
      "minLength": 0,
      "pattern": "^[a-zA-Z0-9-_]*$",
      "type": "string"
    },
    "PlaybackKeyPairSummary": {
      "description": "Summary information about a playback key pair.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Array of 1-50 maps, each of the form <code>string:string (key:value)</code> "
            }
          ]
        },
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackKeyPairArn"
            },
            {
              "description": "Key-pair ARN."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackKeyPairName"
            },
            {
              "description": "Key-pair name."
            }
          ]
        }
      },
      "type": "object"
    },
    "PlaybackPublicKeyMaterial": {
      "type": "string"
    },
    "PlaybackURL": {
      "type": "string"
    },
    "PutMetadataRequest": {
      "properties": {
        "channelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "ARN of the channel into which metadata is inserted. This channel must have an active stream."
            }
          ]
        },
        "metadata": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamMetadata"
            },
            {
              "description": "Metadata to insert into the stream. Maximum: 1 KB per request."
            }
          ]
        }
      },
      "required": [
        "channelArn",
        "metadata"
      ],
      "title": "PutMetadataRequest",
      "type": "object"
    },
    "ResourceArn": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$",
      "type": "string"
    },
    "ResourceNotFoundException": {},
    "ServiceQuotaExceededException": {},
    "StopStreamRequest": {
      "properties": {
        "channelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "ARN of the channel for which the stream is to be stopped."
            }
          ]
        }
      },
      "required": [
        "channelArn"
      ],
      "title": "StopStreamRequest",
      "type": "object"
    },
    "StopStreamResponse": {
      "properties": {},
      "type": "object"
    },
    "Stream": {
      "description": "Specifies a live video stream that has been ingested and distributed.",
      "properties": {
        "channelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "Channel ARN for the stream."
            }
          ]
        },
        "health": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamHealth"
            },
            {
              "description": "The stream’s health."
            }
          ]
        },
        "playbackUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/PlaybackURL"
            },
            {
              "description": "URL of the video master manifest, required by the video player to play the HLS stream."
            }
          ]
        },
        "startTime": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamStartTime"
            },
            {
              "description": "ISO-8601 formatted timestamp of the stream’s start."
            }
          ]
        },
        "state": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamState"
            },
            {
              "description": "The stream’s state."
            }
          ]
        },
        "viewerCount": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamViewerCount"
            },
            {
              "description": "Number of current viewers of the stream."
            }
          ]
        }
      },
      "type": "object"
    },
    "StreamHealth": {
      "enum": [
        "HEALTHY",
        "STARVING",
        "UNKNOWN"
      ],
      "type": "string"
    },
    "StreamKey": {
      "description": "Object specifying a stream key.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Array of 1-50 maps, each of the form <code>string:string (key:value)</code>."
            }
          ]
        },
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamKeyArn"
            },
            {
              "description": "Stream-key ARN."
            }
          ]
        },
        "channelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "Channel ARN for the stream."
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamKeyValue"
            },
            {
              "description": "Stream-key value."
            }
          ]
        }
      },
      "type": "object"
    },
    "StreamKeyArn": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:stream-key/[a-zA-Z0-9-]+$",
      "type": "string"
    },
    "StreamKeyArnList": {
      "items": {
        "$ref": "#/definitions/StreamKeyArn"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "StreamKeyList": {
      "items": {
        "$ref": "#/definitions/StreamKeySummary"
      },
      "type": "array"
    },
    "StreamKeySummary": {
      "description": "Summary information about a stream key.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Array of 1-50 maps, each of the form <code>string:string (key:value)</code>."
            }
          ]
        },
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamKeyArn"
            },
            {
              "description": "Stream-key ARN."
            }
          ]
        },
        "channelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "Channel ARN for the stream."
            }
          ]
        }
      },
      "type": "object"
    },
    "StreamKeyValue": {
      "type": "string"
    },
    "StreamKeys": {
      "items": {
        "$ref": "#/definitions/StreamKey"
      },
      "type": "array"
    },
    "StreamList": {
      "items": {
        "$ref": "#/definitions/StreamSummary"
      },
      "type": "array"
    },
    "StreamMetadata": {
      "type": "string"
    },
    "StreamStartTime": {
      "format": "date-time",
      "type": "string"
    },
    "StreamState": {
      "enum": [
        "LIVE",
        "OFFLINE"
      ],
      "type": "string"
    },
    "StreamSummary": {
      "description": "Summary information about a stream.",
      "properties": {
        "channelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "Channel ARN for the stream."
            }
          ]
        },
        "health": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamHealth"
            },
            {
              "description": "The stream’s health."
            }
          ]
        },
        "startTime": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamStartTime"
            },
            {
              "description": "ISO-8601 formatted timestamp of the stream’s start."
            }
          ]
        },
        "state": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamState"
            },
            {
              "description": "The stream’s state."
            }
          ]
        },
        "viewerCount": {
          "allOf": [
            {
              "$ref": "#/definitions/StreamViewerCount"
            },
            {
              "description": "Number of current viewers of the stream."
            }
          ]
        }
      },
      "type": "object"
    },
    "StreamUnavailable": {},
    "StreamViewerCount": {
      "type": "integer"
    },
    "String": {
      "type": "string"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "Array of tags to be added or updated."
            }
          ]
        }
      },
      "required": [
        "tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "type": "string"
    },
    "Tags": {
      "additionalProperties": {
        "$ref": "#/definitions/TagValue"
      },
      "maxProperties": 50,
      "minProperties": 0,
      "type": "object"
    },
    "ThrottlingException": {},
    "UntagResourceRequest": {
      "properties": {},
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateChannelRequest": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelArn"
            },
            {
              "description": "ARN of the channel to be updated."
            }
          ]
        },
        "authorized": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Whether the channel is authorized. Default: <code>false</code>."
            }
          ]
        },
        "latencyMode": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelLatencyMode"
            },
            {
              "description": "Channel latency mode. Default: <code>LOW</code>."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelName"
            },
            {
              "description": "Channel name."
            }
          ]
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/ChannelType"
            },
            {
              "description": "<p>Channel type, which determines the allowable resolution and bitrate. <i>If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.</i> Valid values:</p> <ul> <li> <p> <code>STANDARD</code>: Multiple qualities are generated from the original input, to automatically give viewers the best experience for their devices and network conditions. Vertical resolution can be up to 1080 and bitrate can be up to 8.5 Mbps.</p> </li> <li> <p> <code>BASIC</code>: Amazon IVS delivers the original input to viewers. The viewer’s video-quality choice is limited to the original input. Vertical resolution can be up to 480 and bitrate can be up to 1.5 Mbps.</p> </li> </ul> <p>Default: <code>STANDARD</code>.</p>"
            }
          ]
        }
      },
      "required": [
        "arn"
      ],
      "title": "UpdateChannelRequest",
      "type": "object"
    },
    "UpdateChannelResponse": {
      "properties": {
        "channel": {
          "$ref": "#/definitions/Channel"
        }
      },
      "type": "object"
    },
    "ValidationException": {},
    "errorCode": {
      "type": "string"
    },
    "errorMessage": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/ivs/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}