{
  "swagger": "2.0",
  "info": {
    "description": "The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>",
    "termsOfService": "https://www.labs64.com/legal/terms-of-service/netlicensing",
    "title": "Labs64 NetLicensing RESTful API Test Center",
    "version": "2.x",
    "x-apisguru-categories": [
      "developer_tools"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_www.labs64.com_content_uploads_2015_06_labs64-logo.png"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "http://io.labs64.com/NetLicensing-API/v2.x/netlicensing.json",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "netlicensing.io",
    "x-datafire": {
      "name": "netlicensing",
      "type": "openapi"
    }
  },
  "host": "go.netlicensing.io",
  "basePath": "/core/v2/rest",
  "schemes": [
    "https"
  ],
  "paths": {
    "/license": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "items": {
                "$ref": "#/definitions/netlicensing"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License"
        ],
        "description": "Return a list of all Licenses for the current Vendor",
        "operationId": "listLicenses",
        "summary": "List Licenses"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "active",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation",
            "in": "formData",
            "name": "currency",
            "type": "string"
          },
          {
            "description": "If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly",
            "in": "formData",
            "name": "hidden",
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "licenseTemplateNumber",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "licenseeNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name for the Licensed item. Set from License Template on creation, if not specified explicitly.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "description": "Mandatory for 'TIMEVOLUME' License Type and 'RENTAL' licensing model",
            "in": "formData",
            "name": "parentfeature",
            "type": "string"
          },
          {
            "description": "Price for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation",
            "format": "double",
            "in": "formData",
            "name": "price",
            "type": "number"
          },
          {
            "description": "Mandatory for 'Pay-per-Use' License Model.",
            "in": "formData",
            "name": "quantity",
            "type": "string"
          },
          {
            "description": "Mandatory for 'TIMEVOLUME' License Type.",
            "format": "date-time",
            "in": "formData",
            "name": "startDate",
            "type": "string"
          },
          {
            "description": "Mandatory for 'TIMEVOLUME' License Type.",
            "in": "formData",
            "name": "timeVolume",
            "type": "string"
          },
          {
            "description": "For 'TIMEVOLUME' License Type.",
            "in": "formData",
            "name": "timeVolumePeriod",
            "type": "string"
          },
          {
            "description": "Mandatory for 'Pay-per-Use' License Model.",
            "in": "formData",
            "name": "usedQuantity",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License"
        ],
        "description": "Creates a new License",
        "operationId": "createLicense",
        "summary": "Create License"
      }
    },
    "/license/{licenseNumber}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.",
            "in": "path",
            "name": "licenseNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License"
        ],
        "description": "Delete License by a 'licenseNumber'",
        "operationId": "deleteLicense",
        "summary": "Delete License"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.",
            "in": "path",
            "name": "licenseNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License"
        ],
        "description": "Get License by a 'licenseNumber'",
        "operationId": "getLicense",
        "summary": "Get License"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.",
            "in": "path",
            "name": "licenseNumber",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "active",
            "type": "boolean"
          },
          {
            "description": "Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation",
            "in": "formData",
            "name": "currency",
            "type": "string"
          },
          {
            "description": "If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly",
            "in": "formData",
            "name": "hidden",
            "type": "boolean"
          },
          {
            "description": "Name for the Licensed item. Set from License Template on creation, if not specified explicitly.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "parentfeature",
            "type": "string"
          },
          {
            "description": "Price for the License. If > 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation",
            "format": "double",
            "in": "formData",
            "name": "price",
            "type": "number"
          },
          {
            "description": "Mandatory for 'Pay-per-Use' License Model.",
            "in": "formData",
            "name": "quantity",
            "type": "string"
          },
          {
            "description": "For 'TIMEVOLUME' License type",
            "format": "date-time",
            "in": "formData",
            "name": "startDate",
            "type": "string"
          },
          {
            "description": "Mandatory for 'TIMEVOLUME' License Type.",
            "in": "formData",
            "name": "timeVolume",
            "type": "string"
          },
          {
            "description": "For 'TIMEVOLUME' License Type.",
            "in": "formData",
            "name": "timeVolumePeriod",
            "type": "string"
          },
          {
            "description": "Mandatory for 'Pay-per-Use' License Model.",
            "in": "formData",
            "name": "usedQuantity",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License"
        ],
        "description": "Update License by a 'licenseNumber'",
        "operationId": "updateLicense",
        "summary": "Update License"
      }
    },
    "/licensee": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "items": {
                "$ref": "#/definitions/netlicensing"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Licensee"
        ],
        "description": "Return a list of all Licensees for the current Vendor",
        "operationId": "listLicensees",
        "summary": "List Licensees"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "If set to 'false', the Licensee is disabled. Licensee can not obtain new Licenses, and validation is disabled",
            "in": "formData",
            "name": "active",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Mark Licensee for transfer.",
            "in": "formData",
            "name": "markedForTransfer",
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Licensee. Vendor can assign this number when creating a Licensee or let NetLicensing generate one. Read-only after creation of the first License for the Licensee",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "description": "'productNumber' to assign new Licensee object",
            "in": "formData",
            "name": "productNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "402": {
            "description": "Quota exceeded"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Licensee"
        ],
        "description": "Creates a new Licensee",
        "operationId": "createLicensee",
        "summary": "Create Licensee"
      }
    },
    "/licensee/{licenseeNumber}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Licensee.",
            "in": "path",
            "name": "licenseeNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Force object deletion and all descendants.",
            "in": "query",
            "name": "forceCascade",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Licensee"
        ],
        "description": "Delete a Licensee by 'number'",
        "operationId": "deleteLicensee",
        "summary": "Delete Licensee"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Licensee. Vendor can assign this number when creating a Licensee or let NetLicensing generate one. Read-only after creation of the first License for the Licensee.",
            "in": "path",
            "name": "licenseeNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Licensee"
        ],
        "description": "Return a Licensee by 'licenseeNumber'",
        "operationId": "getLicensee",
        "summary": "Get Licensee"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Licensee. Vendor can assign this number when creating a Licensee or let NetLicensing generate one. Read-only after creation of the first License for the Licensee.",
            "in": "path",
            "name": "licenseeNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "If set to 'false', the Licensee is disabled. Licensee can not obtain new Licenses, and validation is disabled",
            "in": "formData",
            "name": "active",
            "type": "boolean"
          },
          {
            "description": "Mark Licensee for transfer.",
            "in": "formData",
            "name": "markedForTransfer",
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "New Licensee number (update).",
            "in": "formData",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "402": {
            "description": "Quota exceeded"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Licensee"
        ],
        "description": "Sets the provided properties to a Licensee. Return an updated Licensee",
        "operationId": "updateLicensee",
        "summary": "Update Licensee"
      }
    },
    "/licensee/{licenseeNumber}/transfer": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Licensee number with a maximum length of 1000 characters",
            "in": "path",
            "name": "licenseeNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Licensee number which Licenses to be transferred",
            "in": "formData",
            "name": "sourceLicenseeNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Licensee"
        ],
        "description": "Licenses transfer between Licensees",
        "operationId": "transferLicenses",
        "summary": "Transfer Licenses"
      }
    },
    "/licensee/{licenseeNumber}/validate": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Licensee number with a maximum length of 1000 characters",
            "in": "path",
            "name": "licenseeNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "'Floating' licensing model: check-out or check-in session action, to allocate or return it from/to the pool of available sessions",
            "enum": [
              "checkOut",
              "checkIn"
            ],
            "in": "formData",
            "name": "action",
            "type": "string"
          },
          {
            "description": "Human-readable name for the auto-created Licensee (will be set as custom Licensee property)",
            "in": "formData",
            "name": "licenseeName",
            "type": "string"
          },
          {
            "description": "'Node-Locked' licensing model: specifies unique secret",
            "in": "formData",
            "name": "nodeSecret",
            "type": "string"
          },
          {
            "description": "'Node-Locked' licensing model: product module number",
            "in": "formData",
            "name": "productModuleNumber",
            "type": "string"
          },
          {
            "description": "Product number, must be provided when 'Licensee auto-create' is enabled (see also Product JavaDoc). Identifies the Product to which new Licensee should be added",
            "in": "formData",
            "name": "productNumber",
            "type": "string"
          },
          {
            "description": "'Floating' licensing model: specifies unique session identifier",
            "in": "formData",
            "name": "sessionId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Licensee"
        ],
        "description": "Validates active Licenses of the Licensee",
        "operationId": "validateLicensee",
        "summary": "Validate Licensee"
      }
    },
    "/licensetemplate": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "items": {
                "$ref": "#/definitions/netlicensing"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License Template"
        ],
        "description": "Return a list of all License Templates for the current Vendor",
        "operationId": "listLicenseTemplates",
        "summary": "List License Templates"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.",
            "in": "formData",
            "name": "active",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.",
            "in": "formData",
            "name": "automatic",
            "type": "boolean"
          },
          {
            "description": "Specifies currency for the License price. Check data types to discover which currencies are supported.",
            "in": "formData",
            "name": "currency",
            "type": "string"
          },
          {
            "description": "If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.",
            "in": "formData",
            "name": "hidden",
            "type": "boolean"
          },
          {
            "description": "If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.",
            "in": "formData",
            "name": "hideLicenses",
            "type": "boolean"
          },
          {
            "description": "Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY",
            "in": "formData",
            "name": "licenseType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Mandatory for 'FLOATING' License Type.",
            "in": "formData",
            "name": "maxSessions",
            "type": "string"
          },
          {
            "description": "License Template name to create License Template object",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "description": "Price for the License. If >0, it must always be accompanied by the currency specification.",
            "format": "double",
            "in": "formData",
            "name": "price",
            "type": "number"
          },
          {
            "description": "Number of Product Module to create License Template object",
            "in": "formData",
            "name": "productModuleNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.",
            "in": "formData",
            "name": "quantity",
            "type": "string"
          },
          {
            "description": "Mandatory for 'Quota' License Model.",
            "in": "formData",
            "name": "quota",
            "type": "string"
          },
          {
            "description": "Mandatory for 'TIMEVOLUME' License Type.",
            "in": "formData",
            "name": "timeVolume",
            "type": "string"
          },
          {
            "description": "For 'TIMEVOLUME' License Type.",
            "in": "formData",
            "name": "timeVolumePeriod",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License Template"
        ],
        "description": "Creates a new License Template",
        "operationId": "createLicenseTemplate",
        "summary": "Create License Template"
      }
    },
    "/licensetemplate/{licenseTemplateNumber}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the License Template.",
            "in": "path",
            "name": "licenseTemplateNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Force object deletion and all descendants.",
            "in": "query",
            "name": "forceCascade",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License Template"
        ],
        "description": "Delete a License Template by 'number'.",
        "operationId": "deleteLicenseTemplate",
        "summary": "Delete License Template"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.",
            "in": "path",
            "name": "licenseTemplateNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License Template"
        ],
        "description": "Return a License Template by 'licenseTemplateNumber'",
        "operationId": "getLicenseTemplate",
        "summary": "Get License Template"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.",
            "in": "path",
            "name": "licenseTemplateNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.",
            "in": "formData",
            "name": "active",
            "type": "boolean"
          },
          {
            "description": "If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.",
            "in": "formData",
            "name": "automatic",
            "type": "boolean"
          },
          {
            "description": "Specifies currency for the License price. Check data types to discover which currencies are supported.",
            "in": "formData",
            "name": "currency",
            "type": "string"
          },
          {
            "description": "If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.",
            "in": "formData",
            "name": "hidden",
            "type": "boolean"
          },
          {
            "description": "If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.",
            "in": "formData",
            "name": "hideLicenses",
            "type": "boolean"
          },
          {
            "description": "Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY",
            "in": "formData",
            "name": "licenseType",
            "type": "string"
          },
          {
            "description": "Mandatory for 'FLOATING' License Type.",
            "in": "formData",
            "name": "maxSessions",
            "type": "string"
          },
          {
            "description": "Name for the Licensed item",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "New License Template number (update).",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "description": "Price for the License. If >0, it must always be accompanied by the currency specification.",
            "format": "double",
            "in": "formData",
            "name": "price",
            "type": "number"
          },
          {
            "description": "Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.",
            "in": "formData",
            "name": "quantity",
            "type": "string"
          },
          {
            "description": "Mandatory for 'Quota' License Model.",
            "in": "formData",
            "name": "quota",
            "type": "string"
          },
          {
            "description": "Mandatory for 'TIMEVOLUME' License Type.",
            "in": "formData",
            "name": "timeVolume",
            "type": "string"
          },
          {
            "description": "For 'TIMEVOLUME' License Type.",
            "in": "formData",
            "name": "timeVolumePeriod",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "License Template"
        ],
        "description": "Sets the provided properties to a License Template. Return an updated License Template",
        "operationId": "updateLicenseTemplate",
        "summary": "Update License Template"
      }
    },
    "/paymentmethod": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "items": {
                "$ref": "#/definitions/netlicensing"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Payment Method"
        ],
        "description": "Return a list of all Payment Methods for the current Vendor",
        "operationId": "listPaymentMethods",
        "summary": "List Payment Methods"
      }
    },
    "/paymentmethod/{paymentMethodNumber}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Payment method number",
            "in": "path",
            "name": "paymentMethodNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Payment Method"
        ],
        "description": "Return a Payment Method info by 'paymentMethodNumber'",
        "operationId": "getPaymentMethod",
        "summary": "Get Payment Method"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Payment method number",
            "in": "path",
            "name": "paymentMethodNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "If set to 'false', the Payment Method is disabled.",
            "in": "formData",
            "name": "active",
            "type": "boolean"
          },
          {
            "description": "The e-mail address of the PayPal account for which you are making the API calls.",
            "in": "formData",
            "name": "paypal.subject",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Payment Method"
        ],
        "description": "Sets the provided properties to a Payment Method. Return an updated Payment Method",
        "operationId": "updatePaymentMethod",
        "summary": "Update Payment Method"
      }
    },
    "/product": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "items": {
                "$ref": "#/definitions/netlicensing"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product"
        ],
        "description": "Return a list of all configured Products for the current Vendor",
        "operationId": "listProducts",
        "summary": "List Products"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "If set to 'false', the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses.",
            "in": "formData",
            "name": "active",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Product description.",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "If set to 'true', non-existing Licensees will be created at first validation attempt.",
            "in": "formData",
            "name": "licenseeAutoCreate",
            "type": "boolean"
          },
          {
            "description": "Licensing information.",
            "in": "formData",
            "name": "licensingInfo",
            "type": "string"
          },
          {
            "description": "Product name. Together with the version identifies the Product for the end customer.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one.",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "description": "Vat mode for Product. Supported types: GROSS, NET",
            "enum": [
              "GROSS",
              "NET"
            ],
            "in": "formData",
            "name": "vatMode",
            "type": "string"
          },
          {
            "description": "Product version. Convenience parameter, additional to the Product name.",
            "in": "formData",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "402": {
            "description": "Quota exceeded"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product"
        ],
        "description": "Creates a new Product",
        "operationId": "createProduct",
        "summary": "Create Product"
      }
    },
    "/product/{productNumber}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number that identifies the Product.",
            "in": "path",
            "name": "productNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Force object deletion and all descendants.",
            "in": "query",
            "name": "forceCascade",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product"
        ],
        "description": "Delete a Product by 'number'",
        "operationId": "deleteProduct",
        "summary": "Delete Product"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number that identifies the Product.",
            "in": "path",
            "name": "productNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product"
        ],
        "description": "Return a Product by 'productNumber'",
        "operationId": "productNumber",
        "summary": "Get Product"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number that identifies the Product.",
            "in": "path",
            "name": "productNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "If set to 'false', the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses.",
            "in": "formData",
            "name": "active",
            "type": "boolean"
          },
          {
            "description": "Product description.",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "If set to 'true', non-existing Licensees will be created at first validation attempt.",
            "in": "formData",
            "name": "licenseeAutoCreate",
            "type": "boolean"
          },
          {
            "description": "Licensing information.",
            "in": "formData",
            "name": "licensingInfo",
            "type": "string"
          },
          {
            "description": "Product name. Together with the version identifies the Product for the end customer.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "New Product number (update)",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "description": "Vat mode for Product. Supported types: GROSS, NET",
            "enum": [
              "GROSS",
              "NET"
            ],
            "in": "formData",
            "name": "vatMode",
            "type": "string"
          },
          {
            "description": "Product version. Convenience parameter, additional to the Product name.",
            "in": "formData",
            "name": "version",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "402": {
            "description": "Quota exceeded"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product"
        ],
        "description": "Sets the provided properties to a Product. Return an updated Product",
        "operationId": "updateProduct",
        "summary": "Update Product"
      }
    },
    "/productmodule": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "items": {
                "$ref": "#/definitions/netlicensing"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product Module"
        ],
        "description": "Return a list of all Product Modules for the current Vendor",
        "operationId": "listProductModules",
        "summary": "List Product Modules"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.",
            "in": "formData",
            "name": "active",
            "required": true,
            "type": "boolean"
          },
          {
            "collectionFormat": "csv",
            "description": "License Template. Mandatory for 'Try &amp; Buy' licensing model.",
            "in": "formData",
            "items": {
              "default": "TIMEVOLUME",
              "enum": [
                "TIMEVOLUME",
                "FEATURE"
              ],
              "type": "string"
            },
            "name": "licenseTemplate",
            "type": "array"
          },
          {
            "description": "Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.",
            "in": "formData",
            "name": "licensingModel",
            "required": true,
            "type": "string"
          },
          {
            "description": "Maximum checkout validity (days). Mandatory for 'Floating' licensing model.",
            "format": "int32",
            "in": "formData",
            "name": "maxCheckoutValidity",
            "type": "integer"
          },
          {
            "description": "Product Module name that is visible to the end customers in NetLicensing Shop.",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "Secret Mode. Mandatory for 'Node-Locked' licensing model.",
            "in": "formData",
            "items": {
              "default": "PREDEFINED",
              "enum": [
                "PREDEFINED",
                "CLIENT"
              ],
              "type": "string"
            },
            "name": "nodeSecretMode",
            "type": "array"
          },
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.",
            "in": "formData",
            "name": "productNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Remaining time volume for red level. Mandatory for 'Rental' licensing model.",
            "format": "int32",
            "in": "formData",
            "name": "redThreshold",
            "type": "integer"
          },
          {
            "description": "Remaining time volume for yellow level. Mandatory for 'Rental' licensing model.",
            "format": "int32",
            "in": "formData",
            "name": "yellowThreshold",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "402": {
            "description": "Quota exceeded"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product Module"
        ],
        "description": "Creates a new Product Module",
        "operationId": "createProductModule",
        "summary": "Create Product Module"
      }
    },
    "/productmodule/{productModuleNumber}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Product Module.",
            "in": "path",
            "name": "productModuleNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Force object deletion and all descendants.",
            "in": "query",
            "name": "forceCascade",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product Module"
        ],
        "description": "Delete a Product Module by 'number'",
        "operationId": "deleteProductModule",
        "summary": "Delete Product Module"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.",
            "in": "path",
            "name": "productModuleNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product Module"
        ],
        "description": "Return a Product Module by 'productModuleNumber'",
        "operationId": "getProductModule",
        "summary": "Get Product Module"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.",
            "in": "path",
            "name": "productModuleNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.",
            "in": "formData",
            "name": "active",
            "type": "boolean"
          },
          {
            "collectionFormat": "csv",
            "description": "License Template. Mandatory for 'Try &amp; Buy' licensing model.",
            "in": "formData",
            "items": {
              "default": "TIMEVOLUME",
              "enum": [
                "TIMEVOLUME",
                "FEATURE"
              ],
              "type": "string"
            },
            "name": "licenseTemplate",
            "type": "array"
          },
          {
            "description": "Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.",
            "in": "formData",
            "name": "licensingModel",
            "type": "string"
          },
          {
            "description": "Maximum checkout validity (days). Mandatory for 'Floating' licensing model.",
            "format": "int32",
            "in": "formData",
            "name": "maxCheckoutValidity",
            "type": "integer"
          },
          {
            "description": "Product Module name that is visible to the end customers in NetLicensing Shop.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "Secret Mode. Mandatory for 'Node-Locked' licensing model.",
            "in": "formData",
            "items": {
              "default": "PREDEFINED",
              "enum": [
                "PREDEFINED",
                "CLIENT"
              ],
              "type": "string"
            },
            "name": "nodeSecretMode",
            "type": "array"
          },
          {
            "description": "New Product Module number (update).",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "description": "Remaining time volume for red level. Mandatory for 'Rental' licensing model.",
            "format": "int32",
            "in": "formData",
            "name": "redThreshold",
            "type": "integer"
          },
          {
            "description": "Remaining time volume for yellow level. Mandatory for 'Rental' licensing model.",
            "format": "int32",
            "in": "formData",
            "name": "yellowThreshold",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "402": {
            "description": "Quota exceeded"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Product Module"
        ],
        "description": "Sets the provided properties to a Product Module. Return an updated Product Module",
        "operationId": "updateProductModule",
        "summary": "Update Product Module"
      }
    },
    "/token": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "items": {
                "$ref": "#/definitions/netlicensing"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Token"
        ],
        "description": "Return a list of all tokens for the current Vendor",
        "operationId": "listTokens",
        "summary": "List Tokens"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "For <i>type=ACTION</i> only; defines token action to be perfromed",
            "enum": [
              "licenseeLogin"
            ],
            "in": "formData",
            "name": "action",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=APIKEY</i> only (default: ROLE_APIKEY_LICENSEE); defines token RoleID",
            "enum": [
              "ROLE_APIKEY_LICENSEE",
              "ROLE_APIKEY_ANALYTICS",
              "ROLE_APIKEY_OPERATION",
              "ROLE_APIKEY_MAINTENANCE",
              "ROLE_APIKEY_ADMIN"
            ],
            "in": "formData",
            "name": "apiKeyRole",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=SHOP</i> only; take customers to this URL when they cancel their checkout",
            "in": "formData",
            "name": "cancelURL",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=SHOP</i> only; shop link title for cancel checkout process",
            "in": "formData",
            "name": "cancelURLTitle",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=SHOP</i> only; identifies LicenseTemplate that will be assigned to the shop token",
            "in": "formData",
            "name": "licenseTemplateNumber",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=SHOP</i> or <i>type=ACTION</i> only (mandatory); identifies Licensee that will be assigned to the shop token",
            "in": "formData",
            "name": "licenseeNumber",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=SHOP</i> only; identifies Shopping Item name that will be shown to the customer",
            "in": "formData",
            "name": "predefinedShoppingItem",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=APIKEY</i> only (optional); defines PrivateKey to be used with the validate method<br/><strong>Please Note:</strong> PrivateKey need to be provided as one line without spaces",
            "in": "formData",
            "name": "privateKey",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=SHOP</i> only (mandatory); identifies Product that will be assigned to the shop token",
            "in": "formData",
            "name": "productNumber",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=SHOP</i> only; take customers to this URL when they finish checkout",
            "in": "formData",
            "name": "successURL",
            "type": "string"
          },
          {
            "description": "For <i>tokenType=SHOP</i> only; shop link title for successful checkout process",
            "in": "formData",
            "name": "successURLTitle",
            "type": "string"
          },
          {
            "description": "Token type to be generated",
            "enum": [
              "DEFAULT",
              "SHOP",
              "APIKEY"
            ],
            "in": "formData",
            "name": "tokenType",
            "required": true,
            "type": "string"
          },
          {
            "description": "For <i>tokenType=DEFAULT</i> only; action type to be set",
            "enum": [
              "ACTION"
            ],
            "in": "formData",
            "name": "type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Token"
        ],
        "description": "Create token by 'tokenType' and additional token parameters",
        "operationId": "createToken",
        "summary": "Create token"
      }
    },
    "/token/{tokenNumber}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Token number",
            "in": "path",
            "name": "tokenNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Token"
        ],
        "description": "Delete a token by 'number'",
        "operationId": "deleteToken",
        "summary": "Delete token"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Token number",
            "in": "path",
            "name": "tokenNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Token"
        ],
        "description": "Return a token by 'tokenNumber'",
        "operationId": "getToken",
        "summary": "Get token"
      }
    },
    "/transaction": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "items": {
                "$ref": "#/definitions/netlicensing"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Transaction"
        ],
        "description": "Return a list of all Transactions for the current Vendor",
        "operationId": "listTransactions",
        "summary": "List Transactions"
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Always 'true' for Transactions",
            "in": "formData",
            "name": "active",
            "required": true,
            "type": "boolean"
          },
          {
            "format": "date-time",
            "in": "formData",
            "name": "dateClosed",
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "formData",
            "name": "dateCreated",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "licenseeNumber",
            "type": "string"
          },
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Transaction",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "paymentMethod",
            "type": "string"
          },
          {
            "description": "AUTO Transaction for internal use only",
            "enum": [
              "SHOP"
            ],
            "in": "formData",
            "name": "source",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "CANCELLED",
              "CLOSED",
              "PENDING"
            ],
            "in": "formData",
            "name": "status",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Transaction"
        ],
        "description": "Creates a new Transaction",
        "operationId": "createTransaction",
        "summary": "Create Transaction"
      }
    },
    "/transaction/{transactionNumber}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Transaction",
            "in": "path",
            "name": "transactionNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Transaction"
        ],
        "description": "Return a Transaction by 'transactionNumber'",
        "operationId": "getTransaction",
        "summary": "Get Transaction "
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Transaction",
            "in": "path",
            "name": "transactionNumber",
            "required": true,
            "type": "string"
          },
          {
            "description": "Always 'true' for Transactions",
            "in": "formData",
            "name": "active",
            "type": "boolean"
          },
          {
            "format": "date-time",
            "in": "formData",
            "name": "dateClosed",
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "formData",
            "name": "dateCreated",
            "type": "string"
          },
          {
            "description": "Unique number (across all Products of a Vendor) that identifies the Transaction",
            "in": "formData",
            "name": "number",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "paymentMethod",
            "type": "string"
          },
          {
            "description": "AUTO Transaction for internal use only",
            "enum": [
              "SHOP"
            ],
            "in": "formData",
            "name": "source",
            "type": "string"
          },
          {
            "enum": [
              "CANCELLED",
              "CLOSED",
              "PENDING"
            ],
            "in": "formData",
            "name": "status",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Transaction"
        ],
        "description": "Sets the provided properties to a Transaction. Return an updated Transaction",
        "operationId": "updateTransaction",
        "summary": "Update Transaction"
      }
    },
    "/utility/licenseTypes": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Utility"
        ],
        "description": "Return a list of all License Types supported by the service",
        "operationId": "licenseTypes",
        "summary": "List License Types"
      }
    },
    "/utility/licensingModels": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/netlicensing"
            }
          },
          "400": {
            "description": "Malformed or illegal request"
          },
          "403": {
            "description": "Access is denied"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal service error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Utility"
        ],
        "description": "Return a list of all licensing models supported by the service",
        "operationId": "licensingModels",
        "summary": "List Licensing Models"
      }
    }
  },
  "definitions": {
    "License": {
      "properties": {
        "active": {
          "description": "If set to 'false', the License is disabled. License can be re-enabled, but as long as it is disabled, the License is excluded from the validation process.",
          "type": "boolean"
        },
        "currency": {
          "description": "Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation.",
          "type": "string"
        },
        "hidden": {
          "description": "If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly.",
          "type": "boolean"
        },
        "name": {
          "description": "Name for the Licensed item. Set from License Template on creation, if not specified explicitly.",
          "type": "string"
        },
        "number": {
          "description": "Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.",
          "type": "string"
        },
        "price": {
          "description": "'price' for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "xml": {
        "name": "license"
      }
    },
    "LicenseTemplate": {
      "properties": {
        "active": {
          "description": "If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.",
          "type": "boolean"
        },
        "automatic": {
          "description": "If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.",
          "type": "boolean"
        },
        "currency": {
          "description": "Specifies currency for the License price. Check data types to discover which currencies are supported.",
          "type": "string"
        },
        "hidden": {
          "description": "If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.",
          "type": "boolean"
        },
        "hiddenLicenses": {
          "description": "If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.",
          "type": "boolean"
        },
        "licenseType": {
          "description": "Type of Licenses created from this License Template",
          "enum": [
            "FEATURE",
            "TIMEVOLUME"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name for the Licensed item.",
          "type": "string"
        },
        "number": {
          "description": "Unique number (across all Product of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.",
          "type": "string"
        },
        "price": {
          "description": "'price' for the License. If >0, it must always be accompanied by the currency specification.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "xml": {
        "name": "licensetemplate"
      }
    },
    "Licensee": {
      "properties": {
        "active": {
          "description": "If set to 'false', the Licensee is disabled. Licensee can not obtain new Licenses, and validation is disabled.",
          "type": "boolean"
        },
        "number": {
          "description": "Unique number (across all Products of a Vendor) that identifies the Licensee. Vendor can assign this number when creating a Licensee or let NetLicensing generate one. Read-only after creation of the first License for the Licensee.",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "licensee"
      }
    },
    "PaymentMethod": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "number": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "paymentmethod"
      }
    },
    "Product": {
      "properties": {
        "active": {
          "description": "If set to 'false', the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses",
          "type": "boolean"
        },
        "licenseeAutoCreate": {
          "description": "If set to 'true', non-existing Licensees will be created at first validation attempt.",
          "type": "boolean"
        },
        "name": {
          "description": "Product name. Together with the version identifies the Product for the end customer",
          "type": "string"
        },
        "number": {
          "description": "Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.",
          "type": "string"
        },
        "version": {
          "description": "Product version. Convenience parameter, additional to the Product name.",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "product"
      }
    },
    "ProductModule": {
      "properties": {
        "active": {
          "description": "If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.",
          "type": "boolean"
        },
        "licensingInfo": {
          "description": "Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.",
          "type": "string"
        },
        "name": {
          "description": "Product Module name that is visible to the end customers in NetLicensing Shop.",
          "type": "string"
        },
        "number": {
          "description": "Unique number (across all Product of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.",
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "productmodule"
      }
    },
    "Token": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "expirationTime": {
          "format": "date-time",
          "type": "string"
        },
        "licenseNumber": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "shopURL": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "vendorNumber": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "token"
      }
    },
    "Transaction": {
      "properties": {
        "active": {
          "description": "Always true for the Transactions",
          "type": "string"
        },
        "number": {
          "description": "Unique number (across all Products of a Vendor) that identifies the Transaction. This number is always generated by NetLicensing.",
          "type": "string"
        },
        "source": {
          "enum": [
            "SHOP"
          ],
          "type": "string"
        },
        "status": {
          "enum": [
            "CANCELLED",
            "CLOSED",
            "PENDING"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "transaction"
      }
    },
    "discount": {
      "properties": {
        "amountPercent": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "totalPrice": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "xml": {
        "name": "discount"
      }
    },
    "infos": {
      "properties": {},
      "xml": {
        "name": "infos"
      }
    },
    "items": {
      "properties": {},
      "xml": {
        "name": "items"
      }
    },
    "licensingModel": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "xml": {
        "name": "licensingModel"
      }
    },
    "netlicensing": {
      "properties": {
        "infos": {
          "$ref": "#/definitions/infos"
        },
        "items": {
          "$ref": "#/definitions/items"
        }
      },
      "xml": {
        "name": "netlicensing"
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "description": "HTTP Basic Authentication. Use either `username:password` or `apiKey:token` to authenticate.",
      "type": "basic"
    }
  },
  "tags": [
    {
      "externalDocs": {
        "description": "Product Services",
        "url": "https://netlicensing.io/wiki/product-services"
      },
      "description": "Product operations",
      "name": "Product"
    },
    {
      "externalDocs": {
        "description": "Product Module Services",
        "url": "https://netlicensing.io/wiki/product-module-services"
      },
      "description": "Product Module operations",
      "name": "Product Module"
    },
    {
      "externalDocs": {
        "description": "License Template Services",
        "url": "https://netlicensing.io/wiki/license-template-services"
      },
      "description": "License Template operations",
      "name": "License Template"
    },
    {
      "externalDocs": {
        "description": "Licensee Services",
        "url": "https://netlicensing.io/wiki/licensee-services"
      },
      "description": "Licensee operations",
      "name": "Licensee"
    },
    {
      "externalDocs": {
        "description": "License Services",
        "url": "https://netlicensing.io/wiki/license-services"
      },
      "description": "License operations",
      "name": "License"
    },
    {
      "externalDocs": {
        "description": "Transaction Services",
        "url": "https://netlicensing.io/wiki/transaction-services"
      },
      "description": "Transaction operations",
      "name": "Transaction"
    },
    {
      "externalDocs": {
        "description": "Token Services",
        "url": "https://netlicensing.io/wiki/token-services"
      },
      "description": "Token operations",
      "name": "Token"
    },
    {
      "externalDocs": {
        "description": "Payment Method Services",
        "url": "https://netlicensing.io/wiki/payment-method-services"
      },
      "description": "Payment Method operations",
      "name": "Payment Method"
    },
    {
      "externalDocs": {
        "description": "Utility Services",
        "url": "https://netlicensing.io/wiki/utility-services"
      },
      "description": "Utility operations",
      "name": "Utility"
    }
  ],
  "x-components": {}
}