{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<p>Amazon WorkMail is a secure, managed business email and calendaring service with support for existing desktop and mobile email clients. You can access your email, contacts, and calendars using Microsoft Outlook, your browser, or other native iOS and Android email applications. You can integrate WorkMail with your existing corporate directory and control both the keys that encrypt your data and the location in which your data is stored.</p> <p>The WorkMail API is designed for the following scenarios:</p> <ul> <li> <p>Listing and describing organizations</p> </li> </ul> <ul> <li> <p>Managing users</p> </li> </ul> <ul> <li> <p>Managing groups</p> </li> </ul> <ul> <li> <p>Managing resources</p> </li> </ul> <p>All WorkMail API operations are Amazon-authenticated and certificate-signed. They not only require the use of the AWS SDK, but also allow for the exclusive use of AWS Identity and Access Management users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the WorkMail site, the IAM user gains full administrative visibility into the entire WorkMail organization (or as set in the IAM policy). This includes, but is not limited to, the ability to create, update, and delete users, groups, and resources. This allows developers to perform the scenarios listed above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon WorkMail",
    "version": "2017-10-01",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/workmail-2017-10-01.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "workmail",
    "x-datafire": {
      "name": "amazonaws_workmail",
      "type": "openapi"
    }
  },
  "host": "workmail.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=WorkMailService.AssociateDelegateToResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.AssociateDelegateToResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateDelegateToResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateDelegateToResourceResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Adds a member (user or group) to the resource's set of delegates.",
        "operationId": "AssociateDelegateToResource"
      }
    },
    "/#X-Amz-Target=WorkMailService.AssociateMemberToGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.AssociateMemberToGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateMemberToGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssociateMemberToGroupResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "484": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "485": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "486": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "487": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "Adds a member (user or group) to the group's set.",
        "operationId": "AssociateMemberToGroup"
      }
    },
    "/#X-Amz-Target=WorkMailService.CancelMailboxExportJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.CancelMailboxExportJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelMailboxExportJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelMailboxExportJobResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "<p>Cancels a mailbox export job.</p> <note> <p>If the mailbox export job is near completion, it might not be possible to cancel it.</p> </note>",
        "operationId": "CancelMailboxExportJob"
      }
    },
    "/#X-Amz-Target=WorkMailService.CreateAlias": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.CreateAlias"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAliasRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAliasResponse"
            }
          },
          "480": {
            "description": "EmailAddressInUseException",
            "schema": {
              "$ref": "#/definitions/EmailAddressInUseException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "484": {
            "description": "MailDomainNotFoundException",
            "schema": {
              "$ref": "#/definitions/MailDomainNotFoundException"
            }
          },
          "485": {
            "description": "MailDomainStateException",
            "schema": {
              "$ref": "#/definitions/MailDomainStateException"
            }
          },
          "486": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "487": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "488": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Adds an alias to the set of a given member (user or group) of Amazon WorkMail.",
        "operationId": "CreateAlias"
      }
    },
    "/#X-Amz-Target=WorkMailService.CreateGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.CreateGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGroupResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "NameAvailabilityException",
            "schema": {
              "$ref": "#/definitions/NameAvailabilityException"
            }
          },
          "484": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "485": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "486": {
            "description": "ReservedNameException",
            "schema": {
              "$ref": "#/definitions/ReservedNameException"
            }
          },
          "487": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "Creates a group that can be used in Amazon WorkMail by calling the <a>RegisterToWorkMail</a> operation.",
        "operationId": "CreateGroup"
      }
    },
    "/#X-Amz-Target=WorkMailService.CreateOrganization": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.CreateOrganization"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrganizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateOrganizationResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "DirectoryInUseException",
            "schema": {
              "$ref": "#/definitions/DirectoryInUseException"
            }
          },
          "482": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "NameAvailabilityException",
            "schema": {
              "$ref": "#/definitions/NameAvailabilityException"
            }
          }
        },
        "description": "<p>Creates a new Amazon WorkMail organization. Optionally, you can choose to associate an existing AWS Directory Service directory with your organization. If an AWS Directory Service directory ID is specified, the organization alias must match the directory alias. If you choose not to associate an existing directory with your organization, then we create a new Amazon WorkMail directory for you. For more information, see <a href=\"https://docs.aws.amazon.com/workmail/latest/adminguide/add_new_organization.html\">Adding an organization</a> in the <i>Amazon WorkMail Administrator Guide</i>.</p> <p>You can associate multiple email domains with an organization, then set your default email domain from the Amazon WorkMail console. You can also associate a domain that is managed in an Amazon Route 53 public hosted zone. For more information, see <a href=\"https://docs.aws.amazon.com/workmail/latest/adminguide/add_domain.html\">Adding a domain</a> and <a href=\"https://docs.aws.amazon.com/workmail/latest/adminguide/default_domain.html\">Choosing the default domain</a> in the <i>Amazon WorkMail Administrator Guide</i>.</p> <p>Optionally, you can use a customer managed master key from AWS Key Management Service (AWS KMS) to encrypt email for your organization. If you don't associate an AWS KMS key, Amazon WorkMail creates a default AWS managed master key for you.</p>",
        "operationId": "CreateOrganization"
      }
    },
    "/#X-Amz-Target=WorkMailService.CreateResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.CreateResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateResourceResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "NameAvailabilityException",
            "schema": {
              "$ref": "#/definitions/NameAvailabilityException"
            }
          },
          "484": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "485": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "486": {
            "description": "ReservedNameException",
            "schema": {
              "$ref": "#/definitions/ReservedNameException"
            }
          }
        },
        "description": "Creates a new Amazon WorkMail resource. ",
        "operationId": "CreateResource"
      }
    },
    "/#X-Amz-Target=WorkMailService.CreateUser": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.CreateUser"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "484": {
            "description": "NameAvailabilityException",
            "schema": {
              "$ref": "#/definitions/NameAvailabilityException"
            }
          },
          "485": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "486": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "487": {
            "description": "ReservedNameException",
            "schema": {
              "$ref": "#/definitions/ReservedNameException"
            }
          },
          "488": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "Creates a user who can be used in Amazon WorkMail by calling the <a>RegisterToWorkMail</a> operation.",
        "operationId": "CreateUser"
      }
    },
    "/#X-Amz-Target=WorkMailService.DeleteAccessControlRule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DeleteAccessControlRule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAccessControlRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAccessControlRuleResponse"
            }
          },
          "480": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "481": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Deletes an access control rule for the specified WorkMail organization.",
        "operationId": "DeleteAccessControlRule"
      }
    },
    "/#X-Amz-Target=WorkMailService.DeleteAlias": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DeleteAlias"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAliasRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAliasResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Remove one or more specified aliases from a set of aliases for a given user.",
        "operationId": "DeleteAlias"
      }
    },
    "/#X-Amz-Target=WorkMailService.DeleteGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DeleteGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteGroupResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "484": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "485": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "486": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "Deletes a group from Amazon WorkMail.",
        "operationId": "DeleteGroup"
      }
    },
    "/#X-Amz-Target=WorkMailService.DeleteMailboxPermissions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DeleteMailboxPermissions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteMailboxPermissionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteMailboxPermissionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Deletes permissions granted to a member (user or group).",
        "operationId": "DeleteMailboxPermissions"
      }
    },
    "/#X-Amz-Target=WorkMailService.DeleteOrganization": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DeleteOrganization"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteOrganizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteOrganizationResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Deletes an Amazon WorkMail organization and all underlying AWS resources managed by Amazon WorkMail as part of the organization. You can choose whether to delete the associated directory. For more information, see <a href=\"https://docs.aws.amazon.com/workmail/latest/adminguide/remove_organization.html\">Removing an organization</a> in the <i>Amazon WorkMail Administrator Guide</i>.",
        "operationId": "DeleteOrganization"
      }
    },
    "/#X-Amz-Target=WorkMailService.DeleteResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DeleteResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteResourceResponse"
            }
          },
          "480": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "483": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Deletes the specified resource. ",
        "operationId": "DeleteResource"
      }
    },
    "/#X-Amz-Target=WorkMailService.DeleteRetentionPolicy": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DeleteRetentionPolicy"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRetentionPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteRetentionPolicyResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Deletes the specified retention policy from the specified organization.",
        "operationId": "DeleteRetentionPolicy"
      }
    },
    "/#X-Amz-Target=WorkMailService.DeleteUser": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DeleteUser"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteUserResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "484": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "485": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "486": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "<p>Deletes a user from Amazon WorkMail and all subsequent systems. Before you can delete a user, the user state must be <code>DISABLED</code>. Use the <a>DescribeUser</a> action to confirm the user state.</p> <p>Deleting a user is permanent and cannot be undone. WorkMail archives user mailboxes for 30 days before they are permanently removed.</p>",
        "operationId": "DeleteUser"
      }
    },
    "/#X-Amz-Target=WorkMailService.DeregisterFromWorkMail": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DeregisterFromWorkMail"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterFromWorkMailRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterFromWorkMailResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Mark a user, group, or resource as no longer used in Amazon WorkMail. This action disassociates the mailbox and schedules it for clean-up. WorkMail keeps mailboxes for 30 days before they are permanently removed. The functionality in the console is <i>Disable</i>.",
        "operationId": "DeregisterFromWorkMail"
      }
    },
    "/#X-Amz-Target=WorkMailService.DescribeGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DescribeGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeGroupResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "483": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Returns the data available for the group.",
        "operationId": "DescribeGroup"
      }
    },
    "/#X-Amz-Target=WorkMailService.DescribeMailboxExportJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DescribeMailboxExportJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMailboxExportJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMailboxExportJobResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "Describes the current status of a mailbox export job.",
        "operationId": "DescribeMailboxExportJob"
      }
    },
    "/#X-Amz-Target=WorkMailService.DescribeOrganization": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DescribeOrganization"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeOrganizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeOrganizationResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          }
        },
        "description": "Provides more information regarding a given organization based on its identifier.",
        "operationId": "DescribeOrganization"
      }
    },
    "/#X-Amz-Target=WorkMailService.DescribeResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DescribeResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeResourceResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "483": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Returns the data available for the resource.",
        "operationId": "DescribeResource"
      }
    },
    "/#X-Amz-Target=WorkMailService.DescribeUser": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DescribeUser"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeUserResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "483": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Provides information regarding the user.",
        "operationId": "DescribeUser"
      }
    },
    "/#X-Amz-Target=WorkMailService.DisassociateDelegateFromResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DisassociateDelegateFromResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisassociateDelegateFromResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateDelegateFromResourceResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Removes a member from the resource's set of delegates.",
        "operationId": "DisassociateDelegateFromResource"
      }
    },
    "/#X-Amz-Target=WorkMailService.DisassociateMemberFromGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.DisassociateMemberFromGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisassociateMemberFromGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisassociateMemberFromGroupResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "484": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "485": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "486": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "487": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "Removes a member from a group.",
        "operationId": "DisassociateMemberFromGroup"
      }
    },
    "/#X-Amz-Target=WorkMailService.GetAccessControlEffect": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.GetAccessControlEffect"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAccessControlEffectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAccessControlEffectResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "483": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Gets the effects of an organization's access control rules as they apply to a specified IPv4 address, access protocol action, or user ID. ",
        "operationId": "GetAccessControlEffect"
      }
    },
    "/#X-Amz-Target=WorkMailService.GetDefaultRetentionPolicy": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.GetDefaultRetentionPolicy"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDefaultRetentionPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDefaultRetentionPolicyResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "Gets the default retention policy details for the specified organization.",
        "operationId": "GetDefaultRetentionPolicy"
      }
    },
    "/#X-Amz-Target=WorkMailService.GetMailboxDetails": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.GetMailboxDetails"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMailboxDetailsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMailboxDetailsResponse"
            }
          },
          "480": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "481": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "Requests a user's mailbox details for a specified organization and user.",
        "operationId": "GetMailboxDetails"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListAccessControlRules": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.ListAccessControlRules"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAccessControlRulesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAccessControlRulesResponse"
            }
          },
          "480": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "481": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Lists the access control rules for the specified organization.",
        "operationId": "ListAccessControlRules"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListAliases": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "WorkMailService.ListAliases"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAliasesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAliasesResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Creates a paginated call to list the aliases associated with a given entity.",
        "operationId": "ListAliases"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListGroupMembers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "WorkMailService.ListGroupMembers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListGroupMembersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGroupMembersResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Returns an overview of the members of a group. Users and groups can be members of a group.",
        "operationId": "ListGroupMembers"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListGroups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "WorkMailService.ListGroups"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGroupsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "483": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Returns summaries of the organization's groups.",
        "operationId": "ListGroups"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListMailboxExportJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "WorkMailService.ListMailboxExportJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListMailboxExportJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMailboxExportJobsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Lists the mailbox export jobs started for the specified organization within the last seven days.",
        "operationId": "ListMailboxExportJobs"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListMailboxPermissions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "WorkMailService.ListMailboxPermissions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListMailboxPermissionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMailboxPermissionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "483": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Lists the mailbox permissions associated with a user, group, or resource mailbox.",
        "operationId": "ListMailboxPermissions"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListOrganizations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "WorkMailService.ListOrganizations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOrganizationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListOrganizationsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          }
        },
        "description": "Returns summaries of the customer's organizations.",
        "operationId": "ListOrganizations"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListResourceDelegates": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "WorkMailService.ListResourceDelegates"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourceDelegatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourceDelegatesResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Lists the delegates associated with a resource. Users and groups can be resource delegates and answer requests on behalf of the resource.",
        "operationId": "ListResourceDelegates"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListResources": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "WorkMailService.ListResources"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourcesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourcesResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Returns summaries of the organization's resources.",
        "operationId": "ListResources"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Lists the tags applied to an Amazon WorkMail organization resource.",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=WorkMailService.ListUsers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "WorkMailService.ListUsers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUsersResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Returns summaries of the organization's users.",
        "operationId": "ListUsers"
      }
    },
    "/#X-Amz-Target=WorkMailService.PutAccessControlRule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.PutAccessControlRule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutAccessControlRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutAccessControlRuleResponse"
            }
          },
          "480": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Adds a new access control rule for the specified organization. The rule allows or denies access to the organization for the specified IPv4 addresses, access protocol actions, and user IDs. Adding a new rule with the same name as an existing rule replaces the older rule.",
        "operationId": "PutAccessControlRule"
      }
    },
    "/#X-Amz-Target=WorkMailService.PutMailboxPermissions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.PutMailboxPermissions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMailboxPermissionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutMailboxPermissionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "484": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Sets permissions for a user, group, or resource. This replaces any pre-existing permissions.",
        "operationId": "PutMailboxPermissions"
      }
    },
    "/#X-Amz-Target=WorkMailService.PutRetentionPolicy": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.PutRetentionPolicy"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutRetentionPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutRetentionPolicyResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Puts a retention policy to the specified organization.",
        "operationId": "PutRetentionPolicy"
      }
    },
    "/#X-Amz-Target=WorkMailService.RegisterToWorkMail": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.RegisterToWorkMail"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterToWorkMailRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterToWorkMailResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "EmailAddressInUseException",
            "schema": {
              "$ref": "#/definitions/EmailAddressInUseException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "484": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "485": {
            "description": "EntityAlreadyRegisteredException",
            "schema": {
              "$ref": "#/definitions/EntityAlreadyRegisteredException"
            }
          },
          "486": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "487": {
            "description": "MailDomainNotFoundException",
            "schema": {
              "$ref": "#/definitions/MailDomainNotFoundException"
            }
          },
          "488": {
            "description": "MailDomainStateException",
            "schema": {
              "$ref": "#/definitions/MailDomainStateException"
            }
          },
          "489": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "490": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "<p>Registers an existing and disabled user, group, or resource for Amazon WorkMail use by associating a mailbox and calendaring capabilities. It performs no change if the user, group, or resource is enabled and fails if the user, group, or resource is deleted. This operation results in the accumulation of costs. For more information, see <a href=\"https://aws.amazon.com/workmail/pricing\">Pricing</a>. The equivalent console functionality for this operation is <i>Enable</i>. </p> <p>Users can either be created by calling the <a>CreateUser</a> API operation or they can be synchronized from your directory. For more information, see <a>DeregisterFromWorkMail</a>.</p>",
        "operationId": "RegisterToWorkMail"
      }
    },
    "/#X-Amz-Target=WorkMailService.ResetPassword": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.ResetPassword"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResetPasswordResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "484": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "485": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "486": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "487": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "488": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "Allows the administrator to reset the password for a user.",
        "operationId": "ResetPassword"
      }
    },
    "/#X-Amz-Target=WorkMailService.StartMailboxExportJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.StartMailboxExportJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartMailboxExportJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartMailboxExportJobResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "484": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Starts a mailbox export job to export MIME-format email messages and calendar items from the specified mailbox to the specified Amazon Simple Storage Service (Amazon S3) bucket. For more information, see <a href=\"https://docs.aws.amazon.com/workmail/latest/adminguide/mail-export.html\">Exporting mailbox content</a> in the <i>Amazon WorkMail Administrator Guide</i>.",
        "operationId": "StartMailboxExportJob"
      }
    },
    "/#X-Amz-Target=WorkMailService.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Applies the specified tags to the specified Amazon WorkMail organization resource.",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=WorkMailService.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Untags the specified tags from the specified Amazon WorkMail organization resource.",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=WorkMailService.UpdateMailboxQuota": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.UpdateMailboxQuota"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMailboxQuotaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMailboxQuotaResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "482": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "484": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          }
        },
        "description": "Updates a user's current mailbox quota for a specified organization and user.",
        "operationId": "UpdateMailboxQuota"
      }
    },
    "/#X-Amz-Target=WorkMailService.UpdatePrimaryEmailAddress": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.UpdatePrimaryEmailAddress"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePrimaryEmailAddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePrimaryEmailAddressResponse"
            }
          },
          "480": {
            "description": "DirectoryServiceAuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/DirectoryServiceAuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "EmailAddressInUseException",
            "schema": {
              "$ref": "#/definitions/EmailAddressInUseException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "484": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "485": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "486": {
            "description": "MailDomainNotFoundException",
            "schema": {
              "$ref": "#/definitions/MailDomainNotFoundException"
            }
          },
          "487": {
            "description": "MailDomainStateException",
            "schema": {
              "$ref": "#/definitions/MailDomainStateException"
            }
          },
          "488": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "489": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "490": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          },
          "491": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "Updates the primary email for a user, group, or resource. The current email is moved into the list of aliases (or swapped between an existing alias and the current primary email), and the email provided in the input is promoted as the primary.",
        "operationId": "UpdatePrimaryEmailAddress"
      }
    },
    "/#X-Amz-Target=WorkMailService.UpdateResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "WorkMailService.UpdateResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateResourceResponse"
            }
          },
          "480": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "EntityStateException",
            "schema": {
              "$ref": "#/definitions/EntityStateException"
            }
          },
          "483": {
            "description": "InvalidConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidConfigurationException"
            }
          },
          "484": {
            "description": "EmailAddressInUseException",
            "schema": {
              "$ref": "#/definitions/EmailAddressInUseException"
            }
          },
          "485": {
            "description": "MailDomainNotFoundException",
            "schema": {
              "$ref": "#/definitions/MailDomainNotFoundException"
            }
          },
          "486": {
            "description": "MailDomainStateException",
            "schema": {
              "$ref": "#/definitions/MailDomainStateException"
            }
          },
          "487": {
            "description": "NameAvailabilityException",
            "schema": {
              "$ref": "#/definitions/NameAvailabilityException"
            }
          },
          "488": {
            "description": "OrganizationNotFoundException",
            "schema": {
              "$ref": "#/definitions/OrganizationNotFoundException"
            }
          },
          "489": {
            "description": "OrganizationStateException",
            "schema": {
              "$ref": "#/definitions/OrganizationStateException"
            }
          }
        },
        "description": "Updates data for the resource. To have the latest information, it must be preceded by a <a>DescribeResource</a> call. The dataset in the request should be the one expected when performing another <code>DescribeResource</code> call.",
        "operationId": "UpdateResource"
      }
    }
  },
  "definitions": {
    "AccessControlRule": {
      "description": "A rule that controls access to an Amazon WorkMail organization.",
      "properties": {
        "Actions": {
          "allOf": [
            {
              "$ref": "#/definitions/ActionsList"
            },
            {
              "description": "Access protocol actions to include in the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>."
            }
          ]
        },
        "DateCreated": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date that the rule was created."
            }
          ]
        },
        "DateModified": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date that the rule was modified."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleDescription"
            },
            {
              "description": "The rule description."
            }
          ]
        },
        "Effect": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleEffect"
            },
            {
              "description": "The rule effect."
            }
          ]
        },
        "IpRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/IpRangeList"
            },
            {
              "description": "IPv4 CIDR ranges to include in the rule."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleName"
            },
            {
              "description": "The rule name."
            }
          ]
        },
        "NotActions": {
          "allOf": [
            {
              "$ref": "#/definitions/ActionsList"
            },
            {
              "description": "Access protocol actions to exclude from the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>."
            }
          ]
        },
        "NotIpRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/IpRangeList"
            },
            {
              "description": "IPv4 CIDR ranges to exclude from the rule."
            }
          ]
        },
        "NotUserIds": {
          "allOf": [
            {
              "$ref": "#/definitions/UserIdList"
            },
            {
              "description": "User IDs to exclude from the rule."
            }
          ]
        },
        "UserIds": {
          "allOf": [
            {
              "$ref": "#/definitions/UserIdList"
            },
            {
              "description": "User IDs to include in the rule."
            }
          ]
        }
      },
      "type": "object"
    },
    "AccessControlRuleAction": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[a-zA-Z]+",
      "type": "string"
    },
    "AccessControlRuleDescription": {
      "maxLength": 255,
      "minLength": 0,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "AccessControlRuleEffect": {
      "enum": [
        "ALLOW",
        "DENY"
      ],
      "type": "string"
    },
    "AccessControlRuleName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_-]+",
      "type": "string"
    },
    "AccessControlRuleNameList": {
      "items": {
        "$ref": "#/definitions/AccessControlRuleName"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "AccessControlRulesList": {
      "items": {
        "$ref": "#/definitions/AccessControlRule"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "ActionsList": {
      "items": {
        "$ref": "#/definitions/AccessControlRuleAction"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "Aliases": {
      "items": {
        "$ref": "#/definitions/EmailAddress"
      },
      "type": "array"
    },
    "AmazonResourceName": {
      "maxLength": 1011,
      "minLength": 1,
      "type": "string"
    },
    "AssociateDelegateToResourceRequest": {
      "properties": {
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The member (user or group) to associate to the resource."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization under which the resource exists."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The resource for which members (users or groups) are associated."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "ResourceId",
        "EntityId"
      ],
      "title": "AssociateDelegateToResourceRequest",
      "type": "object"
    },
    "AssociateDelegateToResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "AssociateMemberToGroupRequest": {
      "properties": {
        "GroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The group to which the member (user or group) is associated."
            }
          ]
        },
        "MemberId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The member (user or group) to associate to the group."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization under which the group exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "GroupId",
        "MemberId"
      ],
      "title": "AssociateMemberToGroupRequest",
      "type": "object"
    },
    "AssociateMemberToGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "BookingOptions": {
      "description": "At least one delegate must be associated to the resource to disable automatic replies from the resource.",
      "properties": {
        "AutoAcceptRequests": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The resource's ability to automatically reply to requests. If disabled, delegates must be associated to the resource."
            }
          ]
        },
        "AutoDeclineConflictingRequests": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The resource's ability to automatically decline any conflicting requests."
            }
          ]
        },
        "AutoDeclineRecurringRequests": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "The resource's ability to automatically decline any recurring requests."
            }
          ]
        }
      },
      "type": "object"
    },
    "Boolean": {
      "type": "boolean"
    },
    "CancelMailboxExportJobRequest": {
      "properties": {
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/IdempotencyClientToken"
            },
            {
              "description": "The idempotency token for the client request."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxExportJobId"
            },
            {
              "description": "The job ID."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization ID."
            }
          ]
        }
      },
      "required": [
        "ClientToken",
        "JobId",
        "OrganizationId"
      ],
      "title": "CancelMailboxExportJobRequest",
      "type": "object"
    },
    "CancelMailboxExportJobResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateAliasRequest": {
      "properties": {
        "Alias": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The alias to add to the member set."
            }
          ]
        },
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The member (user or group) to which this alias is added."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization under which the member (user or group) exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "EntityId",
        "Alias"
      ],
      "title": "CreateAliasRequest",
      "type": "object"
    },
    "CreateAliasResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateGroupRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupName"
            },
            {
              "description": "The name of the group."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization under which the group is to be created."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "Name"
      ],
      "title": "CreateGroupRequest",
      "type": "object"
    },
    "CreateGroupResponse": {
      "properties": {
        "GroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the group."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateOrganizationRequest": {
      "properties": {
        "Alias": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationName"
            },
            {
              "description": "The organization alias."
            }
          ]
        },
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/IdempotencyClientToken"
            },
            {
              "description": "The idempotency token associated with the request."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The AWS Directory Service directory ID."
            }
          ]
        },
        "Domains": {
          "allOf": [
            {
              "$ref": "#/definitions/Domains"
            },
            {
              "description": "The email domains to associate with the organization."
            }
          ]
        },
        "EnableInteroperability": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "When <code>true</code>, allows organization interoperability between Amazon WorkMail and Microsoft Exchange. Can only be set to <code>true</code> if an AD Connector directory ID is included in the request."
            }
          ]
        },
        "KmsKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of a customer managed master key from AWS KMS."
            }
          ]
        }
      },
      "required": [
        "Alias"
      ],
      "title": "CreateOrganizationRequest",
      "type": "object"
    },
    "CreateOrganizationResponse": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateResourceRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the new resource."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier associated with the organization for which the resource is created."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "The type of the new resource. The available types are <code>equipment</code> and <code>room</code>."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "Name",
        "Type"
      ],
      "title": "CreateResourceRequest",
      "type": "object"
    },
    "CreateResourceResponse": {
      "properties": {
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The identifier of the new resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateUserRequest": {
      "properties": {
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The display name for the new user."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/UserName"
            },
            {
              "description": "The name for the new user. WorkMail directory user names have a maximum length of 64. All others have a maximum length of 20."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier of the organization for which the user is created."
            }
          ]
        },
        "Password": {
          "allOf": [
            {
              "$ref": "#/definitions/Password"
            },
            {
              "description": "The password for the new user."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "Name",
        "DisplayName",
        "Password"
      ],
      "title": "CreateUserRequest",
      "type": "object"
    },
    "CreateUserResponse": {
      "properties": {
        "UserId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the new user."
            }
          ]
        }
      },
      "type": "object"
    },
    "Delegate": {
      "description": "The name of the attribute, which is one of the values defined in the UserAttribute enumeration.",
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier for the user or group associated as the resource's delegate."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/MemberType"
            },
            {
              "description": "The type of the delegate: user or group."
            }
          ]
        }
      },
      "required": [
        "Id",
        "Type"
      ],
      "type": "object"
    },
    "DeleteAccessControlRuleRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleName"
            },
            {
              "description": "The name of the access control rule."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "Name"
      ],
      "title": "DeleteAccessControlRuleRequest",
      "type": "object"
    },
    "DeleteAccessControlRuleResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteAliasRequest": {
      "properties": {
        "Alias": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The aliases to be removed from the user's set of aliases. Duplicate entries in the list are collapsed into single entries (the list is transformed into a set)."
            }
          ]
        },
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the member (user or group) from which to have the aliases removed."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the user exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "EntityId",
        "Alias"
      ],
      "title": "DeleteAliasRequest",
      "type": "object"
    },
    "DeleteAliasResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteGroupRequest": {
      "properties": {
        "GroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the group to be deleted."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization that contains the group."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "GroupId"
      ],
      "title": "DeleteGroupRequest",
      "type": "object"
    },
    "DeleteGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteMailboxPermissionsRequest": {
      "properties": {
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the member (user or group) that owns the mailbox."
            }
          ]
        },
        "GranteeId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the member (user or group) for which to delete granted permissions."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier of the organization under which the member (user or group) exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "EntityId",
        "GranteeId"
      ],
      "title": "DeleteMailboxPermissionsRequest",
      "type": "object"
    },
    "DeleteMailboxPermissionsResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteOrganizationRequest": {
      "properties": {
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/IdempotencyClientToken"
            },
            {
              "description": "The idempotency token associated with the request."
            }
          ]
        },
        "DeleteDirectory": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "If true, deletes the AWS Directory Service directory associated with the organization."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization ID."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "DeleteDirectory"
      ],
      "title": "DeleteOrganizationRequest",
      "type": "object"
    },
    "DeleteOrganizationResponse": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization ID."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The state of the organization."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteResourceRequest": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier associated with the organization from which the resource is deleted."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The identifier of the resource to be deleted."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "ResourceId"
      ],
      "title": "DeleteResourceRequest",
      "type": "object"
    },
    "DeleteResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteRetentionPolicyRequest": {
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ShortString"
            },
            {
              "description": "The retention policy ID."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization ID."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "Id"
      ],
      "title": "DeleteRetentionPolicyRequest",
      "type": "object"
    },
    "DeleteRetentionPolicyResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteUserRequest": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization that contains the user to be deleted."
            }
          ]
        },
        "UserId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user to be deleted."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "UserId"
      ],
      "title": "DeleteUserRequest",
      "type": "object"
    },
    "DeleteUserResponse": {
      "properties": {},
      "type": "object"
    },
    "DeregisterFromWorkMailRequest": {
      "properties": {
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the member (user or group) to be updated."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the Amazon WorkMail entity exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "EntityId"
      ],
      "title": "DeregisterFromWorkMailRequest",
      "type": "object"
    },
    "DeregisterFromWorkMailResponse": {
      "properties": {},
      "type": "object"
    },
    "DescribeGroupRequest": {
      "properties": {
        "GroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the group to be described."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the group exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "GroupId"
      ],
      "title": "DescribeGroupRequest",
      "type": "object"
    },
    "DescribeGroupResponse": {
      "properties": {
        "DisabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time when a user was deregistered from WorkMail, in UNIX epoch time format."
            }
          ]
        },
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The email of the described group."
            }
          ]
        },
        "EnabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time when a user was registered to WorkMail, in UNIX epoch time format."
            }
          ]
        },
        "GroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the described group."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupName"
            },
            {
              "description": "The name of the described group."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityState"
            },
            {
              "description": "The state of the user: enabled (registered to Amazon WorkMail) or disabled (deregistered or never registered to WorkMail)."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMailboxExportJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxExportJobId"
            },
            {
              "description": "The mailbox export job ID."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization ID."
            }
          ]
        }
      },
      "required": [
        "JobId",
        "OrganizationId"
      ],
      "title": "DescribeMailboxExportJobRequest",
      "type": "object"
    },
    "DescribeMailboxExportJobResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The mailbox export job description."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The mailbox export job end timestamp."
            }
          ]
        },
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user or resource associated with the mailbox."
            }
          ]
        },
        "ErrorInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxExportErrorInfo"
            },
            {
              "description": "Error information for failed mailbox export jobs."
            }
          ]
        },
        "EstimatedProgress": {
          "allOf": [
            {
              "$ref": "#/definitions/Percentage"
            },
            {
              "description": "The estimated progress of the mailbox export job, in percentage points."
            }
          ]
        },
        "KmsKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the symmetric AWS Key Management Service (AWS KMS) key that encrypts the exported mailbox content."
            }
          ]
        },
        "RoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The ARN of the AWS Identity and Access Management (IAM) role that grants write permission to the Amazon Simple Storage Service (Amazon S3) bucket."
            }
          ]
        },
        "S3BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/S3BucketName"
            },
            {
              "description": "The name of the S3 bucket."
            }
          ]
        },
        "S3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/S3ObjectKey"
            },
            {
              "description": "The path to the S3 bucket and file that the mailbox export job is exporting to."
            }
          ]
        },
        "S3Prefix": {
          "allOf": [
            {
              "$ref": "#/definitions/S3ObjectKey"
            },
            {
              "description": "The S3 bucket prefix."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The mailbox export job start timestamp."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxExportJobState"
            },
            {
              "description": "The state of the mailbox export job."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeOrganizationRequest": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization to be described."
            }
          ]
        }
      },
      "required": [
        "OrganizationId"
      ],
      "title": "DescribeOrganizationRequest",
      "type": "object"
    },
    "DescribeOrganizationResponse": {
      "properties": {
        "ARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the organization."
            }
          ]
        },
        "Alias": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationName"
            },
            {
              "description": "The alias for an organization."
            }
          ]
        },
        "CompletedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date at which the organization became usable in the WorkMail context, in UNIX epoch time format."
            }
          ]
        },
        "DefaultMailDomain": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The default mail domain associated with the organization."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier for the directory associated with an Amazon WorkMail organization."
            }
          ]
        },
        "DirectoryType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The type of directory associated with the WorkMail organization."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "(Optional) The error message indicating if unexpected behavior was encountered with regards to the organization."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier of an organization."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The state of an organization."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeResourceRequest": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier associated with the organization for which the resource is described."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The identifier of the resource to be described."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "ResourceId"
      ],
      "title": "DescribeResourceRequest",
      "type": "object"
    },
    "DescribeResourceResponse": {
      "properties": {
        "BookingOptions": {
          "allOf": [
            {
              "$ref": "#/definitions/BookingOptions"
            },
            {
              "description": "The booking options for the described resource."
            }
          ]
        },
        "DisabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time when a resource was disabled from WorkMail, in UNIX epoch time format."
            }
          ]
        },
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The email of the described resource."
            }
          ]
        },
        "EnabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time when a resource was enabled for WorkMail, in UNIX epoch time format."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the described resource."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The identifier of the described resource."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityState"
            },
            {
              "description": "The state of the resource: enabled (registered to Amazon WorkMail), disabled (deregistered or never registered to WorkMail), or deleted."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "The type of the described resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeUserRequest": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the user exists."
            }
          ]
        },
        "UserId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the user to be described."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "UserId"
      ],
      "title": "DescribeUserRequest",
      "type": "object"
    },
    "DescribeUserResponse": {
      "properties": {
        "DisabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time at which the user was disabled for Amazon WorkMail usage, in UNIX epoch time format."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The display name of the user."
            }
          ]
        },
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The email of the user."
            }
          ]
        },
        "EnabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time at which the user was enabled for Amazon WorkMail usage, in UNIX epoch time format."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/UserName"
            },
            {
              "description": "The name for the user."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityState"
            },
            {
              "description": "The state of a user: enabled (registered to Amazon WorkMail) or disabled (deregistered or never registered to WorkMail)."
            }
          ]
        },
        "UserId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the described user."
            }
          ]
        },
        "UserRole": {
          "allOf": [
            {
              "$ref": "#/definitions/UserRole"
            },
            {
              "description": "In certain cases, other entities are modeled as users. If interoperability is enabled, resources are imported into Amazon WorkMail as users. Because different WorkMail organizations rely on different directory types, administrators can distinguish between an unregistered user (account is disabled and has a user role) and the directory administrators. The values are USER, RESOURCE, and SYSTEM_USER."
            }
          ]
        }
      },
      "type": "object"
    },
    "Description": {
      "maxLength": 1023,
      "minLength": 0,
      "pattern": "[\\S\\s]*",
      "type": "string"
    },
    "DirectoryId": {
      "maxLength": 12,
      "minLength": 12,
      "pattern": "^d-[0-9a-f]{10}$",
      "type": "string"
    },
    "DirectoryInUseException": {},
    "DirectoryServiceAuthenticationFailedException": {},
    "DirectoryUnavailableException": {},
    "DisassociateDelegateFromResourceRequest": {
      "properties": {
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the member (user, group) to be removed from the resource's delegates."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the resource exists."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The identifier of the resource from which delegates' set members are removed. "
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "ResourceId",
        "EntityId"
      ],
      "title": "DisassociateDelegateFromResourceRequest",
      "type": "object"
    },
    "DisassociateDelegateFromResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "DisassociateMemberFromGroupRequest": {
      "properties": {
        "GroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the group from which members are removed."
            }
          ]
        },
        "MemberId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the member to be removed to the group."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the group exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "GroupId",
        "MemberId"
      ],
      "title": "DisassociateMemberFromGroupRequest",
      "type": "object"
    },
    "DisassociateMemberFromGroupResponse": {
      "properties": {},
      "type": "object"
    },
    "Domain": {
      "description": "<p>The domain to associate with an Amazon WorkMail organization.</p> <p>When you configure a domain hosted in Amazon Route 53 (Route 53), all recommended DNS records are added to the organization when you create it. For more information, see <a href=\"https://docs.aws.amazon.com/workmail/latest/adminguide/add_domain.html\">Adding a domain</a> in the <i>Amazon WorkMail Administrator Guide</i>.</p>",
      "properties": {
        "DomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The fully qualified domain name."
            }
          ]
        },
        "HostedZoneId": {
          "allOf": [
            {
              "$ref": "#/definitions/HostedZoneId"
            },
            {
              "description": "The hosted zone ID for a domain hosted in Route 53. Required when configuring a domain hosted in Route 53."
            }
          ]
        }
      },
      "type": "object"
    },
    "DomainName": {
      "maxLength": 255,
      "minLength": 3,
      "pattern": "[a-zA-Z0-9.-]+\\.[a-zA-Z-]{2,}",
      "type": "string"
    },
    "Domains": {
      "items": {
        "$ref": "#/definitions/Domain"
      },
      "maxItems": 5,
      "minItems": 0,
      "type": "array"
    },
    "EmailAddress": {
      "maxLength": 254,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9._%+-]{1,64}@[a-zA-Z0-9.-]+\\.[a-zA-Z-]{2,}",
      "type": "string"
    },
    "EmailAddressInUseException": {},
    "EntityAlreadyRegisteredException": {},
    "EntityNotFoundException": {},
    "EntityState": {
      "enum": [
        "ENABLED",
        "DISABLED",
        "DELETED"
      ],
      "type": "string"
    },
    "EntityStateException": {},
    "FolderConfiguration": {
      "description": "The configuration applied to an organization's folders by its retention policy.",
      "properties": {
        "Action": {
          "allOf": [
            {
              "$ref": "#/definitions/RetentionAction"
            },
            {
              "description": "The action to take on the folder contents at the end of the folder configuration period."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/FolderName"
            },
            {
              "description": "The folder name."
            }
          ]
        },
        "Period": {
          "allOf": [
            {
              "$ref": "#/definitions/RetentionPeriod"
            },
            {
              "description": "The period of time at which the folder configuration action is applied."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Action"
      ],
      "type": "object"
    },
    "FolderConfigurations": {
      "items": {
        "$ref": "#/definitions/FolderConfiguration"
      },
      "type": "array"
    },
    "FolderName": {
      "enum": [
        "INBOX",
        "DELETED_ITEMS",
        "SENT_ITEMS",
        "DRAFTS",
        "JUNK_EMAIL"
      ],
      "type": "string"
    },
    "GetAccessControlEffectRequest": {
      "properties": {
        "Action": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleAction"
            },
            {
              "description": "The access protocol action. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>."
            }
          ]
        },
        "IpAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/IpAddress"
            },
            {
              "description": "The IPv4 address."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization."
            }
          ]
        },
        "UserId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The user ID."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "IpAddress",
        "Action",
        "UserId"
      ],
      "title": "GetAccessControlEffectRequest",
      "type": "object"
    },
    "GetAccessControlEffectResponse": {
      "properties": {
        "Effect": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleEffect"
            },
            {
              "description": "The rule effect."
            }
          ]
        },
        "MatchedRules": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleNameList"
            },
            {
              "description": "The rules that match the given parameters, resulting in an effect."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDefaultRetentionPolicyRequest": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization ID."
            }
          ]
        }
      },
      "required": [
        "OrganizationId"
      ],
      "title": "GetDefaultRetentionPolicyRequest",
      "type": "object"
    },
    "GetDefaultRetentionPolicyResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The retention policy description."
            }
          ]
        },
        "FolderConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/FolderConfigurations"
            },
            {
              "description": "The retention policy folder configurations."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ShortString"
            },
            {
              "description": "The retention policy ID."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ShortString"
            },
            {
              "description": "The retention policy name."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMailboxDetailsRequest": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization that contains the user whose mailbox details are being requested."
            }
          ]
        },
        "UserId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the user whose mailbox details are being requested."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "UserId"
      ],
      "title": "GetMailboxDetailsRequest",
      "type": "object"
    },
    "GetMailboxDetailsResponse": {
      "properties": {
        "MailboxQuota": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxQuota"
            },
            {
              "description": "The maximum allowed mailbox size, in MB, for the specified user."
            }
          ]
        },
        "MailboxSize": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxSize"
            },
            {
              "description": "The current mailbox size, in MB, for the specified user."
            }
          ]
        }
      },
      "type": "object"
    },
    "Group": {
      "description": "The representation of an Amazon WorkMail group.",
      "properties": {
        "DisabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date indicating when the group was disabled from Amazon WorkMail use."
            }
          ]
        },
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The email of the group."
            }
          ]
        },
        "EnabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date indicating when the group was enabled for Amazon WorkMail use."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the group."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupName"
            },
            {
              "description": "The name of the group."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityState"
            },
            {
              "description": "The state of the group, which can be ENABLED, DISABLED, or DELETED."
            }
          ]
        }
      },
      "type": "object"
    },
    "GroupName": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "Groups": {
      "items": {
        "$ref": "#/definitions/Group"
      },
      "type": "array"
    },
    "HostedZoneId": {
      "maxLength": 32,
      "minLength": 1,
      "pattern": "[\\S\\s]*",
      "type": "string"
    },
    "IdempotencyClientToken": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\x21-\\x7e]+",
      "type": "string"
    },
    "InvalidConfigurationException": {},
    "InvalidParameterException": {},
    "InvalidPasswordException": {},
    "IpAddress": {
      "maxLength": 15,
      "minLength": 1,
      "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
      "type": "string"
    },
    "IpRange": {
      "maxLength": 18,
      "minLength": 1,
      "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])/([0-9]|[12][0-9]|3[0-2])$",
      "type": "string"
    },
    "IpRangeList": {
      "items": {
        "$ref": "#/definitions/IpRange"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "Jobs": {
      "items": {
        "$ref": "#/definitions/MailboxExportJob"
      },
      "type": "array"
    },
    "KmsKeyArn": {
      "maxLength": 2048,
      "minLength": 20,
      "pattern": "arn:aws:kms:[a-z0-9-]*:[a-z0-9-]+:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}",
      "type": "string"
    },
    "LimitExceededException": {},
    "ListAccessControlRulesRequest": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization."
            }
          ]
        }
      },
      "required": [
        "OrganizationId"
      ],
      "title": "ListAccessControlRulesRequest",
      "type": "object"
    },
    "ListAccessControlRulesResponse": {
      "properties": {
        "Rules": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRulesList"
            },
            {
              "description": "The access control rules."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListAliasesRequest": {
      "properties": {
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the entity for which to list the aliases."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The first call does not contain any tokens."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the entity exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "EntityId"
      ],
      "title": "ListAliasesRequest",
      "type": "object"
    },
    "ListAliasesResponse": {
      "properties": {
        "Aliases": {
          "allOf": [
            {
              "$ref": "#/definitions/Aliases"
            },
            {
              "description": "The entity's paginated aliases."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The value is \"null\" when there are no more results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListGroupMembersRequest": {
      "properties": {
        "GroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the group to which the members (users or groups) are associated."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": " The token to use to retrieve the next page of results. The first call does not contain any tokens."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the group exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "GroupId"
      ],
      "title": "ListGroupMembersRequest",
      "type": "object"
    },
    "ListGroupMembersResponse": {
      "properties": {
        "Members": {
          "allOf": [
            {
              "$ref": "#/definitions/Members"
            },
            {
              "description": "The members associated to the group."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The first call does not contain any tokens."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListGroupsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The first call does not contain any tokens."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the groups exist."
            }
          ]
        }
      },
      "required": [
        "OrganizationId"
      ],
      "title": "ListGroupsRequest",
      "type": "object"
    },
    "ListGroupsResponse": {
      "properties": {
        "Groups": {
          "allOf": [
            {
              "$ref": "#/definitions/Groups"
            },
            {
              "description": "The overview of groups for an organization."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The value is \"null\" when there are no more results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListMailboxExportJobsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization ID."
            }
          ]
        }
      },
      "required": [
        "OrganizationId"
      ],
      "title": "ListMailboxExportJobsRequest",
      "type": "object"
    },
    "ListMailboxExportJobsResponse": {
      "properties": {
        "Jobs": {
          "allOf": [
            {
              "$ref": "#/definitions/Jobs"
            },
            {
              "description": "The mailbox export job details."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListMailboxPermissionsRequest": {
      "properties": {
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user, group, or resource for which to list mailbox permissions."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The first call does not contain any tokens."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier of the organization under which the user, group, or resource exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "EntityId"
      ],
      "title": "ListMailboxPermissionsRequest",
      "type": "object"
    },
    "ListMailboxPermissionsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The value is \"null\" when there are no more results to return."
            }
          ]
        },
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/Permissions"
            },
            {
              "description": "One page of the user, group, or resource mailbox permissions."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListOrganizationsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The first call does not contain any tokens."
            }
          ]
        }
      },
      "title": "ListOrganizationsRequest",
      "type": "object"
    },
    "ListOrganizationsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The value is \"null\" when there are no more results to return."
            }
          ]
        },
        "OrganizationSummaries": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationSummaries"
            },
            {
              "description": "The overview of owned organizations presented as a list of organization summaries."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListResourceDelegatesRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The number of maximum results in a page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token used to paginate through the delegates associated with a resource."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization that contains the resource for which delegates are listed."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the resource whose delegates are listed."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "ResourceId"
      ],
      "title": "ListResourceDelegatesRequest",
      "type": "object"
    },
    "ListResourceDelegatesResponse": {
      "properties": {
        "Delegates": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDelegates"
            },
            {
              "description": "One page of the resource's delegates."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token used to paginate through the delegates associated with a resource. While results are still available, it has an associated value. When the last page is reached, the token is empty. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ListResourcesRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The first call does not contain any tokens."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the resources exist."
            }
          ]
        }
      },
      "required": [
        "OrganizationId"
      ],
      "title": "ListResourcesRequest",
      "type": "object"
    },
    "ListResourcesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": " The token used to paginate through all the organization's resources. While results are still available, it has an associated value. When the last page is reached, the token is empty."
            }
          ]
        },
        "Resources": {
          "allOf": [
            {
              "$ref": "#/definitions/Resources"
            },
            {
              "description": "One page of the organization's resource representation."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "ResourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "The resource ARN."
            }
          ]
        }
      },
      "required": [
        "ResourceARN"
      ],
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "A list of tag key-value pairs."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListUsersRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retrieve the next page of results. The first call does not contain any tokens."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the users exist."
            }
          ]
        }
      },
      "required": [
        "OrganizationId"
      ],
      "title": "ListUsersRequest",
      "type": "object"
    },
    "ListUsersResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": " The token to use to retrieve the next page of results. This value is `null` when there are no more results to return."
            }
          ]
        },
        "Users": {
          "allOf": [
            {
              "$ref": "#/definitions/Users"
            },
            {
              "description": "The overview of users for an organization."
            }
          ]
        }
      },
      "type": "object"
    },
    "MailDomainNotFoundException": {},
    "MailDomainStateException": {},
    "MailboxExportErrorInfo": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "[\\S\\s]*",
      "type": "string"
    },
    "MailboxExportJob": {
      "description": "The details of a mailbox export job, including the user or resource ID associated with the mailbox and the S3 bucket that the mailbox contents are exported to.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The mailbox export job description."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The mailbox export job end timestamp."
            }
          ]
        },
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user or resource associated with the mailbox."
            }
          ]
        },
        "EstimatedProgress": {
          "allOf": [
            {
              "$ref": "#/definitions/Percentage"
            },
            {
              "description": "The estimated progress of the mailbox export job, in percentage points."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxExportJobId"
            },
            {
              "description": "The identifier of the mailbox export job."
            }
          ]
        },
        "S3BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/S3BucketName"
            },
            {
              "description": "The name of the S3 bucket."
            }
          ]
        },
        "S3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/S3ObjectKey"
            },
            {
              "description": "The path to the S3 bucket and file that the mailbox export job exports to."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The mailbox export job start timestamp."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxExportJobState"
            },
            {
              "description": "The state of the mailbox export job."
            }
          ]
        }
      },
      "type": "object"
    },
    "MailboxExportJobId": {
      "maxLength": 63,
      "minLength": 1,
      "pattern": "[A-Za-z0-9-]+",
      "type": "string"
    },
    "MailboxExportJobState": {
      "enum": [
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELLED"
      ],
      "type": "string"
    },
    "MailboxQuota": {
      "minimum": 1,
      "type": "integer"
    },
    "MailboxSize": {
      "format": "double",
      "minimum": 0,
      "type": "number"
    },
    "MaxResults": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "Member": {
      "description": "The representation of a user or group.",
      "properties": {
        "DisabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date indicating when the member was disabled from Amazon WorkMail use."
            }
          ]
        },
        "EnabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date indicating when the member was enabled for Amazon WorkMail use."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The identifier of the member."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the member."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityState"
            },
            {
              "description": "The state of the member, which can be ENABLED, DISABLED, or DELETED."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/MemberType"
            },
            {
              "description": "A member can be a user or group."
            }
          ]
        }
      },
      "type": "object"
    },
    "MemberType": {
      "enum": [
        "GROUP",
        "USER"
      ],
      "type": "string"
    },
    "Members": {
      "items": {
        "$ref": "#/definitions/Member"
      },
      "type": "array"
    },
    "NameAvailabilityException": {},
    "NextToken": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "[\\S\\s]*|[a-zA-Z0-9/+=]{1,1024}",
      "type": "string"
    },
    "OrganizationId": {
      "maxLength": 34,
      "minLength": 34,
      "pattern": "^m-[0-9a-f]{32}$",
      "type": "string"
    },
    "OrganizationName": {
      "maxLength": 62,
      "minLength": 1,
      "pattern": "^(?!d-)([\\da-zA-Z]+)([-][\\da-zA-Z]+)*",
      "type": "string"
    },
    "OrganizationNotFoundException": {},
    "OrganizationStateException": {},
    "OrganizationSummaries": {
      "items": {
        "$ref": "#/definitions/OrganizationSummary"
      },
      "type": "array"
    },
    "OrganizationSummary": {
      "description": "The representation of an organization.",
      "properties": {
        "Alias": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationName"
            },
            {
              "description": "The alias associated with the organization."
            }
          ]
        },
        "DefaultMailDomain": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainName"
            },
            {
              "description": "The default email domain associated with the organization."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The error message associated with the organization. It is only present if unexpected behavior has occurred with regards to the organization. It provides insight or solutions regarding unexpected behavior."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier associated with the organization."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The state associated with the organization."
            }
          ]
        }
      },
      "type": "object"
    },
    "Password": {
      "format": "password",
      "maxLength": 256,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "Percentage": {
      "maximum": 100,
      "minimum": 0,
      "type": "integer"
    },
    "Permission": {
      "description": "Permission granted to a user, group, or resource to access a certain aspect of another user, group, or resource mailbox.",
      "properties": {
        "GranteeId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user, group, or resource to which the permissions are granted."
            }
          ]
        },
        "GranteeType": {
          "allOf": [
            {
              "$ref": "#/definitions/MemberType"
            },
            {
              "description": "The type of user, group, or resource referred to in GranteeId."
            }
          ]
        },
        "PermissionValues": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionValues"
            },
            {
              "description": "The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective of other folder-level permissions set on the mailbox."
            }
          ]
        }
      },
      "required": [
        "GranteeId",
        "GranteeType",
        "PermissionValues"
      ],
      "type": "object"
    },
    "PermissionType": {
      "enum": [
        "FULL_ACCESS",
        "SEND_AS",
        "SEND_ON_BEHALF"
      ],
      "type": "string"
    },
    "PermissionValues": {
      "items": {
        "$ref": "#/definitions/PermissionType"
      },
      "type": "array"
    },
    "Permissions": {
      "items": {
        "$ref": "#/definitions/Permission"
      },
      "type": "array"
    },
    "PolicyDescription": {
      "format": "password",
      "maxLength": 256,
      "pattern": "[\\w\\d\\s\\S\\-!?=,.;:'_]+",
      "type": "string"
    },
    "PutAccessControlRuleRequest": {
      "properties": {
        "Actions": {
          "allOf": [
            {
              "$ref": "#/definitions/ActionsList"
            },
            {
              "description": "Access protocol actions to include in the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleDescription"
            },
            {
              "description": "The rule description."
            }
          ]
        },
        "Effect": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleEffect"
            },
            {
              "description": "The rule effect."
            }
          ]
        },
        "IpRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/IpRangeList"
            },
            {
              "description": "IPv4 CIDR ranges to include in the rule."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessControlRuleName"
            },
            {
              "description": "The rule name."
            }
          ]
        },
        "NotActions": {
          "allOf": [
            {
              "$ref": "#/definitions/ActionsList"
            },
            {
              "description": "Access protocol actions to exclude from the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>."
            }
          ]
        },
        "NotIpRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/IpRangeList"
            },
            {
              "description": "IPv4 CIDR ranges to exclude from the rule."
            }
          ]
        },
        "NotUserIds": {
          "allOf": [
            {
              "$ref": "#/definitions/UserIdList"
            },
            {
              "description": "User IDs to exclude from the rule."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier of the organization."
            }
          ]
        },
        "UserIds": {
          "allOf": [
            {
              "$ref": "#/definitions/UserIdList"
            },
            {
              "description": "User IDs to include in the rule."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Effect",
        "Description",
        "OrganizationId"
      ],
      "title": "PutAccessControlRuleRequest",
      "type": "object"
    },
    "PutAccessControlRuleResponse": {
      "properties": {},
      "type": "object"
    },
    "PutMailboxPermissionsRequest": {
      "properties": {
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user, group, or resource for which to update mailbox permissions."
            }
          ]
        },
        "GranteeId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user, group, or resource to which to grant the permissions."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier of the organization under which the user, group, or resource exists."
            }
          ]
        },
        "PermissionValues": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionValues"
            },
            {
              "description": "The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective of other folder-level permissions set on the mailbox."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "EntityId",
        "GranteeId",
        "PermissionValues"
      ],
      "title": "PutMailboxPermissionsRequest",
      "type": "object"
    },
    "PutMailboxPermissionsResponse": {
      "properties": {},
      "type": "object"
    },
    "PutRetentionPolicyRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/PolicyDescription"
            },
            {
              "description": "The retention policy description."
            }
          ]
        },
        "FolderConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/FolderConfigurations"
            },
            {
              "description": "The retention policy folder configurations."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ShortString"
            },
            {
              "description": "The retention policy ID."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ShortString"
            },
            {
              "description": "The retention policy name."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization ID."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "Name",
        "FolderConfigurations"
      ],
      "title": "PutRetentionPolicyRequest",
      "type": "object"
    },
    "PutRetentionPolicyResponse": {
      "properties": {},
      "type": "object"
    },
    "RegisterToWorkMailRequest": {
      "properties": {
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The email for the user, group, or resource to be updated."
            }
          ]
        },
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier for the user, group, or resource to be updated."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization under which the user, group, or resource exists."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "EntityId",
        "Email"
      ],
      "title": "RegisterToWorkMailRequest",
      "type": "object"
    },
    "RegisterToWorkMailResponse": {
      "properties": {},
      "type": "object"
    },
    "ReservedNameException": {},
    "ResetPasswordRequest": {
      "properties": {
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier of the organization that contains the user for which the password is reset."
            }
          ]
        },
        "Password": {
          "allOf": [
            {
              "$ref": "#/definitions/Password"
            },
            {
              "description": "The new password for the user."
            }
          ]
        },
        "UserId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user for whom the password is reset."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "UserId",
        "Password"
      ],
      "title": "ResetPasswordRequest",
      "type": "object"
    },
    "ResetPasswordResponse": {
      "properties": {},
      "type": "object"
    },
    "Resource": {
      "description": "The representation of a resource.",
      "properties": {
        "DisabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date indicating when the resource was disabled from Amazon WorkMail use."
            }
          ]
        },
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The email of the resource."
            }
          ]
        },
        "EnabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date indicating when the resource was enabled for Amazon WorkMail use."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the resource."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the resource."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityState"
            },
            {
              "description": "The state of the resource, which can be ENABLED, DISABLED, or DELETED."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "The type of the resource: equipment or room."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceDelegates": {
      "items": {
        "$ref": "#/definitions/Delegate"
      },
      "type": "array"
    },
    "ResourceId": {
      "maxLength": 34,
      "minLength": 34,
      "pattern": "^r-[0-9a-f]{32}$",
      "type": "string"
    },
    "ResourceName": {
      "maxLength": 20,
      "minLength": 1,
      "pattern": "[\\w\\-.]+(@[a-zA-Z0-9.\\-]+\\.[a-zA-Z0-9-]{2,})?",
      "type": "string"
    },
    "ResourceNotFoundException": {},
    "ResourceType": {
      "enum": [
        "ROOM",
        "EQUIPMENT"
      ],
      "type": "string"
    },
    "Resources": {
      "items": {
        "$ref": "#/definitions/Resource"
      },
      "type": "array"
    },
    "RetentionAction": {
      "enum": [
        "NONE",
        "DELETE",
        "PERMANENTLY_DELETE"
      ],
      "type": "string"
    },
    "RetentionPeriod": {
      "maximum": 730,
      "minimum": 1,
      "type": "integer"
    },
    "RoleArn": {
      "maxLength": 2048,
      "minLength": 20,
      "type": "string"
    },
    "S3BucketName": {
      "maxLength": 63,
      "minLength": 1,
      "pattern": "[A-Za-z0-9.-]+",
      "type": "string"
    },
    "S3ObjectKey": {
      "maxLength": 1023,
      "minLength": 1,
      "pattern": "[A-Za-z0-9!_.*'()/-]+",
      "type": "string"
    },
    "ShortString": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_-]+",
      "type": "string"
    },
    "StartMailboxExportJobRequest": {
      "properties": {
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/IdempotencyClientToken"
            },
            {
              "description": "The idempotency token for the client request."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The mailbox export job description."
            }
          ]
        },
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user or resource associated with the mailbox."
            }
          ]
        },
        "KmsKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the symmetric AWS Key Management Service (AWS KMS) key that encrypts the exported mailbox content."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier associated with the organization."
            }
          ]
        },
        "RoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The ARN of the AWS Identity and Access Management (IAM) role that grants write permission to the S3 bucket."
            }
          ]
        },
        "S3BucketName": {
          "allOf": [
            {
              "$ref": "#/definitions/S3BucketName"
            },
            {
              "description": "The name of the S3 bucket."
            }
          ]
        },
        "S3Prefix": {
          "allOf": [
            {
              "$ref": "#/definitions/S3ObjectKey"
            },
            {
              "description": "The S3 bucket prefix."
            }
          ]
        }
      },
      "required": [
        "ClientToken",
        "OrganizationId",
        "EntityId",
        "RoleArn",
        "KmsKeyArn",
        "S3BucketName",
        "S3Prefix"
      ],
      "title": "StartMailboxExportJobRequest",
      "type": "object"
    },
    "StartMailboxExportJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxExportJobId"
            },
            {
              "description": "The job ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "String": {
      "maxLength": 256,
      "type": "string"
    },
    "Tag": {
      "description": "Describes a tag applied to a resource.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKey"
            },
            {
              "description": "The key of the tag."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/TagValue"
            },
            {
              "description": "The value of the tag."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "ResourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "The resource ARN."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tag key-value pairs."
            }
          ]
        }
      },
      "required": [
        "ResourceARN",
        "Tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "TooManyTagsException": {},
    "UnsupportedOperationException": {},
    "UntagResourceRequest": {
      "properties": {
        "ResourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "The resource ARN."
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeyList"
            },
            {
              "description": "The tag keys."
            }
          ]
        }
      },
      "required": [
        "ResourceARN",
        "TagKeys"
      ],
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateMailboxQuotaRequest": {
      "properties": {
        "MailboxQuota": {
          "allOf": [
            {
              "$ref": "#/definitions/MailboxQuota"
            },
            {
              "description": "The updated mailbox quota, in MB, for the specified user."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier for the organization that contains the user for whom to update the mailbox quota."
            }
          ]
        },
        "UserId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifer for the user for whom to update the mailbox quota."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "UserId",
        "MailboxQuota"
      ],
      "title": "UpdateMailboxQuotaRequest",
      "type": "object"
    },
    "UpdateMailboxQuotaResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdatePrimaryEmailAddressRequest": {
      "properties": {
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The value of the email to be updated as primary."
            }
          ]
        },
        "EntityId": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The user, group, or resource to update."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The organization that contains the user, group, or resource to update."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "EntityId",
        "Email"
      ],
      "title": "UpdatePrimaryEmailAddressRequest",
      "type": "object"
    },
    "UpdatePrimaryEmailAddressResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateResourceRequest": {
      "properties": {
        "BookingOptions": {
          "allOf": [
            {
              "$ref": "#/definitions/BookingOptions"
            },
            {
              "description": "The resource's booking options to be updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceName"
            },
            {
              "description": "The name of the resource to be updated."
            }
          ]
        },
        "OrganizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationId"
            },
            {
              "description": "The identifier associated with the organization for which the resource is updated."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The identifier of the resource to be updated."
            }
          ]
        }
      },
      "required": [
        "OrganizationId",
        "ResourceId"
      ],
      "title": "UpdateResourceRequest",
      "type": "object"
    },
    "UpdateResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "User": {
      "description": "The representation of an Amazon WorkMail user.",
      "properties": {
        "DisabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date indicating when the user was disabled from Amazon WorkMail use."
            }
          ]
        },
        "DisplayName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The display name of the user."
            }
          ]
        },
        "Email": {
          "allOf": [
            {
              "$ref": "#/definitions/EmailAddress"
            },
            {
              "description": "The email of the user."
            }
          ]
        },
        "EnabledDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date indicating when the user was enabled for Amazon WorkMail use."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkMailIdentifier"
            },
            {
              "description": "The identifier of the user."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/UserName"
            },
            {
              "description": "The name of the user."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityState"
            },
            {
              "description": "The state of the user, which can be ENABLED, DISABLED, or DELETED."
            }
          ]
        },
        "UserRole": {
          "allOf": [
            {
              "$ref": "#/definitions/UserRole"
            },
            {
              "description": "The role of the user."
            }
          ]
        }
      },
      "type": "object"
    },
    "UserIdList": {
      "items": {
        "$ref": "#/definitions/WorkMailIdentifier"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "UserName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[\\w\\-.]+(@[a-zA-Z0-9.\\-]+\\.[a-zA-Z0-9-]{2,})?",
      "type": "string"
    },
    "UserRole": {
      "enum": [
        "USER",
        "RESOURCE",
        "SYSTEM_USER"
      ],
      "type": "string"
    },
    "Users": {
      "items": {
        "$ref": "#/definitions/User"
      },
      "type": "array"
    },
    "WorkMailIdentifier": {
      "maxLength": 256,
      "minLength": 12,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/workmail/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}