{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname> AWS License Manager </fullname> <p>AWS License Manager makes it easier to manage licenses from software vendors across multiple AWS accounts and on-premises servers.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS License Manager",
    "version": "2018-08-01",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/license-manager-2018-08-01.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "license-manager",
    "x-datafire": {
      "name": "amazonaws_license_manager",
      "type": "openapi"
    }
  },
  "host": "license-manager.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=AWSLicenseManager.AcceptGrant": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.AcceptGrant"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AcceptGrantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AcceptGrantResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "485": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "486": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Accepts the specified grant.",
        "operationId": "AcceptGrant"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.CheckInLicense": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.CheckInLicense"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckInLicenseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CheckInLicenseResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "483": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "485": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "486": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Checks in the specified license. Check in a license when it is no longer in use.",
        "operationId": "CheckInLicense"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.CheckoutBorrowLicense": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.CheckoutBorrowLicense"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutBorrowLicenseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CheckoutBorrowLicenseResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NoEntitlementsAllowedException",
            "schema": {
              "$ref": "#/definitions/NoEntitlementsAllowedException"
            }
          },
          "483": {
            "description": "EntitlementNotAllowedException",
            "schema": {
              "$ref": "#/definitions/EntitlementNotAllowedException"
            }
          },
          "484": {
            "description": "UnsupportedDigitalSignatureMethodException",
            "schema": {
              "$ref": "#/definitions/UnsupportedDigitalSignatureMethodException"
            }
          },
          "485": {
            "description": "RedirectException",
            "schema": {
              "$ref": "#/definitions/RedirectException"
            }
          },
          "486": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "487": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "488": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "489": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Checks out the specified license for offline use.",
        "operationId": "CheckoutBorrowLicense"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.CheckoutLicense": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.CheckoutLicense"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutLicenseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CheckoutLicenseResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NoEntitlementsAllowedException",
            "schema": {
              "$ref": "#/definitions/NoEntitlementsAllowedException"
            }
          },
          "483": {
            "description": "UnsupportedDigitalSignatureMethodException",
            "schema": {
              "$ref": "#/definitions/UnsupportedDigitalSignatureMethodException"
            }
          },
          "484": {
            "description": "RedirectException",
            "schema": {
              "$ref": "#/definitions/RedirectException"
            }
          },
          "485": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "486": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "487": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "488": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Checks out the specified license.",
        "operationId": "CheckoutLicense"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.CreateGrant": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.CreateGrant"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGrantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGrantResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "484": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "485": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "486": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates a grant for the specified license. A grant shares the use of license entitlements with specific AWS accounts.",
        "operationId": "CreateGrant"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.CreateGrantVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.CreateGrantVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGrantVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGrantVersionResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "484": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "486": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Creates a new version of the specified grant.",
        "operationId": "CreateGrantVersion"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.CreateLicense": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.CreateLicense"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLicenseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateLicenseResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "RedirectException",
            "schema": {
              "$ref": "#/definitions/RedirectException"
            }
          },
          "483": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "485": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "486": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Creates a license.",
        "operationId": "CreateLicense"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.CreateLicenseConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.CreateLicenseConfiguration"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLicenseConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateLicenseConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "485": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "<p>Creates a license configuration.</p> <p>A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), license affinity to host (how long a license must be associated with a host), and the number of licenses purchased and used.</p>",
        "operationId": "CreateLicenseConfiguration"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.CreateLicenseVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.CreateLicenseVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLicenseVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateLicenseVersionResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "RedirectException",
            "schema": {
              "$ref": "#/definitions/RedirectException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "486": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "487": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Creates a new version of the specified license.",
        "operationId": "CreateLicenseVersion"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.CreateToken": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.CreateToken"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTokenResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "484": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "485": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "487": {
            "description": "RedirectException",
            "schema": {
              "$ref": "#/definitions/RedirectException"
            }
          }
        },
        "description": "<p>Creates a long-lived token.</p> <p>A refresh token is a JWT token used to get an access token. With an access token, you can call AssumeRoleWithWebIdentity to get role credentials that you can use to call License Manager to manage the specified license.</p>",
        "operationId": "CreateToken"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.DeleteGrant": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.DeleteGrant"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteGrantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteGrantResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "485": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "486": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Deletes the specified grant.",
        "operationId": "DeleteGrant"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.DeleteLicense": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.DeleteLicense"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteLicenseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteLicenseResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "RedirectException",
            "schema": {
              "$ref": "#/definitions/RedirectException"
            }
          },
          "483": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "484": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "485": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "486": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "487": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Deletes the specified license.",
        "operationId": "DeleteLicense"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.DeleteLicenseConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.DeleteLicenseConfiguration"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteLicenseConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteLicenseConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "<p>Deletes the specified license configuration.</p> <p>You cannot delete a license configuration that is in use.</p>",
        "operationId": "DeleteLicenseConfiguration"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.DeleteToken": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.DeleteToken"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTokenResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "484": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "485": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "486": {
            "description": "RedirectException",
            "schema": {
              "$ref": "#/definitions/RedirectException"
            }
          }
        },
        "description": "Deletes the specified token. Must be called in the license home Region.",
        "operationId": "DeleteToken"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ExtendLicenseConsumption": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ExtendLicenseConsumption"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendLicenseConsumptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExtendLicenseConsumptionResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "485": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "486": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Extends the expiration date for license consumption.",
        "operationId": "ExtendLicenseConsumption"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.GetAccessToken": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.GetAccessToken"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAccessTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAccessTokenResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "484": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Gets a temporary access token to use with AssumeRoleWithWebIdentity. Access tokens are valid for one hour.",
        "operationId": "GetAccessToken"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.GetGrant": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.GetGrant"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetGrantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetGrantResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "484": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "486": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Gets detailed information about the specified grant.",
        "operationId": "GetGrant"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.GetLicense": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.GetLicense"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetLicenseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLicenseResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "485": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Gets detailed information about the specified license.",
        "operationId": "GetLicense"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.GetLicenseConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.GetLicenseConfiguration"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetLicenseConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLicenseConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Gets detailed information about the specified license configuration.",
        "operationId": "GetLicenseConfiguration"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.GetLicenseUsage": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.GetLicenseUsage"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetLicenseUsageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLicenseUsageResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "485": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Gets detailed information about the usage of the specified license.",
        "operationId": "GetLicenseUsage"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.GetServiceSettings": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.GetServiceSettings"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetServiceSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetServiceSettingsResponse"
            }
          },
          "480": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "481": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Gets the License Manager settings for the current Region.",
        "operationId": "GetServiceSettings"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListAssociationsForLicenseConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListAssociationsForLicenseConfiguration"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAssociationsForLicenseConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAssociationsForLicenseConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "FilterLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FilterLimitExceededException"
            }
          },
          "482": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "483": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "485": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "<p>Lists the resource associations for the specified license configuration.</p> <p>Resource associations need not consume licenses from a license configuration. For example, an AMI or a stopped instance might not consume a license (depending on the license rules).</p>",
        "operationId": "ListAssociationsForLicenseConfiguration"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListDistributedGrants": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListDistributedGrants"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDistributedGrantsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDistributedGrantsResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "484": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "486": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Lists the grants distributed for the specified license.",
        "operationId": "ListDistributedGrants"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListFailuresForLicenseConfigurationOperations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListFailuresForLicenseConfigurationOperations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListFailuresForLicenseConfigurationOperationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFailuresForLicenseConfigurationOperationsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Lists the license configuration operations that failed.",
        "operationId": "ListFailuresForLicenseConfigurationOperations"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListLicenseConfigurations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListLicenseConfigurations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLicenseConfigurationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLicenseConfigurationsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "FilterLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FilterLimitExceededException"
            }
          },
          "483": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "485": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Lists the license configurations for your account.",
        "operationId": "ListLicenseConfigurations"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListLicenseSpecificationsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListLicenseSpecificationsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLicenseSpecificationsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLicenseSpecificationsForResourceResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Describes the license configurations for the specified resource.",
        "operationId": "ListLicenseSpecificationsForResource"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListLicenseVersions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListLicenseVersions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLicenseVersionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLicenseVersionsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "484": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Lists all versions of the specified license.",
        "operationId": "ListLicenseVersions"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListLicenses": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListLicenses"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLicensesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLicensesResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "485": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Lists the licenses for your account.",
        "operationId": "ListLicenses"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListReceivedGrants": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListReceivedGrants"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListReceivedGrantsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListReceivedGrantsResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "484": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "486": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Lists grants that are received but not accepted.",
        "operationId": "ListReceivedGrants"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListReceivedLicenses": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListReceivedLicenses"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListReceivedLicensesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListReceivedLicensesResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "484": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "486": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Lists received licenses.",
        "operationId": "ListReceivedLicenses"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListResourceInventory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListResourceInventory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListResourceInventoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListResourceInventoryResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "FilterLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FilterLimitExceededException"
            }
          },
          "483": {
            "description": "FailedDependencyException",
            "schema": {
              "$ref": "#/definitions/FailedDependencyException"
            }
          },
          "484": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "486": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Lists resources managed using Systems Manager inventory.",
        "operationId": "ListResourceInventory"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Lists the tags for the specified license configuration.",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListTokens": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListTokens"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTokensRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTokensResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "484": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Lists your tokens.",
        "operationId": "ListTokens"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.ListUsageForLicenseConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.ListUsageForLicenseConfiguration"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListUsageForLicenseConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUsageForLicenseConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "FilterLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FilterLimitExceededException"
            }
          },
          "482": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "483": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "485": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Lists all license usage records for a license configuration, displaying license consumption details by resource at a selected point in time. Use this action to audit the current license consumption for any license inventory and configuration.",
        "operationId": "ListUsageForLicenseConfiguration"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.RejectGrant": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.RejectGrant"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectGrantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RejectGrantResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "485": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "486": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          }
        },
        "description": "Rejects the specified grant.",
        "operationId": "RejectGrant"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Adds the specified tags to the specified license configuration.",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Removes the specified tags from the specified license configuration.",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.UpdateLicenseConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.UpdateLicenseConfiguration"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLicenseConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateLicenseConfigurationResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          },
          "485": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          }
        },
        "description": "Modifies the attributes of an existing license configuration.",
        "operationId": "UpdateLicenseConfiguration"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.UpdateLicenseSpecificationsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.UpdateLicenseSpecificationsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLicenseSpecificationsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateLicenseSpecificationsForResourceResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "InvalidResourceStateException",
            "schema": {
              "$ref": "#/definitions/InvalidResourceStateException"
            }
          },
          "482": {
            "description": "LicenseUsageException",
            "schema": {
              "$ref": "#/definitions/LicenseUsageException"
            }
          },
          "483": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "484": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "486": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "<p>Adds or removes the specified license configurations for the specified AWS resource.</p> <p>You can update the license specifications of AMIs, instances, and hosts. You cannot update the license specifications for launch templates and AWS CloudFormation templates, as they send license configurations to the operation that creates the resource.</p>",
        "operationId": "UpdateLicenseSpecificationsForResource"
      }
    },
    "/#X-Amz-Target=AWSLicenseManager.UpdateServiceSettings": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSLicenseManager.UpdateServiceSettings"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateServiceSettingsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterValueException"
            }
          },
          "481": {
            "description": "ServerInternalException",
            "schema": {
              "$ref": "#/definitions/ServerInternalException"
            }
          },
          "482": {
            "description": "AuthorizationException",
            "schema": {
              "$ref": "#/definitions/AuthorizationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "RateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RateLimitExceededException"
            }
          }
        },
        "description": "Updates License Manager settings for the current Region.",
        "operationId": "UpdateServiceSettings"
      }
    }
  },
  "definitions": {
    "AcceptGrantRequest": {
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the grant."
            }
          ]
        }
      },
      "required": [
        "GrantArn"
      ],
      "title": "AcceptGrantRequest",
      "type": "object"
    },
    "AcceptGrantResponse": {
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Grant ARN."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantStatus"
            },
            {
              "description": "Grant status."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant version."
            }
          ]
        }
      },
      "type": "object"
    },
    "AccessDeniedException": {},
    "AllowedOperation": {
      "enum": [
        "CreateGrant",
        "CheckoutLicense",
        "CheckoutBorrowLicense",
        "CheckInLicense",
        "ExtendConsumptionLicense",
        "ListPurchasedLicenses",
        "CreateToken"
      ],
      "type": "string"
    },
    "AllowedOperationList": {
      "items": {
        "$ref": "#/definitions/AllowedOperation"
      },
      "maxItems": 7,
      "minItems": 1,
      "type": "array"
    },
    "Arn": {
      "maxLength": 2048,
      "pattern": "^arn:aws:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$",
      "type": "string"
    },
    "ArnList": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "type": "array"
    },
    "AuthorizationException": {},
    "AutomatedDiscoveryInformation": {
      "description": "Describes automated discovery.",
      "properties": {
        "LastRunTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "Time that automated discovery last ran."
            }
          ]
        }
      },
      "type": "object"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BorrowConfiguration": {
      "description": "Details about a borrow configuration.",
      "properties": {
        "AllowEarlyCheckIn": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "Indicates whether early check-ins are allowed."
            }
          ]
        },
        "MaxTimeToLiveInMinutes": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxInteger"
            },
            {
              "description": "Maximum time for the borrow configuration, in minutes."
            }
          ]
        }
      },
      "required": [
        "AllowEarlyCheckIn",
        "MaxTimeToLiveInMinutes"
      ],
      "type": "object"
    },
    "BoxBoolean": {
      "type": "boolean"
    },
    "BoxInteger": {
      "type": "integer"
    },
    "BoxLong": {
      "type": "integer"
    },
    "CheckInLicenseRequest": {
      "properties": {
        "Beneficiary": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License beneficiary."
            }
          ]
        },
        "LicenseConsumptionToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License consumption token."
            }
          ]
        }
      },
      "required": [
        "LicenseConsumptionToken"
      ],
      "title": "CheckInLicenseRequest",
      "type": "object"
    },
    "CheckInLicenseResponse": {
      "properties": {},
      "type": "object"
    },
    "CheckoutBorrowLicenseRequest": {
      "properties": {
        "CheckoutMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataList"
            },
            {
              "description": "Information about constraints."
            }
          ]
        },
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientToken"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            }
          ]
        },
        "DigitalSignatureMethod": {
          "allOf": [
            {
              "$ref": "#/definitions/DigitalSignatureMethod"
            },
            {
              "description": "Digital signature method. The possible value is JSON Web Signature (JWS) algorithm PS384. For more information, see <a href=\"https://tools.ietf.org/html/rfc7518#section-3.5\">RFC 7518 Digital Signature with RSASSA-PSS</a>."
            }
          ]
        },
        "Entitlements": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementDataList"
            },
            {
              "description": "License entitlements. Partial checkouts are not supported."
            }
          ]
        },
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license. The license must use the borrow consumption configuration."
            }
          ]
        },
        "NodeId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Node ID."
            }
          ]
        }
      },
      "required": [
        "LicenseArn",
        "Entitlements",
        "DigitalSignatureMethod",
        "ClientToken"
      ],
      "title": "CheckoutBorrowLicenseRequest",
      "type": "object"
    },
    "CheckoutBorrowLicenseResponse": {
      "properties": {
        "CheckoutMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataList"
            },
            {
              "description": "Information about constraints."
            }
          ]
        },
        "EntitlementsAllowed": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementDataList"
            },
            {
              "description": "Allowed license entitlements."
            }
          ]
        },
        "Expiration": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "Date and time at which the license checkout expires."
            }
          ]
        },
        "IssuedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "Date and time at which the license checkout is issued."
            }
          ]
        },
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "LicenseConsumptionToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License consumption token."
            }
          ]
        },
        "NodeId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Node ID."
            }
          ]
        },
        "SignedToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SignedToken"
            },
            {
              "description": "Signed token."
            }
          ]
        }
      },
      "type": "object"
    },
    "CheckoutLicenseRequest": {
      "properties": {
        "Beneficiary": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License beneficiary."
            }
          ]
        },
        "CheckoutType": {
          "allOf": [
            {
              "$ref": "#/definitions/CheckoutType"
            },
            {
              "description": "Checkout type."
            }
          ]
        },
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientToken"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            }
          ]
        },
        "Entitlements": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementDataList"
            },
            {
              "description": "License entitlements."
            }
          ]
        },
        "KeyFingerprint": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Key fingerprint identifying the license."
            }
          ]
        },
        "NodeId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Node ID."
            }
          ]
        },
        "ProductSKU": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Product SKU."
            }
          ]
        }
      },
      "required": [
        "ProductSKU",
        "CheckoutType",
        "KeyFingerprint",
        "Entitlements",
        "ClientToken"
      ],
      "title": "CheckoutLicenseRequest",
      "type": "object"
    },
    "CheckoutLicenseResponse": {
      "properties": {
        "CheckoutType": {
          "allOf": [
            {
              "$ref": "#/definitions/CheckoutType"
            },
            {
              "description": "Checkout type."
            }
          ]
        },
        "EntitlementsAllowed": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementDataList"
            },
            {
              "description": "Allowed license entitlements."
            }
          ]
        },
        "Expiration": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "Date and time at which the license checkout expires."
            }
          ]
        },
        "IssuedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "Date and time at which the license checkout is issued."
            }
          ]
        },
        "LicenseConsumptionToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License consumption token."
            }
          ]
        },
        "NodeId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Node ID."
            }
          ]
        },
        "SignedToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SignedToken"
            },
            {
              "description": "Signed token."
            }
          ]
        }
      },
      "type": "object"
    },
    "CheckoutType": {
      "enum": [
        "PROVISIONAL"
      ],
      "type": "string"
    },
    "ClientToken": {
      "maxLength": 64,
      "pattern": "[a-zA-Z0-9]*",
      "type": "string"
    },
    "ConflictException": {},
    "ConsumedLicenseSummary": {
      "description": "Details about license consumption.",
      "properties": {
        "ConsumedLicenses": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxLong"
            },
            {
              "description": "Number of licenses consumed by the resource."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "Resource type of the resource consuming a license."
            }
          ]
        }
      },
      "type": "object"
    },
    "ConsumedLicenseSummaryList": {
      "items": {
        "$ref": "#/definitions/ConsumedLicenseSummary"
      },
      "type": "array"
    },
    "ConsumptionConfiguration": {
      "description": "Details about a consumption configuration.",
      "properties": {
        "BorrowConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/BorrowConfiguration"
            },
            {
              "description": "Details about a borrow configuration."
            }
          ]
        },
        "ProvisionalConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ProvisionalConfiguration"
            },
            {
              "description": "Details about a provisional configuration."
            }
          ]
        },
        "RenewType": {
          "allOf": [
            {
              "$ref": "#/definitions/RenewType"
            },
            {
              "description": "Renewal frequency."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateGrantRequest": {
      "properties": {
        "AllowedOperations": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedOperationList"
            },
            {
              "description": "Allowed operations for the grant."
            }
          ]
        },
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            }
          ]
        },
        "GrantName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant name."
            }
          ]
        },
        "HomeRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Home Region of the grant."
            }
          ]
        },
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "Principals": {
          "allOf": [
            {
              "$ref": "#/definitions/PrincipalArnList"
            },
            {
              "description": "The grant principals."
            }
          ]
        }
      },
      "required": [
        "ClientToken",
        "GrantName",
        "LicenseArn",
        "Principals",
        "HomeRegion",
        "AllowedOperations"
      ],
      "title": "CreateGrantRequest",
      "type": "object"
    },
    "CreateGrantResponse": {
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Grant ARN."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantStatus"
            },
            {
              "description": "Grant status."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant version."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateGrantVersionRequest": {
      "properties": {
        "AllowedOperations": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedOperationList"
            },
            {
              "description": "Allowed operations for the grant."
            }
          ]
        },
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            }
          ]
        },
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the grant."
            }
          ]
        },
        "GrantName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant name."
            }
          ]
        },
        "SourceVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Current version of the grant."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantStatus"
            },
            {
              "description": "Grant status."
            }
          ]
        }
      },
      "required": [
        "ClientToken",
        "GrantArn"
      ],
      "title": "CreateGrantVersionRequest",
      "type": "object"
    },
    "CreateGrantVersionResponse": {
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Grant ARN."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantStatus"
            },
            {
              "description": "Grant status."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "New version of the grant."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateLicenseConfigurationRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Description of the license configuration."
            }
          ]
        },
        "DisassociateWhenNotFound": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "When true, disassociates a resource when software is uninstalled."
            }
          ]
        },
        "LicenseCount": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxLong"
            },
            {
              "description": "Number of licenses managed by the license configuration."
            }
          ]
        },
        "LicenseCountHardLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "Indicates whether hard or soft license enforcement is used. Exceeding a hard limit blocks the launch of new instances."
            }
          ]
        },
        "LicenseCountingType": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseCountingType"
            },
            {
              "description": "Dimension used to track the license inventory."
            }
          ]
        },
        "LicenseRules": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "<p>License rules. The syntax is #name=value (for example, #allowedTenancy=EC2-DedicatedHost). The available rules vary by dimension, as follows.</p> <ul> <li> <p> <code>Cores</code> dimension: <code>allowedTenancy</code> | <code>licenseAffinityToHost</code> | <code>maximumCores</code> | <code>minimumCores</code> </p> </li> <li> <p> <code>Instances</code> dimension: <code>allowedTenancy</code> | <code>maximumCores</code> | <code>minimumCores</code> | <code>maximumSockets</code> | <code>minimumSockets</code> | <code>maximumVcpus</code> | <code>minimumVcpus</code> </p> </li> <li> <p> <code>Sockets</code> dimension: <code>allowedTenancy</code> | <code>licenseAffinityToHost</code> | <code>maximumSockets</code> | <code>minimumSockets</code> </p> </li> <li> <p> <code>vCPUs</code> dimension: <code>allowedTenancy</code> | <code>honorVcpuOptimization</code> | <code>maximumVcpus</code> | <code>minimumVcpus</code> </p> </li> </ul> <p>The unit for <code>licenseAffinityToHost</code> is days and the range is 1 to 180. The possible values for <code>allowedTenancy</code> are <code>EC2-Default</code>, <code>EC2-DedicatedHost</code>, and <code>EC2-DedicatedInstance</code>. The possible values for <code>honorVcpuOptimization</code> are <code>True</code> and <code>False</code>.</p>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Name of the license configuration."
            }
          ]
        },
        "ProductInformationList": {
          "allOf": [
            {
              "$ref": "#/definitions/ProductInformationList"
            },
            {
              "description": "Product information."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Tags to add to the license configuration."
            }
          ]
        }
      },
      "required": [
        "Name",
        "LicenseCountingType"
      ],
      "title": "CreateLicenseConfigurationRequest",
      "type": "object"
    },
    "CreateLicenseConfigurationResponse": {
      "properties": {
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateLicenseRequest": {
      "properties": {
        "Beneficiary": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License beneficiary."
            }
          ]
        },
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            }
          ]
        },
        "ConsumptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ConsumptionConfiguration"
            },
            {
              "description": "Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage."
            }
          ]
        },
        "Entitlements": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementList"
            },
            {
              "description": "License entitlements."
            }
          ]
        },
        "HomeRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Home Region for the license."
            }
          ]
        },
        "Issuer": {
          "allOf": [
            {
              "$ref": "#/definitions/Issuer"
            },
            {
              "description": "License issuer."
            }
          ]
        },
        "LicenseMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataList"
            },
            {
              "description": "Information about the license."
            }
          ]
        },
        "LicenseName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License name."
            }
          ]
        },
        "ProductName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Product name."
            }
          ]
        },
        "ProductSKU": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Product SKU."
            }
          ]
        },
        "Validity": {
          "allOf": [
            {
              "$ref": "#/definitions/DatetimeRange"
            },
            {
              "description": "Date and time range during which the license is valid, in ISO8601-UTC format."
            }
          ]
        }
      },
      "required": [
        "LicenseName",
        "ProductName",
        "ProductSKU",
        "Issuer",
        "HomeRegion",
        "Validity",
        "Entitlements",
        "Beneficiary",
        "ConsumptionConfiguration",
        "ClientToken"
      ],
      "title": "CreateLicenseRequest",
      "type": "object"
    },
    "CreateLicenseResponse": {
      "properties": {
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseStatus"
            },
            {
              "description": "License status."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License version."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateLicenseVersionRequest": {
      "properties": {
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
            }
          ]
        },
        "ConsumptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ConsumptionConfiguration"
            },
            {
              "description": "Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage."
            }
          ]
        },
        "Entitlements": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementList"
            },
            {
              "description": "License entitlements."
            }
          ]
        },
        "HomeRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Home Region of the license."
            }
          ]
        },
        "Issuer": {
          "allOf": [
            {
              "$ref": "#/definitions/Issuer"
            },
            {
              "description": "License issuer."
            }
          ]
        },
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "LicenseMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataList"
            },
            {
              "description": "Information about the license."
            }
          ]
        },
        "LicenseName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License name."
            }
          ]
        },
        "ProductName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Product name."
            }
          ]
        },
        "SourceVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Current version of the license."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseStatus"
            },
            {
              "description": "License status."
            }
          ]
        },
        "Validity": {
          "allOf": [
            {
              "$ref": "#/definitions/DatetimeRange"
            },
            {
              "description": "Date and time range during which the license is valid, in ISO8601-UTC format."
            }
          ]
        }
      },
      "required": [
        "LicenseArn",
        "LicenseName",
        "ProductName",
        "Issuer",
        "HomeRegion",
        "Validity",
        "Entitlements",
        "ConsumptionConfiguration",
        "Status",
        "ClientToken"
      ],
      "title": "CreateLicenseVersionRequest",
      "type": "object"
    },
    "CreateLicenseVersionResponse": {
      "properties": {
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "License ARN."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseStatus"
            },
            {
              "description": "License status."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "New version of the license."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateTokenRequest": {
      "properties": {
        "ClientToken": {
          "allOf": [
            {
              "$ref": "#/definitions/IdempotencyToken"
            },
            {
              "description": "Idempotency token, valid for 10 minutes."
            }
          ]
        },
        "ExpirationInDays": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "Token expiration, in days, counted from token creation. The default is 365 days."
            }
          ]
        },
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license. The ARN is mapped to the aud claim of the JWT token."
            }
          ]
        },
        "RoleArns": {
          "allOf": [
            {
              "$ref": "#/definitions/ArnList"
            },
            {
              "description": "Amazon Resource Name (ARN) of the IAM roles to embed in the token. License Manager does not check whether the roles are in use."
            }
          ]
        },
        "TokenProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxSize3StringList"
            },
            {
              "description": "Data specified by the caller to be included in the JWT token. The data is mapped to the amr claim of the JWT token."
            }
          ]
        }
      },
      "required": [
        "LicenseArn",
        "ClientToken"
      ],
      "title": "CreateTokenRequest",
      "type": "object"
    },
    "CreateTokenResponse": {
      "properties": {
        "Token": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenString"
            },
            {
              "description": "Refresh token, encoded as a JWT token."
            }
          ]
        },
        "TokenId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token ID."
            }
          ]
        },
        "TokenType": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenType"
            },
            {
              "description": "Token type."
            }
          ]
        }
      },
      "type": "object"
    },
    "DateTime": {
      "format": "date-time",
      "type": "string"
    },
    "DatetimeRange": {
      "description": "Describes a time range, in ISO8601-UTC format.",
      "properties": {
        "Begin": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "Start of the time range."
            }
          ]
        },
        "End": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "End of the time range."
            }
          ]
        }
      },
      "required": [
        "Begin"
      ],
      "type": "object"
    },
    "DeleteGrantRequest": {
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the grant."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Current version of the grant."
            }
          ]
        }
      },
      "required": [
        "GrantArn",
        "Version"
      ],
      "title": "DeleteGrantRequest",
      "type": "object"
    },
    "DeleteGrantResponse": {
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Grant ARN."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantStatus"
            },
            {
              "description": "Grant status."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant version."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteLicenseConfigurationRequest": {
      "properties": {
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "ID of the license configuration."
            }
          ]
        }
      },
      "required": [
        "LicenseConfigurationArn"
      ],
      "title": "DeleteLicenseConfigurationRequest",
      "type": "object"
    },
    "DeleteLicenseConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteLicenseRequest": {
      "properties": {
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "SourceVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Current version of the license."
            }
          ]
        }
      },
      "required": [
        "LicenseArn",
        "SourceVersion"
      ],
      "title": "DeleteLicenseRequest",
      "type": "object"
    },
    "DeleteLicenseResponse": {
      "properties": {
        "DeletionDate": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "Date on which the license is deleted."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseDeletionStatus"
            },
            {
              "description": "License status."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteTokenRequest": {
      "properties": {
        "TokenId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token ID."
            }
          ]
        }
      },
      "required": [
        "TokenId"
      ],
      "title": "DeleteTokenRequest",
      "type": "object"
    },
    "DeleteTokenResponse": {
      "properties": {},
      "type": "object"
    },
    "DigitalSignatureMethod": {
      "enum": [
        "JWT_PS384"
      ],
      "type": "string"
    },
    "Entitlement": {
      "description": "Describes a resource entitled for use with a license.",
      "properties": {
        "AllowCheckIn": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "Indicates whether check-ins are allowed."
            }
          ]
        },
        "MaxCount": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "Maximum entitlement count. Use if the unit is not None."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Entitlement name."
            }
          ]
        },
        "Overage": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "Indicates whether overages are allowed."
            }
          ]
        },
        "Unit": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementUnit"
            },
            {
              "description": "Entitlement unit."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Entitlement resource. Use only if the unit is None."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Unit"
      ],
      "type": "object"
    },
    "EntitlementData": {
      "description": "Data associated with an entitlement resource.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Entitlement data name."
            }
          ]
        },
        "Unit": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementDataUnit"
            },
            {
              "description": "Entitlement data unit."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Entitlement data value."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Unit"
      ],
      "type": "object"
    },
    "EntitlementDataList": {
      "items": {
        "$ref": "#/definitions/EntitlementData"
      },
      "type": "array"
    },
    "EntitlementDataUnit": {
      "enum": [
        "Count",
        "None",
        "Seconds",
        "Microseconds",
        "Milliseconds",
        "Bytes",
        "Kilobytes",
        "Megabytes",
        "Gigabytes",
        "Terabytes",
        "Bits",
        "Kilobits",
        "Megabits",
        "Gigabits",
        "Terabits",
        "Percent",
        "Bytes/Second",
        "Kilobytes/Second",
        "Megabytes/Second",
        "Gigabytes/Second",
        "Terabytes/Second",
        "Bits/Second",
        "Kilobits/Second",
        "Megabits/Second",
        "Gigabits/Second",
        "Terabits/Second",
        "Count/Second"
      ],
      "type": "string"
    },
    "EntitlementList": {
      "items": {
        "$ref": "#/definitions/Entitlement"
      },
      "type": "array"
    },
    "EntitlementNotAllowedException": {},
    "EntitlementUnit": {
      "enum": [
        "Count",
        "None",
        "Seconds",
        "Microseconds",
        "Milliseconds",
        "Bytes",
        "Kilobytes",
        "Megabytes",
        "Gigabytes",
        "Terabytes",
        "Bits",
        "Kilobits",
        "Megabits",
        "Gigabits",
        "Terabits",
        "Percent",
        "Bytes/Second",
        "Kilobytes/Second",
        "Megabytes/Second",
        "Gigabytes/Second",
        "Terabytes/Second",
        "Bits/Second",
        "Kilobits/Second",
        "Megabits/Second",
        "Gigabits/Second",
        "Terabits/Second",
        "Count/Second"
      ],
      "type": "string"
    },
    "EntitlementUsage": {
      "description": "Usage associated with an entitlement resource.",
      "properties": {
        "ConsumedValue": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Resource usage consumed."
            }
          ]
        },
        "MaxCount": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Maximum entitlement usage count."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Entitlement usage name."
            }
          ]
        },
        "Unit": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementDataUnit"
            },
            {
              "description": "Entitlement usage unit."
            }
          ]
        }
      },
      "required": [
        "Name",
        "ConsumedValue",
        "Unit"
      ],
      "type": "object"
    },
    "EntitlementUsageList": {
      "items": {
        "$ref": "#/definitions/EntitlementUsage"
      },
      "type": "array"
    },
    "ExtendLicenseConsumptionRequest": {
      "properties": {
        "DryRun": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Checks whether you have the required permissions for the action, without actually making the request. Provides an error response if you do not have the required permissions."
            }
          ]
        },
        "LicenseConsumptionToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License consumption token."
            }
          ]
        }
      },
      "required": [
        "LicenseConsumptionToken"
      ],
      "title": "ExtendLicenseConsumptionRequest",
      "type": "object"
    },
    "ExtendLicenseConsumptionResponse": {
      "properties": {
        "Expiration": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "Date and time at which the license consumption expires."
            }
          ]
        },
        "LicenseConsumptionToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License consumption token."
            }
          ]
        }
      },
      "type": "object"
    },
    "FailedDependencyException": {},
    "Filter": {
      "description": "A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterName"
            },
            {
              "description": "Name of the filter. Filter names are case-sensitive."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterValues"
            },
            {
              "description": "Filter values. Filter values are case-sensitive."
            }
          ]
        }
      },
      "type": "object"
    },
    "FilterLimitExceededException": {},
    "FilterList": {
      "items": {
        "$ref": "#/definitions/Filter"
      },
      "type": "array"
    },
    "FilterName": {
      "type": "string"
    },
    "FilterValue": {
      "type": "string"
    },
    "FilterValues": {
      "items": {
        "$ref": "#/definitions/FilterValue"
      },
      "type": "array"
    },
    "Filters": {
      "items": {
        "$ref": "#/definitions/Filter"
      },
      "type": "array"
    },
    "GetAccessTokenRequest": {
      "properties": {
        "Token": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenString"
            },
            {
              "description": "Refresh token, encoded as a JWT token."
            }
          ]
        },
        "TokenProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxSize3StringList"
            },
            {
              "description": "Token properties to validate against those present in the JWT token."
            }
          ]
        }
      },
      "required": [
        "Token"
      ],
      "title": "GetAccessTokenRequest",
      "type": "object"
    },
    "GetAccessTokenResponse": {
      "properties": {
        "AccessToken": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenString"
            },
            {
              "description": "Temporary access token."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetGrantRequest": {
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the grant."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant version."
            }
          ]
        }
      },
      "required": [
        "GrantArn"
      ],
      "title": "GetGrantRequest",
      "type": "object"
    },
    "GetGrantResponse": {
      "properties": {
        "Grant": {
          "allOf": [
            {
              "$ref": "#/definitions/Grant"
            },
            {
              "description": "Grant details."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetLicenseConfigurationRequest": {
      "properties": {
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        }
      },
      "required": [
        "LicenseConfigurationArn"
      ],
      "title": "GetLicenseConfigurationRequest",
      "type": "object"
    },
    "GetLicenseConfigurationResponse": {
      "properties": {
        "AutomatedDiscoveryInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomatedDiscoveryInformation"
            },
            {
              "description": "Automated discovery information."
            }
          ]
        },
        "ConsumedLicenseSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/ConsumedLicenseSummaryList"
            },
            {
              "description": "Summaries of the licenses consumed by resources."
            }
          ]
        },
        "ConsumedLicenses": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxLong"
            },
            {
              "description": "Number of licenses assigned to resources."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Description of the license configuration."
            }
          ]
        },
        "DisassociateWhenNotFound": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "When true, disassociates a resource when software is uninstalled."
            }
          ]
        },
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        },
        "LicenseConfigurationId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique ID for the license configuration."
            }
          ]
        },
        "LicenseCount": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxLong"
            },
            {
              "description": "Number of available licenses."
            }
          ]
        },
        "LicenseCountHardLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "Sets the number of available licenses as a hard limit."
            }
          ]
        },
        "LicenseCountingType": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseCountingType"
            },
            {
              "description": "Dimension on which the licenses are counted."
            }
          ]
        },
        "LicenseRules": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "License rules."
            }
          ]
        },
        "ManagedResourceSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/ManagedResourceSummaryList"
            },
            {
              "description": "Summaries of the managed resources."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Name of the license configuration."
            }
          ]
        },
        "OwnerAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Account ID of the owner of the license configuration."
            }
          ]
        },
        "ProductInformationList": {
          "allOf": [
            {
              "$ref": "#/definitions/ProductInformationList"
            },
            {
              "description": "Product information."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License configuration status."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Tags for the license configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetLicenseRequest": {
      "properties": {
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License version."
            }
          ]
        }
      },
      "required": [
        "LicenseArn"
      ],
      "title": "GetLicenseRequest",
      "type": "object"
    },
    "GetLicenseResponse": {
      "properties": {
        "License": {
          "allOf": [
            {
              "$ref": "#/definitions/License"
            },
            {
              "description": "License details."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetLicenseUsageRequest": {
      "properties": {
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        }
      },
      "required": [
        "LicenseArn"
      ],
      "title": "GetLicenseUsageRequest",
      "type": "object"
    },
    "GetLicenseUsageResponse": {
      "properties": {
        "LicenseUsage": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseUsage"
            },
            {
              "description": "License usage details."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetServiceSettingsRequest": {
      "properties": {},
      "title": "GetServiceSettingsRequest",
      "type": "object"
    },
    "GetServiceSettingsResponse": {
      "properties": {
        "EnableCrossAccountsDiscovery": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "Indicates whether cross-account discovery is enabled."
            }
          ]
        },
        "LicenseManagerResourceShareArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the AWS resource share. The License Manager master account will provide member accounts with access to this share."
            }
          ]
        },
        "OrganizationConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationConfiguration"
            },
            {
              "description": "Indicates whether AWS Organizations is integrated with License Manager for cross-account discovery."
            }
          ]
        },
        "S3BucketArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Regional S3 bucket path for storing reports, license trail event data, discovery data, and so on."
            }
          ]
        },
        "SnsTopicArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "SNS topic configured to receive notifications from License Manager."
            }
          ]
        }
      },
      "type": "object"
    },
    "Grant": {
      "description": "Describes a grant.",
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the grant."
            }
          ]
        },
        "GrantName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant name."
            }
          ]
        },
        "GrantStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantStatus"
            },
            {
              "description": "Grant status."
            }
          ]
        },
        "GrantedOperations": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedOperationList"
            },
            {
              "description": "Granted operations."
            }
          ]
        },
        "GranteePrincipalArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The grantee principal ARN."
            }
          ]
        },
        "HomeRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Home Region of the grant."
            }
          ]
        },
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "License ARN."
            }
          ]
        },
        "ParentArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Parent ARN."
            }
          ]
        },
        "StatusReason": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant status reason."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant version."
            }
          ]
        }
      },
      "required": [
        "GrantArn",
        "GrantName",
        "ParentArn",
        "LicenseArn",
        "GranteePrincipalArn",
        "HomeRegion",
        "GrantStatus",
        "Version",
        "GrantedOperations"
      ],
      "type": "object"
    },
    "GrantList": {
      "items": {
        "$ref": "#/definitions/Grant"
      },
      "type": "array"
    },
    "GrantStatus": {
      "enum": [
        "PENDING_WORKFLOW",
        "PENDING_ACCEPT",
        "REJECTED",
        "ACTIVE",
        "FAILED_WORKFLOW",
        "DELETED",
        "PENDING_DELETE",
        "DISABLED"
      ],
      "type": "string"
    },
    "GrantedLicense": {
      "description": "Describes a license that is granted to a grantee.",
      "properties": {
        "Beneficiary": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Granted license beneficiary."
            }
          ]
        },
        "ConsumptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ConsumptionConfiguration"
            },
            {
              "description": "Configuration for consumption of the license."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "Creation time of the granted license."
            }
          ]
        },
        "Entitlements": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementList"
            },
            {
              "description": "License entitlements."
            }
          ]
        },
        "HomeRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Home Region of the granted license."
            }
          ]
        },
        "Issuer": {
          "allOf": [
            {
              "$ref": "#/definitions/IssuerDetails"
            },
            {
              "description": "Granted license issuer."
            }
          ]
        },
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "LicenseMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataList"
            },
            {
              "description": "Granted license metadata."
            }
          ]
        },
        "LicenseName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License name."
            }
          ]
        },
        "ProductName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Product name."
            }
          ]
        },
        "ProductSKU": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Product SKU."
            }
          ]
        },
        "ReceivedMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ReceivedMetadata"
            },
            {
              "description": "Granted license received metadata."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseStatus"
            },
            {
              "description": "Granted license status."
            }
          ]
        },
        "Validity": {
          "allOf": [
            {
              "$ref": "#/definitions/DatetimeRange"
            },
            {
              "description": "Date and time range during which the granted license is valid, in ISO8601-UTC format."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Version of the granted license."
            }
          ]
        }
      },
      "type": "object"
    },
    "GrantedLicenseList": {
      "items": {
        "$ref": "#/definitions/GrantedLicense"
      },
      "type": "array"
    },
    "ISO8601DateTime": {
      "maxLength": 50,
      "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[0-1]|0[1-9]|[1-2][0-9])T(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-](?:2[ 0-3]|[0-1][0-9]):[0-5][0-9])+$",
      "type": "string"
    },
    "IdempotencyToken": {
      "maxLength": 60,
      "pattern": "\\S+",
      "type": "string"
    },
    "Integer": {
      "type": "integer"
    },
    "InvalidParameterValueException": {},
    "InvalidResourceStateException": {},
    "InventoryFilter": {
      "description": "An inventory filter.",
      "properties": {
        "Condition": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryFilterCondition"
            },
            {
              "description": "Condition of the filter."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Name of the filter."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Value of the filter."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Condition"
      ],
      "type": "object"
    },
    "InventoryFilterCondition": {
      "enum": [
        "EQUALS",
        "NOT_EQUALS",
        "BEGINS_WITH",
        "CONTAINS"
      ],
      "type": "string"
    },
    "InventoryFilterList": {
      "items": {
        "$ref": "#/definitions/InventoryFilter"
      },
      "type": "array"
    },
    "Issuer": {
      "description": "Details about the issuer of a license.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Issuer name."
            }
          ]
        },
        "SignKey": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Asymmetric CMK from AWS Key Management Service. The CMK must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "IssuerDetails": {
      "description": "Details associated with the issuer of a license.",
      "properties": {
        "KeyFingerprint": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Issuer key fingerprint."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Issuer name."
            }
          ]
        },
        "SignKey": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Asymmetric CMK from AWS Key Management Service. The CMK must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm."
            }
          ]
        }
      },
      "type": "object"
    },
    "License": {
      "description": "Software license that is managed in AWS License Manager.",
      "properties": {
        "Beneficiary": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License beneficiary."
            }
          ]
        },
        "ConsumptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ConsumptionConfiguration"
            },
            {
              "description": "Configuration for consumption of the license."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "License creation time."
            }
          ]
        },
        "Entitlements": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementList"
            },
            {
              "description": "License entitlements."
            }
          ]
        },
        "HomeRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Home Region of the license."
            }
          ]
        },
        "Issuer": {
          "allOf": [
            {
              "$ref": "#/definitions/IssuerDetails"
            },
            {
              "description": "License issuer."
            }
          ]
        },
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "LicenseMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataList"
            },
            {
              "description": "License metadata."
            }
          ]
        },
        "LicenseName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License name."
            }
          ]
        },
        "ProductName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Product name."
            }
          ]
        },
        "ProductSKU": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Product SKU."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseStatus"
            },
            {
              "description": "License status."
            }
          ]
        },
        "Validity": {
          "allOf": [
            {
              "$ref": "#/definitions/DatetimeRange"
            },
            {
              "description": "Date and time range during which the license is valid, in ISO8601-UTC format."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "License version."
            }
          ]
        }
      },
      "type": "object"
    },
    "LicenseConfiguration": {
      "description": "A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), host affinity (how long a VM must be associated with a host), and the number of licenses purchased and used.",
      "properties": {
        "AutomatedDiscoveryInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/AutomatedDiscoveryInformation"
            },
            {
              "description": "Automated discovery information."
            }
          ]
        },
        "ConsumedLicenseSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/ConsumedLicenseSummaryList"
            },
            {
              "description": "Summaries for licenses consumed by various resources."
            }
          ]
        },
        "ConsumedLicenses": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxLong"
            },
            {
              "description": "Number of licenses consumed. "
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Description of the license configuration."
            }
          ]
        },
        "DisassociateWhenNotFound": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "When true, disassociates a resource when software is uninstalled."
            }
          ]
        },
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        },
        "LicenseConfigurationId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Unique ID of the license configuration."
            }
          ]
        },
        "LicenseCount": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxLong"
            },
            {
              "description": "Number of licenses managed by the license configuration."
            }
          ]
        },
        "LicenseCountHardLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "Number of available licenses as a hard limit."
            }
          ]
        },
        "LicenseCountingType": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseCountingType"
            },
            {
              "description": "Dimension to use to track the license inventory."
            }
          ]
        },
        "LicenseRules": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "License rules."
            }
          ]
        },
        "ManagedResourceSummaryList": {
          "allOf": [
            {
              "$ref": "#/definitions/ManagedResourceSummaryList"
            },
            {
              "description": "Summaries for managed resources."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Name of the license configuration."
            }
          ]
        },
        "OwnerAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Account ID of the license configuration's owner."
            }
          ]
        },
        "ProductInformationList": {
          "allOf": [
            {
              "$ref": "#/definitions/ProductInformationList"
            },
            {
              "description": "Product information."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Status of the license configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "LicenseConfigurationAssociation": {
      "description": "Describes an association with a license configuration.",
      "properties": {
        "AmiAssociationScope": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Scope of AMI associations. The possible value is <code>cross-account</code>."
            }
          ]
        },
        "AssociationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "Time when the license configuration was associated with the resource."
            }
          ]
        },
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "ResourceOwnerId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "ID of the AWS account that owns the resource consuming licenses."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "Type of server resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "LicenseConfigurationAssociations": {
      "items": {
        "$ref": "#/definitions/LicenseConfigurationAssociation"
      },
      "type": "array"
    },
    "LicenseConfigurationStatus": {
      "enum": [
        "AVAILABLE",
        "DISABLED"
      ],
      "type": "string"
    },
    "LicenseConfigurationUsage": {
      "description": "Details about the usage of a resource associated with a license configuration.",
      "properties": {
        "AssociationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "Time when the license configuration was initially associated with the resource."
            }
          ]
        },
        "ConsumedLicenses": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxLong"
            },
            {
              "description": "Number of licenses consumed by the resource."
            }
          ]
        },
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "ResourceOwnerId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "ID of the account that owns the resource."
            }
          ]
        },
        "ResourceStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Status of the resource."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "Type of resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "LicenseConfigurationUsageList": {
      "items": {
        "$ref": "#/definitions/LicenseConfigurationUsage"
      },
      "type": "array"
    },
    "LicenseConfigurations": {
      "items": {
        "$ref": "#/definitions/LicenseConfiguration"
      },
      "type": "array"
    },
    "LicenseCountingType": {
      "enum": [
        "vCPU",
        "Instance",
        "Core",
        "Socket"
      ],
      "type": "string"
    },
    "LicenseDeletionStatus": {
      "enum": [
        "PENDING_DELETE",
        "DELETED"
      ],
      "type": "string"
    },
    "LicenseList": {
      "items": {
        "$ref": "#/definitions/License"
      },
      "type": "array"
    },
    "LicenseOperationFailure": {
      "description": "Describes the failure of a license operation.",
      "properties": {
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Error message."
            }
          ]
        },
        "FailureTime": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTime"
            },
            {
              "description": "Failure time."
            }
          ]
        },
        "MetadataList": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataList"
            },
            {
              "description": "Reserved."
            }
          ]
        },
        "OperationName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Name of the operation."
            }
          ]
        },
        "OperationRequestedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The requester is \"License Manager Automated Discovery\"."
            }
          ]
        },
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "ResourceOwnerId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "ID of the AWS account that owns the resource."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "Resource type."
            }
          ]
        }
      },
      "type": "object"
    },
    "LicenseOperationFailureList": {
      "items": {
        "$ref": "#/definitions/LicenseOperationFailure"
      },
      "type": "array"
    },
    "LicenseSpecification": {
      "description": "Details for associating a license configuration with a resource.",
      "properties": {
        "AmiAssociationScope": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Scope of AMI associations. The possible value is <code>cross-account</code>."
            }
          ]
        },
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        }
      },
      "required": [
        "LicenseConfigurationArn"
      ],
      "type": "object"
    },
    "LicenseSpecifications": {
      "items": {
        "$ref": "#/definitions/LicenseSpecification"
      },
      "type": "array"
    },
    "LicenseStatus": {
      "enum": [
        "AVAILABLE",
        "PENDING_AVAILABLE",
        "DEACTIVATED",
        "SUSPENDED",
        "EXPIRED",
        "PENDING_DELETE",
        "DELETED"
      ],
      "type": "string"
    },
    "LicenseUsage": {
      "description": "Describes the entitlement usage associated with a license.",
      "properties": {
        "EntitlementUsages": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementUsageList"
            },
            {
              "description": "License entitlement usages."
            }
          ]
        }
      },
      "type": "object"
    },
    "LicenseUsageException": {},
    "ListAssociationsForLicenseConfigurationRequest": {
      "properties": {
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of a license configuration."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxInteger"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "required": [
        "LicenseConfigurationArn"
      ],
      "title": "ListAssociationsForLicenseConfigurationRequest",
      "type": "object"
    },
    "ListAssociationsForLicenseConfigurationResponse": {
      "properties": {
        "LicenseConfigurationAssociations": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseConfigurationAssociations"
            },
            {
              "description": "Information about the associations for the license configuration."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDistributedGrantsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "<p>Filters to scope the results. The following filters are supported:</p> <ul> <li> <p> <code>LicenseARN</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>PrincipalARN</code> </p> </li> <li> <p> <code>ParentARN</code> </p> </li> </ul>"
            }
          ]
        },
        "GrantArns": {
          "allOf": [
            {
              "$ref": "#/definitions/ArnList"
            },
            {
              "description": "Amazon Resource Names (ARNs) of the grants."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxSize100"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "title": "ListDistributedGrantsRequest",
      "type": "object"
    },
    "ListDistributedGrantsResponse": {
      "properties": {
        "Grants": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantList"
            },
            {
              "description": "Distributed grant details."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListFailuresForLicenseConfigurationOperationsRequest": {
      "properties": {
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name of the license configuration."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxInteger"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "required": [
        "LicenseConfigurationArn"
      ],
      "title": "ListFailuresForLicenseConfigurationOperationsRequest",
      "type": "object"
    },
    "ListFailuresForLicenseConfigurationOperationsResponse": {
      "properties": {
        "LicenseOperationFailureList": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseOperationFailureList"
            },
            {
              "description": "License configuration operations that failed."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListLicenseConfigurationsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/Filters"
            },
            {
              "description": "<p>Filters to scope the results. The following filters and logical operators are supported:</p> <ul> <li> <p> <code>licenseCountingType</code> - The dimension on which licenses are counted. Possible values are <code>vCPU</code> | <code>Instance</code> | <code>Core</code> | <code>Socket</code>. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li> <li> <p> <code>enforceLicenseCount</code> - A Boolean value that indicates whether hard license enforcement is used. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li> <li> <p> <code>usagelimitExceeded</code> - A Boolean value that indicates whether the available licenses have been exceeded. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li> </ul>"
            }
          ]
        },
        "LicenseConfigurationArns": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "Amazon Resource Names (ARN) of the license configurations."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxInteger"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "title": "ListLicenseConfigurationsRequest",
      "type": "object"
    },
    "ListLicenseConfigurationsResponse": {
      "properties": {
        "LicenseConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseConfigurations"
            },
            {
              "description": "Information about the license configurations."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListLicenseSpecificationsForResourceRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxInteger"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        },
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of a resource that has an associated license configuration."
            }
          ]
        }
      },
      "required": [
        "ResourceArn"
      ],
      "title": "ListLicenseSpecificationsForResourceRequest",
      "type": "object"
    },
    "ListLicenseSpecificationsForResourceResponse": {
      "properties": {
        "LicenseSpecifications": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseSpecifications"
            },
            {
              "description": "License configurations associated with a resource."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListLicenseVersionsRequest": {
      "properties": {
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxSize100"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "required": [
        "LicenseArn"
      ],
      "title": "ListLicenseVersionsRequest",
      "type": "object"
    },
    "ListLicenseVersionsResponse": {
      "properties": {
        "Licenses": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseList"
            },
            {
              "description": "License details."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListLicensesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "<p>Filters to scope the results. The following filters are supported:</p> <ul> <li> <p> <code>Beneficiary</code> </p> </li> <li> <p> <code>ProductSKU</code> </p> </li> <li> <p> <code>KeyFingerprint</code> </p> </li> <li> <p> <code>Status</code> </p> </li> </ul>"
            }
          ]
        },
        "LicenseArns": {
          "allOf": [
            {
              "$ref": "#/definitions/ArnList"
            },
            {
              "description": "Amazon Resource Names (ARNs) of the licenses."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxSize100"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "title": "ListLicensesRequest",
      "type": "object"
    },
    "ListLicensesResponse": {
      "properties": {
        "Licenses": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseList"
            },
            {
              "description": "License details."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListReceivedGrantsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "<p>Filters to scope the results. The following filters are supported:</p> <ul> <li> <p> <code>LicenseARN</code> </p> </li> <li> <p> <code>Status</code> </p> </li> </ul>"
            }
          ]
        },
        "GrantArns": {
          "allOf": [
            {
              "$ref": "#/definitions/ArnList"
            },
            {
              "description": "Amazon Resource Names (ARNs) of the grants."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxSize100"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "title": "ListReceivedGrantsRequest",
      "type": "object"
    },
    "ListReceivedGrantsResponse": {
      "properties": {
        "Grants": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantList"
            },
            {
              "description": "Received grant details."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListReceivedLicensesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "<p>Filters to scope the results. The following filters are supported:</p> <ul> <li> <p> <code>ProductSKU</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>KeyFingerprint</code> </p> </li> <li> <p> <code>Issuer</code> </p> </li> </ul>"
            }
          ]
        },
        "LicenseArns": {
          "allOf": [
            {
              "$ref": "#/definitions/ArnList"
            },
            {
              "description": "Amazon Resource Names (ARNs) of the licenses."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxSize100"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "title": "ListReceivedLicensesRequest",
      "type": "object"
    },
    "ListReceivedLicensesResponse": {
      "properties": {
        "Licenses": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantedLicenseList"
            },
            {
              "description": "Received license details."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListResourceInventoryRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/InventoryFilterList"
            },
            {
              "description": "<p>Filters to scope the results. The following filters and logical operators are supported:</p> <ul> <li> <p> <code>account_id</code> - The ID of the AWS account that owns the resource. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li> <li> <p> <code>application_name</code> - The name of the application. Logical operators are <code>EQUALS</code> | <code>BEGINS_WITH</code>.</p> </li> <li> <p> <code>license_included</code> - The type of license included. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>. Possible values are <code>sql-server-enterprise</code> | <code>sql-server-standard</code> | <code>sql-server-web</code> | <code>windows-server-datacenter</code>.</p> </li> <li> <p> <code>platform</code> - The platform of the resource. Logical operators are <code>EQUALS</code> | <code>BEGINS_WITH</code>.</p> </li> <li> <p> <code>resource_id</code> - The ID of the resource. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li> <li> <p> <code>tag:&lt;key&gt;</code> - The key/value combination of a tag assigned to the resource. Logical operators are <code>EQUALS</code> (single account) or <code>EQUALS</code> | <code>NOT_EQUALS</code> (cross account).</p> </li> </ul>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxInteger"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "title": "ListResourceInventoryRequest",
      "type": "object"
    },
    "ListResourceInventoryResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        },
        "ResourceInventoryList": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceInventoryList"
            },
            {
              "description": "Information about the resources."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        }
      },
      "required": [
        "ResourceArn"
      ],
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Information about the tags."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTokensRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterList"
            },
            {
              "description": "<p>Filters to scope the results. The following filter is supported:</p> <ul> <li> <p> <code>licenseArns</code> </p> </li> </ul>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxSize100"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        },
        "TokenIds": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "Token IDs."
            }
          ]
        }
      },
      "title": "ListTokensRequest",
      "type": "object"
    },
    "ListTokensResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        },
        "Tokens": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenList"
            },
            {
              "description": "Received token details."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListUsageForLicenseConfigurationRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/Filters"
            },
            {
              "description": "<p>Filters to scope the results. The following filters and logical operators are supported:</p> <ul> <li> <p> <code>resourceArn</code> - The ARN of the license configuration resource. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li> <li> <p> <code>resourceType</code> - The resource type (<code>EC2_INSTANCE</code> | <code>EC2_HOST</code> | <code>EC2_AMI</code> | <code>SYSTEMS_MANAGER_MANAGED_INSTANCE</code>). Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li> <li> <p> <code>resourceAccount</code> - The ID of the account that owns the resource. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li> </ul>"
            }
          ]
        },
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxInteger"
            },
            {
              "description": "Maximum number of results to return in a single call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "required": [
        "LicenseConfigurationArn"
      ],
      "title": "ListUsageForLicenseConfigurationRequest",
      "type": "object"
    },
    "ListUsageForLicenseConfigurationResponse": {
      "properties": {
        "LicenseConfigurationUsageList": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseConfigurationUsageList"
            },
            {
              "description": "Information about the license configurations."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token for the next set of results."
            }
          ]
        }
      },
      "type": "object"
    },
    "Long": {
      "type": "integer"
    },
    "ManagedResourceSummary": {
      "description": "Summary information about a managed resource.",
      "properties": {
        "AssociationCount": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxLong"
            },
            {
              "description": "Number of resources associated with licenses."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "Type of resource associated with a license."
            }
          ]
        }
      },
      "type": "object"
    },
    "ManagedResourceSummaryList": {
      "items": {
        "$ref": "#/definitions/ManagedResourceSummary"
      },
      "type": "array"
    },
    "MaxSize100": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "MaxSize3StringList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "maxItems": 3,
      "type": "array"
    },
    "Metadata": {
      "description": "Describes key/value pairs.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The key name."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The value."
            }
          ]
        }
      },
      "type": "object"
    },
    "MetadataList": {
      "items": {
        "$ref": "#/definitions/Metadata"
      },
      "type": "array"
    },
    "NoEntitlementsAllowedException": {},
    "OrganizationConfiguration": {
      "description": "Configuration information for AWS Organizations.",
      "properties": {
        "EnableIntegration": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Enables AWS Organization integration."
            }
          ]
        }
      },
      "required": [
        "EnableIntegration"
      ],
      "type": "object"
    },
    "PrincipalArnList": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "ProductInformation": {
      "description": "Describes product information for a license configuration.",
      "properties": {
        "ProductInformationFilterList": {
          "allOf": [
            {
              "$ref": "#/definitions/ProductInformationFilterList"
            },
            {
              "description": "<p>Product information filters.</p> <p>The following filters and logical operators are supported when the resource type is <code>SSM_MANAGED</code>:</p> <ul> <li> <p> <code>Application Name</code> - The name of the application. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>Application Publisher</code> - The publisher of the application. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>Application Version</code> - The version of the application. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>Platform Name</code> - The name of the platform. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>Platform Type</code> - The platform type. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>License Included</code> - The type of license included. Logical operators are <code>EQUALS</code> and <code>NOT_EQUALS</code>. Possible values are: <code>sql-server-enterprise</code> | <code>sql-server-standard</code> | <code>sql-server-web</code> | <code>windows-server-datacenter</code>.</p> </li> </ul> <p>The following filters and logical operators are supported when the resource type is <code>RDS</code>:</p> <ul> <li> <p> <code>Engine Edition</code> - The edition of the database engine. Logical operator is <code>EQUALS</code>. Possible values are: <code>oracle-ee</code> | <code>oracle-se</code> | <code>oracle-se1</code> | <code>oracle-se2</code>.</p> </li> <li> <p> <code>License Pack</code> - The license pack. Logical operator is <code>EQUALS</code>. Possible values are: <code>data guard</code> | <code>diagnostic pack sqlt</code> | <code>tuning pack sqlt</code> | <code>ols</code> | <code>olap</code>.</p> </li> </ul>"
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Resource type. The possible values are <code>SSM_MANAGED</code> | <code>RDS</code>."
            }
          ]
        }
      },
      "required": [
        "ResourceType",
        "ProductInformationFilterList"
      ],
      "type": "object"
    },
    "ProductInformationFilter": {
      "description": "Describes product information filters.",
      "properties": {
        "ProductInformationFilterComparator": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Logical operator."
            }
          ]
        },
        "ProductInformationFilterName": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Filter name."
            }
          ]
        },
        "ProductInformationFilterValue": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "Filter value."
            }
          ]
        }
      },
      "required": [
        "ProductInformationFilterName",
        "ProductInformationFilterValue",
        "ProductInformationFilterComparator"
      ],
      "type": "object"
    },
    "ProductInformationFilterList": {
      "items": {
        "$ref": "#/definitions/ProductInformationFilter"
      },
      "type": "array"
    },
    "ProductInformationList": {
      "items": {
        "$ref": "#/definitions/ProductInformation"
      },
      "type": "array"
    },
    "ProvisionalConfiguration": {
      "description": "Details about a provisional configuration.",
      "properties": {
        "MaxTimeToLiveInMinutes": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxInteger"
            },
            {
              "description": "Maximum time for the provisional configuration, in minutes."
            }
          ]
        }
      },
      "required": [
        "MaxTimeToLiveInMinutes"
      ],
      "type": "object"
    },
    "RateLimitExceededException": {},
    "ReceivedMetadata": {
      "description": "Metadata associated with received licenses and grants.",
      "properties": {
        "AllowedOperations": {
          "allOf": [
            {
              "$ref": "#/definitions/AllowedOperationList"
            },
            {
              "description": "Allowed operations."
            }
          ]
        },
        "ReceivedStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ReceivedStatus"
            },
            {
              "description": "Received status."
            }
          ]
        }
      },
      "type": "object"
    },
    "ReceivedStatus": {
      "enum": [
        "PENDING_WORKFLOW",
        "PENDING_ACCEPT",
        "REJECTED",
        "ACTIVE",
        "FAILED_WORKFLOW",
        "DELETED",
        "DISABLED"
      ],
      "type": "string"
    },
    "RedirectException": {},
    "RejectGrantRequest": {
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Amazon Resource Name (ARN) of the grant."
            }
          ]
        }
      },
      "required": [
        "GrantArn"
      ],
      "title": "RejectGrantRequest",
      "type": "object"
    },
    "RejectGrantResponse": {
      "properties": {
        "GrantArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Grant ARN."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/GrantStatus"
            },
            {
              "description": "Grant status."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Grant version."
            }
          ]
        }
      },
      "type": "object"
    },
    "RenewType": {
      "enum": [
        "None",
        "Weekly",
        "Monthly"
      ],
      "type": "string"
    },
    "ResourceInventory": {
      "description": "Details about a resource.",
      "properties": {
        "Platform": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Platform of the resource."
            }
          ]
        },
        "PlatformVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Platform version of the resource in the inventory."
            }
          ]
        },
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the resource."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "ID of the resource."
            }
          ]
        },
        "ResourceOwningAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "ID of the account that owns the resource."
            }
          ]
        },
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "Type of resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceInventoryList": {
      "items": {
        "$ref": "#/definitions/ResourceInventory"
      },
      "type": "array"
    },
    "ResourceLimitExceededException": {},
    "ResourceNotFoundException": {},
    "ResourceType": {
      "enum": [
        "EC2_INSTANCE",
        "EC2_HOST",
        "EC2_AMI",
        "RDS",
        "SYSTEMS_MANAGER_MANAGED_INSTANCE"
      ],
      "type": "string"
    },
    "ServerInternalException": {},
    "SignedToken": {
      "minLength": 4096,
      "type": "string"
    },
    "String": {
      "type": "string"
    },
    "StringList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "Tag": {
      "description": "Details about a tag for a license configuration.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Tag key."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Tag value."
            }
          ]
        }
      },
      "type": "object"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "One or more tags."
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "TokenData": {
      "description": "Describes a token.",
      "properties": {
        "ExpirationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ISO8601DateTime"
            },
            {
              "description": "Token expiration time, in ISO8601-UTC format."
            }
          ]
        },
        "LicenseArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license."
            }
          ]
        },
        "RoleArns": {
          "allOf": [
            {
              "$ref": "#/definitions/ArnList"
            },
            {
              "description": "Amazon Resource Names (ARN) of the roles included in the token."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token status. The possible values are <code>AVAILABLE</code> and <code>DELETED</code>."
            }
          ]
        },
        "TokenId": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Token ID."
            }
          ]
        },
        "TokenProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxSize3StringList"
            },
            {
              "description": "Data specified by the caller."
            }
          ]
        },
        "TokenType": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Type of token generated. The supported value is <code>REFRESH_TOKEN</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "TokenList": {
      "items": {
        "$ref": "#/definitions/TokenData"
      },
      "type": "array"
    },
    "TokenString": {
      "maxLength": 4096,
      "pattern": "\\S+",
      "type": "string"
    },
    "TokenType": {
      "enum": [
        "REFRESH_TOKEN"
      ],
      "type": "string"
    },
    "UnsupportedDigitalSignatureMethodException": {},
    "UntagResourceRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeyList"
            },
            {
              "description": "Keys identifying the tags to remove."
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateLicenseConfigurationRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "New description of the license configuration."
            }
          ]
        },
        "DisassociateWhenNotFound": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "When true, disassociates a resource when software is uninstalled."
            }
          ]
        },
        "LicenseConfigurationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the license configuration."
            }
          ]
        },
        "LicenseConfigurationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseConfigurationStatus"
            },
            {
              "description": "New status of the license configuration."
            }
          ]
        },
        "LicenseCount": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxLong"
            },
            {
              "description": "New number of licenses managed by the license configuration."
            }
          ]
        },
        "LicenseCountHardLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "New hard limit of the number of available licenses."
            }
          ]
        },
        "LicenseRules": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "New license rule. The only rule that you can add after you create a license configuration is licenseAffinityToHost."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "New name of the license configuration."
            }
          ]
        },
        "ProductInformationList": {
          "allOf": [
            {
              "$ref": "#/definitions/ProductInformationList"
            },
            {
              "description": "New product information."
            }
          ]
        }
      },
      "required": [
        "LicenseConfigurationArn"
      ],
      "title": "UpdateLicenseConfigurationRequest",
      "type": "object"
    },
    "UpdateLicenseConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateLicenseSpecificationsForResourceRequest": {
      "properties": {
        "AddLicenseSpecifications": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseSpecifications"
            },
            {
              "description": "ARNs of the license configurations to add."
            }
          ]
        },
        "RemoveLicenseSpecifications": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseSpecifications"
            },
            {
              "description": "ARNs of the license configurations to remove."
            }
          ]
        },
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the AWS resource."
            }
          ]
        }
      },
      "required": [
        "ResourceArn"
      ],
      "title": "UpdateLicenseSpecificationsForResourceRequest",
      "type": "object"
    },
    "UpdateLicenseSpecificationsForResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateServiceSettingsRequest": {
      "properties": {
        "EnableCrossAccountsDiscovery": {
          "allOf": [
            {
              "$ref": "#/definitions/BoxBoolean"
            },
            {
              "description": "Activates cross-account discovery."
            }
          ]
        },
        "OrganizationConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationConfiguration"
            },
            {
              "description": "Enables integration with AWS Organizations for cross-account discovery."
            }
          ]
        },
        "S3BucketArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the Amazon S3 bucket where the License Manager information is stored."
            }
          ]
        },
        "SnsTopicArn": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Amazon Resource Name (ARN) of the Amazon SNS topic used for License Manager alerts."
            }
          ]
        }
      },
      "title": "UpdateServiceSettingsRequest",
      "type": "object"
    },
    "UpdateServiceSettingsResponse": {
      "properties": {},
      "type": "object"
    },
    "ValidationException": {}
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/license-manager/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}