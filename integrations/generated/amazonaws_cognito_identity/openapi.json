{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Cognito Identity",
    "version": "2014-06-30",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-identity-2014-06-30.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "cognito-identity",
    "x-datafire": {
      "name": "amazonaws_cognito_identity",
      "type": "openapi"
    }
  },
  "host": "cognito-identity.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=AWSCognitoIdentityService.CreateIdentityPool": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.CreateIdentityPool"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateIdentityPoolInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IdentityPool"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "485": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates a new identity pool. The identity pool is a store of user identity information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "CreateIdentityPool"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentities": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.DeleteIdentities"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteIdentitiesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteIdentitiesResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Deletes identities from an identity pool. You can specify a list of 1-60 identities that you want to delete.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "DeleteIdentities"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentityPool": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.DeleteIdentityPool"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteIdentityPoolInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Deletes an identity pool. Once a pool is deleted, users will not be able to authenticate with the pool.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "DeleteIdentityPool"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentity": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.DescribeIdentity"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeIdentityInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IdentityDescription"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Returns metadata related to the given identity, including when the identity was created and any associated linked logins.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "DescribeIdentity"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentityPool": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.DescribeIdentityPool"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeIdentityPoolInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IdentityPool"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Gets details about a particular identity pool, including the pool name, ID description, creation date, and current number of users.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "DescribeIdentityPool"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetCredentialsForIdentity": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.GetCredentialsForIdentity"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCredentialsForIdentityInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCredentialsForIdentityResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InvalidIdentityPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidIdentityPoolConfigurationException"
            }
          },
          "486": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "487": {
            "description": "ExternalServiceException",
            "schema": {
              "$ref": "#/definitions/ExternalServiceException"
            }
          }
        },
        "description": "<p>Returns credentials for the provided identity ID. Any provided logins will be validated against supported login providers. If the token is for cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service with the appropriate role for the token.</p> <p>This is a public API. You do not need any credentials to call this API.</p>",
        "operationId": "GetCredentialsForIdentity"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetId": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.GetId"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetIdInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetIdResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "487": {
            "description": "ExternalServiceException",
            "schema": {
              "$ref": "#/definitions/ExternalServiceException"
            }
          }
        },
        "description": "<p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.</p> <p>This is a public API. You do not need any credentials to call this API.</p>",
        "operationId": "GetId"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetIdentityPoolRoles": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.GetIdentityPoolRoles"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetIdentityPoolRolesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetIdentityPoolRolesResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Gets the roles for an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "GetIdentityPoolRoles"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdToken": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.GetOpenIdToken"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetOpenIdTokenInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetOpenIdTokenResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "486": {
            "description": "ExternalServiceException",
            "schema": {
              "$ref": "#/definitions/ExternalServiceException"
            }
          }
        },
        "description": "<p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by <a>GetId</a>. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.</p> <p>The OpenId token is valid for 10 minutes.</p> <p>This is a public API. You do not need any credentials to call this API.</p>",
        "operationId": "GetOpenIdToken"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetOpenIdTokenForDeveloperIdentityInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetOpenIdTokenForDeveloperIdentityResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "486": {
            "description": "DeveloperUserAlreadyRegisteredException",
            "schema": {
              "$ref": "#/definitions/DeveloperUserAlreadyRegisteredException"
            }
          }
        },
        "description": "<p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect token for a user authenticated by your backend authentication process. Supplying multiple logins will create an implicit linked account. You can only specify one developer provider as part of the <code>Logins</code> map, which is linked to the identity pool. The developer provider is the \"domain\" by which Cognito will refer to your users.</p> <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity and to link new logins (that is, user credentials issued by a public provider or developer provider) to an existing identity. When you want to create a new identity, the <code>IdentityId</code> should be null. When you want to associate a new login with an existing authenticated/unauthenticated identity, you can do so by providing the existing <code>IdentityId</code>. This API will create the identity in the specified <code>IdentityPoolId</code>.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "GetOpenIdTokenForDeveloperIdentity"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.ListIdentities": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.ListIdentities"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListIdentitiesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIdentitiesResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Lists the identities in an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "ListIdentities"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.ListIdentityPools": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSCognitoIdentityService.ListIdentityPools"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListIdentityPoolsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIdentityPoolsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Lists all of the Cognito identity pools registered for your account.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "ListIdentityPools"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p> <p>A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>You can use this action up to 10 times per second, per account.</p>",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.LookupDeveloperIdentity": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.LookupDeveloperIdentity"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LookupDeveloperIdentityInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LookupDeveloperIdentityResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Retrieves the <code>IdentityID</code> associated with a <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code> values associated with an <code>IdentityId</code> for an existing identity. Either <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you supply only one of these values, the other value will be searched in the database and returned as a part of the response. If you supply both, <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If the values are verified against the database, the response returns both values and is the same as the request. Otherwise a <code>ResourceConflictException</code> is thrown.</p> <p> <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane operations: for example, to enable customer service to locate an identity ID by username. If you are using it for higher-volume operations such as user authentication, your requests are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a better option for higher-volume operations for user authentication.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "LookupDeveloperIdentity"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.MergeDeveloperIdentities": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.MergeDeveloperIdentities"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MergeDeveloperIdentitiesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MergeDeveloperIdentitiesResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Merges two users having different <code>IdentityId</code>s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.</p> <p>The number of linked logins is limited to 20. So, the number of linked logins for the source user, <code>SourceUserIdentifier</code>, and the destination user, <code>DestinationUserIdentifier</code>, together should not be larger than 20. Otherwise, an exception will be thrown.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "MergeDeveloperIdentities"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.SetIdentityPoolRoles": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.SetIdentityPoolRoles"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetIdentityPoolRolesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "<p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "SetIdentityPoolRoles"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can use to categorize and manage identity pools in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of an identity pool, one for testing and another for production, you might assign an <code>Environment</code> tag key to both identity pools. The value of this key might be <code>Test</code> for one identity pool and <code>Production</code> for the other.</p> <p>Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your identity pools. In an IAM policy, you can constrain permissions for identity pools based on specific tags or tag values.</p> <p>You can use this action up to 5 times per second, per account. An identity pool can have as many as 50 tags.</p>",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.UnlinkDeveloperIdentity": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.UnlinkDeveloperIdentity"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlinkDeveloperIdentityInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "<p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "UnlinkDeveloperIdentity"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.UnlinkIdentity": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.UnlinkIdentity"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlinkIdentityInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "486": {
            "description": "ExternalServiceException",
            "schema": {
              "$ref": "#/definitions/ExternalServiceException"
            }
          }
        },
        "description": "<p>Unlinks a federated identity from an existing account. Unlinked logins will be considered new identities next time they are seen. Removing the last linked login will make this identity inaccessible.</p> <p>This is a public API. You do not need any credentials to call this API.</p>",
        "operationId": "UnlinkIdentity"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        },
        "description": "Removes the specified tags from an Amazon Cognito identity pool. You can use this action up to 5 times per second, per account",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=AWSCognitoIdentityService.UpdateIdentityPool": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSCognitoIdentityService.UpdateIdentityPool"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityPool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IdentityPool"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "schema": {
              "$ref": "#/definitions/ResourceConflictException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Updates an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>",
        "operationId": "UpdateIdentityPool"
      }
    }
  },
  "definitions": {
    "ARNString": {
      "maxLength": 2048,
      "minLength": 20,
      "type": "string"
    },
    "AccessKeyString": {
      "type": "string"
    },
    "AccountId": {
      "maxLength": 15,
      "minLength": 1,
      "pattern": "\\d+",
      "type": "string"
    },
    "AmbiguousRoleResolutionType": {
      "enum": [
        "AuthenticatedRole",
        "Deny"
      ],
      "type": "string"
    },
    "ClaimName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
      "type": "string"
    },
    "ClaimValue": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "ClassicFlow": {
      "type": "boolean"
    },
    "CognitoIdentityProvider": {
      "description": "A provider representing an Amazon Cognito user pool and its client ID.",
      "properties": {
        "ClientId": {
          "allOf": [
            {
              "$ref": "#/definitions/CognitoIdentityProviderClientId"
            },
            {
              "description": "The client ID for the Amazon Cognito user pool."
            }
          ]
        },
        "ProviderName": {
          "allOf": [
            {
              "$ref": "#/definitions/CognitoIdentityProviderName"
            },
            {
              "description": "The provider name for an Amazon Cognito user pool. For example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>."
            }
          ]
        },
        "ServerSideTokenCheck": {
          "allOf": [
            {
              "$ref": "#/definitions/CognitoIdentityProviderTokenCheck"
            },
            {
              "description": "<p>TRUE if server-side token validation is enabled for the identity provider’s token.</p> <p>Once you set <code>ServerSideTokenCheck</code> to TRUE for an identity pool, that identity pool will check with the integrated user pools to make sure that the user has not been globally signed out or deleted before the identity pool provides an OIDC token or AWS credentials for the user.</p> <p>If the user is signed out or deleted, the identity pool will return a 400 Not Authorized error.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "CognitoIdentityProviderClientId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w_]+",
      "type": "string"
    },
    "CognitoIdentityProviderList": {
      "items": {
        "$ref": "#/definitions/CognitoIdentityProvider"
      },
      "type": "array"
    },
    "CognitoIdentityProviderName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w._:/-]+",
      "type": "string"
    },
    "CognitoIdentityProviderTokenCheck": {
      "type": "boolean"
    },
    "ConcurrentModificationException": {},
    "CreateIdentityPoolInput": {
      "description": "Input to the CreateIdentityPool action.",
      "properties": {
        "AllowClassicFlow": {
          "allOf": [
            {
              "$ref": "#/definitions/ClassicFlow"
            },
            {
              "description": "Enables or disables the Basic (Classic) authentication flow. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>."
            }
          ]
        },
        "AllowUnauthenticatedIdentities": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolUnauthenticated"
            },
            {
              "description": "TRUE if the identity pool supports unauthenticated logins."
            }
          ]
        },
        "CognitoIdentityProviders": {
          "allOf": [
            {
              "$ref": "#/definitions/CognitoIdentityProviderList"
            },
            {
              "description": "An array of Amazon Cognito user pools and their client IDs."
            }
          ]
        },
        "DeveloperProviderName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeveloperProviderName"
            },
            {
              "description": "<p>The \"domain\" by which Cognito will refer to your users. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (<code>.</code>), underscore (<code>_</code>), and dash (<code>-</code>).</p> <p>Once you have set a developer provider name, you cannot change it. Please take care in setting this parameter.</p>"
            }
          ]
        },
        "IdentityPoolName": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolName"
            },
            {
              "description": "A string that you provide."
            }
          ]
        },
        "IdentityPoolTags": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolTagsType"
            },
            {
              "description": "Tags to assign to the identity pool. A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria."
            }
          ]
        },
        "OpenIdConnectProviderARNs": {
          "allOf": [
            {
              "$ref": "#/definitions/OIDCProviderList"
            },
            {
              "description": "A list of OpendID Connect provider ARNs."
            }
          ]
        },
        "SamlProviderARNs": {
          "allOf": [
            {
              "$ref": "#/definitions/SAMLProviderList"
            },
            {
              "description": "An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool."
            }
          ]
        },
        "SupportedLoginProviders": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityProviders"
            },
            {
              "description": "Optional key:value pairs mapping provider names to provider app IDs."
            }
          ]
        }
      },
      "required": [
        "IdentityPoolName",
        "AllowUnauthenticatedIdentities"
      ],
      "title": "CreateIdentityPoolInput",
      "type": "object"
    },
    "Credentials": {
      "description": "Credentials for the provided identity ID.",
      "properties": {
        "AccessKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessKeyString"
            },
            {
              "description": "The Access Key portion of the credentials."
            }
          ]
        },
        "Expiration": {
          "allOf": [
            {
              "$ref": "#/definitions/DateType"
            },
            {
              "description": "The date at which these credentials will expire."
            }
          ]
        },
        "SecretKey": {
          "allOf": [
            {
              "$ref": "#/definitions/SecretKeyString"
            },
            {
              "description": "The Secret Access Key portion of the credentials"
            }
          ]
        },
        "SessionToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SessionTokenString"
            },
            {
              "description": "The Session Token portion of the credentials"
            }
          ]
        }
      },
      "type": "object"
    },
    "DateType": {
      "format": "date-time",
      "type": "string"
    },
    "DeleteIdentitiesInput": {
      "description": "Input to the <code>DeleteIdentities</code> action.",
      "properties": {
        "IdentityIdsToDelete": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityIdList"
            },
            {
              "description": "A list of 1-60 identities that you want to delete."
            }
          ]
        }
      },
      "required": [
        "IdentityIdsToDelete"
      ],
      "title": "DeleteIdentitiesInput",
      "type": "object"
    },
    "DeleteIdentitiesResponse": {
      "description": "Returned in response to a successful <code>DeleteIdentities</code> operation.",
      "properties": {
        "UnprocessedIdentityIds": {
          "allOf": [
            {
              "$ref": "#/definitions/UnprocessedIdentityIdList"
            },
            {
              "description": "An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteIdentityPoolInput": {
      "description": "Input to the DeleteIdentityPool action.",
      "properties": {
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        }
      },
      "required": [
        "IdentityPoolId"
      ],
      "title": "DeleteIdentityPoolInput",
      "type": "object"
    },
    "DescribeIdentityInput": {
      "description": "Input to the <code>DescribeIdentity</code> action.",
      "properties": {
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        }
      },
      "required": [
        "IdentityId"
      ],
      "title": "DescribeIdentityInput",
      "type": "object"
    },
    "DescribeIdentityPoolInput": {
      "description": "Input to the DescribeIdentityPool action.",
      "properties": {
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        }
      },
      "required": [
        "IdentityPoolId"
      ],
      "title": "DescribeIdentityPoolInput",
      "type": "object"
    },
    "DeveloperProviderName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w._-]+",
      "type": "string"
    },
    "DeveloperUserAlreadyRegisteredException": {},
    "DeveloperUserIdentifier": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "DeveloperUserIdentifierList": {
      "items": {
        "$ref": "#/definitions/DeveloperUserIdentifier"
      },
      "type": "array"
    },
    "ErrorCode": {
      "enum": [
        "AccessDenied",
        "InternalServerError"
      ],
      "type": "string"
    },
    "ExternalServiceException": {},
    "GetCredentialsForIdentityInput": {
      "description": "Input to the <code>GetCredentialsForIdentity</code> action.",
      "properties": {
        "CustomRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ARNString"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the role to be assumed when multiple roles were received in the token from the identity provider. For example, a SAML-based identity provider. This parameter is optional for identity providers that do not support role customization."
            }
          ]
        },
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        },
        "Logins": {
          "allOf": [
            {
              "$ref": "#/definitions/LoginsMap"
            },
            {
              "description": "<p>A set of optional name-value pairs that map provider names to provider tokens. The name-value pair will follow the syntax \"provider_name\": \"provider_user_identifier\".</p> <p>Logins should not be specified when trying to get credentials for an unauthenticated identity.</p> <p>The Logins parameter is required when using identities associated with external identity providers such as FaceBook. For examples of <code>Logins</code> maps, see the code examples in the <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/external-identity-providers.html\">External Identity Providers</a> section of the Amazon Cognito Developer Guide.</p>"
            }
          ]
        }
      },
      "required": [
        "IdentityId"
      ],
      "title": "GetCredentialsForIdentityInput",
      "type": "object"
    },
    "GetCredentialsForIdentityResponse": {
      "description": "Returned in response to a successful <code>GetCredentialsForIdentity</code> operation.",
      "properties": {
        "Credentials": {
          "allOf": [
            {
              "$ref": "#/definitions/Credentials"
            },
            {
              "description": "Credentials for the provided identity ID."
            }
          ]
        },
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetIdInput": {
      "description": "Input to the GetId action.",
      "properties": {
        "AccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "A standard AWS account ID (9+ digits)."
            }
          ]
        },
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "Logins": {
          "allOf": [
            {
              "$ref": "#/definitions/LoginsMap"
            },
            {
              "description": "<p>A set of optional name-value pairs that map provider names to provider tokens. The available provider names for <code>Logins</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Amazon Cognito user pool: <code>cognito-idp.&lt;region&gt;.amazonaws.com/&lt;YOUR_USER_POOL_ID&gt;</code>, for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>. </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "IdentityPoolId"
      ],
      "title": "GetIdInput",
      "type": "object"
    },
    "GetIdResponse": {
      "description": "Returned in response to a GetId request.",
      "properties": {
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetIdentityPoolRolesInput": {
      "description": "Input to the <code>GetIdentityPoolRoles</code> action.",
      "properties": {
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        }
      },
      "required": [
        "IdentityPoolId"
      ],
      "title": "GetIdentityPoolRolesInput",
      "type": "object"
    },
    "GetIdentityPoolRolesResponse": {
      "description": "Returned in response to a successful <code>GetIdentityPoolRoles</code> operation.",
      "properties": {
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "RoleMappings": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleMappingMap"
            },
            {
              "description": "How users for a specific identity provider are to mapped to roles. This is a String-to-<a>RoleMapping</a> object map. The string identifies the identity provider, for example, \"graph.facebook.com\" or \"cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id\"."
            }
          ]
        },
        "Roles": {
          "allOf": [
            {
              "$ref": "#/definitions/RolesMap"
            },
            {
              "description": "The map of roles associated with this pool. Currently only authenticated and unauthenticated roles are supported."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetOpenIdTokenForDeveloperIdentityInput": {
      "description": "Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action.",
      "properties": {
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        },
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "Logins": {
          "allOf": [
            {
              "$ref": "#/definitions/LoginsMap"
            },
            {
              "description": "A set of optional name-value pairs that map provider names to provider tokens. Each name-value pair represents a user from a public provider or developer provider. If the user is from a developer provider, the name-value pair will follow the syntax <code>\"developer_provider_name\": \"developer_user_identifier\"</code>. The developer provider is the \"domain\" by which Cognito will refer to your users; you provided this domain while creating/updating the identity pool. The developer user identifier is an identifier from your backend that uniquely identifies a user. When you create an identity pool, you can specify the supported logins."
            }
          ]
        },
        "TokenDuration": {
          "allOf": [
            {
              "$ref": "#/definitions/TokenDuration"
            },
            {
              "description": "<p>The expiration time of the token, in seconds. You can specify a custom expiration time for the token so that you can cache it. If you don't provide an expiration time, the token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS credentials, which are valid for a maximum of one hour. The maximum token duration you can set is 24 hours. You should take care in setting the expiration time for a token, as there are significant security implications: an attacker could use a leaked token to access your AWS resources for the token's duration.</p> <note> <p>Please provide for a small grace period, usually no more than 5 minutes, to account for clock skew.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "IdentityPoolId",
        "Logins"
      ],
      "title": "GetOpenIdTokenForDeveloperIdentityInput",
      "type": "object"
    },
    "GetOpenIdTokenForDeveloperIdentityResponse": {
      "description": "Returned in response to a successful <code>GetOpenIdTokenForDeveloperIdentity</code> request.",
      "properties": {
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        },
        "Token": {
          "allOf": [
            {
              "$ref": "#/definitions/OIDCToken"
            },
            {
              "description": "An OpenID token."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetOpenIdTokenInput": {
      "description": "Input to the GetOpenIdToken action.",
      "properties": {
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        },
        "Logins": {
          "allOf": [
            {
              "$ref": "#/definitions/LoginsMap"
            },
            {
              "description": "A set of optional name-value pairs that map provider names to provider tokens. When using graph.facebook.com and www.amazon.com, supply the access_token returned from the provider's authflow. For accounts.google.com, an Amazon Cognito user pool provider, or any other OpenId Connect provider, always include the <code>id_token</code>."
            }
          ]
        }
      },
      "required": [
        "IdentityId"
      ],
      "title": "GetOpenIdTokenInput",
      "type": "object"
    },
    "GetOpenIdTokenResponse": {
      "description": "Returned in response to a successful GetOpenIdToken request.",
      "properties": {
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID. Note that the IdentityId returned may not match the one passed on input."
            }
          ]
        },
        "Token": {
          "allOf": [
            {
              "$ref": "#/definitions/OIDCToken"
            },
            {
              "description": "An OpenID token, valid for 10 minutes."
            }
          ]
        }
      },
      "type": "object"
    },
    "HideDisabled": {
      "type": "boolean"
    },
    "IdentitiesList": {
      "items": {
        "$ref": "#/definitions/IdentityDescription"
      },
      "type": "array"
    },
    "IdentityDescription": {
      "description": "A description of the identity.",
      "properties": {
        "CreationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateType"
            },
            {
              "description": "Date on which the identity was created."
            }
          ]
        },
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        },
        "LastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/DateType"
            },
            {
              "description": "Date on which the identity was last modified."
            }
          ]
        },
        "Logins": {
          "allOf": [
            {
              "$ref": "#/definitions/LoginsList"
            },
            {
              "description": "The provider names."
            }
          ]
        }
      },
      "type": "object"
    },
    "IdentityId": {
      "maxLength": 55,
      "minLength": 1,
      "pattern": "[\\w-]+:[0-9a-f-]+",
      "type": "string"
    },
    "IdentityIdList": {
      "items": {
        "$ref": "#/definitions/IdentityId"
      },
      "maxItems": 60,
      "minItems": 1,
      "type": "array"
    },
    "IdentityPool": {
      "description": "An object representing an Amazon Cognito identity pool.",
      "properties": {
        "AllowClassicFlow": {
          "allOf": [
            {
              "$ref": "#/definitions/ClassicFlow"
            },
            {
              "description": "Enables or disables the Basic (Classic) authentication flow. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>."
            }
          ]
        },
        "AllowUnauthenticatedIdentities": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolUnauthenticated"
            },
            {
              "description": "TRUE if the identity pool supports unauthenticated logins."
            }
          ]
        },
        "CognitoIdentityProviders": {
          "allOf": [
            {
              "$ref": "#/definitions/CognitoIdentityProviderList"
            },
            {
              "description": "A list representing an Amazon Cognito user pool and its client ID."
            }
          ]
        },
        "DeveloperProviderName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeveloperProviderName"
            },
            {
              "description": "The \"domain\" by which Cognito will refer to your users."
            }
          ]
        },
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "IdentityPoolName": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolName"
            },
            {
              "description": "A string that you provide."
            }
          ]
        },
        "IdentityPoolTags": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolTagsType"
            },
            {
              "description": "The tags that are assigned to the identity pool. A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria."
            }
          ]
        },
        "OpenIdConnectProviderARNs": {
          "allOf": [
            {
              "$ref": "#/definitions/OIDCProviderList"
            },
            {
              "description": "A list of OpendID Connect provider ARNs."
            }
          ]
        },
        "SamlProviderARNs": {
          "allOf": [
            {
              "$ref": "#/definitions/SAMLProviderList"
            },
            {
              "description": "An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool."
            }
          ]
        },
        "SupportedLoginProviders": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityProviders"
            },
            {
              "description": "Optional key:value pairs mapping provider names to provider app IDs."
            }
          ]
        }
      },
      "required": [
        "IdentityPoolId",
        "IdentityPoolName",
        "AllowUnauthenticatedIdentities"
      ],
      "title": "IdentityPool",
      "type": "object"
    },
    "IdentityPoolId": {
      "maxLength": 55,
      "minLength": 1,
      "pattern": "[\\w-]+:[0-9a-f-]+",
      "type": "string"
    },
    "IdentityPoolName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w\\s+=,.@-]+",
      "type": "string"
    },
    "IdentityPoolShortDescription": {
      "description": "A description of the identity pool.",
      "properties": {
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "IdentityPoolName": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolName"
            },
            {
              "description": "A string that you provide."
            }
          ]
        }
      },
      "type": "object"
    },
    "IdentityPoolTagsListType": {
      "items": {
        "$ref": "#/definitions/TagKeysType"
      },
      "type": "array"
    },
    "IdentityPoolTagsType": {
      "additionalProperties": {
        "$ref": "#/definitions/TagValueType"
      },
      "type": "object"
    },
    "IdentityPoolUnauthenticated": {
      "type": "boolean"
    },
    "IdentityPoolsList": {
      "items": {
        "$ref": "#/definitions/IdentityPoolShortDescription"
      },
      "type": "array"
    },
    "IdentityProviderId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w.;_/-]+",
      "type": "string"
    },
    "IdentityProviderName": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "IdentityProviderToken": {
      "maxLength": 50000,
      "minLength": 1,
      "type": "string"
    },
    "IdentityProviders": {
      "additionalProperties": {
        "$ref": "#/definitions/IdentityProviderId"
      },
      "maxProperties": 10,
      "type": "object"
    },
    "InternalErrorException": {},
    "InvalidIdentityPoolConfigurationException": {},
    "InvalidParameterException": {},
    "LimitExceededException": {},
    "ListIdentitiesInput": {
      "description": "Input to the ListIdentities action.",
      "properties": {
        "HideDisabled": {
          "allOf": [
            {
              "$ref": "#/definitions/HideDisabled"
            },
            {
              "description": "An optional boolean parameter that allows you to hide disabled identities. If omitted, the ListIdentities API will include disabled identities in the response."
            }
          ]
        },
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryLimit"
            },
            {
              "description": "The maximum number of identities to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationKey"
            },
            {
              "description": "A pagination token."
            }
          ]
        }
      },
      "required": [
        "IdentityPoolId",
        "MaxResults"
      ],
      "title": "ListIdentitiesInput",
      "type": "object"
    },
    "ListIdentitiesResponse": {
      "description": "The response to a ListIdentities request.",
      "properties": {
        "Identities": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentitiesList"
            },
            {
              "description": "An object containing a set of identities and associated mappings."
            }
          ]
        },
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationKey"
            },
            {
              "description": "A pagination token."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListIdentityPoolsInput": {
      "description": "Input to the ListIdentityPools action.",
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryLimit"
            },
            {
              "description": "The maximum number of identities to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationKey"
            },
            {
              "description": "A pagination token."
            }
          ]
        }
      },
      "required": [
        "MaxResults"
      ],
      "title": "ListIdentityPoolsInput",
      "type": "object"
    },
    "ListIdentityPoolsResponse": {
      "description": "The result of a successful ListIdentityPools action.",
      "properties": {
        "IdentityPools": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolsList"
            },
            {
              "description": "The identity pools returned by the ListIdentityPools action."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationKey"
            },
            {
              "description": "A pagination token."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceInput": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ARNString"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the identity pool that the tags are assigned to."
            }
          ]
        }
      },
      "required": [
        "ResourceArn"
      ],
      "title": "ListTagsForResourceInput",
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolTagsType"
            },
            {
              "description": "The tags that are assigned to the identity pool."
            }
          ]
        }
      },
      "type": "object"
    },
    "LoginsList": {
      "items": {
        "$ref": "#/definitions/IdentityProviderName"
      },
      "type": "array"
    },
    "LoginsMap": {
      "additionalProperties": {
        "$ref": "#/definitions/IdentityProviderToken"
      },
      "maxProperties": 10,
      "type": "object"
    },
    "LookupDeveloperIdentityInput": {
      "description": "Input to the <code>LookupDeveloperIdentityInput</code> action.",
      "properties": {
        "DeveloperUserIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/DeveloperUserIdentifier"
            },
            {
              "description": "A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users."
            }
          ]
        },
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        },
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/QueryLimit"
            },
            {
              "description": "The maximum number of identities to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationKey"
            },
            {
              "description": "A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match."
            }
          ]
        }
      },
      "required": [
        "IdentityPoolId"
      ],
      "title": "LookupDeveloperIdentityInput",
      "type": "object"
    },
    "LookupDeveloperIdentityResponse": {
      "description": "Returned in response to a successful <code>LookupDeveloperIdentity</code> action.",
      "properties": {
        "DeveloperUserIdentifierList": {
          "allOf": [
            {
              "$ref": "#/definitions/DeveloperUserIdentifierList"
            },
            {
              "description": "This is the list of developer user identifiers associated with an identity ID. Cognito supports the association of multiple developer user identifiers with an identity ID."
            }
          ]
        },
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationKey"
            },
            {
              "description": "A pagination token. The first call you make will have <code>NextToken</code> set to null. After that the service will return <code>NextToken</code> values as needed. For example, let's say you make a request with <code>MaxResults</code> set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match."
            }
          ]
        }
      },
      "type": "object"
    },
    "MappingRule": {
      "description": "A rule that maps a claim name, a claim value, and a match type to a role ARN.",
      "properties": {
        "Claim": {
          "allOf": [
            {
              "$ref": "#/definitions/ClaimName"
            },
            {
              "description": "The claim name that must be present in the token, for example, \"isAdmin\" or \"paid\"."
            }
          ]
        },
        "MatchType": {
          "allOf": [
            {
              "$ref": "#/definitions/MappingRuleMatchType"
            },
            {
              "description": "The match condition that specifies how closely the claim value in the IdP token must match <code>Value</code>."
            }
          ]
        },
        "RoleARN": {
          "allOf": [
            {
              "$ref": "#/definitions/ARNString"
            },
            {
              "description": "The role ARN."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/ClaimValue"
            },
            {
              "description": "A brief string that the claim must match, for example, \"paid\" or \"yes\"."
            }
          ]
        }
      },
      "required": [
        "Claim",
        "MatchType",
        "Value",
        "RoleARN"
      ],
      "type": "object"
    },
    "MappingRuleMatchType": {
      "enum": [
        "Equals",
        "Contains",
        "StartsWith",
        "NotEqual"
      ],
      "type": "string"
    },
    "MappingRulesList": {
      "items": {
        "$ref": "#/definitions/MappingRule"
      },
      "maxItems": 400,
      "minItems": 1,
      "type": "array"
    },
    "MergeDeveloperIdentitiesInput": {
      "description": "Input to the <code>MergeDeveloperIdentities</code> action.",
      "properties": {
        "DestinationUserIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/DeveloperUserIdentifier"
            },
            {
              "description": "User identifier for the destination user. The value should be a <code>DeveloperUserIdentifier</code>."
            }
          ]
        },
        "DeveloperProviderName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeveloperProviderName"
            },
            {
              "description": "The \"domain\" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well as period (.), underscore (_), and dash (-)."
            }
          ]
        },
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "SourceUserIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/DeveloperUserIdentifier"
            },
            {
              "description": "User identifier for the source user. The value should be a <code>DeveloperUserIdentifier</code>."
            }
          ]
        }
      },
      "required": [
        "SourceUserIdentifier",
        "DestinationUserIdentifier",
        "DeveloperProviderName",
        "IdentityPoolId"
      ],
      "title": "MergeDeveloperIdentitiesInput",
      "type": "object"
    },
    "MergeDeveloperIdentitiesResponse": {
      "description": "Returned in response to a successful <code>MergeDeveloperIdentities</code> action.",
      "properties": {
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        }
      },
      "type": "object"
    },
    "NotAuthorizedException": {},
    "OIDCProviderList": {
      "items": {
        "$ref": "#/definitions/ARNString"
      },
      "type": "array"
    },
    "OIDCToken": {
      "type": "string"
    },
    "PaginationKey": {
      "maxLength": 65535,
      "minLength": 1,
      "pattern": "[\\S]+",
      "type": "string"
    },
    "QueryLimit": {
      "maximum": 60,
      "minimum": 1,
      "type": "integer"
    },
    "ResourceConflictException": {},
    "ResourceNotFoundException": {},
    "RoleMapping": {
      "description": "A role mapping.",
      "properties": {
        "AmbiguousRoleResolution": {
          "allOf": [
            {
              "$ref": "#/definitions/AmbiguousRoleResolutionType"
            },
            {
              "description": "<p>If you specify Token or Rules as the <code>Type</code>, <code>AmbiguousRoleResolution</code> is required.</p> <p>Specifies the action to be taken if either no rules match the claim value for the <code>Rules</code> type, or there is no <code>cognito:preferred_role</code> claim and there are multiple <code>cognito:roles</code> matches for the <code>Token</code> type.</p>"
            }
          ]
        },
        "RulesConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/RulesConfigurationType"
            },
            {
              "description": "<p>The rules to be used for mapping users to roles.</p> <p>If you specify Rules as the role mapping type, <code>RulesConfiguration</code> is required.</p>"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleMappingType"
            },
            {
              "description": "The role mapping type. Token will use <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims from the Cognito identity provider token to map groups to roles. Rules will attempt to match claims from the token to map to a role."
            }
          ]
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "RoleMappingMap": {
      "additionalProperties": {
        "$ref": "#/definitions/RoleMapping"
      },
      "maxProperties": 10,
      "type": "object"
    },
    "RoleMappingType": {
      "enum": [
        "Token",
        "Rules"
      ],
      "type": "string"
    },
    "RoleType": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "(un)?authenticated",
      "type": "string"
    },
    "RolesMap": {
      "additionalProperties": {
        "$ref": "#/definitions/ARNString"
      },
      "maxProperties": 2,
      "type": "object"
    },
    "RulesConfigurationType": {
      "description": "A container for rules.",
      "properties": {
        "Rules": {
          "allOf": [
            {
              "$ref": "#/definitions/MappingRulesList"
            },
            {
              "description": "<p>An array of rules. You can specify up to 25 rules per identity provider.</p> <p>Rules are evaluated in order. The first one to match specifies the role.</p>"
            }
          ]
        }
      },
      "required": [
        "Rules"
      ],
      "type": "object"
    },
    "SAMLProviderList": {
      "items": {
        "$ref": "#/definitions/ARNString"
      },
      "type": "array"
    },
    "SecretKeyString": {
      "type": "string"
    },
    "SessionTokenString": {
      "type": "string"
    },
    "SetIdentityPoolRolesInput": {
      "description": "Input to the <code>SetIdentityPoolRoles</code> action.",
      "properties": {
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        },
        "RoleMappings": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleMappingMap"
            },
            {
              "description": "<p>How users for a specific identity provider are to mapped to roles. This is a string to <a>RoleMapping</a> object map. The string identifies the identity provider, for example, \"graph.facebook.com\" or \"cognito-idp-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id\".</p> <p>Up to 25 rules can be specified per identity provider.</p>"
            }
          ]
        },
        "Roles": {
          "allOf": [
            {
              "$ref": "#/definitions/RolesMap"
            },
            {
              "description": "The map of roles associated with this pool. For a given role, the key will be either \"authenticated\" or \"unauthenticated\" and the value will be the Role ARN."
            }
          ]
        }
      },
      "required": [
        "IdentityPoolId",
        "Roles"
      ],
      "title": "SetIdentityPoolRolesInput",
      "type": "object"
    },
    "TagKeysType": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagResourceInput": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ARNString"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the identity pool to assign the tags to."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolTagsType"
            },
            {
              "description": "The tags to assign to the identity pool."
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "title": "TagResourceInput",
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "TagValueType": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "TokenDuration": {
      "maximum": 86400,
      "minimum": 1,
      "type": "integer"
    },
    "TooManyRequestsException": {},
    "UnlinkDeveloperIdentityInput": {
      "description": "Input to the <code>UnlinkDeveloperIdentity</code> action.",
      "properties": {
        "DeveloperProviderName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeveloperProviderName"
            },
            {
              "description": "The \"domain\" by which Cognito will refer to your users."
            }
          ]
        },
        "DeveloperUserIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/DeveloperUserIdentifier"
            },
            {
              "description": "A unique ID used by your backend authentication process to identify a user."
            }
          ]
        },
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        },
        "IdentityPoolId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolId"
            },
            {
              "description": "An identity pool ID in the format REGION:GUID."
            }
          ]
        }
      },
      "required": [
        "IdentityId",
        "IdentityPoolId",
        "DeveloperProviderName",
        "DeveloperUserIdentifier"
      ],
      "title": "UnlinkDeveloperIdentityInput",
      "type": "object"
    },
    "UnlinkIdentityInput": {
      "description": "Input to the UnlinkIdentity action.",
      "properties": {
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        },
        "Logins": {
          "allOf": [
            {
              "$ref": "#/definitions/LoginsMap"
            },
            {
              "description": "A set of optional name-value pairs that map provider names to provider tokens."
            }
          ]
        },
        "LoginsToRemove": {
          "allOf": [
            {
              "$ref": "#/definitions/LoginsList"
            },
            {
              "description": "Provider names to unlink from this identity."
            }
          ]
        }
      },
      "required": [
        "IdentityId",
        "Logins",
        "LoginsToRemove"
      ],
      "title": "UnlinkIdentityInput",
      "type": "object"
    },
    "UnprocessedIdentityId": {
      "description": "An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId.",
      "properties": {
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorCode"
            },
            {
              "description": "The error code indicating the type of error that occurred."
            }
          ]
        },
        "IdentityId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityId"
            },
            {
              "description": "A unique identifier in the format REGION:GUID."
            }
          ]
        }
      },
      "type": "object"
    },
    "UnprocessedIdentityIdList": {
      "items": {
        "$ref": "#/definitions/UnprocessedIdentityId"
      },
      "maxItems": 60,
      "type": "array"
    },
    "UntagResourceInput": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ARNString"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the identity pool that the tags are assigned to."
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/IdentityPoolTagsListType"
            },
            {
              "description": "The keys of the tags to remove from the user pool."
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "title": "UntagResourceInput",
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {},
      "type": "object"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/cognito-identity/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}