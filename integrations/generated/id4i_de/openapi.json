{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "info@bluerain.de",
      "name": "BlueRain Software GmbH & Co. KG",
      "url": "http://bluerain.de"
    },
    "description": "ID4i HTTP API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "termsOfService": "http://id4i.de",
    "title": "ID4i API",
    "version": "0.9.7",
    "x-apisguru-categories": [
      "enterprise"
    ],
    "x-logo": {
      "backgroundColor": "#FAFAFA",
      "url": "https://api.apis.guru/v2/cache/logo/https_id4i.de_wp-content_uploads_2017_11_id4d_logo_h87.png"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://backend.id4i.de/docs/swagger.json",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "id4i.de",
    "x-datafire": {
      "name": "id4i_de",
      "type": "openapi"
    }
  },
  "basePath": "/backend.id4i.de/",
  "paths": {
    "/account/password": {
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Contains the required information to request a new password.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordResetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleMessageResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "tags": [
          "Accounts"
        ],
        "description": "Requesting a reset for a new password. ",
        "operationId": "requestPasswordReset",
        "summary": "Request password reset"
      },
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Contains the new password and the verification token to set the new password.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordResetVerificationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SimpleMessageResponse"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "tags": [
          "Accounts"
        ],
        "description": "Setting a new password and verifying the request to set the password.",
        "operationId": "verifyPasswordReset",
        "summary": "Verify password reset"
      }
    },
    "/account/registration": {
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The user information about the new created user.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRegistrationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "tags": [
          "Accounts"
        ],
        "description": "Registering a new user.",
        "operationId": "registerUser",
        "summary": "Register user"
      },
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Contains the verification token, the username and the initial password.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteUserRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "tags": [
          "Accounts"
        ],
        "description": "Completing a registration e.g. for invited users. Finish registration with a username and a password.",
        "operationId": "completeRegistration",
        "summary": "Complete registration"
      }
    },
    "/account/verification": {
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The token for user verification.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistrationVerificationTokenPresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "tags": [
          "Accounts"
        ],
        "description": "Verifies a new user registration.",
        "operationId": "verifyUserRegistration",
        "summary": "Verify registration"
      }
    },
    "/api/v1/apikeys": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization to search in.",
            "in": "query",
            "name": "organizationId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfApiKeyPresentation"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "description": "Finding all API key assigned to the specified organization in a paginated manner.",
        "operationId": "listAllApiKeysOfOrganization",
        "summary": "Find API key by organization"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "API key to be created.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKeyCreationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiKeyPresentation"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "description": "Creation of a new API key.",
        "operationId": "createNewApiKey",
        "summary": "Create API key"
      }
    },
    "/api/v1/apikeys/privileges": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4nConcerning",
            "in": "query",
            "name": "id4nConcerning",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfApiKeyPrivilegeInfo"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "description": "Listing all possible API key privileges.",
        "operationId": "listAllApiKeyPrivileges",
        "summary": "List all privileges"
      }
    },
    "/api/v1/apikeys/{key}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The API key to delete.",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "description": "Deletion of an API key.",
        "operationId": "deleteApiKey",
        "summary": "Delete API key"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The API key to show.",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiKeyPresentation"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "description": "Showing the details of an API key.",
        "operationId": "getApiKey",
        "summary": "Show API key"
      },
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The API key to be updated.",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new values to apply.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKeyChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "description": "API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.",
        "operationId": "updateApiKey",
        "summary": "Update API keys"
      }
    },
    "/api/v1/apikeys/{key}/privileges": {
      "delete": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "removeApiKeyPrivilegeRequest",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveApiKeyPrivilegeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "operationId": "removeApiKeyPrivilege",
        "summary": "Remove privilege"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfApiKeyPrivilege"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "operationId": "listApiKeyPrivileges",
        "summary": "List privileges"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "addApiKeyPrivilegeRequest",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddApiKeyPrivilegeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "operationId": "addApiKeyPrivilege",
        "summary": "Add privilege"
      }
    },
    "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns": {
      "delete": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "privilege",
            "in": "path",
            "name": "privilege",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4ns",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOfId4ns"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "operationId": "removeApiKeyPrivilegeForId4ns",
        "summary": "Remove id4ns of a privilege"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "privilege",
            "in": "path",
            "name": "privilege",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfId4nPresentation"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "description": "Listing ID4ns of a id4n concerning privilege",
        "operationId": "listId4ns",
        "summary": "ID4ns of a privilege"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "key",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "privilege",
            "in": "path",
            "name": "privilege",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4ns",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOfId4ns"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Api Keys"
        ],
        "operationId": "addApiKeyPrivilegeForId4ns",
        "summary": "Add ID4ns of a privilege"
      }
    },
    "/api/v1/billing/{organizationId}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The organization to compute the billing information for",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Billing start date",
            "format": "date-time",
            "in": "query",
            "name": "fromDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Billing end date",
            "format": "date-time",
            "in": "query",
            "name": "toDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceCosts"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Billing"
        ],
        "operationId": "getSumForOrganization",
        "summary": "Get billing amount of services for a given organization"
      }
    },
    "/api/v1/billing/{organizationId}/positions": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The organization to compute the billing information for",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Billing start date",
            "format": "date-time",
            "in": "query",
            "name": "fromDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Billing end date",
            "format": "date-time",
            "in": "query",
            "name": "toDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/BillingPosition"
              },
              "type": "array"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Billing"
        ],
        "operationId": "getPositionsForOrganization",
        "summary": "Get billing positions for a given organization"
      }
    },
    "/api/v1/changelog/organization/{organizationId}/": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace identifying the organization whose change log entries are to be listed",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": "text/mustache",
            "description": "The Mime-type for the message format that should be returned. e.g. 'text/plain' or 'text/mustache' ",
            "in": "query",
            "name": "messageMimeType",
            "required": false,
            "type": "string"
          },
          {
            "description": "From date time as UTC Date-Time format",
            "format": "date-time",
            "in": "query",
            "name": "fromDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "To date time as UTC Date-Time format",
            "format": "date-time",
            "in": "query",
            "name": "toDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfChangeLogEntry"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Auditing"
        ],
        "description": "Listing change log entries of the specified organization id.",
        "operationId": "listOrganizationChangeLog",
        "summary": "List change log entries of an organization"
      }
    },
    "/api/v1/collections": {
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "createInfo",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCollectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Id4n"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "createCollection",
        "summary": "Create collection"
      }
    },
    "/api/v1/collections/{id4n}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "deleteCollection",
        "summary": "Delete collection"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidCollection"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "findCollection",
        "summary": "Find collection"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GuidCollection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "description": "Update collection changing only the given values",
        "operationId": "updateCollection",
        "summary": "Update collection"
      }
    },
    "/api/v1/collections/{id4n}/elements": {
      "delete": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "listOfGuids",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOfId4ns"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "removeElementsFromCollection",
        "summary": "Remove elements from collection"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfGuid"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "listElementsOfCollection",
        "summary": "List contents of the collection"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "listOfGuids",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOfId4ns"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "addElementsToCollection",
        "summary": "Add elements to collection"
      }
    },
    "/api/v1/countries": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfCountry"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "operationId": "listCountries",
        "summary": "List countries"
      }
    },
    "/api/v1/documents/{id4n}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter by owner organization",
            "in": "query",
            "name": "owner",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfDocument"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "description": "Listing all documents of an id4n",
        "operationId": "listAllDocuments",
        "summary": "List documents"
      }
    },
    "/api/v1/documents/{id4n}/{organizationId}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter by owner organization",
            "in": "query",
            "name": "owner",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfDocument"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "description": "Listing documents of an id4n seen by a specified organization",
        "operationId": "listDocuments",
        "summary": "List organization specific documents"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "content",
            "format": "binary",
            "in": "formData",
            "name": "content",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "description": "The documents' mime type is suggested on octet-stream data. Otherwise the specified content mime type is used.",
        "operationId": "createDocument",
        "summary": "Create an document for an id4n"
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "content",
            "format": "binary",
            "in": "formData",
            "name": "content",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "description": "Creating or overwriting an existing document ",
        "operationId": "putDocument",
        "summary": "Put an document for an id4n"
      }
    },
    "/api/v1/documents/{id4n}/{organizationId}/{fileName}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "fileName",
            "in": "path",
            "name": "fileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "operationId": "deleteDocument",
        "summary": "Delete a document"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "fileName",
            "in": "path",
            "name": "fileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "operationId": "readDocument",
        "summary": "Read document contents"
      }
    },
    "/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "fileName",
            "in": "path",
            "name": "fileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "operationId": "getDocument",
        "summary": "Retrieve a document (meta-data only, no content)"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "fileName",
            "in": "path",
            "name": "fileName",
            "required": true,
            "type": "string"
          },
          {
            "description": "document",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "operationId": "updateDocumentMetadata",
        "summary": "Update a document"
      }
    },
    "/api/v1/guids": {
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "GUID creation model",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGuidRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOfId4ns"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Guids"
        ],
        "description": "Creating one or more GUIDs with a specified length.",
        "operationId": "createGuid",
        "summary": "Create GUID(s)"
      }
    },
    "/api/v1/guids/withoutCollection": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization to search GUIDs for",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfGuid"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Guids"
        ],
        "operationId": "getGuidsWithoutCollection",
        "summary": "Retrieve GUIDs not in any collection"
      }
    },
    "/api/v1/guids/{id4n}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The GUID number",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Guid"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Guids"
        ],
        "operationId": "getGuid",
        "summary": "Retrieve GUID information"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The GUID number",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Guid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Guids"
        ],
        "description": "Allows ownership transfer.",
        "operationId": "updateGuid",
        "summary": "Change GUID information."
      }
    },
    "/api/v1/history/{id4n}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "GUID to retrieve the history for",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "Also return private history entries",
            "in": "query",
            "name": "includePrivate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Show only entries created by one of the given organizations. This parameter can be used multiple times.",
            "in": "query",
            "name": "organization",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Show only entries matching one of the given history item types. This parameter can be used multiple times.",
            "enum": [
              "CREATED",
              "DESTROYED",
              "RECYCLED",
              "SHIPMENT_PREPARED",
              "STORED",
              "RETRIEVED_FROM_STORAGE",
              "PACKAGED",
              "DISPATCHED",
              "RECEIVED",
              "DELIVERY_REFUSED",
              "REPROCESSING_STARTED",
              "REPROCESSING_STEP_STARTED",
              "REPROCESSING_STEP_CANCELLED",
              "REPROCESSING_STEP_FINISHED",
              "REPROCESSING_CANCELLED",
              "REPROCESSING_FINISHED",
              "DISASSEMBLED",
              "MAINTENANCE_STARTED",
              "MAINTENANCE_STEP_STARTED",
              "MAINTENANCE_STEP_CANCELLED",
              "MAINTENANCE_STEP_FINISHED",
              "MAINTENANCE_CANCELLED",
              "MAINTENANCE_FINISHED",
              "PRODUCTION_STARTED",
              "PRODUCTION_CANCELLED",
              "PRODUCTION_FINISHED",
              "PRODUCTION_STEP_STARTED",
              "PRODUCTION_STEP_CANCELLED",
              "PRODUCTION_STEP_FINISHED",
              "QUALITY_CHECK_PERFORMED"
            ],
            "in": "query",
            "items": {
              "enum": [
                "CREATED",
                "DESTROYED",
                "RECYCLED",
                "SHIPMENT_PREPARED",
                "STORED",
                "RETRIEVED_FROM_STORAGE",
                "PACKAGED",
                "DISPATCHED",
                "RECEIVED",
                "DELIVERY_REFUSED",
                "REPROCESSING_STARTED",
                "REPROCESSING_STEP_STARTED",
                "REPROCESSING_STEP_CANCELLED",
                "REPROCESSING_STEP_FINISHED",
                "REPROCESSING_CANCELLED",
                "REPROCESSING_FINISHED",
                "DISASSEMBLED",
                "MAINTENANCE_STARTED",
                "MAINTENANCE_STEP_STARTED",
                "MAINTENANCE_STEP_CANCELLED",
                "MAINTENANCE_STEP_FINISHED",
                "MAINTENANCE_CANCELLED",
                "MAINTENANCE_FINISHED",
                "PRODUCTION_STARTED",
                "PRODUCTION_CANCELLED",
                "PRODUCTION_FINISHED",
                "PRODUCTION_STEP_STARTED",
                "PRODUCTION_STEP_CANCELLED",
                "PRODUCTION_STEP_FINISHED",
                "QUALITY_CHECK_PERFORMED"
              ],
              "type": "string"
            },
            "name": "type",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "qualifier",
            "required": false,
            "type": "array"
          },
          {
            "description": "From date time as UTC Date-Time format",
            "format": "date-time",
            "in": "query",
            "name": "fromDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "To date time as UTC Date-Time format",
            "format": "date-time",
            "in": "query",
            "name": "toDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfHistoryItem"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "History"
        ],
        "description": "Lists the history of a GUID",
        "operationId": "filteredList",
        "summary": "List history"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "GUID to retrieve the history for",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "The history item to publish",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HistoryItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "History"
        ],
        "description": "Add a new history item",
        "operationId": "addItem",
        "summary": "Add history item"
      }
    },
    "/api/v1/history/{id4n}/{organizationId}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "GUID to retrieve the history for",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "Also return private history entries",
            "in": "query",
            "name": "includePrivate",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfHistoryItem"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "History"
        ],
        "deprecated": true,
        "description": "DEPRECATED - please use filteredList with organization parameter to achieve the same functionality",
        "operationId": "list",
        "summary": "DEPRECATED - List history"
      }
    },
    "/api/v1/history/{id4n}/{organizationId}/{sequenceId}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "GUID to retrieve the history for",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "sequenceId",
            "format": "int32",
            "in": "path",
            "name": "sequenceId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HistoryItem"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "History"
        ],
        "operationId": "retrieveItem",
        "summary": "Get history item"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "GUID to retrieve the history for",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "sequenceId",
            "format": "int32",
            "in": "path",
            "name": "sequenceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "update",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HistoryItemUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HistoryItem"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "History"
        ],
        "operationId": "updateItem",
        "summary": "Update history item"
      }
    },
    "/api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility": {
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "GUID to retrieve the history for",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "sequenceId",
            "format": "int32",
            "in": "path",
            "name": "sequenceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "History item visibility restrictions",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Visibility"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HistoryItem"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "History"
        ],
        "operationId": "updateItemVisibility",
        "summary": "Set history item visibility"
      }
    },
    "/api/v1/id4ns/{id4n}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The ID to resolve to",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Id4nPresentation"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Guids"
        ],
        "description": "Retrieving basic information about an ID like the type and the creation time.",
        "operationId": "getId4n",
        "summary": "Retrieve ID4n information"
      }
    },
    "/api/v1/id4ns/{id4n}/alias": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The GUID or Collection to operate on",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Alias",
          "Guids"
        ],
        "description": "Looks up the alias for each alias type (group and single) and returns a map of all aliases found.",
        "operationId": "getGuidAliases",
        "summary": "Get all aliases for the given GUID or Collection."
      }
    },
    "/api/v1/id4ns/{id4n}/alias/{aliasType}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The GUID or Collection to operate on",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Alias type, see the corresponding API model",
            "enum": [
              "gtin",
              "article",
              "mapp",
              "item",
              "rfid",
              "tracking",
              "eclass",
              "unspsc",
              "product",
              "material",
              "reference"
            ],
            "in": "path",
            "name": "aliasType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Alias",
          "Guids"
        ],
        "description": "Remove the alias of the given type",
        "operationId": "removeGuidAlias",
        "summary": "Remove aliases from GUID or Collection"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The GUID or Collection to operate on",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Alias type, see the corresponding API model",
            "enum": [
              "gtin",
              "article",
              "mapp",
              "item",
              "rfid",
              "tracking",
              "eclass",
              "unspsc",
              "product",
              "material",
              "reference"
            ],
            "in": "path",
            "name": "aliasType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The alias to add or update",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GuidAlias"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Alias",
          "Guids"
        ],
        "description": "Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)",
        "operationId": "addGuidAlias",
        "summary": "Add alias for GUID or Collection"
      }
    },
    "/api/v1/id4ns/{id4n}/collections": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The ID which the collections should contain",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization holding the collections.",
            "in": "query",
            "name": "organizationId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfGuidCollection"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Guids"
        ],
        "description": "Retrieving all owned or holding collections the specified id4n is assigned to.",
        "operationId": "getCollections",
        "summary": "Retrieve collections of an ID"
      }
    },
    "/api/v1/id4ns/{id4n}/properties": {
      "delete": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization namespace to work on while deleting the properties.",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "A set of property keys to delete.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections",
          "Guids"
        ],
        "description": "Partial deletion of id4n properties. If the property does not exist, it will be ignored.",
        "operationId": "deleteProperties",
        "summary": "Delete ID4n properties"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization namespace.",
            "in": "query",
            "name": "organizationId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections",
          "Guids"
        ],
        "description": "List all properties of an id4n.",
        "operationId": "getProperties",
        "summary": "Retrieve ID4n properties"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "The organization namespace to work on while patching the properties.",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The properties to update.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections",
          "Guids"
        ],
        "description": "Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.",
        "operationId": "patchProperties",
        "summary": "Patch ID4n properties"
      }
    },
    "/api/v1/import/gs1": {
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The information how the MAPP codes should be imported and the list of MAPP codes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportGS1CodesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Guids"
        ],
        "description": "Importing GS1/MAPP codes that contain unique components.",
        "operationId": "importGS1Codes",
        "summary": "Import GS1/MAPP codes"
      }
    },
    "/api/v1/info": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppInfoPresentation"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Meta Information"
        ],
        "description": "Retrieving version information about ID4i.",
        "operationId": "applicationInfo",
        "summary": "Retrieve version information about ID4i"
      }
    },
    "/api/v1/microstorage/{id4n}/{organization}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organization",
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "operationId": "readFromMicrostorage",
        "summary": "Read data from microstorage"
      },
      "put": {
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organization",
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content-Length",
            "format": "int64",
            "in": "header",
            "name": "Content-Length",
            "required": false,
            "type": "integer"
          },
          {
            "description": "body",
            "in": "body",
            "name": "body",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Storage"
        ],
        "operationId": "writeToMicrostorage",
        "summary": "Write data to microstorage"
      }
    },
    "/api/v1/organizations": {
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Organization to be created",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Creating a new organization.",
        "operationId": "createOrganization",
        "summary": "Create organization"
      }
    },
    "/api/v1/organizations/{organizationId}": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization to be deleted.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "operationId": "deleteOrganization",
        "summary": "Delete organization"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization to be retrieved.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Returns a single organization.",
        "operationId": "findOrganization",
        "summary": "Find organization by id/namespace"
      },
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization to be updated.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Updated organization object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "operationId": "updateOrganization",
        "summary": "Update organization"
      }
    },
    "/api/v1/organizations/{organizationId}/addresses/billing": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "operationId": "deleteOrganizationBillingAddress",
        "summary": "Remove billing address"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationAddress"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "operationId": "findOrganizationBillingAddress",
        "summary": "Retrieve billing address"
      },
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "addressResource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationAddress"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "operationId": "updateOrganizationBillingAddress",
        "summary": "Store billing address"
      }
    },
    "/api/v1/organizations/{organizationId}/addresses/default": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationAddress"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "operationId": "findOrganizationAddress",
        "summary": "Retrieve address"
      },
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "addressResource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationAddress"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "operationId": "updateOrganizationAddress",
        "summary": "Store address"
      }
    },
    "/api/v1/organizations/{organizationId}/collections": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The namespace of the organization",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter by this type",
            "enum": [
              "ROUTING_COLLECTION",
              "LOGISTIC_COLLECTION",
              "LABELLED_COLLECTION"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by this label",
            "in": "query",
            "name": "label",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by this label prefix",
            "in": "query",
            "maximum": 2147483647,
            "minimum": 1,
            "name": "labelPrefix",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of i4dn property filter. e.g. \"com.myorga.state:IN:waiting|processing\" or \"com.myorga.orderId:EQ:SAP001\"",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "property",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfGuidCollection"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Collections",
          "Organizations"
        ],
        "description": "Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. `com.yourcompany.orderId.eq=1234`  ",
        "operationId": "getAllCollectionsOfOrganization",
        "summary": "Get collections of organization"
      }
    },
    "/api/v1/organizations/{organizationId}/logo": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization where the logo should be deleted.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "operationId": "deleteOrganizationLogo",
        "summary": "Delete organization logo"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization where the logo should be updated.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "An image containing the new logo.",
            "format": "binary",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PublicImagePresentation"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Updating an organization logo using a multipart file upload.",
        "operationId": "setOrganizationLogo",
        "summary": "Update organization logo"
      }
    },
    "/api/v1/organizations/{organizationId}/messaging": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueuePresentation"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Messaging"
        ],
        "operationId": "getDefaultQueue"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Messaging"
        ],
        "operationId": "patchDefaultQueue"
      }
    },
    "/api/v1/organizations/{organizationId}/partner": {
      "delete": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemovePartnerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Removing a partner organization",
        "operationId": "removePartnerOrganization",
        "summary": "Remove partner"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization to query partner organizations",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfPartnerOrganization"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Listing partners in a paginated manner.",
        "operationId": "getPartnerOrganizations",
        "summary": "Get partners of an organization"
      },
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddPartnerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Adding a partner organization. If the given organization is already a partner the result will be state 200 too.",
        "operationId": "addPartnerOrganization",
        "summary": "Add partner"
      }
    },
    "/api/v1/organizations/{organizationId}/privileges": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Listing all privileges of the current user/APIKey of the specified organization.",
        "operationId": "getOrganizationPrivileges",
        "summary": "List my privileges"
      }
    },
    "/api/v1/organizations/{organizationId}/roles": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfUserRoles"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts",
          "Organizations"
        ],
        "description": "Listing users and their roles in a paginated manner.",
        "operationId": "getAllOrganizationRoles",
        "summary": "List users and their roles"
      }
    },
    "/api/v1/organizations/{organizationId}/users": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfUserPresentation"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts",
          "Organizations"
        ],
        "description": "Finding users in the specified organization in a paginated manner.",
        "operationId": "getUsersOfOrganization",
        "summary": "Find users in organization"
      }
    },
    "/api/v1/organizations/{organizationId}/users/invite": {
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization where users should be invited",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "invitationList",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationUserInvitationListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts",
          "Organizations"
        ],
        "operationId": "inviteUsers",
        "summary": "Invite Users"
      }
    },
    "/api/v1/organizations/{organizationId}/users/{username}/roles": {
      "delete": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "username",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "changeRoleRequest",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts",
          "Organizations"
        ],
        "operationId": "removeUserRoles",
        "summary": "Remove role(s) from user"
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "username",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfstring"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts",
          "Organizations"
        ],
        "operationId": "getUserRoles",
        "summary": "Get user roles by username"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The namespace of the organization",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "username",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "changeRoleRequest",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts",
          "Organizations"
        ],
        "operationId": "addUserRoles",
        "summary": "Add role(s) to user"
      }
    },
    "/api/v1/public/documents/{id4n}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "query",
            "name": "organizationId",
            "required": false,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter by owner organization",
            "in": "query",
            "name": "owner",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfDocument"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Public Services",
          "Storage"
        ],
        "description": "Listing all public documents of an id4n",
        "operationId": "listAllPublicDocuments",
        "summary": "List public documents"
      }
    },
    "/api/v1/public/documents/{id4n}/{organizationId}/{fileName}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "fileName",
            "in": "path",
            "name": "fileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Public Services",
          "Storage"
        ],
        "operationId": "readPublicDocument",
        "summary": "Read public document contents"
      }
    },
    "/api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "organizationId",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "fileName",
            "in": "path",
            "name": "fileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Public Services",
          "Storage"
        ],
        "operationId": "getPublicDocument",
        "summary": "Retrieve a public document (meta-data only, no content)"
      }
    },
    "/api/v1/public/history/{id4n}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "GUID to retrieve the history for",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfHistoryItem"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Public Services"
        ],
        "description": "Only contains public history items",
        "operationId": "listPublicHistory",
        "summary": "Shows the public history of the given GUID"
      }
    },
    "/api/v1/public/image/{imageID}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The id of the image to be resolved.",
            "in": "path",
            "name": "imageID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Images",
          "Public Services"
        ],
        "operationId": "resolveImageUsingGET",
        "summary": "Resolve image"
      }
    },
    "/api/v1/public/organizations/{organizationId}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "Organization ID",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Public Services"
        ],
        "operationId": "readOrganizationInfo",
        "summary": "Read public organization information"
      }
    },
    "/api/v1/public/routes/{id4n}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "default": "web",
            "description": "type",
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "interpolate",
            "in": "query",
            "name": "interpolate",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Route"
              },
              "type": "array"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Public Services"
        ],
        "operationId": "getRoutes",
        "summary": "Retrieve all public routes for a GUID"
      }
    },
    "/api/v1/roles": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "If specified the roles will be filtered containing that privilege.",
            "in": "query",
            "name": "privilege",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfRole"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "description": "Listing of roles.",
        "operationId": "listAllRoles",
        "summary": "List roles"
      }
    },
    "/api/v1/routingfiles/{id4n}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "organizationId",
            "in": "query",
            "name": "organizationId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoutingFile"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Routing"
        ],
        "operationId": "getRoutingFile",
        "summary": "Retrieve routing file"
      },
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "rfr",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoutingFileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Routing"
        ],
        "operationId": "updateRoutingFile",
        "summary": "Store routing file"
      }
    },
    "/api/v1/routingfiles/{id4n}/route/{type}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of route you want to have",
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "privateRoutes",
            "in": "query",
            "name": "privateRoutes",
            "required": false,
            "type": "boolean"
          },
          {
            "default": true,
            "description": "publicRoutes",
            "in": "query",
            "name": "publicRoutes",
            "required": false,
            "type": "boolean"
          },
          {
            "default": true,
            "description": "interpolate",
            "in": "query",
            "name": "interpolate",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Route"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Routing"
        ],
        "operationId": "getRoute",
        "summary": "Retrieve current route of a GUID (or ID4N)"
      }
    },
    "/api/v1/routingfiles/{id4n}/routes/{type}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "The type of route you want to have",
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "organizationId",
            "in": "query",
            "name": "organizationId",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "interpolate",
            "in": "query",
            "name": "interpolate",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Route"
              },
              "type": "array"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Routing"
        ],
        "operationId": "getAllRoutes",
        "summary": "Retrieve all routes of a GUID (or ID4N)"
      }
    },
    "/api/v1/search/guids": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The alias to search for",
            "in": "query",
            "name": "alias",
            "required": true,
            "type": "string"
          },
          {
            "description": "Alias type type to search for",
            "enum": [
              "gtin",
              "article",
              "mapp",
              "item",
              "rfid",
              "tracking",
              "eclass",
              "unspsc",
              "product",
              "material",
              "reference"
            ],
            "in": "query",
            "name": "aliasType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfGuid"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Alias"
        ],
        "operationId": "searchByAlias",
        "summary": "Search for GUIDs by alias"
      }
    },
    "/api/v1/search/guids/aliases/types": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "enum": [
                  "gtin",
                  "article",
                  "mapp",
                  "item",
                  "rfid",
                  "tracking",
                  "eclass",
                  "unspsc",
                  "product",
                  "material",
                  "reference"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Alias"
        ],
        "description": "Retrieve this list to find out all alias types to use with alias search and change operations",
        "operationId": "getGuidAliasTypes",
        "summary": "List all supported alias types"
      }
    },
    "/api/v1/transfers/{id4n}/receiveInfo": {
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "This ID4N identifies the object to take hold of",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Required information to receive an id4n object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferReceiveInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Transfer"
        ],
        "description": "Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo",
        "operationId": "receive",
        "summary": "Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership"
      }
    },
    "/api/v1/transfers/{id4n}/sendInfo": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The ID4N to retrieve information about",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TransferSendInfo"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Transfer"
        ],
        "operationId": "getSendInfo",
        "summary": "Show transfer preparation information"
      },
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The ID4N to prepare for transfer",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          },
          {
            "description": "Transfer preparation status",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferSendInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Transfer"
        ],
        "operationId": "prepare",
        "summary": "Prepare an object for transfer"
      }
    },
    "/api/v1/user/organizations": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "role",
            "in": "query",
            "name": "role",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfOrganization"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts",
          "Organizations"
        ],
        "operationId": "getOrganizationsOfUser",
        "summary": "Retrieve organizations of user"
      }
    },
    "/api/v1/users": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "usernamePrefix",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start with the n-th element",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The maximum count of returned elements",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfUserPresentation"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "findUsers",
        "summary": "Find users"
      }
    },
    "/api/v1/users/{username}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "username",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserPresentation"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "findUserByUsername",
        "summary": "Find by username"
      }
    },
    "/go/{guid}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "guid",
            "in": "path",
            "name": "guid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "tags": [
          "Public Services"
        ],
        "description": "Forwarding to the designated route defined in the routing,",
        "operationId": "go",
        "summary": "Forward"
      }
    },
    "/login": {
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "tags": [
          "Accounts"
        ],
        "description": "ID4i API Login",
        "operationId": "login"
      }
    },
    "/whois/{id4n}": {
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "id4n",
            "in": "path",
            "name": "id4n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WhoIsResponse"
            }
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "tags": [
          "Public Services",
          "WhoIs"
        ],
        "operationId": "resolveWhoIsEntry",
        "summary": "Resolve owner of id4n"
      }
    }
  },
  "definitions": {
    "AccountCredentials": {
      "properties": {
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "title": "AccountCredentials",
      "type": "object"
    },
    "AddApiKeyPrivilegeRequest": {
      "properties": {
        "privilege": {
          "type": "string"
        }
      },
      "required": [
        "privilege"
      ],
      "title": "AddApiKeyPrivilegeRequest",
      "type": "object"
    },
    "AddPartnerRequest": {
      "properties": {
        "organizationId": {
          "description": "The namespace of the partner organization to add",
          "example": "org.acme",
          "type": "string"
        }
      },
      "required": [
        "organizationId"
      ],
      "title": "AddPartnerRequest",
      "type": "object"
    },
    "ApiError": {
      "properties": {
        "code": {
          "enum": [
            "ERR_REGISTRATION_VERIFICATION_NO_TOKEN",
            "ERR_REGISTRATION_VERIFICATION_INVALID_TOKEN",
            "ERR_REGISTRATION_VERIFICATION_EXPIRED_TOKEN",
            "ERR_AUTHENTICATION_NO_TOKEN",
            "ERR_AUTHENTICATION_INVALID_TOKEN",
            "ERR_AUTHENTICATION_EXPIRED_TOKEN",
            "ERR_AUTHENTICATION_FAILED",
            "ERR_AUTHORIZATION_MISSING_PRIVILEGES",
            "ERR_AUTHORIZATION_FORBIDDEN",
            "ERR_AUTHORIZATION_REQUIRE_USER",
            "ERR_INPUT_VALIDATION_FAILED",
            "ERR_FIELD_INPUT_VALIDATION_FAILED",
            "ERR_VALIDATION_CONSTRAINT_FAILED",
            "ERR_INPUT_NOT_READABLE",
            "ERR_INVALID_INPUT_PARAMETER",
            "ERR_GUID_CREATION",
            "ERR_INVALID_ID4N_OBJECT_TYPE",
            "ERR_MISSING_BILLING_INFORMATION",
            "ERR_COLLECTION_UPDATE_DENIED",
            "ERR_ENTITY_NOT_FOUND",
            "ERR_ENTITY_TOO_BIG",
            "ERR_DUPLICATE",
            "ERR_INTERNAL",
            "ERR_UNKNOWN",
            "ERR_INVALID_ORGANIZATION_USERROLE",
            "ERR_ORGANIZATION_ROLE_INCONSISTENCY",
            "ERR_ORGANIZATION_NOT_DELETABLE",
            "ERR_USER_ALREADY_IN_ORGANIZATION",
            "ERR_USER_INVITATION_NEEDS_MINIMUM_ONE_ROLE",
            "ERR_USER_INVITATION_SPECIFY_EMAIL_OR_USERNAME",
            "ERR_USER_DEACTIVATED",
            "ERR_LANGUAGE_NOT_SUPPORTED",
            "ERR_EMAIL_MISSING_TEMPLATE_PARAM",
            "ERR_EMAIL_TEMPLATE_NOT_AVAILABLE",
            "ERR_EMAIL_PREPARATION_FAILED",
            "ERR_IMAGE_CONVERSION",
            "ERR_UPLOAD_TOO_LARGE",
            "ERR_INVALID_ALIAS_TYPE",
            "ERR_INVALID_URI_TEMPLATE",
            "ERR_INVALID_URI_TEMPLATE_VARIABLE",
            "ERR_INVALID_NAMESPACE",
            "ERR_INVALID_PROPERTY_KEY",
            "ERR_INVALID_FILTER",
            "ERR_NAMESPACE_ALREADY_EXISTS",
            "ERR_INSECURE_PASSWORD",
            "ERR_TRANSFER_DENIED",
            "ERR_INVALID_PHYSICAL_STATE",
            "ERR_INVALID_HISTORY_PROPERTY_NAMESPACE",
            "ERR_INVALID_HISTORY_PROPERTY_VALUE",
            "ERR_ORGA_CANNOT_BE_OWN_PARTNER",
            "ERR_INVALID_GS1_CODE",
            "ERR_INVALID_GS1_CHAR_IN_CODE",
            "ERR_INVALID_GS1_CODE_NOT_UNIQUE",
            "ERR_INVALID_GS1_GTIN",
            "ERR_GS1_CODE_CURRENTLY_UNSUPPORTED"
          ],
          "type": "string"
        },
        "errorId": {
          "type": "string"
        },
        "errorList": {
          "items": {
            "$ref": "#/definitions/ApiError"
          },
          "type": "array"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "errorId",
        "errorList",
        "message"
      ],
      "title": "ApiError",
      "type": "object"
    },
    "ApiKeyChangeRequest": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "newLabel": {
          "maxLength": 50,
          "minLength": 5,
          "type": "string"
        }
      },
      "required": [
        "newLabel"
      ],
      "title": "ApiKeyChangeRequest",
      "type": "object"
    },
    "ApiKeyCreationRequest": {
      "properties": {
        "label": {
          "maxLength": 50,
          "minLength": 5,
          "type": "string"
        },
        "organizationId": {
          "example": "de.acme",
          "type": "string"
        },
        "secret": {
          "maxLength": 500,
          "minLength": 10,
          "type": "string"
        }
      },
      "required": [
        "label",
        "organizationId",
        "secret"
      ],
      "title": "ApiKeyCreationRequest",
      "type": "object"
    },
    "ApiKeyPresentation": {
      "properties": {
        "active": {
          "description": "Whether this API key is active",
          "example": true,
          "type": "boolean"
        },
        "createdAt": {
          "description": "The UTC unix timestamp of when this api key has been created",
          "example": 1517232722,
          "format": "int64",
          "type": "integer"
        },
        "createdBy": {
          "example": "user123",
          "type": "string"
        },
        "key": {
          "description": "The api key identifier",
          "example": "39978f49-6ff1-4147-bf0f-9910185084b7",
          "type": "string"
        },
        "label": {
          "description": "The label / name of the api key",
          "example": "My Api Key",
          "type": "string"
        },
        "organizationId": {
          "description": "The organization namespace this api key belongs to",
          "example": "de.acme",
          "type": "string"
        }
      },
      "required": [
        "active",
        "createdAt",
        "createdBy",
        "key",
        "label",
        "organizationId"
      ],
      "title": "ApiKeyPresentation",
      "type": "object"
    },
    "ApiKeyPrivilege": {
      "properties": {
        "id4nAssociated": {
          "type": "boolean"
        },
        "privilege": {
          "type": "string"
        }
      },
      "required": [
        "id4nAssociated",
        "privilege"
      ],
      "title": "ApiKeyPrivilege",
      "type": "object"
    },
    "ApiKeyPrivilegeInfo": {
      "properties": {
        "allowsBillableOperations": {
          "type": "boolean"
        },
        "helpText": {
          "type": "string"
        },
        "id4nAssociated": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id4nAssociated",
        "name"
      ],
      "title": "ApiKeyPrivilegeInfo",
      "type": "object"
    },
    "AppInfoPresentation": {
      "properties": {
        "branch": {
          "type": "string"
        },
        "commitTime": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productionMode": {
          "type": "boolean"
        },
        "revision": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "AppInfoPresentation",
      "type": "object"
    },
    "BillingPosition": {
      "properties": {
        "amount": {
          "format": "int64",
          "type": "integer"
        },
        "count": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "singlePrice": {
          "type": "number"
        },
        "sum": {
          "type": "number"
        },
        "unit": {
          "type": "string"
        }
      },
      "required": [
        "amount",
        "count",
        "description",
        "service",
        "singlePrice",
        "sum",
        "unit"
      ],
      "title": "BillingPosition",
      "type": "object"
    },
    "ChangeLogEntry": {
      "description": "A changelog entry",
      "properties": {
        "id": {
          "description": "The unique id of the changelog entry",
          "example": "e100123",
          "readOnly": true,
          "type": "string"
        },
        "message": {
          "description": "The message as template or rendered as plain text",
          "example": "User {{&user}} has changed the title of {{&object}}",
          "readOnly": true,
          "type": "string"
        },
        "messageProperties": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "The values of the properties in the message. May be nested as object with a value field ",
          "example": {
            "object": "nearly every object",
            "user": {
              "type": "user",
              "value": "a.vratny"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "timestamp": {
          "description": "The UTC unix timestamp when this change occurred",
          "example": 1517232722,
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        }
      },
      "title": "ChangeLogEntry",
      "type": "object"
    },
    "ChangeRoleRequest": {
      "properties": {
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "ChangeRoleRequest",
      "type": "object"
    },
    "CompleteUserRegistrationRequest": {
      "properties": {
        "password": {
          "maxLength": 99,
          "minLength": 8,
          "type": "string"
        },
        "username": {
          "pattern": "[a-zA-Z0-9_.-]{6,50}",
          "type": "string"
        },
        "verificationToken": {
          "type": "string"
        }
      },
      "required": [
        "password",
        "username",
        "verificationToken"
      ],
      "title": "CompleteUserRegistrationRequest",
      "type": "object"
    },
    "Country": {
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "name"
      ],
      "title": "Country",
      "type": "object"
    },
    "CreateCollectionRequest": {
      "properties": {
        "label": {
          "maxLength": 128,
          "minLength": 5,
          "type": "string"
        },
        "length": {
          "exclusiveMaximum": false,
          "exclusiveMinimum": false,
          "format": "int32",
          "maximum": 255,
          "minimum": 6,
          "type": "integer"
        },
        "organizationId": {
          "example": "de.acme",
          "type": "string"
        },
        "type": {
          "enum": [
            "ROUTING_COLLECTION",
            "LOGISTIC_COLLECTION",
            "LABELLED_COLLECTION"
          ],
          "type": "string"
        }
      },
      "required": [
        "length",
        "organizationId",
        "type"
      ],
      "title": "CreateCollectionRequest",
      "type": "object"
    },
    "CreateGuidRequest": {
      "description": "GUID creation information",
      "properties": {
        "count": {
          "description": "The total number of GUIDs to create",
          "example": 1,
          "exclusiveMaximum": false,
          "exclusiveMinimum": false,
          "format": "int32",
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        },
        "length": {
          "description": "The charactersequence length of the GUID",
          "example": 40,
          "exclusiveMaximum": false,
          "exclusiveMinimum": false,
          "format": "int32",
          "maximum": 255,
          "minimum": 7,
          "type": "integer"
        },
        "organizationId": {
          "description": "The namespace of the organization where the generated GUIDs should be assigned.",
          "example": "de.acme",
          "type": "string"
        }
      },
      "required": [
        "count",
        "length",
        "organizationId"
      ],
      "title": "CreateGuidRequest",
      "type": "object"
    },
    "Document": {
      "properties": {
        "filename": {
          "description": "File Name",
          "example": "publicInfo.pdf",
          "type": "string"
        },
        "mimeType": {
          "description": "Mime Type",
          "example": "text/plain",
          "type": "string"
        },
        "ownerOrganizationId": {
          "description": "The organization's namespace which owns the document",
          "example": "de.bluerain",
          "readOnly": true,
          "type": "string"
        },
        "visibility": {
          "$ref": "#/definitions/Visibility"
        }
      },
      "title": "Document",
      "type": "object"
    },
    "DocumentUpdate": {
      "properties": {
        "filename": {
          "description": "File Name",
          "example": "publicInfo.pdf",
          "type": "string"
        },
        "mimeType": {
          "description": "Mime Type",
          "example": "text/plain",
          "type": "string"
        },
        "visibility": {
          "$ref": "#/definitions/VisibilityUpdate"
        }
      },
      "title": "DocumentUpdate",
      "type": "object"
    },
    "Guid": {
      "properties": {
        "createdTimestamp": {
          "description": "The UTC unix timestamp of when this GUID has been created",
          "example": 1517232722,
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "holderOrganizationId": {
          "description": "Organization namespace of the GUID holder",
          "readOnly": true,
          "type": "string"
        },
        "id4n": {
          "description": "The ID",
          "example": "3THvgrWxqgTFC4",
          "readOnly": true,
          "type": "string"
        },
        "ownerOrganizationId": {
          "description": "Organization namespace of the GUID owner",
          "readOnly": true,
          "type": "string"
        },
        "physicalState": {
          "description": "Physical attachment state of the GUID",
          "enum": [
            "UNATTACHED",
            "ATTACHED",
            "DETACHED"
          ],
          "type": "string"
        }
      },
      "title": "Guid",
      "type": "object"
    },
    "GuidAlias": {
      "properties": {
        "alias": {
          "description": "An alias",
          "example": "alias",
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "alias"
      ],
      "title": "GuidAlias",
      "type": "object"
    },
    "GuidCollection": {
      "properties": {
        "createdTimestamp": {
          "description": "The UTC unix timestamp of when this collection has been created",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "holderOrganizationId": {
          "description": "Organization namespace of the holder of the collection",
          "type": "string"
        },
        "id4n": {
          "description": "The ID",
          "readOnly": true,
          "type": "string"
        },
        "label": {
          "maxLength": 128,
          "minLength": 5,
          "type": "string"
        },
        "ownerOrganizationId": {
          "description": "Organization namespace of the collection owner",
          "readOnly": true,
          "type": "string"
        },
        "physicalState": {
          "description": "Physical attachment state of the collection",
          "enum": [
            "UNATTACHED",
            "ATTACHED",
            "DETACHED"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "ROUTING_COLLECTION",
            "LOGISTIC_COLLECTION",
            "LABELLED_COLLECTION"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "title": "GuidCollection",
      "type": "object"
    },
    "HistoryItem": {
      "description": "GUID history item",
      "properties": {
        "additionalProperties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "History items custom additional properties",
          "type": "object"
        },
        "organizationId": {
          "description": "Originator of the history item",
          "example": "org.acme",
          "type": "string"
        },
        "ownerOrganizationId": {
          "description": "Owner of the history item",
          "example": "de.bluerain",
          "readOnly": true,
          "type": "string"
        },
        "sequenceId": {
          "description": "Forms the primary key of the history item together with the GUID and the organizationId",
          "example": 9784,
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "timestamp": {
          "description": "History item timestamp",
          "example": 1517232722,
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "Type of the history item",
          "enum": [
            "CREATED",
            "DESTROYED",
            "RECYCLED",
            "SHIPMENT_PREPARED",
            "STORED",
            "RETRIEVED_FROM_STORAGE",
            "PACKAGED",
            "DISPATCHED",
            "RECEIVED",
            "DELIVERY_REFUSED",
            "REPROCESSING_STARTED",
            "REPROCESSING_STEP_STARTED",
            "REPROCESSING_STEP_CANCELLED",
            "REPROCESSING_STEP_FINISHED",
            "REPROCESSING_CANCELLED",
            "REPROCESSING_FINISHED",
            "DISASSEMBLED",
            "MAINTENANCE_STARTED",
            "MAINTENANCE_STEP_STARTED",
            "MAINTENANCE_STEP_CANCELLED",
            "MAINTENANCE_STEP_FINISHED",
            "MAINTENANCE_CANCELLED",
            "MAINTENANCE_FINISHED",
            "PRODUCTION_STARTED",
            "PRODUCTION_CANCELLED",
            "PRODUCTION_FINISHED",
            "PRODUCTION_STEP_STARTED",
            "PRODUCTION_STEP_CANCELLED",
            "PRODUCTION_STEP_FINISHED",
            "QUALITY_CHECK_PERFORMED"
          ],
          "example": "DISPATCHED",
          "type": "string"
        },
        "visibility": {
          "$ref": "#/definitions/Visibility"
        }
      },
      "required": [
        "organizationId",
        "type"
      ],
      "title": "HistoryItem",
      "type": "object"
    },
    "HistoryItemUpdate": {
      "description": "GUID history item update (diff patch)",
      "properties": {
        "organizationId": {
          "description": "New organization id displayed for this item. If given, must match the holder of GUID and the organization the history item is found under.",
          "example": "de.acme",
          "type": "string"
        },
        "visibility": {
          "$ref": "#/definitions/Visibility"
        }
      },
      "title": "HistoryItemUpdate",
      "type": "object"
    },
    "Id4n": {
      "properties": {
        "id4n": {
          "description": "The ID",
          "example": "3THvgrWxqgTFC4",
          "type": "string"
        }
      },
      "title": "Id4n",
      "type": "object"
    },
    "Id4nPresentation": {
      "properties": {
        "createdTimestamp": {
          "description": "The UTC unix timestamp of when this ID has been created",
          "example": 1517232722,
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "holderOrganizationId": {
          "description": "Organization namespace of the holder of the ID",
          "example": "de.example",
          "readOnly": true,
          "type": "string"
        },
        "id4n": {
          "description": "The ID",
          "example": "3THvgrWxqgTFC4",
          "readOnly": true,
          "type": "string"
        },
        "label": {
          "readOnly": true,
          "type": "string"
        },
        "ownerOrganizationId": {
          "description": "Organization namespace of the ID owner",
          "example": "org.acme",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "The type of ID",
          "enum": [
            "GUID",
            "ROUTING_COLLECTION",
            "LOGISTIC_COLLECTION",
            "LABELLED_COLLECTION"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "title": "Id4nPresentation",
      "type": "object"
    },
    "ImportGS1CodesRequest": {
      "description": "GS1/MAPP codes import information",
      "properties": {
        "listOfGS1s": {
          "$ref": "#/definitions/ListOfGS1s"
        },
        "organizationId": {
          "description": "The organization where the GS1/Mapp code is imported.",
          "example": "de.acme",
          "type": "string"
        }
      },
      "required": [
        "listOfGS1s",
        "organizationId"
      ],
      "title": "ImportGS1CodesRequest",
      "type": "object"
    },
    "ListOfGS1s": {
      "description": "A list of GS1/MAPP codes",
      "properties": {
        "codes": {
          "description": "A list of GS1/MAPP codes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "ListOfGS1s",
      "type": "object"
    },
    "ListOfId4ns": {
      "description": "A list of id4ns",
      "properties": {
        "id4ns": {
          "description": "A list of id4ns.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "ListOfId4ns",
      "type": "object"
    },
    "Organization": {
      "description": "An organization",
      "properties": {
        "id": {
          "description": "The id of the organization ( Deprecated: Use namespace instead. )",
          "example": 100,
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "logoURL": {
          "description": "URL to a logo of the organization",
          "example": "/api/v1/public/images/abcdef",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "The name of the organization",
          "example": "ACME Inc.",
          "maxLength": 254,
          "minLength": 3,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the organization",
          "example": "de.acme",
          "maxLength": 255,
          "minLength": 3,
          "type": "string"
        }
      },
      "required": [
        "name",
        "namespace"
      ],
      "title": "Organization",
      "type": "object"
    },
    "OrganizationAddress": {
      "properties": {
        "city": {
          "example": "MyCity",
          "maxLength": 99,
          "minLength": 2,
          "type": "string"
        },
        "companyName": {
          "example": "ACME Inc.",
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "countryCode": {
          "description": "The ISO 3166 two-letter country code",
          "example": "DE",
          "maxLength": 2,
          "minLength": 0,
          "type": "string"
        },
        "countryName": {
          "description": "The country name",
          "example": "Germany",
          "readOnly": true,
          "type": "string"
        },
        "firstname": {
          "example": "Max",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "lastname": {
          "example": "Muster",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "postCode": {
          "example": 12345,
          "maxLength": 40,
          "minLength": 2,
          "type": "string"
        },
        "street": {
          "example": "Examplestreet 1",
          "maxLength": 254,
          "minLength": 3,
          "type": "string"
        },
        "telephone": {
          "description": "The telephone number e.g.",
          "example": "+49 8088 12345",
          "maxLength": 99,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "city",
        "countryCode",
        "firstname",
        "lastname",
        "postCode",
        "street"
      ],
      "title": "OrganizationAddress",
      "type": "object"
    },
    "OrganizationUpdate": {
      "description": "An organization",
      "properties": {
        "name": {
          "description": "The name of the organization",
          "example": "ACME Inc.",
          "maxLength": 254,
          "minLength": 3,
          "type": "string"
        }
      },
      "title": "OrganizationUpdate",
      "type": "object"
    },
    "OrganizationUserInvitation": {
      "properties": {
        "email": {
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userName": {
          "type": "string"
        }
      },
      "required": [
        "roles"
      ],
      "title": "OrganizationUserInvitation",
      "type": "object"
    },
    "OrganizationUserInvitationListRequest": {
      "properties": {
        "invitations": {
          "items": {
            "$ref": "#/definitions/OrganizationUserInvitation"
          },
          "type": "array"
        }
      },
      "required": [
        "invitations"
      ],
      "title": "OrganizationUserInvitationListRequest",
      "type": "object"
    },
    "PaginatedResponseOfApiKeyPresentation": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/ApiKeyPresentation"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfApiKeyPresentation",
      "type": "object"
    },
    "PaginatedResponseOfApiKeyPrivilege": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/ApiKeyPrivilege"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfApiKeyPrivilege",
      "type": "object"
    },
    "PaginatedResponseOfApiKeyPrivilegeInfo": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/ApiKeyPrivilegeInfo"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfApiKeyPrivilegeInfo",
      "type": "object"
    },
    "PaginatedResponseOfChangeLogEntry": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/ChangeLogEntry"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfChangeLogEntry",
      "type": "object"
    },
    "PaginatedResponseOfCountry": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/Country"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfCountry",
      "type": "object"
    },
    "PaginatedResponseOfDocument": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/Document"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfDocument",
      "type": "object"
    },
    "PaginatedResponseOfGuid": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/Guid"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfGuid",
      "type": "object"
    },
    "PaginatedResponseOfGuidCollection": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/GuidCollection"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfGuidCollection",
      "type": "object"
    },
    "PaginatedResponseOfHistoryItem": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/HistoryItem"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfHistoryItem",
      "type": "object"
    },
    "PaginatedResponseOfId4nPresentation": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/Id4nPresentation"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfId4nPresentation",
      "type": "object"
    },
    "PaginatedResponseOfOrganization": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/Organization"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfOrganization",
      "type": "object"
    },
    "PaginatedResponseOfPartnerOrganization": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/PartnerOrganization"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfPartnerOrganization",
      "type": "object"
    },
    "PaginatedResponseOfRole": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/Role"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfRole",
      "type": "object"
    },
    "PaginatedResponseOfUserPresentation": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/UserPresentation"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfUserPresentation",
      "type": "object"
    },
    "PaginatedResponseOfUserRoles": {
      "properties": {
        "elements": {
          "items": {
            "$ref": "#/definitions/UserRoles"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfUserRoles",
      "type": "object"
    },
    "PaginatedResponseOfstring": {
      "properties": {
        "elements": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of returned elements",
          "example": 100,
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "Starting with the n-th element",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "description": "The total number of elements",
          "example": 200,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "elements",
        "limit",
        "offset"
      ],
      "title": "PaginatedResponseOfstring",
      "type": "object"
    },
    "PartnerOrganization": {
      "description": "A partner organization",
      "properties": {
        "logoURL": {
          "description": "URL to a logo of the organization",
          "example": "/api/v1/public/images/abcdef",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "The name of the organization",
          "example": "ACME Inc.",
          "maxLength": 254,
          "minLength": 3,
          "readOnly": true,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the organization",
          "example": "de.acme",
          "maxLength": 255,
          "minLength": 3,
          "readOnly": true,
          "type": "string"
        }
      },
      "title": "PartnerOrganization",
      "type": "object"
    },
    "PasswordResetRequest": {
      "properties": {
        "username": {
          "type": "string"
        }
      },
      "required": [
        "username"
      ],
      "title": "PasswordResetRequest",
      "type": "object"
    },
    "PasswordResetVerificationRequest": {
      "properties": {
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "password",
        "token"
      ],
      "title": "PasswordResetVerificationRequest",
      "type": "object"
    },
    "PublicImagePresentation": {
      "properties": {
        "uri": {
          "description": "The uri/url of the image",
          "example": "/api/v1/public/image/bc671c63-4a9b-46e7-8c59-9bbe1917e6cc",
          "readOnly": true,
          "type": "string"
        }
      },
      "title": "PublicImagePresentation",
      "type": "object"
    },
    "QueuePresentation": {
      "properties": {
        "active": {
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": "<default>",
          "type": "string"
        },
        "waitingMessages": {
          "description": "The count of queued messages",
          "example": true,
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "active",
        "id"
      ],
      "title": "QueuePresentation",
      "type": "object"
    },
    "QueueUpdateRequest": {
      "properties": {
        "active": {
          "description": "If this value is set to false the queue will be deleted.",
          "example": true,
          "type": "boolean"
        },
        "id": {
          "example": "<default>",
          "type": "string"
        },
        "purgeQueue": {
          "description": "Set this value to true if you want to purge the queue.",
          "example": false,
          "type": "boolean"
        }
      },
      "title": "QueueUpdateRequest",
      "type": "object"
    },
    "RegistrationVerificationTokenPresentation": {
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "required": [
        "token"
      ],
      "title": "RegistrationVerificationTokenPresentation",
      "type": "object"
    },
    "RemoveApiKeyPrivilegeRequest": {
      "properties": {
        "privilege": {
          "type": "string"
        }
      },
      "required": [
        "privilege"
      ],
      "title": "RemoveApiKeyPrivilegeRequest",
      "type": "object"
    },
    "RemovePartnerRequest": {
      "properties": {
        "organizationId": {
          "description": "The namespace of the partner organization to remove",
          "example": "org.acme",
          "type": "string"
        }
      },
      "required": [
        "organizationId"
      ],
      "title": "RemovePartnerRequest",
      "type": "object"
    },
    "Role": {
      "properties": {
        "name": {
          "type": "string"
        },
        "privileges": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "Role",
      "type": "object"
    },
    "Route": {
      "properties": {
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "priority": {
          "format": "int32",
          "type": "integer"
        },
        "public": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "validUntil": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "params",
        "public",
        "type"
      ],
      "title": "Route",
      "type": "object"
    },
    "RoutingFile": {
      "properties": {
        "options": {
          "$ref": "#/definitions/RoutingOptions"
        },
        "routes": {
          "items": {
            "$ref": "#/definitions/Route"
          },
          "type": "array"
        }
      },
      "required": [
        "routes"
      ],
      "title": "RoutingFile",
      "type": "object"
    },
    "RoutingFileRequest": {
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "routing": {
          "$ref": "#/definitions/RoutingFile"
        }
      },
      "required": [
        "routing"
      ],
      "title": "RoutingFileRequest",
      "type": "object"
    },
    "RoutingOptions": {
      "properties": {
        "deleteOutdatedRoutes": {
          "type": "boolean"
        }
      },
      "title": "RoutingOptions",
      "type": "object"
    },
    "ServiceCosts": {
      "properties": {
        "listing": {
          "additionalProperties": {
            "type": "number"
          },
          "type": "object"
        }
      },
      "required": [
        "listing"
      ],
      "title": "ServiceCosts",
      "type": "object"
    },
    "SimpleMessageResponse": {
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ],
      "title": "SimpleMessageResponse",
      "type": "object"
    },
    "TransferReceiveInfo": {
      "properties": {
        "organizationId": {
          "description": "Organization to take the ownership of the ID. If the sender chose to keep the ownership, this organization becomes the holder. Otherwise, it becomes the new owner.",
          "example": "de.id4i",
          "type": "string"
        }
      },
      "required": [
        "organizationId"
      ],
      "title": "TransferReceiveInfo",
      "type": "object"
    },
    "TransferSendInfo": {
      "properties": {
        "holderOrganizationId": {
          "description": "The current holder of the object",
          "example": "de.id4i",
          "readOnly": true,
          "type": "string"
        },
        "keepOwnership": {
          "description": "Keep the public ownership while transferring the object",
          "example": true,
          "type": "boolean"
        },
        "openForClaims": {
          "description": "Allow anyone who knows (or can scan) the ID4N to claim ownership of this object",
          "example": false,
          "type": "boolean"
        },
        "ownerOrganizationId": {
          "description": "The current publicly visible owner of the object",
          "example": "de.bluerain",
          "readOnly": true,
          "type": "string"
        },
        "recipientOrganizationIds": {
          "description": "Allow only these organizations to obtain this object",
          "example": [
            "de.acme",
            "com.porsche",
            "de.bluerain"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "keepOwnership",
        "openForClaims",
        "recipientOrganizationIds"
      ],
      "title": "TransferSendInfo",
      "type": "object"
    },
    "UserPresentation": {
      "properties": {
        "id": {
          "type": "string",
          "xml": {
            "attribute": false,
            "name": "id",
            "wrapped": false
          }
        },
        "name": {
          "type": "string"
        }
      },
      "title": "UserPresentation",
      "type": "object"
    },
    "UserRegistrationRequest": {
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "maxLength": 99,
          "minLength": 8,
          "type": "string"
        },
        "username": {
          "pattern": "[a-zA-Z0-9_.-]{6,50}",
          "type": "string"
        }
      },
      "required": [
        "email",
        "password",
        "username"
      ],
      "title": "UserRegistrationRequest",
      "type": "object"
    },
    "UserRegistrationResponse": {
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "title": "UserRegistrationResponse",
      "type": "object"
    },
    "UserRoles": {
      "properties": {
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "user": {
          "$ref": "#/definitions/UserPresentation"
        }
      },
      "title": "UserRoles",
      "type": "object"
    },
    "Visibility": {
      "properties": {
        "public": {
          "description": "Document is publicly readable (if ID4N is owned by the same organization)",
          "example": true,
          "type": "boolean"
        },
        "sharedOrganizationIds": {
          "description": "Document is readable by these organizations (independend of ID4N ownership)",
          "example": [
            "de.acme",
            "com.porsche",
            "de.bluerain"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "Visibility",
      "type": "object"
    },
    "VisibilityUpdate": {
      "properties": {
        "public": {
          "description": "Document is publicly readable (if ID4N is owned by the same organization)",
          "example": true,
          "type": "boolean"
        },
        "sharedWithOrganizationIds": {
          "description": "Document is readable by these organizations (independend of ID4N ownership)",
          "example": [
            "de.acme",
            "com.porsche",
            "de.bluerain"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "VisibilityUpdate",
      "type": "object"
    },
    "WhoIsResponse": {
      "properties": {
        "aliases": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "organization": {
          "$ref": "#/definitions/Organization"
        },
        "organizationAddress": {
          "$ref": "#/definitions/OrganizationAddress"
        }
      },
      "title": "WhoIsResponse",
      "type": "object"
    }
  },
  "securityDefinitions": {
    "Authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "tags": [
    {
      "description": "User accounts allows people to register for ID4i and login. All permissions and roles for interactive ID4i usage (as opposed to machine-to-machine interactions) are attached to Organizations and User Accounts. The API allows users to register, verify their registration, login and reset their passwords.",
      "name": "Accounts"
    },
    {
      "description": "Guid Alias Controller",
      "name": "Alias"
    },
    {
      "description": "Api Key Controller",
      "name": "Api Keys"
    },
    {
      "description": "Auditing services allow to review changes made by users or api keys. Changelog messages can be resolved as plain text or formatted message with parameters.",
      "name": "Auditing"
    },
    {
      "description": "Billing Controller",
      "name": "Billing"
    },
    {
      "description": "Collection Controller",
      "name": "Collections"
    },
    {
      "description": "Guid Alias Controller",
      "name": "Guids"
    },
    {
      "description": "Allows to retrieve a GUID's history and to publish new history items.",
      "name": "History"
    },
    {
      "description": "Services can use images stored with public visibility. This API allows you to retrieve the stored image by ID.",
      "name": "Images"
    },
    {
      "description": "Organization Messaging Controller",
      "name": "Messaging"
    },
    {
      "description": "App Info Controller",
      "name": "Meta Information"
    },
    {
      "description": "Country Controller",
      "name": "Organizations"
    },
    {
      "description": "Go Controller",
      "name": "Public Services"
    },
    {
      "description": "Routing Controller",
      "name": "Routing"
    },
    {
      "description": "Document Storage Controller",
      "name": "Storage"
    },
    {
      "description": "Id 4n Transfer Controller",
      "name": "Transfer"
    },
    {
      "description": "Who Is Controller",
      "name": "WhoIs"
    }
  ],
  "x-components": {
    "requestBodies": {
      "ChangeRoleRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ChangeRoleRequest"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/definitions/ChangeRoleRequest"
            }
          }
        },
        "description": "changeRoleRequest",
        "required": true
      },
      "ListOfId4ns": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ListOfId4ns"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/definitions/ListOfId4ns"
            }
          }
        },
        "description": "id4ns",
        "required": true
      },
      "ListOfId4ns2": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ListOfId4ns"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/definitions/ListOfId4ns"
            }
          }
        },
        "description": "listOfGuids",
        "required": true
      },
      "OrganizationAddress": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/OrganizationAddress"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/definitions/OrganizationAddress"
            }
          }
        },
        "description": "addressResource",
        "required": true
      },
      "createDocument": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "properties": {
                "content": {
                  "description": "content",
                  "format": "binary",
                  "type": "string"
                }
              },
              "required": [
                "content"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      }
    }
  }
}