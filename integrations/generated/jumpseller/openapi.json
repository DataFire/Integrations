{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.jumpseller.com",
  "basePath": "/v1",
  "info": {
    "contact": {
      "x-twitter": "jumpseller"
    },
    "description": "# Endpoint Structure\n\nAll URLs are in the format: \n\n```text\nhttps://api.jumpseller.com/v1/path.json?login=XXXXXX&authtoken=storetoken  \n```\n\nThe path is prefixed by the API version and the URL takes as parameters the login (your store specific API login) and your authentication token.\n<br/><br/>\n***\n\n# Version\n\nThe current version of the API is **v1**.  \nIf we change the API in backward-incompatible ways, we'll increase the version number and maintain stable support for the old urls.\n<br/><br/>\n***\n\n# Authentication\n\nThe API uses a token-based authentication with a combination of a login key and an auth token. **Both parameters can be found on the left sidebar of the Account section, accessed from the main menu of your Admin Panel**. The auth token of the user can be reset on the same page.\n\n![Store Login](/images/support/api/apilogin.png)\n\nThe auth token is a **32 characters** string.\n\nIf you are developing a Jumpseller App, the authentication should be done using [OAuth-2](/support/oauth-2). Please read the article [Build an App](/support/apps) for more information.\n<br/><br/>\n***\n\n# Curl Examples\n\nTo request all the products at your store, you would append the products index path to the base url to create an URL with the format:  \n\n```text\nhttps://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX\n```\n\nIn curl, you can invoque that URL with:  \n\n```text\ncurl -X GET \"https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX\"\n```\n\nTo create a product, you will include the JSON data and specify the MIME Type:  \n\n```text\ncurl -X POST -d '{ \"product\" : {\"name\": \"My new Product!\", \"price\": 100} }' \"https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX\" -H \"Content-Type:application/json\"\n```\n\nand to update the product identified with 123:  \n\n```text\ncurl -X PUT -d '{ \"product\" : {\"name\": \"My updated Product!\", \"price\": 99} }' \"https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX\" -H \"Content-Type:application/json\"\n```\n\nor delete it:  \n\n```text\ncurl -X DELETE \"https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX\" -H \"Content-Type:application/json\"\n```\n<br/><br/>\n***\n\n# PHP Examples\n\nCreate a new Product (POST method)\n\n```php\n$url = 'https://api.jumpseller.com/v1/products.json?login=XXXXX&authtoken=XXXXX;\n$ch = curl_init($url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"POST\"); //post method\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '{ \"product\" : {\"name\": \"My updated Product!\", \"price\": 99} }');\n\n$result = curl_exec($ch);\nprint_r($result);\ncurl_close($ch);\n```\n<br/><br/>\n***\n\n# Plain JSON only. No XML.\n\n* We only support JSON for data serialization.\n* Our node format has no root element.  \n* We use snake_case to describe attribute keys (like \"created_at\").  \n* All empty value are replaced with **null** strings.\n* All API URLs end in .json to indicate that they accept and return JSON.\n* POST and PUT methods require you to explicitly state the MIME type of your request's body content as **\"application/json\"**.\n<br/><br/>\n***\n\n# Rate Limit\nYou can perform a maximum of:\n\n+ 240 (two hundred forty) requests per minute and\n+ 8 (eight) requests per second \n\nIf you exceed this limit, you'll get a 403 Forbidden (Rate Limit Exceeded) response for subsequent requests.  \n\nThe rate limits apply by IP address and by store. This means that multiple requests on different stores are not counted towards the same rate limit.\n\nThis limits are necessary to ensure resources are correctly used. Your application should be aware of this limits and retry any unsuccessful request, check the following Ruby stub:\n\n```ruby\ntries = 0; max_tries = 3;\nbegin\n  HTTParty.send(method, uri) # perform an API call.\n  sleep 0.5\n  tries += 1\nrescue\n  unless tries >= max_tries\n    sleep 1.0 # wait the necessary time before retrying the call again.\n    retry\n  end\nend\n```\n\nFinally, you can review the Response Headers of each request:\n\n```text\nJumpseller-PerMinuteRateLimit-Limit: 60  \nJumpseller-PerMinuteRateLimit-Remaining: 59 # requests available on the per-second interval  \nJumpseller-PerSecondRateLimit-Limit: 2  \nJumpseller-PerSecondRateLimit-Remaining: 1 # requests available on the per-second interval\n``` \n\nto better model your application requests intervals.\n\nIn the event of getting your IP banned, the Response Header `Jumpseller-BannedByRateLimit-Reset` informs you the time when will your ban be reseted.\n<br/><br/>\n***\n\n# Pagination\n\nBy default we will return 50 objects (products, orders, etc) per page. There is a maximum of 100, using a query string `&limit=100`.\nIf the result set gets paginated it is your responsibility to check the next page for more objects -- you do this by using query strings `&page=2`, `&page=3` and so on.\n\n```text\nhttps://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX&page=3&limit=100\n```\n<br/><br/>\n***\n\n# More\n* [Jumpseller API wrapper](https://gitlab.com/jumpseller-api/ruby) provides a public Ruby abstraction over our API;\n* [Apps Page](/apps) showcases external integrations with Jumpseller done by technical experts;\n* [Imgbb API](https://api.imgbb.com/) provides an easy way to upload and temporaly host for images and files.\n<br/><br/>\n***\n<br/><br/>\n",
    "title": "Jumpseller API",
    "version": "1.0.0",
    "x-apisguru-categories": [
      "ecommerce"
    ],
    "x-logo": {
      "altText": "Jumpseller logo",
      "href": "/",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_jumpseller_profile_image.png"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://api.jumpseller.com/swagger.json",
        "version": "3.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "jumpseller.com",
    "x-datafire": {
      "name": "jumpseller",
      "type": "openapi"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "parameters": {
    "AuthtokenParam": {
      "description": "API OAuth token.",
      "format": "string",
      "in": "query",
      "name": "authtoken",
      "required": true,
      "type": "string"
    },
    "CustomerIDParam": {
      "description": "Id of the Customer",
      "format": "int32",
      "in": "path",
      "name": "id",
      "required": true,
      "type": "integer"
    },
    "LimitParam": {
      "default": 50,
      "description": "List restriction",
      "format": "integer",
      "in": "query",
      "maximum": 200,
      "name": "limit",
      "required": false,
      "type": "integer"
    },
    "LocaleParam": {
      "description": "Locale code of the translation",
      "format": "string",
      "in": "query",
      "name": "locale",
      "required": false,
      "type": "string"
    },
    "LoginParam": {
      "description": "API OAuth login.",
      "format": "string",
      "in": "query",
      "name": "login",
      "required": true,
      "type": "string"
    },
    "PageParam": {
      "default": 1,
      "description": "List page",
      "format": "integer",
      "in": "query",
      "name": "page",
      "required": false,
      "type": "integer"
    },
    "ProductIDParam": {
      "description": "Id of the Product",
      "format": "int32",
      "in": "path",
      "name": "id",
      "required": true,
      "type": "integer"
    }
  },
  "paths": {
    "/categories.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        },
        "summary": "Retrieve all Categories.",
        "tags": [
          "Categories"
        ],
        "operationId": "categories.json.get"
      },
      "post": {
        "description": "Category's permalink is automatically generated from the given category's name.",
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Category parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        },
        "summary": "Create a new Category.",
        "tags": [
          "Categories"
        ],
        "operationId": "categories.json.post"
      }
    },
    "/categories/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        },
        "summary": "Count all Categories.",
        "tags": [
          "Categories"
        ],
        "operationId": "categories.count.json.get"
      }
    },
    "/categories/{id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Category",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Category Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing Category.",
        "tags": [
          "Categories"
        ],
        "operationId": "categories.id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Category",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The selected Category.",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "Category Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Category.",
        "tags": [
          "Categories"
        ],
        "operationId": "categories.id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Category",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Category parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "Category Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Modify an existing Category.",
        "tags": [
          "Categories"
        ],
        "operationId": "categories.id.json.put"
      }
    },
    "/checkout_custom_fields.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          },
          {
            "$ref": "#/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Checkout Custom Fields",
            "schema": {
              "items": {
                "$ref": "#/definitions/CheckoutCustomField"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Checkout Custom Fields.",
        "tags": [
          "Checkout Custom Fields"
        ],
        "operationId": "checkout_custom_fields.json.get"
      },
      "post": {
        "description": "Type values can be: input, selection, checkbox, date or text. Area values can be: contact, billing_shipping or other.",
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "CheckoutCustomField parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutCustomFieldEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckoutCustomField"
            }
          },
          "404": {
            "description": "CheckoutCustomField Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Create a new CheckoutCustomField.",
        "tags": [
          "Checkout Custom Fields"
        ],
        "operationId": "checkout_custom_fields.json.post"
      }
    },
    "/checkout_custom_fields/{id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CheckoutCustomField",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "CheckoutCustomField Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing CheckoutCustomField.",
        "tags": [
          "Checkout Custom Fields"
        ],
        "operationId": "checkout_custom_fields.id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CheckoutCustomField",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckoutCustomField"
            }
          },
          "404": {
            "description": "CheckoutCustomField Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single CheckoutCustomField.",
        "tags": [
          "Checkout Custom Fields"
        ],
        "operationId": "checkout_custom_fields.id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CheckoutCustomField",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "CheckoutCustomField parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutCustomFieldEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckoutCustomField"
            }
          },
          "404": {
            "description": "CheckoutCustomField Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Update a CheckoutCustomField.",
        "tags": [
          "Checkout Custom Fields"
        ],
        "operationId": "checkout_custom_fields.id.json.put"
      }
    },
    "/countries.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Countries",
            "schema": {
              "items": {
                "$ref": "#/definitions/Country"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Countries.",
        "tags": [
          "Countries"
        ],
        "operationId": "countries.json.get"
      }
    },
    "/countries/{country_code}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ISO3166 Country Code",
            "format": "string",
            "in": "path",
            "name": "country_code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A Country information object",
            "schema": {
              "$ref": "#/definitions/Country"
            }
          },
          "404": {
            "description": "Country Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Country information.",
        "tags": [
          "Countries"
        ],
        "operationId": "countries.country_code.json.get"
      }
    },
    "/countries/{country_code}/regions.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ISO3166 Country Code",
            "format": "string",
            "in": "path",
            "name": "country_code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Regions from a single Country",
            "schema": {
              "items": {
                "$ref": "#/definitions/Region"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Country Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve all Regions from a single Country.",
        "tags": [
          "Countries",
          "Regions"
        ],
        "operationId": "countries.country_code.regions.json.get"
      }
    },
    "/countries/{country_code}/regions/{region_code}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ISO3166 Country Code",
            "format": "string",
            "in": "path",
            "name": "country_code",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region Code",
            "format": "string",
            "in": "path",
            "name": "region_code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A Region information object",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "404": {
            "description": "Country or Region not found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Region information object.",
        "tags": [
          "Countries",
          "Regions"
        ],
        "operationId": "countries.country_code.regions.region_code.json.get"
      }
    },
    "/custom_fields.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Custom Fields",
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomField"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Store's Custom Fields.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "custom_fields.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Custom Field parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomFieldEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          }
        },
        "summary": "Create a new Custom Field.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "custom_fields.json.post"
      }
    },
    "/custom_fields/{id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CustomField",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "CustomField Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing CustomField.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "custom_fields.id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CustomField",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "404": {
            "description": "CustomField Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single CustomField.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "custom_fields.id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CustomField",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "CustomField parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomFieldEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "404": {
            "description": "CustomField Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Update a CustomField.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "custom_fields.id.json.put"
      }
    },
    "/customer_categories.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          },
          {
            "$ref": "#/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Customer Categories",
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomerCategory"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Customer Categories.",
        "tags": [
          "Customer Categories"
        ],
        "operationId": "customer_categories.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "CustomerCategory parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerCategoryEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Create a new CustomerCategory.",
        "tags": [
          "Customer Categories"
        ],
        "operationId": "customer_categories.json.post"
      }
    },
    "/customer_categories/{id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CustomerCategory",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing CustomerCategory.",
        "tags": [
          "Customer Categories"
        ],
        "operationId": "customer_categories.id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CustomerCategory",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single CustomerCategory.",
        "tags": [
          "Customer Categories"
        ],
        "operationId": "customer_categories.id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CustomerCategory",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "CustomerCategory parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerCategoryEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Update a CustomerCategory.",
        "tags": [
          "Customer Categories"
        ],
        "operationId": "customer_categories.id.json.put"
      }
    },
    "/customer_categories/{id}/customers.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CustomerCategory",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Customer parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomersToCustomerCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete Customers from an existing CustomerCategory.",
        "tags": [
          "Customer Categories"
        ],
        "operationId": "customer_categories.id.customers.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CustomerCategory",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieves the customers in a CustomerCategory.",
        "tags": [
          "Customer Categories"
        ],
        "operationId": "customer_categories.id.customers.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the CustomerCategory",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Customer parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomersToCustomerCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Customers in the Customer Category",
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "CustomerCategory Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Adds Customers to a CustomerCategory.",
        "tags": [
          "Customer Categories"
        ],
        "operationId": "customer_categories.id.customers.json.post"
      }
    },
    "/customers.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          },
          {
            "$ref": "#/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Orders",
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Customers.",
        "tags": [
          "Customers"
        ],
        "operationId": "customers.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Customer parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerWithPasswordNoID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Create a new Customer.",
        "tags": [
          "Customers"
        ],
        "operationId": "customers.json.post"
      }
    },
    "/customers/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        },
        "summary": "Count all Customers.",
        "tags": [
          "Customers"
        ],
        "operationId": "customers.count.json.get"
      }
    },
    "/customers/email/{email}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Email of the Customer",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Customer by email.",
        "tags": [
          "Customers"
        ],
        "operationId": "customers.email.email.json.get"
      }
    },
    "/customers/{id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Customer",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing Customer.",
        "tags": [
          "Customers"
        ],
        "operationId": "customers.id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Customer",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Customer by id.",
        "tags": [
          "Customers"
        ],
        "operationId": "customers.id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Customer",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Customer parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerWithPasswordNoID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Update a new Customer.",
        "tags": [
          "Customers"
        ],
        "operationId": "customers.id.json.put"
      }
    },
    "/customers/{id}/fields": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Customer",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomerAdditionalField"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieves the Customer Additional Field of a Customer.",
        "tags": [
          "Customer Additional Fields"
        ],
        "operationId": "customers.id.fields.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Customer",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Customer Additional Field parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAdditionalFieldEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerAdditionalField"
            }
          },
          "404": {
            "description": "Customer Additional Field Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Adds Customer Additional Fields to a Customer.",
        "tags": [
          "Customer Additional Fields"
        ],
        "operationId": "customers.id.fields.post"
      }
    },
    "/customers/{id}/fields/{field_id}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/CustomerIDParam"
          },
          {
            "description": "Id of the Customer Additional Field",
            "format": "int32",
            "in": "path",
            "name": "field_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete a Customer Additional Field.",
        "tags": [
          "Customer Additional Fields"
        ],
        "operationId": "customers.id.fields.field_id.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Customer",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Id of the Customer Additional Field",
            "format": "int32",
            "in": "path",
            "name": "field_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerAdditionalField"
            }
          },
          "404": {
            "description": "Customer Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Customer Additional Field.",
        "tags": [
          "Customer Additional Fields"
        ],
        "operationId": "customers.id.fields.field_id.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/CustomerIDParam"
          },
          {
            "description": "Id of the Customer Additional Field",
            "format": "int32",
            "in": "path",
            "name": "field_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Customer Additional Field parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAdditionalFieldEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerAdditionalField"
            }
          },
          "400": {
            "description": "Customer Additional Field Bad Parameters.",
            "schema": {
              "$ref": "#/definitions/BadParams"
            }
          },
          "404": {
            "description": "Customer Additional Field Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Update a Customer Additional Field.",
        "tags": [
          "Customer Additional Fields"
        ],
        "operationId": "customers.id.fields.field_id.put"
      }
    },
    "/hooks.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          },
          {
            "$ref": "#/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Hooks",
            "schema": {
              "items": {
                "$ref": "#/definitions/Hook"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Hooks.",
        "tags": [
          "Hooks"
        ],
        "operationId": "hooks.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Hook parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HookEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Hook"
            }
          },
          "404": {
            "description": "Hook Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Create a new Hook.",
        "tags": [
          "Hooks"
        ],
        "operationId": "hooks.json.post"
      }
    },
    "/hooks/{id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Hook",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Hook Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing Hook.",
        "tags": [
          "Hooks"
        ],
        "operationId": "hooks.id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Hook",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Hook"
            }
          },
          "404": {
            "description": "Hook Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Hook.",
        "tags": [
          "Hooks"
        ],
        "operationId": "hooks.id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Hook",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Hook parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HookEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Hook"
            }
          },
          "404": {
            "description": "Hook Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Update a Hook.",
        "tags": [
          "Hooks"
        ],
        "operationId": "hooks.id.json.put"
      }
    },
    "/jsapps.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        },
        "summary": "Retrieve all the Store's JSApps",
        "tags": [
          "Apps"
        ],
        "operationId": "jsapps.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "JSApp parameters to create",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JSAppEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JSApp"
            }
          }
        },
        "summary": "Create a Store JSApp",
        "tags": [
          "Apps"
        ],
        "operationId": "jsapps.json.post"
      }
    },
    "/jsapps/{code}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Code of the App",
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "App Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing JSApp.",
        "tags": [
          "Apps"
        ],
        "operationId": "jsapps.code.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Code of the App",
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JSApp"
            }
          }
        },
        "summary": "Retrieve a JSApp",
        "tags": [
          "Apps"
        ],
        "operationId": "jsapps.code.json.get"
      }
    },
    "/orders.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          },
          {
            "$ref": "#/parameters/PageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Orders",
            "schema": {
              "items": {
                "$ref": "#/definitions/Order"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Orders.",
        "tags": [
          "Orders"
        ],
        "operationId": "orders.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Order parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "summary": "Create a new Order.",
        "tags": [
          "Orders"
        ],
        "operationId": "orders.json.post"
      }
    },
    "/orders/after/{id}.json": {
      "get": {
        "description": "For example the GET /orders/after/5000 will return Order 5001, 5002, 5003, etc.",
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Order",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve orders filtered by Order Id.",
        "tags": [
          "Orders"
        ],
        "operationId": "orders.after.id.json.get"
      }
    },
    "/orders/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        },
        "summary": "Count all Orders.",
        "tags": [
          "Orders"
        ],
        "operationId": "orders.count.json.get"
      }
    },
    "/orders/status/{status}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Status of the Order used as filter",
            "enum": [
              "Abandoned",
              "Canceled",
              "Pending Payment",
              "Paid"
            ],
            "in": "path",
            "name": "status",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Order"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Status Invalid.",
            "schema": {
              "$ref": "#/definitions/StatusInvalid"
            }
          }
        },
        "summary": "Retrieve orders filtered by status.",
        "tags": [
          "Orders"
        ],
        "operationId": "orders.status.status.json.get"
      }
    },
    "/orders/{id}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Order",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Order.",
        "tags": [
          "Orders"
        ],
        "operationId": "orders.id.json.get"
      },
      "put": {
        "description": "Only `status`, `shipment_status`, `tracking_number`, `tracking_company`, `additional_information` and `additional_fields` are available for update.",
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Order",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Order parameters to change",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Modify an existing Order.",
        "tags": [
          "Orders"
        ],
        "operationId": "orders.id.json.put"
      }
    },
    "/orders/{id}/history.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Order",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "An array with Order History",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrderHistory"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Order History.",
        "tags": [
          "Orders"
        ],
        "operationId": "orders.id.history.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the OrderHistory",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Order History parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderHistoryEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderHistory"
            }
          }
        },
        "summary": "Create a new Order History Entry.",
        "tags": [
          "Orders"
        ],
        "operationId": "orders.id.history.json.post"
      }
    },
    "/payment_methods.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Payment Methods",
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Store's Payment Methods.",
        "tags": [
          "Payment Methods"
        ],
        "operationId": "payment_methods.json.get"
      }
    },
    "/payment_methods/{id}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Payment Method",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "404": {
            "description": "PaymentMethod Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Payment Method.",
        "tags": [
          "Payment Methods"
        ],
        "operationId": "payment_methods.id.json.get"
      }
    },
    "/products.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          },
          {
            "$ref": "#/parameters/PageParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Products.",
        "tags": [
          "Products"
        ],
        "operationId": "products.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          },
          {
            "description": "Product parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        },
        "summary": "Create a new Product.",
        "tags": [
          "Products"
        ],
        "operationId": "products.json.post"
      }
    },
    "/products/after/{id}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieves Products after the given id.",
        "tags": [
          "Products"
        ],
        "operationId": "products.after.id.json.get"
      }
    },
    "/products/category/{category_id}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          },
          {
            "description": "Category ID of the Product used as filter",
            "format": "int32",
            "in": "path",
            "name": "category_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve Products filtered by category.",
        "tags": [
          "Products"
        ],
        "operationId": "products.category.category_id.json.get"
      }
    },
    "/products/category/{category_id}/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          },
          {
            "description": "Category ID of the Product used as filter",
            "format": "int32",
            "in": "path",
            "name": "category_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          },
          "404": {
            "description": "Category Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Count Products filtered by category.",
        "tags": [
          "Products"
        ],
        "operationId": "products.category.category_id.count.json.get"
      }
    },
    "/products/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        },
        "summary": "Count all Products.",
        "tags": [
          "Products"
        ],
        "operationId": "products.count.json.get"
      }
    },
    "/products/search.json": {
      "get": {
        "description": "Endpoint example: \n\n```text\nhttps://api.jumpseller.com/v1/products/search.json?login=XXXXXX&authtoken=XXXXX&query=test&fields=name,description \n```",
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          },
          {
            "description": "Text to query for the Product",
            "format": "string",
            "in": "query",
            "name": "query",
            "required": true,
            "type": "string"
          },
          {
            "description": "Comma separated values of the fields to query for the Product",
            "enum": [
              "sku",
              "barcode",
              "brand",
              "name",
              "description",
              "variants",
              "option_name",
              "custom_fields",
              "custom_fields_selects"
            ],
            "format": "string",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of products",
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Invalid query.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a Product List from a query.",
        "tags": [
          "Products"
        ],
        "operationId": "products.search.json.get"
      }
    },
    "/products/status/{status}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          },
          {
            "description": "Status of the Product used as filter",
            "enum": [
              "available",
              "not-available",
              "disabled"
            ],
            "in": "path",
            "name": "status",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Status Invalid.",
            "schema": {
              "$ref": "#/definitions/StatusInvalid"
            }
          }
        },
        "summary": "Retrieve Products filtered by status.",
        "tags": [
          "Products"
        ],
        "operationId": "products.status.status.json.get"
      }
    },
    "/products/status/{status}/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          },
          {
            "description": "Status of the Product used as filter",
            "enum": [
              "available",
              "not-available",
              "disabled"
            ],
            "in": "path",
            "name": "status",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          },
          "404": {
            "description": "Status Invalid.",
            "schema": {
              "$ref": "#/definitions/StatusInvalid"
            }
          }
        },
        "summary": "Count Products filtered by status.",
        "tags": [
          "Products"
        ],
        "operationId": "products.status.status.count.json.get"
      }
    },
    "/products/{id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing Product.",
        "tags": [
          "Products"
        ],
        "operationId": "products.id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Product.",
        "tags": [
          "Products"
        ],
        "operationId": "products.id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "$ref": "#/parameters/LocaleParam"
          },
          {
            "description": "Product parameters to change",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Modify an existing Product.",
        "tags": [
          "Products"
        ],
        "operationId": "products.id.json.put"
      }
    },
    "/products/{id}/attachments.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Attachment"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve all Product Attachments.",
        "tags": [
          "Product Attachments"
        ],
        "operationId": "products.id.attachments.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Product Attachment parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachmentEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        },
        "summary": "Create a new Product Attachment.",
        "tags": [
          "Product Attachments"
        ],
        "operationId": "products.id.attachments.json.post"
      }
    },
    "/products/{id}/attachments/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Count all Product Attachments.",
        "tags": [
          "Product Attachments"
        ],
        "operationId": "products.id.attachments.count.json.get"
      }
    },
    "/products/{id}/attachments/{attachment_id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Attachment",
            "format": "int32",
            "in": "path",
            "name": "attachment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete a Product Attachment.",
        "tags": [
          "Product Attachments"
        ],
        "operationId": "products.id.attachments.attachment_id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Attachment",
            "format": "int32",
            "in": "path",
            "name": "attachment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Product Attachment.",
        "tags": [
          "Product Attachments"
        ],
        "operationId": "products.id.attachments.attachment_id.json.get"
      }
    },
    "/products/{id}/digital_products.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/DigitalProduct"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve all Product DigitalProducts.",
        "tags": [
          "Product DigitalProducts"
        ],
        "operationId": "products.id.digital_products.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Product DigitalProduct parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DigitalProductEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DigitalProduct"
            }
          }
        },
        "summary": "Create a new Product DigitalProduct.",
        "tags": [
          "Product DigitalProducts"
        ],
        "operationId": "products.id.digital_products.json.post"
      }
    },
    "/products/{id}/digital_products/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Count all Product DigitalProducts.",
        "tags": [
          "Product DigitalProducts"
        ],
        "operationId": "products.id.digital_products.count.json.get"
      }
    },
    "/products/{id}/digital_products/{digital_product_id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product DigitalProduct",
            "format": "int32",
            "in": "path",
            "name": "digital_product_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete a Product DigitalProduct.",
        "tags": [
          "Product DigitalProducts"
        ],
        "operationId": "products.id.digital_products.digital_product_id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product DigitalProduct",
            "format": "int32",
            "in": "path",
            "name": "digital_product_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DigitalProduct"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Product DigitalProduct.",
        "tags": [
          "Product DigitalProducts"
        ],
        "operationId": "products.id.digital_products.digital_product_id.json.get"
      }
    },
    "/products/{id}/fields.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductCustomField"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve all Product Custom Fields",
        "tags": [
          "Product Custom Fields"
        ],
        "operationId": "products.id.fields.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Product Custom Field parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Create a new Product Custom Field.",
        "tags": [
          "Product Custom Fields"
        ],
        "operationId": "products.id.fields.json.post"
      }
    },
    "/products/{id}/fields/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Count all Product Custom Fields.",
        "tags": [
          "Product Custom Fields"
        ],
        "operationId": "products.id.fields.count.json.get"
      }
    },
    "/products/{id}/images.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Image"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve all Product Images.",
        "tags": [
          "Product Images"
        ],
        "operationId": "products.id.images.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Product Image parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          }
        },
        "summary": "Create a new Product Image.",
        "tags": [
          "Product Images"
        ],
        "operationId": "products.id.images.json.post"
      }
    },
    "/products/{id}/images/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Count all Product Images.",
        "tags": [
          "Product Images"
        ],
        "operationId": "products.id.images.count.json.get"
      }
    },
    "/products/{id}/images/{image_id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Image",
            "format": "int32",
            "in": "path",
            "name": "image_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete a Product Image.",
        "tags": [
          "Product Images"
        ],
        "operationId": "products.id.images.image_id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Image",
            "format": "int32",
            "in": "path",
            "name": "image_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Product Image.",
        "tags": [
          "Product Images"
        ],
        "operationId": "products.id.images.image_id.json.get"
      }
    },
    "/products/{id}/options.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductOption"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve all Product Options.",
        "tags": [
          "Product Options"
        ],
        "operationId": "products.id.options.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Product Option parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOptionEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductOption"
            }
          }
        },
        "summary": "Create a new Product Option.",
        "tags": [
          "Product Options"
        ],
        "operationId": "products.id.options.json.post"
      }
    },
    "/products/{id}/options/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Count all Product Options.",
        "tags": [
          "Product Options"
        ],
        "operationId": "products.id.options.count.json.get"
      }
    },
    "/products/{id}/options/{option_id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Option",
            "format": "int32",
            "in": "path",
            "name": "option_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete a Product Option.",
        "tags": [
          "Product Options"
        ],
        "operationId": "products.id.options.option_id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Option",
            "format": "int32",
            "in": "path",
            "name": "option_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductOption"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Product Option.",
        "tags": [
          "Product Options"
        ],
        "operationId": "products.id.options.option_id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Option",
            "format": "int32",
            "in": "path",
            "name": "option_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product option parameters to change",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOptionEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductOption"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Modify an existing Product Option.",
        "tags": [
          "Product Options"
        ],
        "operationId": "products.id.options.option_id.json.put"
      }
    },
    "/products/{id}/options/{option_id}/values.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the Product Option",
            "format": "int32",
            "in": "path",
            "name": "option_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductOptionValue"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve all Product Option Values.",
        "tags": [
          "Product Option Values"
        ],
        "operationId": "products.id.options.option_id.values.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Option",
            "format": "int32",
            "in": "path",
            "name": "option_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product Option Value parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOptionValueEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductOptionValue"
            }
          }
        },
        "summary": "Create a new Product Option Value.",
        "tags": [
          "Product Option Values"
        ],
        "operationId": "products.id.options.option_id.values.json.post"
      }
    },
    "/products/{id}/options/{option_id}/values/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the Product Option",
            "format": "int32",
            "in": "path",
            "name": "option_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Count all Product Option Values.",
        "tags": [
          "Product Option Values"
        ],
        "operationId": "products.id.options.option_id.values.count.json.get"
      }
    },
    "/products/{id}/options/{option_id}/values/{value_id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Option",
            "format": "int32",
            "in": "path",
            "name": "option_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the Product Option Value",
            "format": "int32",
            "in": "path",
            "name": "value_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete a Product Option Value.",
        "tags": [
          "Product Option Values"
        ],
        "operationId": "products.id.options.option_id.values.value_id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Option",
            "format": "int32",
            "in": "path",
            "name": "option_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the Product Option Value",
            "format": "int32",
            "in": "path",
            "name": "value_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductOptionValue"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Product Option Value.",
        "tags": [
          "Product Option Values"
        ],
        "operationId": "products.id.options.option_id.values.value_id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Option",
            "format": "int32",
            "in": "path",
            "name": "option_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Id of the Product Option Value",
            "format": "int32",
            "in": "path",
            "name": "value_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product option value parameters to change",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOptionValueEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductOptionValue"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Modify an existing Product Option Value.",
        "tags": [
          "Product Option Values"
        ],
        "operationId": "products.id.options.option_id.values.value_id.json.put"
      }
    },
    "/products/{id}/variants.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Variant"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve all Product Variants.",
        "tags": [
          "Product Variants"
        ],
        "operationId": "products.id.variants.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Product Variant parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariantEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Variant"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Create a new Product Variant.",
        "tags": [
          "Product Variants"
        ],
        "operationId": "products.id.variants.json.post"
      }
    },
    "/products/{id}/variants/count.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "ID of the Product",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Count all Product Variants.",
        "tags": [
          "Product Variants"
        ],
        "operationId": "products.id.variants.count.json.get"
      }
    },
    "/products/{id}/variants/{variant_id}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Variant",
            "format": "int32",
            "in": "path",
            "name": "variant_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Variant"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Product Variant.",
        "tags": [
          "Product Variants"
        ],
        "operationId": "products.id.variants.variant_id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "$ref": "#/parameters/ProductIDParam"
          },
          {
            "description": "Id of the Product Variant",
            "format": "int32",
            "in": "path",
            "name": "variant_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product Variant parameters to change",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariantEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Variant"
            }
          },
          "404": {
            "description": "Product Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Modify an existing Product Variant.",
        "tags": [
          "Product Variants"
        ],
        "operationId": "products.id.variants.variant_id.json.put"
      }
    },
    "/promotions.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Promotions' list restriction (default: 50 | max: 200).",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Promotions' list page (default: 1).",
            "format": "integer",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Promotions",
            "schema": {
              "items": {
                "$ref": "#/definitions/Promotion"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Promotions.",
        "tags": [
          "Promotions"
        ],
        "operationId": "promotions.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Promotion parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PromotionEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Promotion"
            }
          },
          "404": {
            "description": "Promotion Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Create a new Promotion.",
        "tags": [
          "Promotions"
        ],
        "operationId": "promotions.json.post"
      }
    },
    "/promotions/{id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Promotion",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Promotion Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing Promotion.",
        "tags": [
          "Promotions"
        ],
        "operationId": "promotions.id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Promotion",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Promotion"
            }
          },
          "404": {
            "description": "Promotion Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Promotion.",
        "tags": [
          "Promotions"
        ],
        "operationId": "promotions.id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Promotion",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Promotion parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PromotionEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Promotion"
            }
          },
          "404": {
            "description": "Promotion Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Update a Promotion.",
        "tags": [
          "Promotions"
        ],
        "operationId": "promotions.id.json.put"
      }
    },
    "/shipping_methods.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Shipping Methods",
            "schema": {
              "items": {
                "$ref": "#/definitions/ShippingMethod"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Store's Shipping Methods.",
        "tags": [
          "Shipping Methods"
        ],
        "operationId": "shipping_methods.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Shipping Method parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingMethodCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ShippingMethod"
            }
          },
          "404": {
            "description": "ShippingMethod Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Creates a Shipping Method.",
        "tags": [
          "Shipping Methods"
        ],
        "operationId": "shipping_methods.json.post"
      }
    },
    "/shipping_methods/{id}.json": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Shipping Method",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Shipping Method Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Delete an existing Shipping Method.",
        "tags": [
          "Shipping Methods"
        ],
        "operationId": "shipping_methods.id.json.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Shipping Method",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ShippingMethod"
            }
          },
          "404": {
            "description": "ShippingMethod Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Shipping Method.",
        "tags": [
          "Shipping Methods"
        ],
        "operationId": "shipping_methods.id.json.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Shipping Method",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Shipping Method parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingMethodCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ShippingMethod"
            }
          },
          "404": {
            "description": "Shipping Method Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Update a Shipping Method.",
        "tags": [
          "Shipping Methods"
        ],
        "operationId": "shipping_methods.id.json.put"
      }
    },
    "/store/info.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          }
        },
        "summary": "Retrieve Store Information",
        "tags": [
          "Stores"
        ],
        "operationId": "store.info.json.get"
      }
    },
    "/store/languages.json": {
      "get": {
        "description": "",
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Language"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve Store Languages",
        "tags": [
          "Stores"
        ],
        "operationId": "store.languages.json.get"
      }
    },
    "/taxes.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Taxes",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tax"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve all Taxes.",
        "tags": [
          "Taxes"
        ],
        "operationId": "taxes.json.get"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Tax parameters.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          },
          "404": {
            "description": "Tax Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Create a new Tax.",
        "tags": [
          "Taxes"
        ],
        "operationId": "taxes.json.post"
      }
    },
    "/taxes/{id}.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/LoginParam"
          },
          {
            "$ref": "#/parameters/AuthtokenParam"
          },
          {
            "description": "Id of the Tax",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A Tax information object",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          },
          "404": {
            "description": "Tax Not Found.",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        },
        "summary": "Retrieve a single Tax information.",
        "tags": [
          "Taxes"
        ],
        "operationId": "taxes.id.json.get"
      }
    }
  },
  "definitions": {
    "App": {
      "properties": {
        "apps": {
          "items": {
            "$ref": "#/definitions/AppFields"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AppFields": {
      "properties": {
        "author": {
          "description": "Author of the app",
          "type": "string"
        },
        "code": {
          "description": "Code of the app",
          "type": "string"
        },
        "description": {
          "description": "Description of the app",
          "type": "string"
        },
        "js": {
          "default": false,
          "description": "True if the app is a jsapp",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the app",
          "type": "string"
        },
        "page": {
          "description": "Page of the app",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Attachment": {
      "properties": {
        "attachment": {
          "$ref": "#/definitions/AttachmentFields"
        }
      },
      "type": "object"
    },
    "AttachmentEdit": {
      "properties": {
        "attachment": {
          "$ref": "#/definitions/AttachmentEditFields"
        }
      },
      "type": "object"
    },
    "AttachmentEditFields": {
      "properties": {
        "filename": {
          "description": "Filename of the attachment (with file extensison)",
          "type": "string"
        },
        "url": {
          "description": "Public accessible URL with the desired file contents. (LIMIT: 100MB)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AttachmentFields": {
      "properties": {
        "id": {
          "description": "Unique identifier of the attachment",
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "description": "Private URL of the attachment",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BadParams": {
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "BillingAddress": {
      "properties": {
        "address": {
          "description": "Address of the Customer's Billing Address",
          "type": "string"
        },
        "city": {
          "description": "City of the Customer's Billing Address",
          "type": "string"
        },
        "country": {
          "description": "Country code of the Customer's Billing Address (ISO 3166-1 alpha-2)",
          "type": "string"
        },
        "municipality": {
          "description": "Municipality of the Customer's Billing Address",
          "type": "string"
        },
        "name": {
          "description": "Name of the Customer's Billing Address",
          "type": "string"
        },
        "postal": {
          "description": "Postal code of the Customer's Billing Address",
          "type": "string"
        },
        "region": {
          "description": "Region code of the Customer's Billing Address (Use the FIPS standard - http://www.geonames.org/countries/)",
          "type": "string"
        },
        "surname": {
          "description": "Surname of the Customer's Billing Address",
          "type": "string"
        },
        "taxid": {
          "description": "Tax id of the Customer's Billing Address",
          "type": "string"
        }
      }
    },
    "Category": {
      "properties": {
        "category": {
          "$ref": "#/definitions/CategoryFields"
        }
      },
      "type": "object"
    },
    "CategoryEdit": {
      "properties": {
        "category": {
          "$ref": "#/definitions/CategoryEditFields"
        }
      },
      "type": "object"
    },
    "CategoryEditFields": {
      "properties": {
        "name": {
          "description": "Name of the Category",
          "type": "string"
        },
        "parent_id": {
          "description": "Unique identifier of the Parent Category",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CategoryFields": {
      "properties": {
        "id": {
          "description": "Unique identifier of the Category",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the Category",
          "type": "string"
        },
        "parent_id": {
          "description": "Unique identifier of the Parent Category",
          "format": "int32",
          "type": "integer"
        },
        "permalink": {
          "description": "Category unique URL path",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CheckoutCustomField": {
      "properties": {
        "checkout_custom_field": {
          "$ref": "#/definitions/CheckoutCustomFieldFields"
        }
      },
      "type": "object"
    },
    "CheckoutCustomFieldEdit": {
      "properties": {
        "checkout_custom_field": {
          "$ref": "#/definitions/CheckoutCustomFieldEditFields"
        }
      },
      "type": "object"
    },
    "CheckoutCustomFieldEditFields": {
      "properties": {
        "area": {
          "description": "Area of the CheckoutCustomField",
          "enum": [
            "contact",
            "billing_shipping",
            "other"
          ],
          "type": "string"
        },
        "custom_field_select_options": {
          "description": "The values for the CheckoutCustomField selection",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "deletable": {
          "default": false,
          "description": "True if the CheckoutCustomField can be removed from the store",
          "type": "boolean"
        },
        "label": {
          "description": "Label given to the CheckoutCustomField",
          "type": "string"
        },
        "position": {
          "description": "Position of the CheckoutCustomField",
          "format": "int32",
          "type": "integer"
        },
        "required": {
          "default": false,
          "description": "True if the CheckoutCustomField is mandatory",
          "type": "boolean"
        },
        "type": {
          "description": "Type of the CheckoutCustomField",
          "enum": [
            "text",
            "select",
            "input",
            "checkbox",
            "date"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CheckoutCustomFieldFields": {
      "properties": {
        "area": {
          "description": "Area of the CheckoutCustomField",
          "enum": [
            "contact",
            "billing_shipping",
            "other"
          ],
          "type": "string"
        },
        "custom_field_select_options": {
          "description": "The values for the CheckoutCustomField selection",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "deletable": {
          "default": false,
          "description": "True if the CheckoutCustomField can be removed from the store",
          "type": "boolean"
        },
        "id": {
          "description": "Unique identifier of the CheckoutCustomField",
          "format": "int32",
          "type": "integer"
        },
        "label": {
          "description": "Label given to the CheckoutCustomField",
          "type": "string"
        },
        "position": {
          "description": "Position of the CheckoutCustomField",
          "format": "int32",
          "type": "integer"
        },
        "required": {
          "default": false,
          "description": "True if the CheckoutCustomField is mandatory",
          "type": "boolean"
        },
        "type": {
          "description": "Type of the CheckoutCustomField",
          "enum": [
            "text",
            "select",
            "input",
            "checkbox"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Count": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Country": {
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CustomField": {
      "properties": {
        "custom_field": {
          "$ref": "#/definitions/CustomFieldFields"
        }
      },
      "type": "object"
    },
    "CustomFieldEdit": {
      "properties": {
        "custom_field": {
          "$ref": "#/definitions/CustomFieldEditFields"
        }
      },
      "type": "object"
    },
    "CustomFieldEditFields": {
      "properties": {
        "label": {
          "description": "Label given to the Custom Field",
          "type": "string"
        },
        "type": {
          "description": "Type of the Custom Field",
          "enum": [
            "text",
            "selection",
            "input"
          ],
          "type": "string"
        },
        "values": {
          "description": "All the possible Values of the Custom Field (for type 'selection')",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CustomFieldFields": {
      "properties": {
        "id": {
          "description": "Unique identifier of the Custom Field",
          "format": "int32",
          "type": "integer"
        },
        "label": {
          "description": "Label given to the Custom Field",
          "type": "string"
        },
        "type": {
          "description": "Type of the Custom Field",
          "enum": [
            "text",
            "selection",
            "input"
          ],
          "type": "string"
        },
        "values": {
          "description": "All the possible Values of the Custom Field (for type 'selection')",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Customer": {
      "properties": {
        "customer": {
          "$ref": "#/definitions/CustomerFields"
        }
      },
      "type": "object"
    },
    "CustomerAdditionalField": {
      "properties": {
        "customer_additional_field": {
          "$ref": "#/definitions/CustomerAdditionalFieldFields"
        }
      },
      "type": "object"
    },
    "CustomerAdditionalFieldEdit": {
      "properties": {
        "customer_additional_field": {
          "$ref": "#/definitions/CustomerAdditionalFieldEditFields"
        }
      },
      "type": "object"
    },
    "CustomerAdditionalFieldEditFields": {
      "properties": {
        "checkout_custom_field_id": {
          "description": "Unique identifier of the Checkout Custom Field",
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "description": "Value of the Customer Additional Field",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerAdditionalFieldFields": {
      "properties": {
        "area": {
          "description": "Area of the Customer Additional Field",
          "type": "string"
        },
        "checkout_custom_field_id": {
          "description": "Unique identifier of the Checkout Custom Field",
          "format": "int32",
          "type": "integer"
        },
        "customer_id": {
          "description": "Unique identifier of the Customer",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "Unique identifier of the Customer Additional Field",
          "format": "int32",
          "type": "integer"
        },
        "label": {
          "description": "Label of the Customer Additional Field",
          "type": "string"
        },
        "value": {
          "description": "Value of the Customer Additional Field",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerCategory": {
      "properties": {
        "category": {
          "$ref": "#/definitions/CustomerCategoryFields"
        }
      },
      "type": "object"
    },
    "CustomerCategoryEdit": {
      "properties": {
        "category": {
          "$ref": "#/definitions/CustomerCategoryEditFields"
        }
      },
      "type": "object"
    },
    "CustomerCategoryEditFields": {
      "properties": {
        "name": {
          "description": "Name of the CustomerCategory",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerCategoryFields": {
      "properties": {
        "code": {
          "description": "Code of the CustomerCategory",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the CustomerCategory",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the CustomerCategory",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerFields": {
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/BillingAddress"
        },
        "customer_additional_fields": {
          "items": {
            "$ref": "#/definitions/CustomerAdditionalField"
          },
          "type": "array"
        },
        "customer_categories": {
          "items": {
            "$ref": "#/definitions/CustomerCategory"
          },
          "type": "array"
        },
        "email": {
          "description": "Email of the Customer",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the Customer",
          "format": "int32",
          "type": "integer"
        },
        "phone": {
          "description": "Phone of the Customer",
          "type": "string"
        },
        "shipping_address": {
          "$ref": "#/definitions/ShippingAddress"
        },
        "status": {
          "description": "Status of the Customer",
          "enum": [
            "approved",
            "pending",
            "disabled"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerFieldsWithPassword": {
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/BillingAddress"
        },
        "email": {
          "description": "Email of the Customer",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the Customer",
          "format": "int32",
          "type": "integer"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "phone": {
          "description": "Phone of the Customer",
          "type": "string"
        },
        "shipping_address": {
          "$ref": "#/definitions/ShippingAddress"
        },
        "status": {
          "description": "Status of the Customer",
          "enum": [
            "approved",
            "pending",
            "disabled"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerFieldsWithPasswordNoID": {
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/BillingAddress"
        },
        "customer_category": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "email": {
          "description": "Email of the Customer",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "phone": {
          "description": "Phone of the Customer",
          "type": "string"
        },
        "shipping_address": {
          "$ref": "#/definitions/ShippingAddress"
        },
        "status": {
          "description": "Status of the Customer",
          "enum": [
            "approved",
            "pending",
            "disabled"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerToCustomerCategory": {
      "properties": {
        "email": {
          "description": "Email of the Customer",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the Customer",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CustomerWithPassword": {
      "properties": {
        "customer": {
          "$ref": "#/definitions/CustomerFieldsWithPassword"
        }
      },
      "type": "object"
    },
    "CustomerWithPasswordNoID": {
      "properties": {
        "customer": {
          "$ref": "#/definitions/CustomerFieldsWithPasswordNoID"
        }
      },
      "type": "object"
    },
    "CustomersToCustomerCategory": {
      "properties": {
        "customers": {
          "items": {
            "$ref": "#/definitions/CustomerToCustomerCategory"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DigitalProduct": {
      "properties": {
        "digital_product": {
          "$ref": "#/definitions/DigitalProductFields"
        }
      },
      "type": "object"
    },
    "DigitalProductEdit": {
      "properties": {
        "digital_product": {
          "$ref": "#/definitions/DigitalProductEditFields"
        }
      },
      "type": "object"
    },
    "DigitalProductEditFields": {
      "properties": {
        "filename": {
          "description": "Filename of the digital product (with file extensison)",
          "type": "string"
        },
        "url": {
          "description": "Public accessible URL with the desired file contents. (LIMIT: 100MB)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DigitalProductFields": {
      "properties": {
        "expiration_seconds": {
          "description": "Time left in seconds before the current private URL expires",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "Unique identifier of the digital product",
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "description": "Private URL of the digital product",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Hook": {
      "properties": {
        "hook": {
          "$ref": "#/definitions/HookFields"
        }
      },
      "type": "object"
    },
    "HookEdit": {
      "properties": {
        "hook": {
          "$ref": "#/definitions/HookEditFields"
        }
      },
      "type": "object"
    },
    "HookEditFields": {
      "properties": {
        "event": {
          "description": "Event associated with Hook",
          "enum": [
            "order_updated",
            "order_pending_payment",
            "order_paid",
            "order_shipped",
            "order_canceled",
            "order_abandoned",
            "product_created",
            "product_updated",
            "product_deleted",
            "customer_created",
            "customer_updated",
            "customer_deleted"
          ],
          "type": "string"
        },
        "url": {
          "description": "Hook URL to be notified",
          "type": "string"
        }
      },
      "required": [
        "event",
        "url"
      ],
      "type": "object"
    },
    "HookFields": {
      "properties": {
        "created_at": {
          "description": "Hook creation date",
          "type": "string"
        },
        "event": {
          "description": "Event associated with Hook",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the Hook",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Hook name",
          "type": "string"
        },
        "url": {
          "description": "Hook URL to be notified",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Id": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Image": {
      "properties": {
        "image": {
          "$ref": "#/definitions/ImageFields"
        }
      },
      "type": "object"
    },
    "ImageEdit": {
      "properties": {
        "image": {
          "$ref": "#/definitions/ImageEditFields"
        }
      },
      "type": "object"
    },
    "ImageEditFields": {
      "properties": {
        "url": {
          "description": "Complete URL of the image",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImageFields": {
      "properties": {
        "id": {
          "description": "Unique identifier of the image",
          "format": "int32",
          "type": "integer"
        },
        "position": {
          "description": "Position of the image",
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "description": "Complete URL of the image",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JSApp": {
      "properties": {
        "element": {
          "description": "Element of Template to inject HTML",
          "type": "string"
        },
        "template": {
          "description": "Template of Store Theme to inject HTML",
          "type": "string"
        },
        "url": {
          "description": "Url of the HTML to inject",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JSAppEdit": {
      "properties": {
        "app": {
          "$ref": "#/definitions/JSApp"
        }
      },
      "type": "object"
    },
    "Language": {
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "NotFound": {
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Order": {
      "properties": {
        "order": {
          "$ref": "#/definitions/OrderFields"
        }
      },
      "type": "object"
    },
    "OrderAdditionalFields": {
      "description": "Additional field of an order",
      "properties": {
        "label": {
          "description": "Label of the additional field",
          "format": "string",
          "type": "string"
        },
        "value": {
          "description": "Value of the additional field",
          "format": "string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrderCreate": {
      "properties": {
        "order": {
          "$ref": "#/definitions/OrderCreateFields"
        }
      },
      "type": "object"
    },
    "OrderCreateFields": {
      "properties": {
        "additional_information": {
          "description": "Additional information for the given Order",
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/CustomerFields"
        },
        "products": {
          "items": {
            "$ref": "#/definitions/OrderProduct"
          },
          "type": "array"
        },
        "shipment_status": {
          "description": "Status of the Order Shipping",
          "enum": [
            "requested",
            "in_transit",
            "delivered",
            "failed"
          ],
          "type": "string"
        },
        "shipping_method_id": {
          "description": "Shipping method e.g. Royal Mail",
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "description": "Status of the Order",
          "enum": [
            "Abandoned",
            "Canceled",
            "Pending Payment",
            "Paid"
          ],
          "type": "string"
        },
        "tracking_company": {
          "description": "Shipping Company used for the given Order",
          "type": "string"
        },
        "tracking_number": {
          "description": "Shipping Tracking Number used for the given Order",
          "type": "string"
        }
      }
    },
    "OrderEdit": {
      "properties": {
        "order": {
          "$ref": "#/definitions/OrderEditFields"
        }
      },
      "type": "object"
    },
    "OrderEditFields": {
      "properties": {
        "additional_fields": {
          "description": "Array of additional fields for the given Order",
          "items": {
            "$ref": "#/definitions/OrderAdditionalFields"
          },
          "type": "array"
        },
        "additional_information": {
          "description": "Additional information for the given Order",
          "type": "string"
        },
        "shipment_status": {
          "description": "Status of the Order Shipping",
          "enum": [
            "requested",
            "in_transit",
            "delivered",
            "failed"
          ],
          "type": "string"
        },
        "status": {
          "description": "Status of the Order",
          "enum": [
            "Abandoned",
            "Canceled",
            "Pending Payment",
            "Paid"
          ],
          "type": "string"
        },
        "tracking_company": {
          "description": "Shipping Company used for the given Order",
          "type": "string"
        },
        "tracking_number": {
          "description": "Shipping Tracking Number used for the given Order",
          "type": "string"
        }
      }
    },
    "OrderFields": {
      "properties": {
        "additional_fields": {
          "description": "Array of additional fields for the given Order",
          "items": {
            "$ref": "#/definitions/OrderAdditionalFields"
          },
          "type": "array"
        },
        "additional_information": {
          "description": "Additional information for the given Order",
          "type": "string"
        },
        "billing_address": {
          "$ref": "#/definitions/BillingAddress"
        },
        "checkout_url": {
          "description": "Store Checkout Order URL for the given Order",
          "type": "string"
        },
        "coupons": {
          "description": "Promotion Coupons used on the given Order",
          "type": "string"
        },
        "created_at": {
          "description": "Order date",
          "type": "string"
        },
        "currency": {
          "description": "Currency of the Order",
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "discount": {
          "description": "Discount value for the given Order",
          "format": "float",
          "type": "number"
        },
        "duplicate_url": {
          "description": "Duplicate Order URL for the given Order",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the Order",
          "format": "int32",
          "type": "integer"
        },
        "payment_information": {
          "description": "Payment information for the given Order",
          "type": "string"
        },
        "payment_method_name": {
          "description": "Payment Method name used e.g. PayPal",
          "type": "string"
        },
        "products": {
          "items": {
            "$ref": "#/definitions/OrderProduct"
          },
          "type": "array"
        },
        "recovery_url": {
          "description": "Recovery Order URL for the given Order",
          "type": "string"
        },
        "shipment_status": {
          "description": "Shipment Status for Order Fulfillment.",
          "enum": [
            "delivered",
            "requested",
            "in_transit",
            "failed"
          ],
          "type": "string"
        },
        "shipping": {
          "description": "Shipping value for the given Order",
          "format": "float",
          "type": "number"
        },
        "shipping_address": {
          "$ref": "#/definitions/ShippingAddress"
        },
        "shipping_discount": {
          "description": "Shipping Discount value for the given order",
          "format": "float",
          "type": "number"
        },
        "shipping_method_id": {
          "description": "Shipping method e.g. Royal Mail",
          "format": "int32",
          "type": "integer"
        },
        "shipping_method_name": {
          "description": "Shipping method e.g. Royal Mail",
          "type": "string"
        },
        "shipping_tax": {
          "description": "Shipping Tax value for the given order",
          "format": "float",
          "type": "number"
        },
        "shipping_taxes": {
          "items": {
            "$ref": "#/definitions/OrderShippingTax"
          },
          "type": "array"
        },
        "source": {
          "$ref": "#/definitions/TrafficSource"
        },
        "status": {
          "description": "Status of the Order",
          "enum": [
            "Abandoned",
            "Canceled",
            "Pending Payment",
            "Paid"
          ],
          "type": "string"
        },
        "subtotal": {
          "description": "Subtotal value for the given Order. Excluding taxes, shipping and discounts",
          "format": "float",
          "type": "number"
        },
        "tax": {
          "description": "Tax value for the given order",
          "format": "float",
          "type": "number"
        },
        "total": {
          "description": "Total value for the given Order. Including taxes, shipping and discounts",
          "format": "float",
          "type": "number"
        },
        "tracking_company": {
          "description": "Company Used for Order Fulfillment.",
          "type": "string"
        },
        "tracking_number": {
          "description": "Tracking Number for Order Fulfillment.",
          "type": "string"
        },
        "tracking_url": {
          "description": "Tracking URL for Order Fulfillment.",
          "type": "string"
        }
      }
    },
    "OrderHistory": {
      "properties": {
        "order_history": {
          "$ref": "#/definitions/OrderHistoryFields"
        }
      },
      "type": "object"
    },
    "OrderHistoryEdit": {
      "properties": {
        "order_history": {
          "$ref": "#/definitions/OrderHistoryEditFields"
        }
      },
      "type": "object"
    },
    "OrderHistoryEditFields": {
      "properties": {
        "message": {
          "description": "Message of the Order History",
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrderHistoryFields": {
      "properties": {
        "created_at": {
          "description": "Creation date of the order history",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the Order History",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "Message of the Order History",
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrderProduct": {
      "properties": {
        "discount": {
          "description": "Discount of the Order Product",
          "format": "float",
          "type": "number"
        },
        "id": {
          "description": "Unique identifier of the original Product",
          "format": "int32",
          "type": "integer"
        },
        "image": {
          "description": "Image URL of the Order Product",
          "type": "string"
        },
        "name": {
          "description": "Name of the Order Product",
          "type": "string"
        },
        "price": {
          "description": "Price of the Order Product",
          "format": "float",
          "type": "number"
        },
        "qty": {
          "description": "Price of the Order Product",
          "format": "int32",
          "type": "integer"
        },
        "sku": {
          "description": "Stock Keeping Unit of the Order Product",
          "type": "string"
        },
        "taxes": {
          "items": {
            "$ref": "#/definitions/OrderProductTax"
          },
          "type": "array"
        },
        "variant_id": {
          "description": "Unique identifier of the original Product Variant",
          "format": "int32",
          "type": "integer"
        },
        "weight": {
          "default": 1,
          "description": "Weight of the Order Product",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "OrderProductTax": {
      "properties": {
        "fixed": {
          "default": false,
          "description": "False if rate is a percentage and true if rate is monetary",
          "type": "boolean"
        },
        "id": {
          "description": "Unique identifier of the Order Product Tax",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the category that the tax is associated with or the tax name",
          "type": "string"
        },
        "rate": {
          "description": "Tax rate",
          "format": "float",
          "type": "number"
        },
        "tax_on_product_price": {
          "default": false,
          "description": "False if tax is not included on product price",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "OrderShippingTax": {
      "properties": {
        "country": {
          "description": "Code of the associated country",
          "type": "string"
        },
        "fixed": {
          "default": false,
          "description": "False if rate is a percentage and true if rate is monetary",
          "type": "boolean"
        },
        "id": {
          "description": "Unique identifier of the Order Shipping Tax",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Tax name",
          "type": "string"
        },
        "rate": {
          "description": "Tax rate",
          "format": "float",
          "type": "number"
        },
        "region": {
          "description": "Code of the associated region",
          "type": "string"
        },
        "tax_on_shipping_price": {
          "default": false,
          "description": "False if shipping tax is not included on shipping price",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PaymentMethod": {
      "properties": {
        "payment_method": {
          "$ref": "#/definitions/PaymentMethodFields"
        }
      },
      "type": "object"
    },
    "PaymentMethodFields": {
      "properties": {
        "id": {
          "description": "Unique identifier of the Payment Method",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the Payment Method",
          "type": "string"
        },
        "type": {
          "description": "Type of the Payment Method",
          "enum": [
            "manual",
            "paypal",
            "pagseguro",
            "moneybookers",
            "webpay_cl",
            "easypay",
            "easypaycc",
            "easypayboleto",
            "ideal_basic",
            "hipay",
            "khipu",
            "mercado_pago",
            "ifthenpay",
            "eupago",
            "stripe",
            "payu",
            "servipag"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Product": {
      "properties": {
        "product": {
          "$ref": "#/definitions/ProductFields"
        }
      },
      "type": "object"
    },
    "ProductCustomField": {
      "properties": {
        "field": {
          "$ref": "#/definitions/ProductCustomFieldFields"
        }
      },
      "type": "object"
    },
    "ProductCustomFieldFields": {
      "properties": {
        "id": {
          "description": "Unique identifier of the ProductCustomField",
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "description": "The value for the ProductCustomField",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductEdit": {
      "properties": {
        "product": {
          "$ref": "#/definitions/ProductEditFields"
        }
      },
      "type": "object"
    },
    "ProductEditFields": {
      "properties": {
        "barcode": {
          "description": "Barcode of the product",
          "type": "string"
        },
        "categories": {
          "items": {
            "$ref": "#/definitions/CategoryFields"
          },
          "type": "array"
        },
        "description": {
          "description": "Description of the product",
          "type": "string"
        },
        "diameter": {
          "description": "Diameter of the product",
          "format": "float",
          "type": "number"
        },
        "featured": {
          "default": false,
          "description": "True if the product is featured",
          "type": "boolean"
        },
        "google_product_category": {
          "description": "Category of a Product based on the Google product taxonomy",
          "type": "string"
        },
        "height": {
          "description": "Height of the product",
          "format": "float",
          "type": "number"
        },
        "length": {
          "description": "Length of the product",
          "format": "float",
          "type": "number"
        },
        "meta_description": {
          "description": "SEO meta description of the product",
          "type": "string"
        },
        "name": {
          "description": "Name of the product",
          "type": "string"
        },
        "package_format": {
          "default": "box",
          "description": "Format the product package",
          "enum": [
            "box",
            "cylinder"
          ],
          "type": "string"
        },
        "page_title": {
          "description": "SEO title of the product",
          "type": "string"
        },
        "permalink": {
          "description": "Product unique URL path",
          "type": "string"
        },
        "price": {
          "description": "Price of the product",
          "format": "float",
          "type": "number"
        },
        "shipping_required": {
          "default": true,
          "description": "False if the product is digital",
          "type": "boolean"
        },
        "sku": {
          "description": "Stock Keeping Unit of the product",
          "type": "string"
        },
        "status": {
          "default": "available",
          "description": "Status of the product",
          "enum": [
            "available",
            "not-available",
            "disabled"
          ],
          "type": "string"
        },
        "stock": {
          "default": 100,
          "description": "Quantity in stock for the product",
          "format": "int32",
          "type": "integer"
        },
        "stock_unlimited": {
          "description": "True if the Product has unlimited stock",
          "type": "boolean"
        },
        "weight": {
          "default": 1,
          "description": "Weight of the product",
          "format": "float",
          "type": "number"
        },
        "width": {
          "description": "Width of the product",
          "format": "float",
          "type": "number"
        }
      },
      "required": [
        "name",
        "price"
      ],
      "type": "object"
    },
    "ProductFields": {
      "properties": {
        "barcode": {
          "description": "Barcode of the product",
          "type": "string"
        },
        "categories": {
          "items": {
            "$ref": "#/definitions/CategoryFields"
          },
          "type": "array"
        },
        "created_at": {
          "description": "Date of product creation",
          "type": "string"
        },
        "description": {
          "description": "Description of the product",
          "type": "string"
        },
        "diameter": {
          "description": "Diameter of the product",
          "format": "float",
          "type": "number"
        },
        "discount": {
          "description": "Discount of the product",
          "format": "float",
          "type": "number"
        },
        "featured": {
          "default": false,
          "description": "True if the product is featured",
          "type": "boolean"
        },
        "google_product_category": {
          "description": "Category of a Product based on the Google product taxonomy",
          "type": "string"
        },
        "height": {
          "description": "Height of the product",
          "format": "float",
          "type": "number"
        },
        "id": {
          "description": "Unique identifier of the product",
          "format": "int32",
          "type": "integer"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/ImageFields"
          },
          "type": "array"
        },
        "length": {
          "description": "Length of the product",
          "format": "float",
          "type": "number"
        },
        "name": {
          "description": "Name of the product",
          "type": "string"
        },
        "package_format": {
          "default": "box",
          "description": "Format the product package",
          "enum": [
            "box",
            "cylinder"
          ],
          "type": "string"
        },
        "permalink": {
          "description": "Product unique URL path",
          "type": "string"
        },
        "price": {
          "description": "Price of the product",
          "format": "float",
          "type": "number"
        },
        "sku": {
          "description": "Stock Keeping Unit of the product",
          "type": "string"
        },
        "status": {
          "default": "available",
          "description": "Status of the product",
          "enum": [
            "available",
            "not-available",
            "disabled"
          ],
          "type": "string"
        },
        "stock": {
          "default": 100,
          "description": "Quantity in stock for the product",
          "format": "int32",
          "type": "integer"
        },
        "stock_unlimited": {
          "description": "True if the Product has unlimited stock",
          "type": "boolean"
        },
        "variants": {
          "items": {
            "$ref": "#/definitions/VariantFields"
          },
          "type": "array"
        },
        "weight": {
          "default": 1,
          "description": "Weight of the product",
          "format": "float",
          "type": "number"
        },
        "width": {
          "description": "Width of the product",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProductOption": {
      "properties": {
        "option": {
          "$ref": "#/definitions/ProductOptionFields"
        }
      },
      "type": "object"
    },
    "ProductOptionEdit": {
      "properties": {
        "option": {
          "$ref": "#/definitions/ProductOptionEditFields"
        }
      },
      "type": "object"
    },
    "ProductOptionEditFields": {
      "properties": {
        "name": {
          "description": "Name of the product option",
          "type": "string"
        },
        "option_type": {
          "description": "Type of the product option",
          "enum": [
            "option",
            "input",
            "text",
            "file"
          ],
          "type": "string"
        },
        "position": {
          "description": "Position of the product option",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductOptionFields": {
      "properties": {
        "id": {
          "description": "Unique identifier of the product option",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the product option",
          "type": "string"
        },
        "option_type": {
          "description": "Type of the product option",
          "enum": [
            "option",
            "input",
            "text",
            "file"
          ],
          "type": "string"
        },
        "position": {
          "description": "Position of the product option",
          "format": "int32",
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductOptionValueFields"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProductOptionValue": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductOptionValueFields"
        }
      },
      "type": "object"
    },
    "ProductOptionValueEdit": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductOptionValueEditFields"
        }
      },
      "type": "object"
    },
    "ProductOptionValueEditFields": {
      "properties": {
        "name": {
          "description": "Name of the product option value",
          "type": "string"
        },
        "position": {
          "description": "Position of the product option value",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductOptionValueFields": {
      "properties": {
        "id": {
          "description": "Unique identifier of the product option value",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the product option value",
          "type": "string"
        },
        "position": {
          "description": "Position of the product option value",
          "format": "int32",
          "type": "integer"
        },
        "product_option": {
          "$ref": "#/definitions/ProductOption"
        },
        "variants": {
          "items": {
            "$ref": "#/definitions/Variant"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProductOptionVariantEdit": {
      "properties": {
        "name": {
          "description": "Name of the product option",
          "type": "string"
        },
        "value": {
          "description": "Value of the product option",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Promotion": {
      "properties": {
        "promotion": {
          "$ref": "#/definitions/PromotionFields"
        }
      },
      "type": "object"
    },
    "PromotionEdit": {
      "properties": {
        "promotion": {
          "$ref": "#/definitions/PromotionEditFields"
        }
      },
      "type": "object"
    },
    "PromotionEditFields": {
      "properties": {
        "begins_at": {
          "description": "Creation date of the promotion (requires 'lasts' param - 'date')",
          "type": "string"
        },
        "buys_at_least": {
          "description": "Controls the promotion's condition ('none', 'price', 'qty')",
          "type": "string"
        },
        "categories": {
          "description": "Products Categories where the promotion will be applied (requires 'discount_target' param - 'categories')",
          "items": {
            "$ref": "#/definitions/Id"
          },
          "type": "array"
        },
        "code": {
          "description": "Code of the promotion",
          "type": "string"
        },
        "condition_price": {
          "description": "Minimum order amount to validate the promotion (requires 'buys_at_least' param - 'price')",
          "format": "float",
          "type": "number"
        },
        "condition_qty": {
          "description": "Minimum quantity of ordered itens to validate the promotion (requires 'buys_at_least' param - 'qty')",
          "format": "int32",
          "type": "integer"
        },
        "cumulative": {
          "default": false,
          "description": "True if the promotion can be acumulated with others",
          "type": "boolean"
        },
        "customer_categories": {
          "description": "Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')",
          "items": {
            "$ref": "#/definitions/Id"
          },
          "type": "array"
        },
        "customers": {
          "description": "Controls to which customers the promotion will be applied ('all', 'loggedin', 'categories', 'guests')",
          "type": "string"
        },
        "discount_amount_fix": {
          "description": "Fixed discount amount of the promotion (requires 'type' param - 'fix')",
          "format": "float",
          "type": "number"
        },
        "discount_amount_percent": {
          "description": "Percentual discount amount of the promotion (requires 'type' param - 'percentage')",
          "format": "float",
          "type": "number"
        },
        "discount_target": {
          "description": "Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)",
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "If the promotion is to be temporarily disabled",
          "type": "boolean"
        },
        "expires_at": {
          "description": "Expiration date of the promotion (requires 'lasts' param - 'date')",
          "type": "string"
        },
        "lasts": {
          "description": "Controls when the promotion will expire ('none', 'date', 'max_times_used')",
          "type": "string"
        },
        "max_times_used": {
          "description": "Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used')",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the product",
          "type": "string"
        },
        "products": {
          "description": "Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')",
          "items": {
            "$ref": "#/definitions/Id"
          },
          "type": "array"
        },
        "products_x": {
          "description": "Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')",
          "items": {
            "$ref": "#/definitions/Id"
          },
          "type": "array"
        },
        "quantity_x": {
          "description": "Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "Controls if the discount will be a fixed area ('fix', 'percentage')",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PromotionFields": {
      "properties": {
        "begins_at": {
          "description": "Creation date of the promotion (requires 'lasts' param - 'date')",
          "type": "string"
        },
        "categories": {
          "description": "Products Categories where the promotion will be applied (requires 'discount_target' param - 'categories')",
          "items": {
            "$ref": "#/definitions/Id"
          },
          "type": "array"
        },
        "code": {
          "description": "Code of the promotion",
          "type": "string"
        },
        "condition_price": {
          "description": "Minimum order amount to validate the promotion",
          "format": "float",
          "type": "number"
        },
        "condition_qty": {
          "description": "Minimum quantity of ordered itens to validate the promotion",
          "format": "int32",
          "type": "integer"
        },
        "cumulative": {
          "default": false,
          "description": "True if the promotion can be acumulated with others",
          "type": "boolean"
        },
        "customer_categories": {
          "description": "Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')",
          "items": {
            "$ref": "#/definitions/Id"
          },
          "type": "array"
        },
        "discount_amount_fix": {
          "description": "Fixed discount amount of the promotion",
          "format": "float",
          "type": "number"
        },
        "discount_amount_percent": {
          "description": "Percentual discount amount of the promotion",
          "format": "float",
          "type": "number"
        },
        "discount_target": {
          "description": "Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)",
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "If the promotion is currently enabled",
          "type": "boolean"
        },
        "expires_at": {
          "description": "Expiration date of the promotion (requires 'lasts' param - 'date')",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the product",
          "format": "int32",
          "type": "integer"
        },
        "lasts": {
          "description": "Controls when the promotion will expire ('none', 'date', 'max_times_used')",
          "type": "string"
        },
        "max_times_used": {
          "description": "Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used')",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the product",
          "type": "string"
        },
        "products": {
          "description": "Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')",
          "items": {
            "$ref": "#/definitions/Id"
          },
          "type": "array"
        },
        "products_x": {
          "description": "Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')",
          "items": {
            "$ref": "#/definitions/Id"
          },
          "type": "array"
        },
        "quantity_x": {
          "description": "Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')",
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "description": "Status of the promotion ('active', 'expired')",
          "type": "string"
        },
        "times_used": {
          "description": "Amount of times the promotion was used",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Region": {
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ShippingAddress": {
      "properties": {
        "address": {
          "description": "Address of the Customer's Shipping Address",
          "type": "string"
        },
        "city": {
          "description": "City of the Customer's Shipping Address",
          "type": "string"
        },
        "country": {
          "description": "Country code of the Customer's Shipping Address (ISO 3166-1 alpha-2)",
          "type": "string"
        },
        "municipality": {
          "description": "Municipality of the Customer's Shipping Address",
          "type": "string"
        },
        "name": {
          "description": "Name of the Customer's Shipping Address",
          "type": "string"
        },
        "postal": {
          "description": "Postal code of the Customer's Shipping Address",
          "type": "string"
        },
        "region": {
          "description": "Region code of the Customer's Shipping Address (Use the FIPS standard - http://www.geonames.org/countries/)",
          "type": "string"
        },
        "surname": {
          "description": "Surname of the Customer's Shipping Address",
          "type": "string"
        }
      }
    },
    "ShippingMethod": {
      "properties": {
        "shipping_method": {
          "$ref": "#/definitions/ShippingMethodFields"
        }
      },
      "type": "object"
    },
    "ShippingMethodCreate": {
      "properties": {
        "callback_url": {
          "description": "URL that receives the shipping data and returns rates",
          "type": "string"
        },
        "city": {
          "description": "City/Municipality name of origin",
          "type": "string"
        },
        "fetch_services_url": {
          "description": "URL that returns available shipping services",
          "type": "string"
        },
        "name": {
          "description": "Name of the Shipping Method",
          "type": "string"
        },
        "postal": {
          "description": "Postal/Zipcode of origin",
          "type": "string"
        },
        "state": {
          "description": "State/Region code of origin",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ShippingMethodFields": {
      "properties": {
        "callback_url": {
          "description": "URL that receives the shipping data and returns rates",
          "type": "string"
        },
        "city": {
          "description": "City/Municipality name of origin",
          "type": "string"
        },
        "fetch_services_url": {
          "description": "URL that returns available shipping services",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of the Shipping Method",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the Shipping Method",
          "type": "string"
        },
        "postal": {
          "description": "Postal/Zipcode of origin",
          "type": "string"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/ShippingService"
          },
          "type": "array"
        },
        "state": {
          "description": "State/Region code of origin",
          "type": "string"
        },
        "type": {
          "description": "Type of the Shipping Method",
          "enum": [
            "free",
            "tables",
            "correiosbr",
            "correos_chile",
            "chilexpress",
            "flat",
            "ups",
            "external"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ShippingService": {
      "properties": {
        "id": {
          "description": "Unique identifier of the Shipping Service",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the Shipping Service",
          "type": "string"
        },
        "service_code": {
          "description": "Code of the Shipping Service",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StatusInvalid": {
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Store": {
      "properties": {
        "address": {
          "$ref": "#/definitions/StoreAddress"
        },
        "code": {
          "description": "Store Code",
          "type": "string"
        },
        "country": {
          "description": "Store Country",
          "type": "string"
        },
        "currency": {
          "description": "Store Currency",
          "type": "string"
        },
        "email": {
          "description": "Store Admin Email",
          "type": "string"
        },
        "hooks_token": {
          "description": "Store Hooks Auth token",
          "type": "string"
        },
        "logo": {
          "description": "Store Logo URL",
          "type": "string"
        },
        "name": {
          "description": "Store Name",
          "type": "string"
        },
        "timezone": {
          "description": "Store Timezone",
          "type": "string"
        },
        "url": {
          "description": "Store URL",
          "type": "string"
        },
        "weight_unit": {
          "description": "Store Weight Unit",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StoreAddress": {
      "properties": {
        "address": {
          "description": "Address of the Store's Address",
          "type": "string"
        },
        "city": {
          "description": "City of the Store's Address",
          "type": "string"
        },
        "country": {
          "description": "Country of the Store's Address (ISO 3166-1 alpha-2)",
          "type": "string"
        },
        "country_code": {
          "description": "Country code of the Store's Address",
          "type": "string"
        },
        "postal": {
          "description": "Postal code of the Store's Address",
          "type": "string"
        },
        "region": {
          "description": "Region of the Store's Address",
          "type": "string"
        },
        "region_code": {
          "description": "Region code of the Store's Address",
          "type": "string"
        }
      }
    },
    "Tax": {
      "properties": {
        "tax": {
          "$ref": "#/definitions/TaxFields"
        }
      },
      "type": "object"
    },
    "TaxEdit": {
      "properties": {
        "tax": {
          "$ref": "#/definitions/TaxEditFields"
        }
      },
      "type": "object"
    },
    "TaxEditFields": {
      "properties": {
        "category_id": {
          "description": "Unique identifier of the category of the Tax",
          "format": "int32",
          "type": "integer"
        },
        "country": {
          "description": "Country where the Tax applies",
          "type": "string"
        },
        "fixed": {
          "default": false,
          "description": "True if the tax has a fixed valued amount",
          "type": "boolean"
        },
        "name": {
          "description": "Name that identifies tax",
          "type": "string"
        },
        "region": {
          "description": "Region where the Tax applies",
          "type": "string"
        },
        "shipping": {
          "default": false,
          "description": "True if the tax should be applied to shipping costs",
          "type": "boolean"
        },
        "tax": {
          "description": "Tax value for the given Tax",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "TaxFields": {
      "properties": {
        "category_id": {
          "description": "Unique identifier of the category of the Tax",
          "format": "int32",
          "type": "integer"
        },
        "country": {
          "description": "Country name where the Tax applies",
          "type": "string"
        },
        "fixed": {
          "default": false,
          "description": "True if the tax has a fixed valued amount",
          "type": "boolean"
        },
        "id": {
          "description": "Unique identifier of the Tax",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name that identifies tax",
          "type": "string"
        },
        "region": {
          "description": "Region name where the Tax applies",
          "type": "string"
        },
        "shipping": {
          "default": false,
          "description": "True if the tax should be applied to shipping costs",
          "type": "boolean"
        },
        "tax_amount": {
          "description": "Tax value for the given Tax",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "TrafficSource": {
      "properties": {
        "campaign": {
          "description": "The campaign that referred the customer to the checkout",
          "type": "string"
        },
        "medium": {
          "description": "The medium that referred the customer to the checkout",
          "type": "string"
        },
        "referral_code": {
          "description": "The code that referred the customer to the checkout",
          "type": "string"
        },
        "referral_url": {
          "description": "The website that referred the customer to the checkout",
          "type": "string"
        },
        "source_name": {
          "description": "Where the checkout originated",
          "type": "string"
        },
        "user_agent": {
          "description": "User agent of the referred request to checkout",
          "type": "string"
        }
      }
    },
    "Variant": {
      "properties": {
        "variant": {
          "$ref": "#/definitions/VariantFields"
        }
      },
      "type": "object"
    },
    "VariantEdit": {
      "properties": {
        "variant": {
          "$ref": "#/definitions/VariantEditFields"
        }
      },
      "type": "object"
    },
    "VariantEditFields": {
      "properties": {
        "image_id": {
          "description": "Unique identifier of the product image to associate with this variant",
          "format": "int32",
          "type": "integer"
        },
        "options": {
          "items": {
            "$ref": "#/definitions/ProductOptionVariantEdit"
          },
          "type": "array"
        },
        "price": {
          "description": "Price of the product",
          "format": "float",
          "type": "number"
        },
        "sku": {
          "description": "Stock Keeping Unit of the Product's Variant",
          "type": "string"
        },
        "stock": {
          "default": 100,
          "description": "Quantity in stock for the Product's Variant",
          "format": "int32",
          "type": "integer"
        },
        "stock_unlimited": {
          "description": "True if the Product's Variant has unlimited stock",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "VariantFields": {
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "format": "int32",
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/ImageFields"
        },
        "options": {
          "items": {
            "$ref": "#/definitions/ProductOptionVariantEdit"
          },
          "type": "array"
        },
        "price": {
          "description": "Price of the product",
          "format": "float",
          "type": "number"
        },
        "sku": {
          "description": "Stock Keeping Unit of the Product's Variant",
          "type": "string"
        },
        "stock": {
          "default": 100,
          "description": "Quantity in stock for the Product's Variant",
          "format": "int32",
          "type": "integer"
        },
        "stock_unlimited": {
          "description": "True if the Product's Variant has unlimited stock",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  }
}