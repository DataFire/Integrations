{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/\">Amazon Fraud Detector User Guide</a>.",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Fraud Detector",
    "version": "2019-11-15",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/frauddetector-2019-11-15.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "frauddetector",
    "x-datafire": {
      "name": "amazonaws_frauddetector",
      "type": "openapi"
    }
  },
  "host": "frauddetector.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=AWSHawksNestServiceFacade.BatchCreateVariable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.BatchCreateVariable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchCreateVariableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchCreateVariableResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates a batch of variables.",
        "operationId": "BatchCreateVariable"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.BatchGetVariable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.BatchGetVariable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetVariableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetVariableResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets a batch of variables.",
        "operationId": "BatchGetVariable"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.CreateDetectorVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.CreateDetectorVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDetectorVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDetectorVersionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates a detector version. The detector version starts in a <code>DRAFT</code> status.",
        "operationId": "CreateDetectorVersion"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.CreateModel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.CreateModel"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateModelResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates a model using the specified model type.",
        "operationId": "CreateModel"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.CreateModelVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.CreateModelVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateModelVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateModelVersionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Creates a version of the model using the specified model type and model id. ",
        "operationId": "CreateModelVersion"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.CreateRule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.CreateRule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateRuleResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates a rule for use with the specified detector. ",
        "operationId": "CreateRule"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.CreateVariable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.CreateVariable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateVariableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateVariableResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates a variable.",
        "operationId": "CreateVariable"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteDetector": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteDetector"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDetectorRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDetectorResult"
            }
          },
          "480": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "481": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Deletes the detector. Before deleting a detector, you must first delete all detector versions and rule versions associated with the detector.</p> <p>When you delete a detector, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteDetector"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteDetectorVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteDetectorVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDetectorVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDetectorVersionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Deletes the detector version. You cannot delete detector versions that are in <code>ACTIVE</code> status.</p> <p>When you delete a detector version, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteDetectorVersion"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteEntityType": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteEntityType"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEntityTypeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteEntityTypeResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Deletes an entity type.</p> <p>You cannot delete an entity type that is included in an event type.</p> <p>When you delete an entity type, Amazon Fraud Detector permanently deletes that entity type from the evaluation history, and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteEntityType"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteEvent": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteEvent"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEventRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteEventResult"
            }
          },
          "480": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "481": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          }
        },
        "description": "<p>Deletes the specified event.</p> <p>When you delete an event, Amazon Fraud Detector permanently deletes that event from the evaluation history, and the event data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteEvent"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteEventType": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteEventType"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEventTypeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteEventTypeResult"
            }
          },
          "480": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "481": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Deletes an event type.</p> <p>You cannot delete an event type that is used in a detector or a model.</p> <p>When you delete an entity type, Amazon Fraud Detector permanently deletes that entity type from the evaluation history, and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteEventType"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteExternalModel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteExternalModel"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteExternalModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteExternalModelResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Removes a SageMaker model from Amazon Fraud Detector.</p> <p>You can remove an Amazon SageMaker model if it is not associated with a detector version. Removing a SageMaker model disconnects it from Amazon Fraud Detector, but the model remains available in SageMaker.</p>",
        "operationId": "DeleteExternalModel"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteLabel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteLabel"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteLabelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteLabelResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Deletes a label.</p> <p>You cannot delete labels that are included in an event type in Amazon Fraud Detector.</p> <p>You cannot delete a label assigned to an event ID. You must first delete the relevant event ID.</p> <p>When you delete a label, Amazon Fraud Detector permanently deletes that label from the evaluation history, and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteLabel"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteModel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteModel"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteModelResult"
            }
          },
          "480": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "481": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Deletes a model.</p> <p>You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.</p> <p> When you delete a model, Amazon Fraud Detector permanently deletes that model from the evaluation history, and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteModel"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteModelVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteModelVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteModelVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteModelVersionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "description": "<p>Deletes a model version.</p> <p>You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.</p> <p> When you delete a model version, Amazon Fraud Detector permanently deletes that model version from the evaluation history, and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteModelVersion"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteOutcome": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteOutcome"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteOutcomeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteOutcomeResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Deletes an outcome.</p> <p>You cannot delete an outcome that is used in a rule version.</p> <p>When you delete an outcome, Amazon Fraud Detector permanently deletes that outcome from the evaluation history, and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteOutcome"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteRule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteRule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteRuleResult"
            }
          },
          "480": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "481": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Deletes the rule. You cannot delete a rule if it is used by an <code>ACTIVE</code> or <code>INACTIVE</code> detector version.</p> <p>When you delete a rule, Amazon Fraud Detector permanently deletes that rule from the evaluation history, and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteRule"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DeleteVariable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DeleteVariable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteVariableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteVariableResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Deletes a variable.</p> <p>You can't delete variables that are included in an event type in Amazon Fraud Detector.</p> <p>Amazon Fraud Detector automatically deletes model output variables and SageMaker model output variables when you delete the model. You can't delete these variables manually.</p> <p>When you delete a variable, Amazon Fraud Detector permanently deletes that variable from the evaluation history, and the data is no longer stored in Amazon Fraud Detector.</p>",
        "operationId": "DeleteVariable"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DescribeDetector": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.DescribeDetector"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDetectorRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDetectorResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets all versions for a specified detector.",
        "operationId": "DescribeDetector"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.DescribeModelVersions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.DescribeModelVersions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeModelVersionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeModelVersionsResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets all of the model versions for the specified model type or for the specified model type and model ID. You can also get details for a single, specified model version. ",
        "operationId": "DescribeModelVersions"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetDetectorVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetDetectorVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDetectorVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDetectorVersionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets a particular detector version. ",
        "operationId": "GetDetectorVersion"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetDetectors": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetDetectors"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDetectorsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDetectorsResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets all detectors or a single detector if a <code>detectorId</code> is specified. This is a paginated API. If you provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10. To get the next page results, provide the pagination token from the <code>GetDetectorsResponse</code> as part of your request. A null pagination token fetches the records from the beginning. ",
        "operationId": "GetDetectors"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetEntityTypes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetEntityTypes"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetEntityTypesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetEntityTypesResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets all entity types or a specific entity type if a name is specified. This is a paginated API. If you provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10. To get the next page results, provide the pagination token from the <code>GetEntityTypesResponse</code> as part of your request. A null pagination token fetches the records from the beginning. ",
        "operationId": "GetEntityTypes"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetEventPrediction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetEventPrediction"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetEventPredictionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetEventPredictionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "485": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "description": "Evaluates an event against a detector version. If a version ID is not provided, the detector’s (<code>ACTIVE</code>) version is used.",
        "operationId": "GetEventPrediction"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetEventTypes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetEventTypes"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetEventTypesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetEventTypesResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets all event types or a specific event type if name is provided. This is a paginated API. If you provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10. To get the next page results, provide the pagination token from the <code>GetEventTypesResponse</code> as part of your request. A null pagination token fetches the records from the beginning. ",
        "operationId": "GetEventTypes"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetExternalModels": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetExternalModels"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetExternalModelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetExternalModelsResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets the details for one or more Amazon SageMaker models that have been imported into the service. This is a paginated API. If you provide a null <code>maxResults</code>, this actions retrieves a maximum of 10 records per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10. To get the next page results, provide the pagination token from the <code>GetExternalModelsResult</code> as part of your request. A null pagination token fetches the records from the beginning. ",
        "operationId": "GetExternalModels"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetKMSEncryptionKey": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetKMSEncryptionKey"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetKMSEncryptionKeyResult"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets the encryption key if a Key Management Service (KMS) customer master key (CMK) has been specified to be used to encrypt content in Amazon Fraud Detector.",
        "operationId": "GetKMSEncryptionKey"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetLabels": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetLabels"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetLabelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetLabelsResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets all labels or a specific label if name is provided. This is a paginated API. If you provide a null <code>maxResults</code>, this action retrieves a maximum of 50 records per page. If you provide a <code>maxResults</code>, the value must be between 10 and 50. To get the next page results, provide the pagination token from the <code>GetGetLabelsResponse</code> as part of your request. A null pagination token fetches the records from the beginning. ",
        "operationId": "GetLabels"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetModelVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetModelVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetModelVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetModelVersionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets the details of the specified model version.",
        "operationId": "GetModelVersion"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetModels": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetModels"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetModelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetModelsResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Gets one or more models. Gets all models for the AWS account if no model type and no model id provided. Gets all models for the AWS account and model type, if the model type is specified but model id is not provided. Gets a specific model if (model type, model id) tuple is specified. </p> <p>This is a paginated API. If you provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records per page. If you provide a <code>maxResults</code>, the value must be between 1 and 10. To get the next page results, provide the pagination token from the response as part of your request. A null pagination token fetches the records from the beginning.</p>",
        "operationId": "GetModels"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetOutcomes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetOutcomes"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetOutcomesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetOutcomesResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets one or more outcomes. This is a paginated API. If you provide a null <code>maxResults</code>, this actions retrieves a maximum of 100 records per page. If you provide a <code>maxResults</code>, the value must be between 50 and 100. To get the next page results, provide the pagination token from the <code>GetOutcomesResult</code> as part of your request. A null pagination token fetches the records from the beginning. ",
        "operationId": "GetOutcomes"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetRules": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetRules"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRulesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetRulesResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Get all rules for a detector (paginated) if <code>ruleId</code> and <code>ruleVersion</code> are not specified. Gets all rules for the detector and the <code>ruleId</code> if present (paginated). Gets a specific rule if both the <code>ruleId</code> and the <code>ruleVersion</code> are specified.</p> <p>This is a paginated API. Providing null maxResults results in retrieving maximum of 100 records per page. If you provide maxResults the value must be between 50 and 100. To get the next page result, a provide a pagination token from GetRulesResult as part of your request. Null pagination token fetches the records from the beginning.</p>",
        "operationId": "GetRules"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.GetVariables": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.GetVariables"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetVariablesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetVariablesResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Gets all of the variables or the specific variable. This is a paginated API. Providing null <code>maxSizePerPage</code> results in retrieving maximum of 100 records per page. If you provide <code>maxSizePerPage</code> the value must be between 50 and 100. To get the next page result, a provide a pagination token from <code>GetVariablesResult</code> as part of your request. Null pagination token fetches the records from the beginning. ",
        "operationId": "GetVariables"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSHawksNestServiceFacade.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Lists all tags associated with the resource. This is a paginated API. To get the next page results, provide the pagination token from the response as part of your request. A null pagination token fetches the records from the beginning. ",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.PutDetector": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.PutDetector"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutDetectorRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutDetectorResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates or updates a detector. ",
        "operationId": "PutDetector"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.PutEntityType": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.PutEntityType"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutEntityTypeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutEntityTypeResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates or updates an entity type. An entity represents who is performing the event. As part of a fraud prediction, you pass the entity ID to indicate the specific entity who performed the event. An entity type classifies the entity. Example classifications include customer, merchant, or account.",
        "operationId": "PutEntityType"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.PutEventType": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.PutEventType"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutEventTypeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutEventTypeResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates or updates an event type. An event is a business activity that is evaluated for fraud risk. With Amazon Fraud Detector, you generate fraud predictions for events. An event type defines the structure for an event sent to Amazon Fraud Detector. This includes the variables sent as part of the event, the entity performing the event (such as a customer), and the labels that classify the event. Example event types include online payment transactions, account registrations, and authentications.",
        "operationId": "PutEventType"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.PutExternalModel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.PutExternalModel"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutExternalModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutExternalModelResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates or updates an Amazon SageMaker model endpoint. You can also use this action to update the configuration of the model endpoint, including the IAM role and/or the mapped variables. ",
        "operationId": "PutExternalModel"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.PutKMSEncryptionKey": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.PutKMSEncryptionKey"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutKMSEncryptionKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutKMSEncryptionKeyResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Specifies the Key Management Service (KMS) customer master key (CMK) to be used to encrypt content in Amazon Fraud Detector.",
        "operationId": "PutKMSEncryptionKey"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.PutLabel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.PutLabel"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutLabelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutLabelResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates or updates label. A label classifies an event as fraudulent or legitimate. Labels are associated with event types and used to train supervised machine learning models in Amazon Fraud Detector. ",
        "operationId": "PutLabel"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.PutOutcome": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.PutOutcome"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutOutcomeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutOutcomeResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Creates or updates an outcome. ",
        "operationId": "PutOutcome"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Assigns tags to a resource.",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Removes tags from a resource.",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UpdateDetectorVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UpdateDetectorVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDetectorVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDetectorVersionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": " Updates a detector version. The detector version attributes that you can update include models, external model endpoints, rules, rule execution mode, and description. You can only update a <code>DRAFT</code> detector version.",
        "operationId": "UpdateDetectorVersion"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UpdateDetectorVersionMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UpdateDetectorVersionMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDetectorVersionMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDetectorVersionMetadataResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "482": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Updates the detector version's description. You can update the metadata for any detector version (<code>DRAFT, ACTIVE,</code> or <code>INACTIVE</code>). ",
        "operationId": "UpdateDetectorVersionMetadata"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UpdateDetectorVersionStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UpdateDetectorVersionStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDetectorVersionStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDetectorVersionStatusResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Updates the detector version’s status. You can perform the following promotions or demotions using <code>UpdateDetectorVersionStatus</code>: <code>DRAFT</code> to <code>ACTIVE</code>, <code>ACTIVE</code> to <code>INACTIVE</code>, and <code>INACTIVE</code> to <code>ACTIVE</code>.",
        "operationId": "UpdateDetectorVersionStatus"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UpdateModel": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UpdateModel"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateModelResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Updates a model. You can update the description attribute using this action.",
        "operationId": "UpdateModel"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UpdateModelVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UpdateModelVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateModelVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateModelVersionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Updates a model version. Updating a model version retrains an existing model version using updated training data and produces a new minor version of the model. You can update the training data set location and data access role attributes using this action. This action creates and trains a new minor version of the model, for example version 1.01, 1.02, 1.03.",
        "operationId": "UpdateModelVersion"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UpdateModelVersionStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UpdateModelVersionStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateModelVersionStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateModelVersionStatusResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Updates the status of a model version.</p> <p>You can perform the following status updates:</p> <ol> <li> <p>Change the <code>TRAINING_COMPLETE</code> status to <code>ACTIVE</code>.</p> </li> <li> <p>Change <code>ACTIVE</code>to <code>INACTIVE</code>.</p> </li> </ol>",
        "operationId": "UpdateModelVersionStatus"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UpdateRuleMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UpdateRuleMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRuleMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateRuleMetadataResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Updates a rule's metadata. The description attribute can be updated.",
        "operationId": "UpdateRuleMetadata"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UpdateRuleVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UpdateRuleVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRuleVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateRuleVersionResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Updates a rule version resulting in a new rule version. Updates a rule version resulting in a new rule version (version 1, 2, 3 ...). ",
        "operationId": "UpdateRuleVersion"
      }
    },
    "/#X-Amz-Target=AWSHawksNestServiceFacade.UpdateVariable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSHawksNestServiceFacade.UpdateVariable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVariableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateVariableResult"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          },
          "483": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "Updates a variable.",
        "operationId": "UpdateVariable"
      }
    }
  },
  "definitions": {
    "AccessDeniedException": {},
    "BatchCreateVariableError": {
      "description": "Provides the error of the batch create variable API.",
      "properties": {
        "code": {
          "allOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "description": "The error code. "
            }
          ]
        },
        "message": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The error message."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The name."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchCreateVariableErrorList": {
      "items": {
        "$ref": "#/definitions/BatchCreateVariableError"
      },
      "type": "array"
    },
    "BatchCreateVariableRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "variableEntries": {
          "allOf": [
            {
              "$ref": "#/definitions/VariableEntryList"
            },
            {
              "description": "The list of variables for the batch create variable request."
            }
          ]
        }
      },
      "required": [
        "variableEntries"
      ],
      "title": "BatchCreateVariableRequest",
      "type": "object"
    },
    "BatchCreateVariableResult": {
      "properties": {
        "errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchCreateVariableErrorList"
            },
            {
              "description": "Provides the errors for the <code>BatchCreateVariable</code> request."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetVariableError": {
      "description": "Provides the error of the batch get variable API.",
      "properties": {
        "code": {
          "allOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "description": "The error code. "
            }
          ]
        },
        "message": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The error message."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The error name. "
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetVariableErrorList": {
      "items": {
        "$ref": "#/definitions/BatchGetVariableError"
      },
      "type": "array"
    },
    "BatchGetVariableRequest": {
      "properties": {
        "names": {
          "allOf": [
            {
              "$ref": "#/definitions/NameList"
            },
            {
              "description": "The list of variable names to get."
            }
          ]
        }
      },
      "required": [
        "names"
      ],
      "title": "BatchGetVariableRequest",
      "type": "object"
    },
    "BatchGetVariableResult": {
      "properties": {
        "errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchGetVariableErrorList"
            },
            {
              "description": "The errors from the request."
            }
          ]
        },
        "variables": {
          "allOf": [
            {
              "$ref": "#/definitions/VariableList"
            },
            {
              "description": "The returned variables."
            }
          ]
        }
      },
      "type": "object"
    },
    "ConflictException": {},
    "CreateDetectorVersionRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The description of the detector version."
            }
          ]
        },
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The ID of the detector under which you want to create a new version."
            }
          ]
        },
        "externalModelEndpoints": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfStrings"
            },
            {
              "description": "The Amazon Sagemaker model endpoints to include in the detector version."
            }
          ]
        },
        "modelVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfModelVersions"
            },
            {
              "description": "The model versions to include in the detector version."
            }
          ]
        },
        "ruleExecutionMode": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleExecutionMode"
            },
            {
              "description": "<p>The rule execution mode for the rules included in the detector version.</p> <p>You can define and edit the rule mode at the detector version level, when it is in draft status.</p> <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p> <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. </p> <p>The default behavior is <code>FIRST_MATCHED</code>.</p>"
            }
          ]
        },
        "rules": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleList"
            },
            {
              "description": "The rules to include in the detector version."
            }
          ]
        }
      },
      "required": [
        "detectorId",
        "rules"
      ],
      "title": "CreateDetectorVersionRequest",
      "type": "object"
    },
    "CreateDetectorVersionResult": {
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The ID for the created version's parent detector."
            }
          ]
        },
        "detectorVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/nonEmptyString"
            },
            {
              "description": "The ID for the created detector. "
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/DetectorVersionStatus"
            },
            {
              "description": "The status of the detector version."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateModelRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The model description. "
            }
          ]
        },
        "eventTypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The name of the event type."
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type. "
            }
          ]
        }
      },
      "required": [
        "modelId",
        "modelType",
        "eventTypeName"
      ],
      "title": "CreateModelRequest",
      "type": "object"
    },
    "CreateModelResult": {
      "properties": {},
      "type": "object"
    },
    "CreateModelVersionRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "externalEventsDetail": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalEventsDetail"
            },
            {
              "description": "Details for the external events data used for model version training. Required if <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>."
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID. "
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "trainingDataSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingDataSchema"
            },
            {
              "description": "The training data schema."
            }
          ]
        },
        "trainingDataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingDataSourceEnum"
            },
            {
              "description": "The training data source location in Amazon S3. "
            }
          ]
        }
      },
      "required": [
        "modelId",
        "modelType",
        "trainingDataSource",
        "trainingDataSchema"
      ],
      "title": "CreateModelVersionRequest",
      "type": "object"
    },
    "CreateModelVersionResult": {
      "properties": {
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "modelVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/nonEmptyString"
            },
            {
              "description": "The model version number of the model version created."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The model version status. "
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateRuleRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The rule description."
            }
          ]
        },
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID for the rule's parent detector."
            }
          ]
        },
        "expression": {
          "allOf": [
            {
              "$ref": "#/definitions/ruleExpression"
            },
            {
              "description": "The rule expression."
            }
          ]
        },
        "language": {
          "allOf": [
            {
              "$ref": "#/definitions/Language"
            },
            {
              "description": "The language of the rule."
            }
          ]
        },
        "outcomes": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyListOfStrings"
            },
            {
              "description": "The outcome or outcomes returned when the rule expression matches."
            }
          ]
        },
        "ruleId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The rule ID."
            }
          ]
        }
      },
      "required": [
        "ruleId",
        "detectorId",
        "expression",
        "language",
        "outcomes"
      ],
      "title": "CreateRuleRequest",
      "type": "object"
    },
    "CreateRuleResult": {
      "properties": {
        "rule": {
          "allOf": [
            {
              "$ref": "#/definitions/Rule"
            },
            {
              "description": "The created rule."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateVariableRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "dataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSource"
            },
            {
              "description": "The source of the data."
            }
          ]
        },
        "dataType": {
          "allOf": [
            {
              "$ref": "#/definitions/DataType"
            },
            {
              "description": "The data type."
            }
          ]
        },
        "defaultValue": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The default value for the variable when no value is received."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The description."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The name of the variable."
            }
          ]
        },
        "variableType": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "<p>The variable type. For more information see <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types\">Variable types</a>. </p> <p>Valid Values: <code>AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT</code> </p>"
            }
          ]
        }
      },
      "required": [
        "name",
        "dataType",
        "dataSource",
        "defaultValue"
      ],
      "title": "CreateVariableRequest",
      "type": "object"
    },
    "CreateVariableResult": {
      "properties": {},
      "type": "object"
    },
    "CsvIndexToVariableMap": {
      "additionalProperties": {
        "$ref": "#/definitions/string"
      },
      "type": "object"
    },
    "DataSource": {
      "enum": [
        "EVENT",
        "MODEL_SCORE",
        "EXTERNAL_MODEL_SCORE"
      ],
      "type": "string"
    },
    "DataType": {
      "enum": [
        "STRING",
        "INTEGER",
        "FLOAT",
        "BOOLEAN"
      ],
      "type": "string"
    },
    "DataValidationMetrics": {
      "description": "The model training validation messages.",
      "properties": {
        "fieldLevelMessages": {
          "allOf": [
            {
              "$ref": "#/definitions/fieldValidationMessageList"
            },
            {
              "description": "The field-specific model training validation messages."
            }
          ]
        },
        "fileLevelMessages": {
          "allOf": [
            {
              "$ref": "#/definitions/fileValidationMessageList"
            },
            {
              "description": "The file-specific model training validation messages."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteDetectorRequest": {
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The ID of the detector to delete."
            }
          ]
        }
      },
      "required": [
        "detectorId"
      ],
      "title": "DeleteDetectorRequest",
      "type": "object"
    },
    "DeleteDetectorResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteDetectorVersionRequest": {
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The ID of the parent detector for the detector version to delete."
            }
          ]
        },
        "detectorVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The ID of the detector version to delete."
            }
          ]
        }
      },
      "required": [
        "detectorId",
        "detectorVersionId"
      ],
      "title": "DeleteDetectorVersionRequest",
      "type": "object"
    },
    "DeleteDetectorVersionResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteEntityTypeRequest": {
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the entity type to delete."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "DeleteEntityTypeRequest",
      "type": "object"
    },
    "DeleteEntityTypeResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteEventRequest": {
      "properties": {
        "eventId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The ID of the event to delete."
            }
          ]
        },
        "eventTypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the event type."
            }
          ]
        }
      },
      "required": [
        "eventId",
        "eventTypeName"
      ],
      "title": "DeleteEventRequest",
      "type": "object"
    },
    "DeleteEventResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteEventTypeRequest": {
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the event type to delete."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "DeleteEventTypeRequest",
      "type": "object"
    },
    "DeleteEventTypeResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteExternalModelRequest": {
      "properties": {
        "modelEndpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/sageMakerEndpointIdentifier"
            },
            {
              "description": "The endpoint of the Amazon Sagemaker model to delete."
            }
          ]
        }
      },
      "required": [
        "modelEndpoint"
      ],
      "title": "DeleteExternalModelRequest",
      "type": "object"
    },
    "DeleteExternalModelResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteLabelRequest": {
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the label to delete."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "DeleteLabelRequest",
      "type": "object"
    },
    "DeleteLabelResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteModelRequest": {
      "properties": {
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID of the model to delete."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type of the model to delete."
            }
          ]
        }
      },
      "required": [
        "modelId",
        "modelType"
      ],
      "title": "DeleteModelRequest",
      "type": "object"
    },
    "DeleteModelResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteModelVersionRequest": {
      "properties": {
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID of the model version to delete."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type of the model version to delete."
            }
          ]
        },
        "modelVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/floatVersionString"
            },
            {
              "description": "The model version number of the model version to delete."
            }
          ]
        }
      },
      "required": [
        "modelId",
        "modelType",
        "modelVersionNumber"
      ],
      "title": "DeleteModelVersionRequest",
      "type": "object"
    },
    "DeleteModelVersionResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteOutcomeRequest": {
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the outcome to delete."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "DeleteOutcomeRequest",
      "type": "object"
    },
    "DeleteOutcomeResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteRuleRequest": {
      "properties": {
        "rule": {
          "$ref": "#/definitions/Rule"
        }
      },
      "required": [
        "rule"
      ],
      "title": "DeleteRuleRequest",
      "type": "object"
    },
    "DeleteRuleResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteVariableRequest": {
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The name of the variable to delete."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "DeleteVariableRequest",
      "type": "object"
    },
    "DeleteVariableResult": {
      "properties": {},
      "type": "object"
    },
    "DescribeDetectorRequest": {
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/DetectorVersionMaxResults"
            },
            {
              "description": "The maximum number of results to return for the request."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token from the previous response."
            }
          ]
        }
      },
      "required": [
        "detectorId"
      ],
      "title": "DescribeDetectorRequest",
      "type": "object"
    },
    "DescribeDetectorResult": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The detector ARN."
            }
          ]
        },
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID."
            }
          ]
        },
        "detectorVersionSummaries": {
          "allOf": [
            {
              "$ref": "#/definitions/DetectorVersionSummaryList"
            },
            {
              "description": "The status and description for each detector version."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token to be used for subsequent requests."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeModelVersionsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/modelsMaxPageSize"
            },
            {
              "description": "The maximum number of results to return."
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "modelVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/floatVersionString"
            },
            {
              "description": "The model version number."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token from the previous results."
            }
          ]
        }
      },
      "title": "DescribeModelVersionsRequest",
      "type": "object"
    },
    "DescribeModelVersionsResult": {
      "properties": {
        "modelVersionDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/modelVersionDetailList"
            },
            {
              "description": "The model version details."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token."
            }
          ]
        }
      },
      "type": "object"
    },
    "Detector": {
      "description": "The detector.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The detector ARN."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the detector was created."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The detector description."
            }
          ]
        },
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID."
            }
          ]
        },
        "eventTypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the event type."
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the detector was last updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "DetectorList": {
      "items": {
        "$ref": "#/definitions/Detector"
      },
      "type": "array"
    },
    "DetectorVersionMaxResults": {
      "maximum": 2500,
      "minimum": 1000,
      "type": "integer"
    },
    "DetectorVersionStatus": {
      "enum": [
        "DRAFT",
        "ACTIVE",
        "INACTIVE"
      ],
      "type": "string"
    },
    "DetectorVersionSummary": {
      "description": "The summary of the detector version.",
      "properties": {
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The detector version description. "
            }
          ]
        },
        "detectorVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/nonEmptyString"
            },
            {
              "description": "The detector version ID. "
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the detector version was last updated."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/DetectorVersionStatus"
            },
            {
              "description": "The detector version status. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DetectorVersionSummaryList": {
      "items": {
        "$ref": "#/definitions/DetectorVersionSummary"
      },
      "type": "array"
    },
    "DetectorsMaxResults": {
      "maximum": 10,
      "minimum": 5,
      "type": "integer"
    },
    "Entity": {
      "description": "The entity details. ",
      "properties": {
        "entityId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The entity ID. If you do not know the <code>entityId</code>, you can pass <code>unknown</code>, which is areserved string literal."
            }
          ]
        },
        "entityType": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The entity type."
            }
          ]
        }
      },
      "required": [
        "entityType",
        "entityId"
      ],
      "type": "object"
    },
    "EntityType": {
      "description": "The entity type details.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The entity type ARN."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the entity type was created."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The entity type description."
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the entity type was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The entity type name."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventType": {
      "description": "The event type details.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The entity type ARN."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the event type was created."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The event type description."
            }
          ]
        },
        "entityTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyListOfStrings"
            },
            {
              "description": "The event type entity types."
            }
          ]
        },
        "eventVariables": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfStrings"
            },
            {
              "description": "The event type event variables."
            }
          ]
        },
        "labels": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfStrings"
            },
            {
              "description": "The event type labels."
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the event type was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The event type name."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventVariableMap": {
      "additionalProperties": {
        "$ref": "#/definitions/variableValue"
      },
      "minProperties": 1,
      "type": "object"
    },
    "ExternalEventsDetail": {
      "description": "Details for the external events data used for model version training.",
      "properties": {
        "dataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/iamRoleArn"
            },
            {
              "description": "The ARN of the role that provides Amazon Fraud Detector access to the data location."
            }
          ]
        },
        "dataLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/s3BucketLocation"
            },
            {
              "description": "The Amazon S3 bucket location for the data."
            }
          ]
        }
      },
      "required": [
        "dataLocation",
        "dataAccessRoleArn"
      ],
      "type": "object"
    },
    "ExternalModel": {
      "description": "The Amazon SageMaker model.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The model ARN."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the model was last created."
            }
          ]
        },
        "inputConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelInputConfiguration"
            },
            {
              "description": "The input configuration."
            }
          ]
        },
        "invokeModelEndpointRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The role used to invoke the model. "
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the model was last updated."
            }
          ]
        },
        "modelEndpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The Amazon SageMaker model endpoints."
            }
          ]
        },
        "modelEndpointStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelEndpointStatus"
            },
            {
              "description": "The Amazon Fraud Detector status for the external model endpoint"
            }
          ]
        },
        "modelSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelSource"
            },
            {
              "description": "The source of the model."
            }
          ]
        },
        "outputConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelOutputConfiguration"
            },
            {
              "description": "The output configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "ExternalModelEndpointDataBlobMap": {
      "additionalProperties": {
        "$ref": "#/definitions/ModelEndpointDataBlob"
      },
      "type": "object"
    },
    "ExternalModelList": {
      "items": {
        "$ref": "#/definitions/ExternalModel"
      },
      "type": "array"
    },
    "ExternalModelsMaxResults": {
      "maximum": 10,
      "minimum": 5,
      "type": "integer"
    },
    "FieldValidationMessage": {
      "description": "The message details.",
      "properties": {
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The message content."
            }
          ]
        },
        "fieldName": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The field name."
            }
          ]
        },
        "identifier": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The message ID."
            }
          ]
        },
        "title": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The message title."
            }
          ]
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The message type."
            }
          ]
        }
      },
      "type": "object"
    },
    "FileValidationMessage": {
      "description": "The message details.",
      "properties": {
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The message content."
            }
          ]
        },
        "title": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The message title."
            }
          ]
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The message type."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDetectorVersionRequest": {
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID."
            }
          ]
        },
        "detectorVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The detector version ID."
            }
          ]
        }
      },
      "required": [
        "detectorId",
        "detectorVersionId"
      ],
      "title": "GetDetectorVersionRequest",
      "type": "object"
    },
    "GetDetectorVersionResult": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The detector version ARN."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "The timestamp when the detector version was created. "
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The detector version description."
            }
          ]
        },
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID."
            }
          ]
        },
        "detectorVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The detector version ID."
            }
          ]
        },
        "externalModelEndpoints": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfStrings"
            },
            {
              "description": "The Amazon SageMaker model endpoints included in the detector version."
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "The timestamp when the detector version was last updated. "
            }
          ]
        },
        "modelVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfModelVersions"
            },
            {
              "description": "The model versions included in the detector version. "
            }
          ]
        },
        "ruleExecutionMode": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleExecutionMode"
            },
            {
              "description": "<p>The execution mode of the rule in the dectector</p> <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p> <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>"
            }
          ]
        },
        "rules": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleList"
            },
            {
              "description": "The rules included in the detector version."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/DetectorVersionStatus"
            },
            {
              "description": "The status of the detector version."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDetectorsRequest": {
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/DetectorsMaxResults"
            },
            {
              "description": "The maximum number of objects to return for the request."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token for the subsequent request."
            }
          ]
        }
      },
      "title": "GetDetectorsRequest",
      "type": "object"
    },
    "GetDetectorsResult": {
      "properties": {
        "detectors": {
          "allOf": [
            {
              "$ref": "#/definitions/DetectorList"
            },
            {
              "description": "The detectors."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetEntityTypesRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/entityTypesMaxResults"
            },
            {
              "description": "The maximum number of objects to return for the request."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token for the subsequent request."
            }
          ]
        }
      },
      "title": "GetEntityTypesRequest",
      "type": "object"
    },
    "GetEntityTypesResult": {
      "properties": {
        "entityTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/entityTypeList"
            },
            {
              "description": "An array of entity types."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetEventPredictionRequest": {
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The detector ID."
            }
          ]
        },
        "detectorVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The detector version ID."
            }
          ]
        },
        "entities": {
          "allOf": [
            {
              "$ref": "#/definitions/listOfEntities"
            },
            {
              "description": "The entity type (associated with the detector's event type) and specific entity ID representing who performed the event. If an entity id is not available, use \"UNKNOWN.\""
            }
          ]
        },
        "eventId": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The unique ID used to identify the event."
            }
          ]
        },
        "eventTimestamp": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "Timestamp that defines when the event under evaluation occurred."
            }
          ]
        },
        "eventTypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The event type associated with the detector specified for the prediction."
            }
          ]
        },
        "eventVariables": {
          "allOf": [
            {
              "$ref": "#/definitions/EventVariableMap"
            },
            {
              "description": "Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation."
            }
          ]
        },
        "externalModelEndpointDataBlobs": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalModelEndpointDataBlobMap"
            },
            {
              "description": "The Amazon SageMaker model endpoint input data blobs."
            }
          ]
        }
      },
      "required": [
        "detectorId",
        "eventId",
        "eventTypeName",
        "entities",
        "eventTimestamp",
        "eventVariables"
      ],
      "title": "GetEventPredictionRequest",
      "type": "object"
    },
    "GetEventPredictionResult": {
      "properties": {
        "modelScores": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfModelScores"
            },
            {
              "description": "The model scores. Amazon Fraud Detector generates model scores between 0 and 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are directly related to the false positive rate (FPR). For example, a score of 600 corresponds to an estimated 10% false positive rate whereas a score of 900 corresponds to an estimated 2% false positive rate."
            }
          ]
        },
        "ruleResults": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfRuleResults"
            },
            {
              "description": "The results."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetEventTypesRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/eventTypesMaxResults"
            },
            {
              "description": "The maximum number of objects to return for the request."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token for the subsequent request."
            }
          ]
        }
      },
      "title": "GetEventTypesRequest",
      "type": "object"
    },
    "GetEventTypesResult": {
      "properties": {
        "eventTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/eventTypeList"
            },
            {
              "description": "An array of event types."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetExternalModelsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalModelsMaxResults"
            },
            {
              "description": "The maximum number of objects to return for the request."
            }
          ]
        },
        "modelEndpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The Amazon SageMaker model endpoint."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token for the request."
            }
          ]
        }
      },
      "title": "GetExternalModelsRequest",
      "type": "object"
    },
    "GetExternalModelsResult": {
      "properties": {
        "externalModels": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalModelList"
            },
            {
              "description": "Gets the Amazon SageMaker models."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token to be used in subsequent requests."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetKMSEncryptionKeyResult": {
      "properties": {
        "kmsKey": {
          "allOf": [
            {
              "$ref": "#/definitions/KMSKey"
            },
            {
              "description": "The KMS encryption key."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetLabelsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/labelsMaxResults"
            },
            {
              "description": "The maximum number of objects to return for the request."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the label or labels to get."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token for the subsequent request."
            }
          ]
        }
      },
      "title": "GetLabelsRequest",
      "type": "object"
    },
    "GetLabelsResult": {
      "properties": {
        "labels": {
          "allOf": [
            {
              "$ref": "#/definitions/labelList"
            },
            {
              "description": "An array of labels."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetModelVersionRequest": {
      "properties": {
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "modelVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/floatVersionString"
            },
            {
              "description": "The model version number."
            }
          ]
        }
      },
      "required": [
        "modelId",
        "modelType",
        "modelVersionNumber"
      ],
      "title": "GetModelVersionRequest",
      "type": "object"
    },
    "GetModelVersionResult": {
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The model version ARN."
            }
          ]
        },
        "externalEventsDetail": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalEventsDetail"
            },
            {
              "description": "The event details."
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "modelVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/floatVersionString"
            },
            {
              "description": "The model version number."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "<p>The model version status.</p> <p>Possible values are:</p> <ul> <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li> <li> <p> <code>TRAINING_COMPLETE</code> </p> </li> <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li> <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li> <li> <p> <code>ACTIVE</code> </p> </li> <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li> <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li> <li> <p> <code>INACTIVE</code> </p> </li> <li> <p> <code>ERROR</code> </p> </li> </ul>"
            }
          ]
        },
        "trainingDataSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingDataSchema"
            },
            {
              "description": "The training data schema."
            }
          ]
        },
        "trainingDataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingDataSourceEnum"
            },
            {
              "description": "The training data source."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetModelsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/modelsMaxPageSize"
            },
            {
              "description": "The maximum number of objects to return for the request. "
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token for the subsequent request."
            }
          ]
        }
      },
      "title": "GetModelsRequest",
      "type": "object"
    },
    "GetModelsResult": {
      "properties": {
        "models": {
          "allOf": [
            {
              "$ref": "#/definitions/modelList"
            },
            {
              "description": "The array of models."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token to be used in subsequent requests."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetOutcomesRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/OutcomesMaxResults"
            },
            {
              "description": "The maximum number of objects to return for the request. "
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the outcome or outcomes to get."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token for the request. "
            }
          ]
        }
      },
      "title": "GetOutcomesRequest",
      "type": "object"
    },
    "GetOutcomesResult": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token for subsequent requests."
            }
          ]
        },
        "outcomes": {
          "allOf": [
            {
              "$ref": "#/definitions/OutcomeList"
            },
            {
              "description": "The outcomes. "
            }
          ]
        }
      },
      "type": "object"
    },
    "GetRulesRequest": {
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/RulesMaxResults"
            },
            {
              "description": "The maximum number of rules to return for the request."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token."
            }
          ]
        },
        "ruleId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The rule ID."
            }
          ]
        },
        "ruleVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The rule version."
            }
          ]
        }
      },
      "required": [
        "detectorId"
      ],
      "title": "GetRulesRequest",
      "type": "object"
    },
    "GetRulesResult": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token to be used in subsequent requests."
            }
          ]
        },
        "ruleDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleDetailList"
            },
            {
              "description": "The details of the requested rule."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetVariablesRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/VariablesMaxResults"
            },
            {
              "description": "The max size per page determined for the get variable request. "
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The name of the variable. "
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token of the get variable request. "
            }
          ]
        }
      },
      "title": "GetVariablesRequest",
      "type": "object"
    },
    "GetVariablesResult": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next page token to be used in subsequent requests. "
            }
          ]
        },
        "variables": {
          "allOf": [
            {
              "$ref": "#/definitions/VariableList"
            },
            {
              "description": "The names of the variables returned. "
            }
          ]
        }
      },
      "type": "object"
    },
    "InternalServerException": {},
    "JsonKeyToVariableMap": {
      "additionalProperties": {
        "$ref": "#/definitions/string"
      },
      "type": "object"
    },
    "KMSKey": {
      "description": "The KMS key details.",
      "properties": {
        "kmsEncryptionKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsEncryptionKeyArn"
            },
            {
              "description": "The encryption key ARN."
            }
          ]
        }
      },
      "type": "object"
    },
    "KmsEncryptionKeyArn": {
      "maxLength": 90,
      "minLength": 7,
      "pattern": "^DEFAULT|arn:[a-zA-Z0-9-]+:kms:[a-zA-Z0-9-]+:\\d{12}:key\\/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$",
      "type": "string"
    },
    "Label": {
      "description": "The label details.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The label ARN."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the event type was created."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The label description."
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the label was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The label name."
            }
          ]
        }
      },
      "type": "object"
    },
    "LabelSchema": {
      "description": "The label schema.",
      "properties": {
        "labelMapper": {
          "allOf": [
            {
              "$ref": "#/definitions/labelMapper"
            },
            {
              "description": "The label mapper maps the Amazon Fraud Detector supported model classification labels (<code>FRAUD</code>, <code>LEGIT</code>) to the appropriate event type labels. For example, if \"<code>FRAUD</code>\" and \"<code>LEGIT</code>\" are Amazon Fraud Detector supported labels, this mapper could be: <code>{\"FRAUD\" =&gt; [\"0\"]</code>, <code>\"LEGIT\" =&gt; [\"1\"]}</code> or <code>{\"FRAUD\" =&gt; [\"false\"]</code>, <code>\"LEGIT\" =&gt; [\"true\"]}</code> or <code>{\"FRAUD\" =&gt; [\"fraud\", \"abuse\"]</code>, <code>\"LEGIT\" =&gt; [\"legit\", \"safe\"]}</code>. The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. "
            }
          ]
        }
      },
      "required": [
        "labelMapper"
      ],
      "type": "object"
    },
    "Language": {
      "enum": [
        "DETECTORPL"
      ],
      "type": "string"
    },
    "ListOfModelScores": {
      "items": {
        "$ref": "#/definitions/ModelScores"
      },
      "type": "array"
    },
    "ListOfModelVersions": {
      "items": {
        "$ref": "#/definitions/ModelVersion"
      },
      "type": "array"
    },
    "ListOfRuleResults": {
      "items": {
        "$ref": "#/definitions/RuleResult"
      },
      "type": "array"
    },
    "ListOfStrings": {
      "items": {
        "$ref": "#/definitions/string"
      },
      "type": "array"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMaxResults"
            },
            {
              "description": "The maximum number of objects to return for the request. "
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token from the previous results."
            }
          ]
        },
        "resourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The ARN that specifies the resource whose tags you want to list."
            }
          ]
        }
      },
      "required": [
        "resourceARN"
      ],
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResult": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The next token for subsequent requests. "
            }
          ]
        }
      },
      "type": "object"
    },
    "MetricDataPoint": {
      "description": "Model performance metrics data points.",
      "properties": {
        "fpr": {
          "allOf": [
            {
              "$ref": "#/definitions/float"
            },
            {
              "description": "The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud."
            }
          ]
        },
        "precision": {
          "allOf": [
            {
              "$ref": "#/definitions/float"
            },
            {
              "description": "The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent."
            }
          ]
        },
        "threshold": {
          "allOf": [
            {
              "$ref": "#/definitions/float"
            },
            {
              "description": "The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud."
            }
          ]
        },
        "tpr": {
          "allOf": [
            {
              "$ref": "#/definitions/float"
            },
            {
              "description": "The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate."
            }
          ]
        }
      },
      "type": "object"
    },
    "Model": {
      "description": "The model.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The ARN of the model."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of when the model was created."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The model description."
            }
          ]
        },
        "eventTypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The name of the event type."
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of last time the model was updated."
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        }
      },
      "type": "object"
    },
    "ModelEndpointDataBlob": {
      "description": "A pre-formed Amazon SageMaker model input you can include if your detector version includes an imported Amazon SageMaker model endpoint with pass-through input configuration.",
      "properties": {
        "byteBuffer": {
          "allOf": [
            {
              "$ref": "#/definitions/blob"
            },
            {
              "description": "The byte buffer of the Amazon SageMaker model endpoint input data blob."
            }
          ]
        },
        "contentType": {
          "allOf": [
            {
              "$ref": "#/definitions/contentType"
            },
            {
              "description": "The content type of the Amazon SageMaker model endpoint input data blob. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ModelEndpointStatus": {
      "enum": [
        "ASSOCIATED",
        "DISSOCIATED"
      ],
      "type": "string"
    },
    "ModelInputConfiguration": {
      "description": "The Amazon SageMaker model input configuration.",
      "properties": {
        "csvInputTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": " Template for constructing the CSV input-data sent to SageMaker. At event-evaluation, the placeholders for variable-names in the template will be replaced with the variable values before being sent to SageMaker. "
            }
          ]
        },
        "eventTypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The event type name."
            }
          ]
        },
        "format": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelInputDataFormat"
            },
            {
              "description": " The format of the model input configuration. The format differs depending on if it is passed through to SageMaker or constructed by Amazon Fraud Detector."
            }
          ]
        },
        "jsonInputTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": " Template for constructing the JSON input-data sent to SageMaker. At event-evaluation, the placeholders for variable names in the template will be replaced with the variable values before being sent to SageMaker. "
            }
          ]
        },
        "useEventVariables": {
          "allOf": [
            {
              "$ref": "#/definitions/UseEventVariables"
            },
            {
              "description": "The event variables."
            }
          ]
        }
      },
      "required": [
        "useEventVariables"
      ],
      "type": "object"
    },
    "ModelInputDataFormat": {
      "enum": [
        "TEXT_CSV",
        "APPLICATION_JSON"
      ],
      "type": "string"
    },
    "ModelOutputConfiguration": {
      "description": "Provides the Amazon Sagemaker model output configuration.",
      "properties": {
        "csvIndexToVariableMap": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvIndexToVariableMap"
            },
            {
              "description": "A map of CSV index values in the SageMaker response to the Amazon Fraud Detector variables. "
            }
          ]
        },
        "format": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelOutputDataFormat"
            },
            {
              "description": "The format of the model output configuration."
            }
          ]
        },
        "jsonKeyToVariableMap": {
          "allOf": [
            {
              "$ref": "#/definitions/JsonKeyToVariableMap"
            },
            {
              "description": "A map of JSON keys in response from SageMaker to the Amazon Fraud Detector variables. "
            }
          ]
        }
      },
      "required": [
        "format"
      ],
      "type": "object"
    },
    "ModelOutputDataFormat": {
      "enum": [
        "TEXT_CSV",
        "APPLICATION_JSONLINES"
      ],
      "type": "string"
    },
    "ModelPredictionMap": {
      "additionalProperties": {
        "$ref": "#/definitions/float"
      },
      "type": "object"
    },
    "ModelScores": {
      "description": "The fraud prediction scores.",
      "properties": {
        "modelVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelVersion"
            },
            {
              "description": "The model version."
            }
          ]
        },
        "scores": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelPredictionMap"
            },
            {
              "description": "The model's fraud prediction scores."
            }
          ]
        }
      },
      "type": "object"
    },
    "ModelSource": {
      "enum": [
        "SAGEMAKER"
      ],
      "type": "string"
    },
    "ModelTypeEnum": {
      "enum": [
        "ONLINE_FRAUD_INSIGHTS"
      ],
      "type": "string"
    },
    "ModelVersion": {
      "description": "The model version.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The model version ARN."
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "modelVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/nonEmptyString"
            },
            {
              "description": "The model version number."
            }
          ]
        }
      },
      "required": [
        "modelId",
        "modelType",
        "modelVersionNumber"
      ],
      "type": "object"
    },
    "ModelVersionDetail": {
      "description": "The details of the model version.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The model version ARN."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "The timestamp when the model was created."
            }
          ]
        },
        "externalEventsDetail": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalEventsDetail"
            },
            {
              "description": "The event details."
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "The timestamp when the model was last updated."
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "modelVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/floatVersionString"
            },
            {
              "description": "The model version number."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The status of the model version."
            }
          ]
        },
        "trainingDataSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingDataSchema"
            },
            {
              "description": "The training data schema."
            }
          ]
        },
        "trainingDataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingDataSourceEnum"
            },
            {
              "description": "The model version training data source."
            }
          ]
        },
        "trainingResult": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingResult"
            },
            {
              "description": "The training results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ModelVersionStatus": {
      "enum": [
        "ACTIVE",
        "INACTIVE"
      ],
      "type": "string"
    },
    "NameList": {
      "items": {
        "$ref": "#/definitions/string"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array"
    },
    "NonEmptyListOfStrings": {
      "items": {
        "$ref": "#/definitions/string"
      },
      "minItems": 1,
      "type": "array"
    },
    "Outcome": {
      "description": "The outcome.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The outcome ARN."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "The timestamp when the outcome was created."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The outcome description."
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "The timestamp when the outcome was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The outcome name."
            }
          ]
        }
      },
      "type": "object"
    },
    "OutcomeList": {
      "items": {
        "$ref": "#/definitions/Outcome"
      },
      "type": "array"
    },
    "OutcomesMaxResults": {
      "maximum": 100,
      "minimum": 50,
      "type": "integer"
    },
    "PutDetectorRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The description of the detector."
            }
          ]
        },
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID. "
            }
          ]
        },
        "eventTypeName": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the event type."
            }
          ]
        }
      },
      "required": [
        "detectorId",
        "eventTypeName"
      ],
      "title": "PutDetectorRequest",
      "type": "object"
    },
    "PutDetectorResult": {
      "properties": {},
      "type": "object"
    },
    "PutEntityTypeRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The description."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the entity type."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "PutEntityTypeRequest",
      "type": "object"
    },
    "PutEntityTypeResult": {
      "properties": {},
      "type": "object"
    },
    "PutEventTypeRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The description of the event type."
            }
          ]
        },
        "entityTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyListOfStrings"
            },
            {
              "description": "The entity type for the event type. Example entity types: customer, merchant, account."
            }
          ]
        },
        "eventVariables": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyListOfStrings"
            },
            {
              "description": "The event type variables."
            }
          ]
        },
        "labels": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfStrings"
            },
            {
              "description": "The event type labels."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name."
            }
          ]
        }
      },
      "required": [
        "name",
        "eventVariables",
        "entityTypes"
      ],
      "title": "PutEventTypeRequest",
      "type": "object"
    },
    "PutEventTypeResult": {
      "properties": {},
      "type": "object"
    },
    "PutExternalModelRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "inputConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelInputConfiguration"
            },
            {
              "description": "The model endpoint input configuration."
            }
          ]
        },
        "invokeModelEndpointRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The IAM role used to invoke the model endpoint."
            }
          ]
        },
        "modelEndpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/sageMakerEndpointIdentifier"
            },
            {
              "description": "The model endpoints name."
            }
          ]
        },
        "modelEndpointStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelEndpointStatus"
            },
            {
              "description": "The model endpoint’s status in Amazon Fraud Detector."
            }
          ]
        },
        "modelSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelSource"
            },
            {
              "description": "The source of the model."
            }
          ]
        },
        "outputConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelOutputConfiguration"
            },
            {
              "description": "The model endpoint output configuration."
            }
          ]
        }
      },
      "required": [
        "modelEndpoint",
        "modelSource",
        "invokeModelEndpointRoleArn",
        "inputConfiguration",
        "outputConfiguration",
        "modelEndpointStatus"
      ],
      "title": "PutExternalModelRequest",
      "type": "object"
    },
    "PutExternalModelResult": {
      "properties": {},
      "type": "object"
    },
    "PutKMSEncryptionKeyRequest": {
      "properties": {
        "kmsEncryptionKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsEncryptionKeyArn"
            },
            {
              "description": "The KMS encryption key ARN."
            }
          ]
        }
      },
      "required": [
        "kmsEncryptionKeyArn"
      ],
      "title": "PutKMSEncryptionKeyRequest",
      "type": "object"
    },
    "PutKMSEncryptionKeyResult": {
      "properties": {},
      "type": "object"
    },
    "PutLabelRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "<p/>"
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The label description."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The label name."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "PutLabelRequest",
      "type": "object"
    },
    "PutLabelResult": {
      "properties": {},
      "type": "object"
    },
    "PutOutcomeRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The outcome description."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The name of the outcome."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "PutOutcomeRequest",
      "type": "object"
    },
    "PutOutcomeResult": {
      "properties": {},
      "type": "object"
    },
    "ResourceNotFoundException": {},
    "Rule": {
      "description": "A rule.",
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector for which the rule is associated."
            }
          ]
        },
        "ruleId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The rule ID."
            }
          ]
        },
        "ruleVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The rule version."
            }
          ]
        }
      },
      "required": [
        "detectorId",
        "ruleId",
        "ruleVersion"
      ],
      "type": "object"
    },
    "RuleDetail": {
      "description": "The details of the rule.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The rule ARN."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "The timestamp of when the rule was created."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The rule description."
            }
          ]
        },
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector for which the rule is associated."
            }
          ]
        },
        "expression": {
          "allOf": [
            {
              "$ref": "#/definitions/ruleExpression"
            },
            {
              "description": "The rule expression."
            }
          ]
        },
        "language": {
          "allOf": [
            {
              "$ref": "#/definitions/Language"
            },
            {
              "description": "The rule language."
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "Timestamp of the last time the rule was updated."
            }
          ]
        },
        "outcomes": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyListOfStrings"
            },
            {
              "description": "The rule outcomes."
            }
          ]
        },
        "ruleId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The rule ID."
            }
          ]
        },
        "ruleVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The rule version."
            }
          ]
        }
      },
      "type": "object"
    },
    "RuleDetailList": {
      "items": {
        "$ref": "#/definitions/RuleDetail"
      },
      "type": "array"
    },
    "RuleExecutionMode": {
      "enum": [
        "ALL_MATCHED",
        "FIRST_MATCHED"
      ],
      "type": "string"
    },
    "RuleList": {
      "items": {
        "$ref": "#/definitions/Rule"
      },
      "type": "array"
    },
    "RuleResult": {
      "description": "The rule results.",
      "properties": {
        "outcomes": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfStrings"
            },
            {
              "description": "The outcomes of the matched rule, based on the rule execution mode."
            }
          ]
        },
        "ruleId": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The rule ID that was matched, based on the rule execution mode."
            }
          ]
        }
      },
      "type": "object"
    },
    "RulesMaxResults": {
      "maximum": 100,
      "minimum": 50,
      "type": "integer"
    },
    "Tag": {
      "description": "A key and value pair. ",
      "properties": {
        "key": {
          "allOf": [
            {
              "$ref": "#/definitions/tagKey"
            },
            {
              "description": "A tag key."
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/tagValue"
            },
            {
              "description": "A value assigned to a tag key."
            }
          ]
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "TagResourceRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "The tags to assign to the resource."
            }
          ]
        },
        "resourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The resource ARN."
            }
          ]
        }
      },
      "required": [
        "resourceARN",
        "tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagResourceResult": {
      "properties": {},
      "type": "object"
    },
    "TagsMaxResults": {
      "maximum": 50,
      "minimum": 50,
      "type": "integer"
    },
    "ThrottlingException": {},
    "TrainingDataSchema": {
      "description": "The training data schema.",
      "properties": {
        "labelSchema": {
          "$ref": "#/definitions/LabelSchema"
        },
        "modelVariables": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfStrings"
            },
            {
              "description": "The training data schema variables."
            }
          ]
        }
      },
      "required": [
        "modelVariables",
        "labelSchema"
      ],
      "type": "object"
    },
    "TrainingDataSourceEnum": {
      "enum": [
        "EXTERNAL_EVENTS"
      ],
      "type": "string"
    },
    "TrainingMetrics": {
      "description": "The training metric details.",
      "properties": {
        "auc": {
          "allOf": [
            {
              "$ref": "#/definitions/float"
            },
            {
              "description": "The area under the curve. This summarizes true positive rate (TPR) and false positive rate (FPR) across all possible model score thresholds. A model with no predictive power has an AUC of 0.5, whereas a perfect model has a score of 1.0."
            }
          ]
        },
        "metricDataPoints": {
          "allOf": [
            {
              "$ref": "#/definitions/metricDataPointsList"
            },
            {
              "description": "The data points details."
            }
          ]
        }
      },
      "type": "object"
    },
    "TrainingResult": {
      "description": "The training result details.",
      "properties": {
        "dataValidationMetrics": {
          "allOf": [
            {
              "$ref": "#/definitions/DataValidationMetrics"
            },
            {
              "description": "The validation metrics."
            }
          ]
        },
        "trainingMetrics": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingMetrics"
            },
            {
              "description": "The training metric details."
            }
          ]
        }
      },
      "type": "object"
    },
    "UntagResourceRequest": {
      "properties": {
        "resourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The ARN of the resource from which to remove the tag."
            }
          ]
        },
        "tagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/tagKeyList"
            },
            {
              "description": "The resource ARN."
            }
          ]
        }
      },
      "required": [
        "resourceARN",
        "tagKeys"
      ],
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UntagResourceResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateDetectorVersionMetadataRequest": {
      "properties": {
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The description."
            }
          ]
        },
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID."
            }
          ]
        },
        "detectorVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The detector version ID. "
            }
          ]
        }
      },
      "required": [
        "detectorId",
        "detectorVersionId",
        "description"
      ],
      "title": "UpdateDetectorVersionMetadataRequest",
      "type": "object"
    },
    "UpdateDetectorVersionMetadataResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateDetectorVersionRequest": {
      "properties": {
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The detector version description. "
            }
          ]
        },
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The parent detector ID for the detector version you want to update."
            }
          ]
        },
        "detectorVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The detector version ID. "
            }
          ]
        },
        "externalModelEndpoints": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfStrings"
            },
            {
              "description": "The Amazon SageMaker model endpoints to include in the detector version."
            }
          ]
        },
        "modelVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfModelVersions"
            },
            {
              "description": "The model versions to include in the detector version."
            }
          ]
        },
        "ruleExecutionMode": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleExecutionMode"
            },
            {
              "description": "<p>The rule execution mode to add to the detector.</p> <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p> <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p> <p>The default behavior is <code>FIRST_MATCHED</code>.</p>"
            }
          ]
        },
        "rules": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleList"
            },
            {
              "description": "The rules to include in the detector version."
            }
          ]
        }
      },
      "required": [
        "detectorId",
        "detectorVersionId",
        "externalModelEndpoints",
        "rules"
      ],
      "title": "UpdateDetectorVersionRequest",
      "type": "object"
    },
    "UpdateDetectorVersionResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateDetectorVersionStatusRequest": {
      "properties": {
        "detectorId": {
          "allOf": [
            {
              "$ref": "#/definitions/identifier"
            },
            {
              "description": "The detector ID. "
            }
          ]
        },
        "detectorVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The detector version ID. "
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/DetectorVersionStatus"
            },
            {
              "description": "The new status."
            }
          ]
        }
      },
      "required": [
        "detectorId",
        "detectorVersionId",
        "status"
      ],
      "title": "UpdateDetectorVersionStatusRequest",
      "type": "object"
    },
    "UpdateDetectorVersionStatusResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateModelRequest": {
      "properties": {
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The new model description."
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        }
      },
      "required": [
        "modelId",
        "modelType"
      ],
      "title": "UpdateModelRequest",
      "type": "object"
    },
    "UpdateModelResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateModelVersionRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "A collection of key and value pairs."
            }
          ]
        },
        "externalEventsDetail": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalEventsDetail"
            },
            {
              "description": "The event details."
            }
          ]
        },
        "majorVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/wholeNumberVersionString"
            },
            {
              "description": "The major version number."
            }
          ]
        },
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        }
      },
      "required": [
        "modelId",
        "modelType",
        "majorVersionNumber"
      ],
      "title": "UpdateModelVersionRequest",
      "type": "object"
    },
    "UpdateModelVersionResult": {
      "properties": {
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "modelVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/floatVersionString"
            },
            {
              "description": "The model version number of the model version updated."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The status of the updated model version."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateModelVersionStatusRequest": {
      "properties": {
        "modelId": {
          "allOf": [
            {
              "$ref": "#/definitions/modelIdentifier"
            },
            {
              "description": "The model ID of the model version to update."
            }
          ]
        },
        "modelType": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelTypeEnum"
            },
            {
              "description": "The model type."
            }
          ]
        },
        "modelVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/floatVersionString"
            },
            {
              "description": "The model version number."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelVersionStatus"
            },
            {
              "description": "The model version status."
            }
          ]
        }
      },
      "required": [
        "modelId",
        "modelType",
        "modelVersionNumber",
        "status"
      ],
      "title": "UpdateModelVersionStatusRequest",
      "type": "object"
    },
    "UpdateModelVersionStatusResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateRuleMetadataRequest": {
      "properties": {
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The rule description."
            }
          ]
        },
        "rule": {
          "allOf": [
            {
              "$ref": "#/definitions/Rule"
            },
            {
              "description": "The rule to update."
            }
          ]
        }
      },
      "required": [
        "rule",
        "description"
      ],
      "title": "UpdateRuleMetadataRequest",
      "type": "object"
    },
    "UpdateRuleMetadataResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateRuleVersionRequest": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/tagList"
            },
            {
              "description": "The tags to assign to the rule version."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/description"
            },
            {
              "description": "The description."
            }
          ]
        },
        "expression": {
          "allOf": [
            {
              "$ref": "#/definitions/ruleExpression"
            },
            {
              "description": "The rule expression."
            }
          ]
        },
        "language": {
          "allOf": [
            {
              "$ref": "#/definitions/Language"
            },
            {
              "description": "The language."
            }
          ]
        },
        "outcomes": {
          "allOf": [
            {
              "$ref": "#/definitions/NonEmptyListOfStrings"
            },
            {
              "description": "The outcomes."
            }
          ]
        },
        "rule": {
          "allOf": [
            {
              "$ref": "#/definitions/Rule"
            },
            {
              "description": "The rule to update."
            }
          ]
        }
      },
      "required": [
        "rule",
        "expression",
        "language",
        "outcomes"
      ],
      "title": "UpdateRuleVersionRequest",
      "type": "object"
    },
    "UpdateRuleVersionResult": {
      "properties": {
        "rule": {
          "allOf": [
            {
              "$ref": "#/definitions/Rule"
            },
            {
              "description": "The new rule version that was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateVariableRequest": {
      "properties": {
        "defaultValue": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The new default value of the variable."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The new description."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The name of the variable."
            }
          ]
        },
        "variableType": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The variable type. For more information see <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types\">Variable types</a>."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "UpdateVariableRequest",
      "type": "object"
    },
    "UpdateVariableResult": {
      "properties": {},
      "type": "object"
    },
    "UseEventVariables": {
      "type": "boolean"
    },
    "ValidationException": {},
    "Variable": {
      "description": "The variable.",
      "properties": {
        "arn": {
          "allOf": [
            {
              "$ref": "#/definitions/fraudDetectorArn"
            },
            {
              "description": "The ARN of the variable."
            }
          ]
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "The time when the variable was created."
            }
          ]
        },
        "dataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSource"
            },
            {
              "description": "The data source of the variable."
            }
          ]
        },
        "dataType": {
          "allOf": [
            {
              "$ref": "#/definitions/DataType"
            },
            {
              "description": "The data type of the variable. For more information see <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types\">Variable types</a>."
            }
          ]
        },
        "defaultValue": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The default value of the variable."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The description of the variable. "
            }
          ]
        },
        "lastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/time"
            },
            {
              "description": "The time when variable was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The name of the variable."
            }
          ]
        },
        "variableType": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "<p>The variable type of the variable.</p> <p>Valid Values: <code>AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT </code> </p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "VariableEntry": {
      "description": "A variable in the list of variables for the batch create variable request.",
      "properties": {
        "dataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The data source of the variable."
            }
          ]
        },
        "dataType": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The data type of the variable."
            }
          ]
        },
        "defaultValue": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The default value of the variable."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The description of the variable."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "The name of the variable."
            }
          ]
        },
        "variableType": {
          "allOf": [
            {
              "$ref": "#/definitions/string"
            },
            {
              "description": "<p>The type of the variable. For more information see <a href=\"https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types\">Variable types</a>.</p> <p>Valid Values: <code>AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT </code> </p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "VariableEntryList": {
      "items": {
        "$ref": "#/definitions/VariableEntry"
      },
      "maxItems": 25,
      "minItems": 1,
      "type": "array"
    },
    "VariableList": {
      "items": {
        "$ref": "#/definitions/Variable"
      },
      "type": "array"
    },
    "VariablesMaxResults": {
      "maximum": 100,
      "minimum": 50,
      "type": "integer"
    },
    "blob": {
      "type": "string"
    },
    "contentType": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "description": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "entityTypeList": {
      "items": {
        "$ref": "#/definitions/EntityType"
      },
      "type": "array"
    },
    "entityTypesMaxResults": {
      "maximum": 10,
      "minimum": 5,
      "type": "integer"
    },
    "eventTypeList": {
      "items": {
        "$ref": "#/definitions/EventType"
      },
      "type": "array"
    },
    "eventTypesMaxResults": {
      "maximum": 10,
      "minimum": 5,
      "type": "integer"
    },
    "fieldValidationMessageList": {
      "items": {
        "$ref": "#/definitions/FieldValidationMessage"
      },
      "type": "array"
    },
    "fileValidationMessageList": {
      "items": {
        "$ref": "#/definitions/FileValidationMessage"
      },
      "type": "array"
    },
    "float": {
      "format": "float",
      "type": "number"
    },
    "floatVersionString": {
      "maxLength": 7,
      "minLength": 3,
      "pattern": "^[1-9][0-9]{0,3}\\.[0-9]{1,2}$",
      "type": "string"
    },
    "fraudDetectorArn": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^arn\\:aws[a-z-]{0,15}\\:frauddetector\\:[a-z0-9-]{3,20}\\:[0-9]{12}\\:[^\\s]{2,128}$",
      "type": "string"
    },
    "iamRoleArn": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^arn\\:aws[a-z-]{0,15}\\:iam\\:\\:[0-9]{12}\\:role\\/[^\\s]{2,64}$",
      "type": "string"
    },
    "identifier": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^[0-9a-z_-]+$",
      "type": "string"
    },
    "integer": {
      "type": "integer"
    },
    "labelList": {
      "items": {
        "$ref": "#/definitions/Label"
      },
      "type": "array"
    },
    "labelMapper": {
      "additionalProperties": {
        "$ref": "#/definitions/ListOfStrings"
      },
      "type": "object"
    },
    "labelsMaxResults": {
      "maximum": 50,
      "minimum": 10,
      "type": "integer"
    },
    "listOfEntities": {
      "items": {
        "$ref": "#/definitions/Entity"
      },
      "type": "array"
    },
    "metricDataPointsList": {
      "items": {
        "$ref": "#/definitions/MetricDataPoint"
      },
      "type": "array"
    },
    "modelIdentifier": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^[0-9a-z_]+$",
      "type": "string"
    },
    "modelList": {
      "items": {
        "$ref": "#/definitions/Model"
      },
      "type": "array"
    },
    "modelVersionDetailList": {
      "items": {
        "$ref": "#/definitions/ModelVersionDetail"
      },
      "type": "array"
    },
    "modelsMaxPageSize": {
      "maximum": 10,
      "minimum": 1,
      "type": "integer"
    },
    "nonEmptyString": {
      "minLength": 1,
      "type": "string"
    },
    "ruleExpression": {
      "format": "password",
      "maxLength": 4096,
      "minLength": 1,
      "type": "string"
    },
    "s3BucketLocation": {
      "maxLength": 512,
      "minLength": 1,
      "pattern": "^s3:\\/\\/(.+)$",
      "type": "string"
    },
    "sageMakerEndpointIdentifier": {
      "maxLength": 63,
      "minLength": 1,
      "pattern": "^[0-9A-Za-z_-]+$",
      "type": "string"
    },
    "string": {
      "type": "string"
    },
    "tagKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "tagKeyList": {
      "items": {
        "$ref": "#/definitions/tagKey"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "tagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "maxItems": 200,
      "minItems": 0,
      "type": "array"
    },
    "tagValue": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "time": {
      "type": "string"
    },
    "variableName": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "variableValue": {
      "format": "password",
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "wholeNumberVersionString": {
      "maxLength": 5,
      "minLength": 1,
      "pattern": "^([1-9][0-9]*)$",
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/frauddetector/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}