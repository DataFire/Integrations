{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "AWS Cloud Map lets you configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance of the service becomes available, you can call the AWS Cloud Map API to register the instance with AWS Cloud Map. For public or private DNS namespaces, AWS Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. ",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Cloud Map",
    "version": "2017-03-14",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/servicediscovery-2017-03-14.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "servicediscovery",
    "x-datafire": {
      "name": "amazonaws_servicediscovery",
      "type": "openapi"
    }
  },
  "host": "servicediscovery.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=Route53AutoNaming_v20170314.CreateHttpNamespace": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.CreateHttpNamespace"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateHttpNamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateHttpNamespaceResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "481": {
            "description": "NamespaceAlreadyExists",
            "schema": {
              "$ref": "#/definitions/NamespaceAlreadyExists"
            }
          },
          "482": {
            "description": "ResourceLimitExceeded",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceeded"
            }
          },
          "483": {
            "description": "DuplicateRequest",
            "schema": {
              "$ref": "#/definitions/DuplicateRequest"
            }
          },
          "484": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          }
        },
        "description": "<p>Creates an HTTP namespace. Service instances that you register using an HTTP namespace can be discovered using a <code>DiscoverInstances</code> request but can't be discovered using DNS. </p> <p>For the current quota on the number of namespaces that you can create using the same AWS account, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">AWS Cloud Map quotas</a> in the <i>AWS Cloud Map Developer Guide</i>.</p>",
        "operationId": "CreateHttpNamespace"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.CreatePrivateDnsNamespace": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.CreatePrivateDnsNamespace"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePrivateDnsNamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePrivateDnsNamespaceResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "481": {
            "description": "NamespaceAlreadyExists",
            "schema": {
              "$ref": "#/definitions/NamespaceAlreadyExists"
            }
          },
          "482": {
            "description": "ResourceLimitExceeded",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceeded"
            }
          },
          "483": {
            "description": "DuplicateRequest",
            "schema": {
              "$ref": "#/definitions/DuplicateRequest"
            }
          },
          "484": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          }
        },
        "description": "Creates a private namespace based on DNS, which will be visible only inside a specified Amazon VPC. The namespace defines your service naming scheme. For example, if you name your namespace <code>example.com</code> and name your service <code>backend</code>, the resulting DNS name for the service will be <code>backend.example.com</code>. For the current quota on the number of namespaces that you can create using the same AWS account, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">AWS Cloud Map Limits</a> in the <i>AWS Cloud Map Developer Guide</i>.",
        "operationId": "CreatePrivateDnsNamespace"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.CreatePublicDnsNamespace": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.CreatePublicDnsNamespace"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePublicDnsNamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePublicDnsNamespaceResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "481": {
            "description": "NamespaceAlreadyExists",
            "schema": {
              "$ref": "#/definitions/NamespaceAlreadyExists"
            }
          },
          "482": {
            "description": "ResourceLimitExceeded",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceeded"
            }
          },
          "483": {
            "description": "DuplicateRequest",
            "schema": {
              "$ref": "#/definitions/DuplicateRequest"
            }
          },
          "484": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          }
        },
        "description": "Creates a public namespace based on DNS, which will be visible on the internet. The namespace defines your service naming scheme. For example, if you name your namespace <code>example.com</code> and name your service <code>backend</code>, the resulting DNS name for the service will be <code>backend.example.com</code>. For the current quota on the number of namespaces that you can create using the same AWS account, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">AWS Cloud Map Limits</a> in the <i>AWS Cloud Map Developer Guide</i>.",
        "operationId": "CreatePublicDnsNamespace"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.CreateService": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.CreateService"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateServiceResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "481": {
            "description": "ResourceLimitExceeded",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceeded"
            }
          },
          "482": {
            "description": "NamespaceNotFound",
            "schema": {
              "$ref": "#/definitions/NamespaceNotFound"
            }
          },
          "483": {
            "description": "ServiceAlreadyExists",
            "schema": {
              "$ref": "#/definitions/ServiceAlreadyExists"
            }
          },
          "484": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          }
        },
        "description": "<p>Creates a service, which defines the configuration for the following entities:</p> <ul> <li> <p>For public and private DNS namespaces, one of the following combinations of DNS records in Amazon Route 53:</p> <ul> <li> <p> <code>A</code> </p> </li> <li> <p> <code>AAAA</code> </p> </li> <li> <p> <code>A</code> and <code>AAAA</code> </p> </li> <li> <p> <code>SRV</code> </p> </li> <li> <p> <code>CNAME</code> </p> </li> </ul> </li> <li> <p>Optionally, a health check</p> </li> </ul> <p>After you create the service, you can submit a <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html\">RegisterInstance</a> request, and AWS Cloud Map uses the values in the configuration to create the specified entities.</p> <p>For the current quota on the number of instances that you can register using the same namespace and using the same service, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">AWS Cloud Map Limits</a> in the <i>AWS Cloud Map Developer Guide</i>.</p>",
        "operationId": "CreateService"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.DeleteNamespace": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.DeleteNamespace"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteNamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteNamespaceResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "481": {
            "description": "NamespaceNotFound",
            "schema": {
              "$ref": "#/definitions/NamespaceNotFound"
            }
          },
          "482": {
            "description": "ResourceInUse",
            "schema": {
              "$ref": "#/definitions/ResourceInUse"
            }
          },
          "483": {
            "description": "DuplicateRequest",
            "schema": {
              "$ref": "#/definitions/DuplicateRequest"
            }
          }
        },
        "description": "Deletes a namespace from the current account. If the namespace still contains one or more services, the request fails.",
        "operationId": "DeleteNamespace"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.DeleteService": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.DeleteService"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteServiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteServiceResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "481": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          },
          "482": {
            "description": "ResourceInUse",
            "schema": {
              "$ref": "#/definitions/ResourceInUse"
            }
          }
        },
        "description": "Deletes a specified service. If the service still contains one or more registered instances, the request fails.",
        "operationId": "DeleteService"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.DeregisterInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.DeregisterInstance"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterInstanceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterInstanceResponse"
            }
          },
          "480": {
            "description": "DuplicateRequest",
            "schema": {
              "$ref": "#/definitions/DuplicateRequest"
            }
          },
          "481": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "482": {
            "description": "InstanceNotFound",
            "schema": {
              "$ref": "#/definitions/InstanceNotFound"
            }
          },
          "483": {
            "description": "ResourceInUse",
            "schema": {
              "$ref": "#/definitions/ResourceInUse"
            }
          },
          "484": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          }
        },
        "description": "Deletes the Amazon Route 53 DNS records and health check, if any, that AWS Cloud Map created for the specified instance.",
        "operationId": "DeregisterInstance"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.DiscoverInstances": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.DiscoverInstances"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscoverInstancesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DiscoverInstancesResponse"
            }
          },
          "480": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          },
          "481": {
            "description": "NamespaceNotFound",
            "schema": {
              "$ref": "#/definitions/NamespaceNotFound"
            }
          },
          "482": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "483": {
            "description": "RequestLimitExceeded",
            "schema": {
              "$ref": "#/definitions/RequestLimitExceeded"
            }
          }
        },
        "description": "Discovers registered instances for a specified namespace and service. You can use <code>DiscoverInstances</code> to discover instances for any type of namespace. For public and private DNS namespaces, you can also use DNS queries to discover instances.",
        "operationId": "DiscoverInstances"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.GetInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.GetInstance"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetInstanceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetInstanceResponse"
            }
          },
          "480": {
            "description": "InstanceNotFound",
            "schema": {
              "$ref": "#/definitions/InstanceNotFound"
            }
          },
          "481": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "482": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          }
        },
        "description": "Gets information about a specified instance.",
        "operationId": "GetInstance"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.GetInstancesHealthStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Route53AutoNaming_v20170314.GetInstancesHealthStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetInstancesHealthStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetInstancesHealthStatusResponse"
            }
          },
          "480": {
            "description": "InstanceNotFound",
            "schema": {
              "$ref": "#/definitions/InstanceNotFound"
            }
          },
          "481": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "482": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          }
        },
        "description": "<p>Gets the current health status (<code>Healthy</code>, <code>Unhealthy</code>, or <code>Unknown</code>) of one or more instances that are associated with a specified service.</p> <note> <p>There is a brief delay between when you register an instance and when the health status for the instance is available. </p> </note>",
        "operationId": "GetInstancesHealthStatus"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.GetNamespace": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.GetNamespace"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetNamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetNamespaceResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "481": {
            "description": "NamespaceNotFound",
            "schema": {
              "$ref": "#/definitions/NamespaceNotFound"
            }
          }
        },
        "description": "Gets information about a namespace.",
        "operationId": "GetNamespace"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.GetOperation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.GetOperation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetOperationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetOperationResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "481": {
            "description": "OperationNotFound",
            "schema": {
              "$ref": "#/definitions/OperationNotFound"
            }
          }
        },
        "description": "<p>Gets information about any operation that returns an operation ID in the response, such as a <code>CreateService</code> request.</p> <note> <p>To get a list of operations that match specified criteria, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_ListOperations.html\">ListOperations</a>.</p> </note>",
        "operationId": "GetOperation"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.GetService": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.GetService"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetServiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetServiceResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "481": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          }
        },
        "description": "Gets the settings for a specified service.",
        "operationId": "GetService"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.ListInstances": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Route53AutoNaming_v20170314.ListInstances"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListInstancesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListInstancesResponse"
            }
          },
          "480": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          },
          "481": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          }
        },
        "description": "Lists summary information about the instances that you registered by using a specified service.",
        "operationId": "ListInstances"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.ListNamespaces": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Route53AutoNaming_v20170314.ListNamespaces"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListNamespacesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListNamespacesResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          }
        },
        "description": "Lists summary information about the namespaces that were created by the current AWS account.",
        "operationId": "ListNamespaces"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.ListOperations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Route53AutoNaming_v20170314.ListOperations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOperationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListOperationsResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          }
        },
        "description": "Lists operations that match the criteria that you specify.",
        "operationId": "ListOperations"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.ListServices": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Route53AutoNaming_v20170314.ListServices"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListServicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListServicesResponse"
            }
          },
          "480": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          }
        },
        "description": "Lists summary information for all the services that are associated with one or more specified namespaces.",
        "operationId": "ListServices"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          }
        },
        "description": "Lists tags for the specified resource.",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.RegisterInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.RegisterInstance"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterInstanceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterInstanceResponse"
            }
          },
          "480": {
            "description": "DuplicateRequest",
            "schema": {
              "$ref": "#/definitions/DuplicateRequest"
            }
          },
          "481": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "482": {
            "description": "ResourceInUse",
            "schema": {
              "$ref": "#/definitions/ResourceInUse"
            }
          },
          "483": {
            "description": "ResourceLimitExceeded",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceeded"
            }
          },
          "484": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          }
        },
        "description": "<p>Creates or updates one or more records and, optionally, creates a health check based on the settings in a specified service. When you submit a <code>RegisterInstance</code> request, the following occurs:</p> <ul> <li> <p>For each DNS record that you define in the service that is specified by <code>ServiceId</code>, a record is created or updated in the hosted zone that is associated with the corresponding namespace.</p> </li> <li> <p>If the service includes <code>HealthCheckConfig</code>, a health check is created based on the settings in the health check configuration.</p> </li> <li> <p>The health check, if any, is associated with each of the new or updated records.</p> </li> </ul> <important> <p>One <code>RegisterInstance</code> request must complete before you can submit another request and specify the same service ID and instance ID.</p> </important> <p>For more information, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html\">CreateService</a>.</p> <p>When AWS Cloud Map receives a DNS query for the specified DNS name, it returns the applicable value:</p> <ul> <li> <p> <b>If the health check is healthy</b>: returns all the records</p> </li> <li> <p> <b>If the health check is unhealthy</b>: returns the applicable value for the last healthy instance</p> </li> <li> <p> <b>If you didn't specify a health check configuration</b>: returns all the records</p> </li> </ul> <p>For the current quota on the number of instances that you can register using the same namespace and using the same service, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">AWS Cloud Map Limits</a> in the <i>AWS Cloud Map Developer Guide</i>.</p>",
        "operationId": "RegisterInstance"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "482": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          }
        },
        "description": "Adds one or more tags to the specified resource.",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          }
        },
        "description": "Removes one or more tags from the specified resource.",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.UpdateInstanceCustomHealthStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.UpdateInstanceCustomHealthStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateInstanceCustomHealthStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InstanceNotFound",
            "schema": {
              "$ref": "#/definitions/InstanceNotFound"
            }
          },
          "481": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          },
          "482": {
            "description": "CustomHealthNotFound",
            "schema": {
              "$ref": "#/definitions/CustomHealthNotFound"
            }
          },
          "483": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          }
        },
        "description": "<p>Submits a request to change the health status of a custom health check to healthy or unhealthy.</p> <p>You can use <code>UpdateInstanceCustomHealthStatus</code> to change the status only for custom health checks, which you define using <code>HealthCheckCustomConfig</code> when you create a service. You can't use it to change the status for Route 53 health checks, which you define using <code>HealthCheckConfig</code>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_HealthCheckCustomConfig.html\">HealthCheckCustomConfig</a>.</p>",
        "operationId": "UpdateInstanceCustomHealthStatus"
      }
    },
    "/#X-Amz-Target=Route53AutoNaming_v20170314.UpdateService": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Route53AutoNaming_v20170314.UpdateService"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateServiceResponse"
            }
          },
          "480": {
            "description": "DuplicateRequest",
            "schema": {
              "$ref": "#/definitions/DuplicateRequest"
            }
          },
          "481": {
            "description": "InvalidInput",
            "schema": {
              "$ref": "#/definitions/InvalidInput"
            }
          },
          "482": {
            "description": "ServiceNotFound",
            "schema": {
              "$ref": "#/definitions/ServiceNotFound"
            }
          }
        },
        "description": "<p>Submits a request to perform the following operations:</p> <ul> <li> <p>Update the TTL setting for existing <code>DnsRecords</code> configurations</p> </li> <li> <p>Add, update, or delete <code>HealthCheckConfig</code> for a specified service</p> <note> <p>You can't add, update, or delete a <code>HealthCheckCustomConfig</code> configuration.</p> </note> </li> </ul> <p>For public and private DNS namespaces, note the following:</p> <ul> <li> <p>If you omit any existing <code>DnsRecords</code> or <code>HealthCheckConfig</code> configurations from an <code>UpdateService</code> request, the configurations are deleted from the service.</p> </li> <li> <p>If you omit an existing <code>HealthCheckCustomConfig</code> configuration from an <code>UpdateService</code> request, the configuration is not deleted from the service.</p> </li> </ul> <p>When you update settings for a service, AWS Cloud Map also updates the corresponding settings in all the records and health checks that were created by using the specified service.</p>",
        "operationId": "UpdateService"
      }
    }
  },
  "definitions": {
    "AmazonResourceName": {
      "maxLength": 1011,
      "minLength": 1,
      "type": "string"
    },
    "Arn": {
      "maxLength": 255,
      "type": "string"
    },
    "AttrKey": {
      "maxLength": 255,
      "pattern": "^[a-zA-Z0-9!-~]+$",
      "type": "string"
    },
    "AttrValue": {
      "maxLength": 1024,
      "pattern": "^([a-zA-Z0-9!-~][ \\ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$",
      "type": "string"
    },
    "Attributes": {
      "additionalProperties": {
        "$ref": "#/definitions/AttrValue"
      },
      "type": "object"
    },
    "Code": {
      "type": "string"
    },
    "CreateHttpNamespaceRequest": {
      "properties": {
        "CreatorRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "A unique string that identifies the request and that allows failed <code>CreateHttpNamespace</code> requests to be retried without the risk of executing the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "A description for the namespace."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceName"
            },
            {
              "description": "The name that you want to assign to this namespace."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to add to the namespace. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "CreateHttpNamespaceRequest",
      "type": "object"
    },
    "CreateHttpNamespaceResponse": {
      "example": {
        "OperationId": "httpvoqozuhfet5kzxoxg-a-response-example"
      },
      "properties": {
        "OperationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationId"
            },
            {
              "description": "A value that you can use to determine whether the request completed successfully. To get the status of the operation, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html\">GetOperation</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreatePrivateDnsNamespaceRequest": {
      "properties": {
        "CreatorRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "A unique string that identifies the request and that allows failed <code>CreatePrivateDnsNamespace</code> requests to be retried without the risk of executing the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "A description for the namespace."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceName"
            },
            {
              "description": "The name that you want to assign to this namespace. When you create a private DNS namespace, AWS Cloud Map automatically creates an Amazon Route 53 private hosted zone that has the same name as the namespace."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to add to the namespace. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        },
        "Vpc": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the Amazon VPC that you want to associate the namespace with."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Vpc"
      ],
      "title": "CreatePrivateDnsNamespaceRequest",
      "type": "object"
    },
    "CreatePrivateDnsNamespaceResponse": {
      "example": {
        "OperationId": "gv4g5meo7ndmeh4fqskygvk23d2fijwa-k9302yzd"
      },
      "properties": {
        "OperationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationId"
            },
            {
              "description": "A value that you can use to determine whether the request completed successfully. To get the status of the operation, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html\">GetOperation</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreatePublicDnsNamespaceRequest": {
      "properties": {
        "CreatorRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "A unique string that identifies the request and that allows failed <code>CreatePublicDnsNamespace</code> requests to be retried without the risk of executing the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "A description for the namespace."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceName"
            },
            {
              "description": "The name that you want to assign to this namespace."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to add to the namespace. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "CreatePublicDnsNamespaceRequest",
      "type": "object"
    },
    "CreatePublicDnsNamespaceResponse": {
      "example": {
        "OperationId": "dns2voqozuhfet5kzxoxg-a-response-example"
      },
      "properties": {
        "OperationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationId"
            },
            {
              "description": "A value that you can use to determine whether the request completed successfully. To get the status of the operation, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html\">GetOperation</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateServiceRequest": {
      "properties": {
        "CreatorRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "A unique string that identifies the request and that allows failed <code>CreateService</code> requests to be retried without the risk of executing the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "A description for the service."
            }
          ]
        },
        "DnsConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsConfig"
            },
            {
              "description": "A complex type that contains information about the Amazon Route 53 records that you want AWS Cloud Map to create when you register an instance. "
            }
          ]
        },
        "HealthCheckConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckConfig"
            },
            {
              "description": "<p> <i>Public DNS and HTTP namespaces only.</i> A complex type that contains settings for an optional Route 53 health check. If you specify settings for a health check, AWS Cloud Map associates the health check with all the Route 53 DNS records that you specify in <code>DnsConfig</code>.</p> <important> <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p> </important> <p>For information about the charges for health checks, see <a href=\"http://aws.amazon.com/cloud-map/pricing/\">AWS Cloud Map Pricing</a>.</p>"
            }
          ]
        },
        "HealthCheckCustomConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckCustomConfig"
            },
            {
              "description": "<p>A complex type that contains information about an optional custom health check.</p> <important> <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p> </important> <p>You can't add, update, or delete a <code>HealthCheckCustomConfig</code> configuration from an existing service.</p>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "<p>The name that you want to assign to the service.</p> <p>If you want AWS Cloud Map to create an <code>SRV</code> record when you register an instance, and if you're using a system that requires a specific <code>SRV</code> format, such as <a href=\"http://www.haproxy.org/\">HAProxy</a>, specify the following for <code>Name</code>:</p> <ul> <li> <p>Start the name with an underscore (_), such as <code>_exampleservice</code> </p> </li> <li> <p>End the name with <i>._protocol</i>, such as <code>._tcp</code> </p> </li> </ul> <p>When you register an instance, AWS Cloud Map creates an <code>SRV</code> record and assigns a name to the record by concatenating the service name and the namespace name, for example:</p> <p> <code>_exampleservice._tcp.example.com</code> </p>"
            }
          ]
        },
        "NamespaceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the namespace that you want to use to create the service."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to add to the service. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "CreateServiceRequest",
      "type": "object"
    },
    "CreateServiceResponse": {
      "example": {
        "Service": {
          "Arn": "arn:aws:servicediscovery:us-west-2:123456789012:service/srv-p5zdwlg5uvvzjita",
          "CreateDate": 1587081768.334,
          "CreatorRequestId": "567c1193-6b00-4308-bd57-ad38a8822d25",
          "DnsConfig": {
            "DnsRecords": [
              {
                "TTL": 60,
                "Type": "A"
              }
            ],
            "NamespaceId": "ns-ylexjili4cdxy3xm",
            "RoutingPolicy": "MULTIVALUE"
          },
          "Id": "srv-p5zdwlg5uvvzjita",
          "Name": "myservice",
          "NamespaceId": "ns-ylexjili4cdxy3xm"
        }
      },
      "properties": {
        "Service": {
          "allOf": [
            {
              "$ref": "#/definitions/Service"
            },
            {
              "description": "A complex type that contains information about the new service."
            }
          ]
        }
      },
      "type": "object"
    },
    "CustomHealthNotFound": {},
    "CustomHealthStatus": {
      "enum": [
        "HEALTHY",
        "UNHEALTHY"
      ],
      "type": "string"
    },
    "DeleteNamespaceRequest": {
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the namespace that you want to delete."
            }
          ]
        }
      },
      "required": [
        "Id"
      ],
      "title": "DeleteNamespaceRequest",
      "type": "object"
    },
    "DeleteNamespaceResponse": {
      "example": {
        "OperationId": "gv4g5meo7ndmeh4fqskygvk23d2fijwa-k98y6drk"
      },
      "properties": {
        "OperationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationId"
            },
            {
              "description": "A value that you can use to determine whether the request completed successfully. To get the status of the operation, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html\">GetOperation</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteServiceRequest": {
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the service that you want to delete."
            }
          ]
        }
      },
      "required": [
        "Id"
      ],
      "title": "DeleteServiceRequest",
      "type": "object"
    },
    "DeleteServiceResponse": {
      "example": {},
      "properties": {},
      "type": "object"
    },
    "DeregisterInstanceRequest": {
      "properties": {
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The value that you specified for <code>Id</code> in the <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html\">RegisterInstance</a> request."
            }
          ]
        },
        "ServiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the service that the instance is associated with."
            }
          ]
        }
      },
      "required": [
        "ServiceId",
        "InstanceId"
      ],
      "title": "DeregisterInstanceRequest",
      "type": "object"
    },
    "DeregisterInstanceResponse": {
      "example": {
        "OperationId": "4yejorelbukcjzpnr6tlmrghsjwpngf4-k98rnaiq"
      },
      "properties": {
        "OperationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationId"
            },
            {
              "description": "A value that you can use to determine whether the request completed successfully. For more information, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html\">GetOperation</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DiscoverInstancesRequest": {
      "properties": {
        "HealthStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthStatusFilter"
            },
            {
              "description": "The health status of the instances that you want to discover."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/DiscoverMaxResults"
            },
            {
              "description": "The maximum number of instances that you want AWS Cloud Map to return in the response to a <code>DiscoverInstances</code> request. If you don't specify a value for <code>MaxResults</code>, AWS Cloud Map returns up to 100 instances."
            }
          ]
        },
        "NamespaceName": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceName"
            },
            {
              "description": "The name of the namespace that you specified when you registered the instance."
            }
          ]
        },
        "OptionalParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Attributes"
            },
            {
              "description": "Opportunistic filters to scope the results based on custom attributes. If there are instances that match both the filters specified in both the <code>QueryParameters</code> parameter and this parameter, they are returned. Otherwise, these filters are ignored and only instances that match the filters specified in the <code>QueryParameters</code> parameter are returned."
            }
          ]
        },
        "QueryParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/Attributes"
            },
            {
              "description": "Filters to scope the results based on custom attributes for the instance. For example, <code>{version=v1, az=1a}</code>. Only instances that match all the specified key-value pairs will be returned."
            }
          ]
        },
        "ServiceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The name of the service that you specified when you registered the instance."
            }
          ]
        }
      },
      "required": [
        "NamespaceName",
        "ServiceName"
      ],
      "title": "DiscoverInstancesRequest",
      "type": "object"
    },
    "DiscoverInstancesResponse": {
      "example": {
        "Instances": [
          {
            "Attributes": {
              "AWS_INSTANCE_IPV4": "172.2.1.3",
              "AWS_INSTANCE_PORT": "808"
            },
            "HealthStatus": "UNKNOWN",
            "InstanceId": "myservice-53",
            "NamespaceName": "example.com",
            "ServiceName": "myservice"
          }
        ]
      },
      "properties": {
        "Instances": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpInstanceSummaryList"
            },
            {
              "description": "A complex type that contains one <code>HttpInstanceSummary</code> for each registered instance."
            }
          ]
        }
      },
      "type": "object"
    },
    "DiscoverMaxResults": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "DnsConfig": {
      "description": "A complex type that contains information about the Amazon Route 53 DNS records that you want AWS Cloud Map to create when you register an instance.",
      "properties": {
        "DnsRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsRecordList"
            },
            {
              "description": "An array that contains one <code>DnsRecord</code> object for each Route 53 DNS record that you want AWS Cloud Map to create when you register an instance."
            }
          ]
        },
        "NamespaceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the namespace to use for DNS configuration.Top level attribute in request should be used to reference namespace-id",
              "x-deprecated": true
            }
          ]
        },
        "RoutingPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/RoutingPolicy"
            },
            {
              "description": "<p>The routing policy that you want to apply to all Route 53 DNS records that AWS Cloud Map creates when you register an instance and specify this service.</p> <note> <p>If you want to use this service to register instances that create alias records, specify <code>WEIGHTED</code> for the routing policy.</p> </note> <p>You can specify the following values:</p> <p> <b>MULTIVALUE</b> </p> <p>If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances.</p> <p>For example, suppose the service includes configurations for one <code>A</code> record and a health check, and you use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances.</p> <p>If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances.</p> <p>For more information about the multivalue routing policy, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-multivalue\">Multivalue Answer Routing</a> in the <i>Route 53 Developer Guide</i>.</p> <p> <b>WEIGHTED</b> </p> <p>Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances.</p> <p>For example, suppose the service includes configurations for one <code>A</code> record and a health check, and you use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy.</p> <p>If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance.</p> <p>For more information about the weighted routing policy, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted\">Weighted Routing</a> in the <i>Route 53 Developer Guide</i>.</p>"
            }
          ]
        }
      },
      "required": [
        "DnsRecords"
      ],
      "type": "object"
    },
    "DnsConfigChange": {
      "description": "A complex type that contains information about changes to the Route 53 DNS records that AWS Cloud Map creates when you register an instance.",
      "properties": {
        "DnsRecords": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsRecordList"
            },
            {
              "description": "An array that contains one <code>DnsRecord</code> object for each Route 53 record that you want AWS Cloud Map to create when you register an instance."
            }
          ]
        }
      },
      "required": [
        "DnsRecords"
      ],
      "type": "object"
    },
    "DnsProperties": {
      "description": "A complex type that contains the ID for the Route 53 hosted zone that AWS Cloud Map creates when you create a namespace.",
      "properties": {
        "HostedZoneId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID for the Route 53 hosted zone that AWS Cloud Map creates when you create a namespace."
            }
          ]
        }
      },
      "type": "object"
    },
    "DnsRecord": {
      "description": "A complex type that contains information about the Route 53 DNS records that you want AWS Cloud Map to create when you register an instance.",
      "properties": {
        "TTL": {
          "allOf": [
            {
              "$ref": "#/definitions/RecordTTL"
            },
            {
              "description": "<p>The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.</p> <note> <p>Alias records don't include a TTL because Route 53 uses the TTL for the AWS resource that an alias record routes traffic to. If you include the <code>AWS_ALIAS_DNS_NAME</code> attribute when you submit a <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html\">RegisterInstance</a> request, the <code>TTL</code> value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.</p> </note>"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/RecordType"
            },
            {
              "description": "<p>The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries. You can specify values for <code>Type</code> in the following combinations:</p> <ul> <li> <p> <code>A</code> </p> </li> <li> <p> <code>AAAA</code> </p> </li> <li> <p> <code>A</code> and <code>AAAA</code> </p> </li> <li> <p> <code>SRV</code> </p> </li> <li> <p> <code>CNAME</code> </p> </li> </ul> <p>If you want AWS Cloud Map to create a Route 53 alias record when you register an instance, specify <code>A</code> or <code>AAAA</code> for <code>Type</code>.</p> <p>You specify other settings, such as the IP address for <code>A</code> and <code>AAAA</code> records, when you register an instance. For more information, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html\">RegisterInstance</a>.</p> <p>The following values are supported:</p> <p> <code>A</code> <b> <code/> </b> </p> <p>Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.</p> <p> <code>AAAA</code> <b> <code/> </b> </p> <p>Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.</p> <p> <code>CNAME</code> <b> <code/> </b> </p> <p>Route 53 returns the domain name of the resource, such as www.example.com. Note the following:</p> <ul> <li> <p>You specify the domain name that you want to route traffic to when you register an instance. For more information, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#cloudmap-RegisterInstance-request-Attributes\">Attributes</a> in the topic <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html\">RegisterInstance</a>.</p> </li> <li> <p>You must specify <code>WEIGHTED</code> for the value of <code>RoutingPolicy</code>.</p> </li> <li> <p>You can't specify both <code>CNAME</code> for <code>Type</code> and settings for <code>HealthCheckConfig</code>. If you do, the request will fail with an <code>InvalidInput</code> error.</p> </li> </ul> <p> <b>SRV</b> </p> <p>Route 53 returns the value for an <code>SRV</code> record. The value for an <code>SRV</code> record uses the following values:</p> <p> <code>priority weight port service-hostname</code> </p> <p>Note the following about the values:</p> <ul> <li> <p>The values of <code>priority</code> and <code>weight</code> are both set to <code>1</code> and can't be changed. </p> </li> <li> <p>The value of <code>port</code> comes from the value that you specify for the <code>AWS_INSTANCE_PORT</code> attribute when you submit a <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html\">RegisterInstance</a> request. </p> </li> <li> <p>The value of <code>service-hostname</code> is a concatenation of the following values:</p> <ul> <li> <p>The value that you specify for <code>InstanceId</code> when you register an instance.</p> </li> <li> <p>The name of the service.</p> </li> <li> <p>The name of the namespace. </p> </li> </ul> <p>For example, if the value of <code>InstanceId</code> is <code>test</code>, the name of the service is <code>backend</code>, and the name of the namespace is <code>example.com</code>, the value of <code>service-hostname</code> is:</p> <p> <code>test.backend.example.com</code> </p> </li> </ul> <p>If you specify settings for an <code>SRV</code> record, note the following:</p> <ul> <li> <p>If you specify values for <code>AWS_INSTANCE_IPV4</code>, <code>AWS_INSTANCE_IPV6</code>, or both in the <code>RegisterInstance</code> request, AWS Cloud Map automatically creates <code>A</code> and/or <code>AAAA</code> records that have the same name as the value of <code>service-hostname</code> in the <code>SRV</code> record. You can ignore these records.</p> </li> <li> <p>If you're using a system that requires a specific <code>SRV</code> format, such as HAProxy, see the <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html#cloudmap-CreateService-request-Name\">Name</a> element in the documentation about <code>CreateService</code> for information about how to specify the correct name format.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "Type",
        "TTL"
      ],
      "type": "object"
    },
    "DnsRecordList": {
      "items": {
        "$ref": "#/definitions/DnsRecord"
      },
      "type": "array"
    },
    "DuplicateRequest": {},
    "FailureThreshold": {
      "maximum": 10,
      "minimum": 1,
      "type": "integer"
    },
    "FilterCondition": {
      "enum": [
        "EQ",
        "IN",
        "BETWEEN"
      ],
      "type": "string"
    },
    "FilterValue": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "FilterValues": {
      "items": {
        "$ref": "#/definitions/FilterValue"
      },
      "type": "array"
    },
    "GetInstanceRequest": {
      "properties": {
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the instance that you want to get information about."
            }
          ]
        },
        "ServiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the service that the instance is associated with."
            }
          ]
        }
      },
      "required": [
        "ServiceId",
        "InstanceId"
      ],
      "title": "GetInstanceRequest",
      "type": "object"
    },
    "GetInstanceResponse": {
      "example": {
        "Instance": {
          "Attributes": {
            "AWS_INSTANCE_IPV4": "192.0.2.44",
            "AWS_INSTANCE_PORT": "80",
            "color": "green",
            "region": "us-west-2",
            "stage": "beta"
          },
          "Id": "i-abcd1234"
        }
      },
      "properties": {
        "Instance": {
          "allOf": [
            {
              "$ref": "#/definitions/Instance"
            },
            {
              "description": "A complex type that contains information about a specified instance."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetInstancesHealthStatusRequest": {
      "properties": {
        "Instances": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceIdList"
            },
            {
              "description": "<p>An array that contains the IDs of all the instances that you want to get the health status for.</p> <p>If you omit <code>Instances</code>, AWS Cloud Map returns the health status for all the instances that are associated with the specified service.</p> <note> <p>To get the IDs for the instances that you've registered by using a specified service, submit a <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_ListInstances.html\">ListInstances</a> request.</p> </note>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of instances that you want AWS Cloud Map to return in the response to a <code>GetInstancesHealthStatus</code> request. If you don't specify a value for <code>MaxResults</code>, AWS Cloud Map returns up to 100 instances."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "<p>For the first <code>GetInstancesHealthStatus</code> request, omit this value.</p> <p>If more than <code>MaxResults</code> instances match the specified criteria, you can submit another <code>GetInstancesHealthStatus</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p>"
            }
          ]
        },
        "ServiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the service that the instance is associated with."
            }
          ]
        }
      },
      "required": [
        "ServiceId"
      ],
      "title": "GetInstancesHealthStatusRequest",
      "type": "object"
    },
    "GetInstancesHealthStatusResponse": {
      "example": {
        "Status": {
          "i-abcd1234": "HEALTHY",
          "i-abcd1235": "UNHEALTHY"
        }
      },
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If more than <code>MaxResults</code> instances match the specified criteria, you can submit another <code>GetInstancesHealthStatus</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceHealthStatusMap"
            },
            {
              "description": "A complex type that contains the IDs and the health status of the instances that you specified in the <code>GetInstancesHealthStatus</code> request."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetNamespaceRequest": {
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the namespace that you want to get information about."
            }
          ]
        }
      },
      "required": [
        "Id"
      ],
      "title": "GetNamespaceRequest",
      "type": "object"
    },
    "GetNamespaceResponse": {
      "example": {
        "Namespace": {
          "Arn": "arn:aws:servicediscovery:us-west-2: 123456789120:namespace/ns-e1tpmexample0001",
          "CreateDate": "20181118T211712Z",
          "CreatorRequestId": "example-creator-request-id-0001",
          "Description": "Example.com AWS Cloud Map HTTP Namespace",
          "Id": "ns-e1tpmexample0001",
          "Name": "example-http.com",
          "Properties": {
            "DnsProperties": {},
            "HttpProperties": {
              "HttpName": "example-http.com"
            }
          },
          "Type": "HTTP"
        }
      },
      "properties": {
        "Namespace": {
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            },
            {
              "description": "A complex type that contains information about the specified namespace."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetOperationRequest": {
      "properties": {
        "OperationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the operation that you want to get more information about."
            }
          ]
        }
      },
      "required": [
        "OperationId"
      ],
      "title": "GetOperationRequest",
      "type": "object"
    },
    "GetOperationResponse": {
      "example": {
        "Operation": {
          "CreateDate": 1587055860.121,
          "Id": "gv4g5meo7ndmeh4fqskygvk23d2fijwa-k9302yzd",
          "Status": "SUCCESS",
          "Targets": {
            "NAMESPACE": "ns-ylexjili4cdxy3xm"
          },
          "Type": "CREATE_NAMESPACE",
          "UpdateDate": 1587055900.469
        }
      },
      "properties": {
        "Operation": {
          "allOf": [
            {
              "$ref": "#/definitions/Operation"
            },
            {
              "description": "A complex type that contains information about the operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetServiceRequest": {
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the service that you want to get settings for."
            }
          ]
        }
      },
      "required": [
        "Id"
      ],
      "title": "GetServiceRequest",
      "type": "object"
    },
    "GetServiceResponse": {
      "example": {
        "Service": {
          "Arn": "arn:aws:servicediscovery:us-west-2:123456789120:service/srv-e4anhexample0004",
          "CreateDate": "20181118T211707Z",
          "CreatorRequestId": "example-creator-request-id-0004",
          "Description": "Example.com AWS Cloud Map HTTP Service",
          "HealthCheckConfig": {
            "FailureThreshold": 3,
            "ResourcePath": "/",
            "Type": "HTTPS"
          },
          "Id": "srv-e4anhexample0004",
          "Name": "example-http-service",
          "NamespaceId": "ns-e4anhexample0004"
        }
      },
      "properties": {
        "Service": {
          "allOf": [
            {
              "$ref": "#/definitions/Service"
            },
            {
              "description": "A complex type that contains information about the service."
            }
          ]
        }
      },
      "type": "object"
    },
    "HealthCheckConfig": {
      "description": "<p> <i>Public DNS and HTTP namespaces only.</i> A complex type that contains settings for an optional health check. If you specify settings for a health check, AWS Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p> <important> <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p> </important> <p>Health checks are basic Route 53 health checks that monitor an AWS endpoint. For information about pricing for health checks, see <a href=\"http://aws.amazon.com/route53/pricing/\">Amazon Route 53 Pricing</a>.</p> <p>Note the following about configuring health checks.</p> <p> <b> <code>A</code> and <code>AAAA</code> records</b> </p> <p>If <code>DnsConfig</code> includes configurations for both <code>A</code> and <code>AAAA</code> records, AWS Cloud Map creates a health check that uses the IPv4 address to check the health of the resource. If the endpoint that is specified by the IPv4 address is unhealthy, Route 53 considers both the <code>A</code> and <code>AAAA</code> records to be unhealthy. </p> <p> <b> <code>CNAME</code> records</b> </p> <p>You can't specify settings for <code>HealthCheckConfig</code> when the <code>DNSConfig</code> includes <code>CNAME</code> for the value of <code>Type</code>. If you do, the <code>CreateService</code> request will fail with an <code>InvalidInput</code> error.</p> <p> <b>Request interval</b> </p> <p>A Route 53 health checker in each health-checking region sends a health check request to an endpoint every 30 seconds. On average, your endpoint receives a health check request about every two seconds. However, health checkers don't coordinate with one another, so you'll sometimes see several requests per second followed by a few seconds with no health checks at all.</p> <p> <b>Health checking regions</b> </p> <p>Health checkers perform checks from all Route 53 health-checking regions. For a list of the current regions, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-Regions\">Regions</a>.</p> <p> <b>Alias records</b> </p> <p>When you register an instance, if you include the <code>AWS_ALIAS_DNS_NAME</code> attribute, AWS Cloud Map creates a Route 53 alias record. Note the following:</p> <ul> <li> <p>Route 53 automatically sets <code>EvaluateTargetHealth</code> to true for alias records. When <code>EvaluateTargetHealth</code> is true, the alias record inherits the health of the referenced AWS resource. such as an ELB load balancer. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-EvaluateTargetHealth\">EvaluateTargetHealth</a>.</p> </li> <li> <p>If you include <code>HealthCheckConfig</code> and then use the service to register an instance that creates an alias record, Route 53 doesn't create the health check.</p> </li> </ul> <p> <b>Charges for health checks</b> </p> <p>Health checks are basic Route 53 health checks that monitor an AWS endpoint. For information about pricing for health checks, see <a href=\"http://aws.amazon.com/route53/pricing/\">Amazon Route 53 Pricing</a>.</p>",
      "properties": {
        "FailureThreshold": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureThreshold"
            },
            {
              "description": "The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html\">How Route 53 Determines Whether an Endpoint Is Healthy</a> in the <i>Route 53 Developer Guide</i>."
            }
          ]
        },
        "ResourcePath": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourcePath"
            },
            {
              "description": "<p>The path that you want Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, such as the file <code>/docs/route53-health-check.html</code>. Route 53 automatically adds the DNS name for the service. If you don't specify a value for <code>ResourcePath</code>, the default value is <code>/</code>.</p> <p>If you specify <code>TCP</code> for <code>Type</code>, you must <i>not</i> specify a value for <code>ResourcePath</code>.</p>"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckType"
            },
            {
              "description": "<p>The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.</p> <important> <p>You can't change the value of <code>Type</code> after you create a health check.</p> </important> <p>You can create the following types of health checks:</p> <ul> <li> <p> <b>HTTP</b>: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400.</p> </li> <li> <p> <b>HTTPS</b>: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400.</p> <important> <p>If you specify HTTPS for the value of <code>Type</code>, the endpoint must support TLS v1.0 or later.</p> </important> </li> <li> <p> <b>TCP</b>: Route 53 tries to establish a TCP connection.</p> <p>If you specify <code>TCP</code> for <code>Type</code>, don't specify a value for <code>ResourcePath</code>.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html\">How Route 53 Determines Whether an Endpoint Is Healthy</a> in the <i>Route 53 Developer Guide</i>.</p>"
            }
          ]
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "HealthCheckCustomConfig": {
      "description": "<p>A complex type that contains information about an optional custom health check. A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:</p> <ul> <li> <p>You can't use a health check that is defined by <code>HealthCheckConfig</code> because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.)</p> </li> <li> <p>You want to use a third-party health checker regardless of where your resources are.</p> </li> </ul> <important> <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p> </important> <p>To change the status of a custom health check, submit an <code>UpdateInstanceCustomHealthStatus</code> request. AWS Cloud Map doesn't monitor the status of the resource, it just keeps a record of the status specified in the most recent <code>UpdateInstanceCustomHealthStatus</code> request.</p> <p>Here's how custom health checks work:</p> <ol> <li> <p>You create a service and specify a value for <code>FailureThreshold</code>. </p> <p>The failure threshold indicates the number of 30-second intervals you want AWS Cloud Map to wait between the time that your application sends an <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_UpdateInstanceCustomHealthStatus.html\">UpdateInstanceCustomHealthStatus</a> request and the time that AWS Cloud Map stops routing internet traffic to the corresponding resource.</p> </li> <li> <p>You register an instance.</p> </li> <li> <p>You configure a third-party health checker to monitor the resource that is associated with the new instance. </p> <note> <p>AWS Cloud Map doesn't check the health of the resource directly. </p> </note> </li> <li> <p>The third-party health-checker determines that the resource is unhealthy and notifies your application.</p> </li> <li> <p>Your application submits an <code>UpdateInstanceCustomHealthStatus</code> request.</p> </li> <li> <p>AWS Cloud Map waits for (<code>FailureThreshold</code> x 30) seconds.</p> </li> <li> <p>If another <code>UpdateInstanceCustomHealthStatus</code> request doesn't arrive during that time to change the status back to healthy, AWS Cloud Map stops routing traffic to the resource.</p> </li> </ol>",
      "properties": {
        "FailureThreshold": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureThreshold"
            },
            {
              "description": "<important> <p>This parameter has been deprecated and is always set to 1. AWS Cloud Map waits for approximately 30 seconds after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before changing the status of the service instance.</p> </important> <p>The number of 30-second intervals that you want AWS Cloud Map to wait after receiving an <code>UpdateInstanceCustomHealthStatus</code> request before it changes the health status of a service instance.</p> <p>Sending a second or subsequent <code>UpdateInstanceCustomHealthStatus</code> request with the same value before 30 seconds has passed doesn't accelerate the change. AWS Cloud Map still waits <code>30</code> seconds after the first request to make the change.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "HealthCheckType": {
      "enum": [
        "HTTP",
        "HTTPS",
        "TCP"
      ],
      "type": "string"
    },
    "HealthStatus": {
      "enum": [
        "HEALTHY",
        "UNHEALTHY",
        "UNKNOWN"
      ],
      "type": "string"
    },
    "HealthStatusFilter": {
      "enum": [
        "HEALTHY",
        "UNHEALTHY",
        "ALL"
      ],
      "type": "string"
    },
    "HttpInstanceSummary": {
      "description": "In a response to a <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html\">DiscoverInstances</a> request, <code>HttpInstanceSummary</code> contains information about one instance that matches the values that you specified in the request.",
      "properties": {
        "Attributes": {
          "allOf": [
            {
              "$ref": "#/definitions/Attributes"
            },
            {
              "description": "If you included any attributes when you registered the instance, the values of those attributes."
            }
          ]
        },
        "HealthStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthStatus"
            },
            {
              "description": "If you configured health checking in the service, the current health status of the service instance."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of an instance that matches the values that you specified in the request."
            }
          ]
        },
        "NamespaceName": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceName"
            },
            {
              "description": "The name of the namespace that you specified when you registered the instance."
            }
          ]
        },
        "ServiceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The name of the service that you specified when you registered the instance."
            }
          ]
        }
      },
      "type": "object"
    },
    "HttpInstanceSummaryList": {
      "items": {
        "$ref": "#/definitions/HttpInstanceSummary"
      },
      "type": "array"
    },
    "HttpProperties": {
      "description": "A complex type that contains the name of an HTTP namespace.",
      "properties": {
        "HttpName": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceName"
            },
            {
              "description": "The name of an HTTP namespace."
            }
          ]
        }
      },
      "type": "object"
    },
    "Instance": {
      "description": "A complex type that contains information about an instance that AWS Cloud Map creates when you submit a <code>RegisterInstance</code> request.",
      "properties": {
        "Attributes": {
          "allOf": [
            {
              "$ref": "#/definitions/Attributes"
            },
            {
              "description": "<p>A string map that contains the following information for the service that you specify in <code>ServiceId</code>:</p> <ul> <li> <p>The attributes that apply to the records that are defined in the service. </p> </li> <li> <p>For each attribute, the applicable value.</p> </li> </ul> <p>Supported attribute keys include the following:</p> <p> <b>AWS_ALIAS_DNS_NAME</b> </p> <p> <b/> </p> <p>If you want AWS Cloud Map to create a Route 53 alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that is associated with the load balancer. For information about how to get the DNS name, see \"DNSName\" in the topic <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html\">AliasTarget</a>.</p> <p>Note the following:</p> <ul> <li> <p>The configuration for the service that is specified by <code>ServiceId</code> must include settings for an <code>A</code> record, an <code>AAAA</code> record, or both.</p> </li> <li> <p>In the service that is specified by <code>ServiceId</code>, the value of <code>RoutingPolicy</code> must be <code>WEIGHTED</code>.</p> </li> <li> <p>If the service that is specified by <code>ServiceId</code> includes <code>HealthCheckConfig</code> settings, AWS Cloud Map will create the health check, but it won't associate the health check with the alias record.</p> </li> <li> <p>Auto naming currently doesn't support creating alias records that route traffic to AWS resources other than ELB load balancers.</p> </li> <li> <p>If you specify a value for <code>AWS_ALIAS_DNS_NAME</code>, don't specify values for any of the <code>AWS_INSTANCE</code> attributes.</p> </li> </ul> <p> <b>AWS_EC2_INSTANCE_ID</b> </p> <p> <i>HTTP namespaces only.</i> The Amazon EC2 instance ID for the instance. The <code>AWS_INSTANCE_IPV4</code> attribute contains the primary private IPv4 address.</p> <p> <b>AWS_INSTANCE_CNAME</b> </p> <p>If the service configuration includes a <code>CNAME</code> record, the domain name that you want Route 53 to return in response to DNS queries, for example, <code>example.com</code>.</p> <p>This value is required if the service specified by <code>ServiceId</code> includes settings for an <code>CNAME</code> record.</p> <p> <b>AWS_INSTANCE_IPV4</b> </p> <p>If the service configuration includes an <code>A</code> record, the IPv4 address that you want Route 53 to return in response to DNS queries, for example, <code>192.0.2.44</code>.</p> <p>This value is required if the service specified by <code>ServiceId</code> includes settings for an <code>A</code> record. If the service includes settings for an <code>SRV</code> record, you must specify a value for <code>AWS_INSTANCE_IPV4</code>, <code>AWS_INSTANCE_IPV6</code>, or both.</p> <p> <b>AWS_INSTANCE_IPV6</b> </p> <p>If the service configuration includes an <code>AAAA</code> record, the IPv6 address that you want Route 53 to return in response to DNS queries, for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>.</p> <p>This value is required if the service specified by <code>ServiceId</code> includes settings for an <code>AAAA</code> record. If the service includes settings for an <code>SRV</code> record, you must specify a value for <code>AWS_INSTANCE_IPV4</code>, <code>AWS_INSTANCE_IPV6</code>, or both.</p> <p> <b>AWS_INSTANCE_PORT</b> </p> <p>If the service includes an <code>SRV</code> record, the value that you want Route 53 to return for the port.</p> <p>If the service includes <code>HealthCheckConfig</code>, the port on the endpoint that you want Route 53 to send requests to. </p> <p>This value is required if you specified settings for an <code>SRV</code> record or a Route 53 health check when you created the service.</p>"
            }
          ]
        },
        "CreatorRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "A unique string that identifies the request and that allows failed <code>RegisterInstance</code> requests to be retried without the risk of executing the operation twice. You must use a unique <code>CreatorRequestId</code> string every time you submit a <code>RegisterInstance</code> request if you're registering additional instances for the same namespace and service. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "<p>An identifier that you want to associate with the instance. Note the following:</p> <ul> <li> <p>If the service that is specified by <code>ServiceId</code> includes settings for an <code>SRV</code> record, the value of <code>InstanceId</code> is automatically included as part of the value for the <code>SRV</code> record. For more information, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_DnsRecord.html#cloudmap-Type-DnsRecord-Type\">DnsRecord &gt; Type</a>.</p> </li> <li> <p>You can use this value to update an existing instance.</p> </li> <li> <p>To register a new instance, you must specify a value that is unique among instances that you register by using the same service. </p> </li> <li> <p>If you specify an existing <code>InstanceId</code> and <code>ServiceId</code>, AWS Cloud Map updates the existing DNS records. If there's also an existing health check, AWS Cloud Map deletes the old health check and creates a new one. </p> <note> <p>The health check isn't deleted immediately, so it will still appear for a while if you submit a <code>ListHealthChecks</code> request, for example.</p> </note> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "Id"
      ],
      "type": "object"
    },
    "InstanceHealthStatusMap": {
      "additionalProperties": {
        "$ref": "#/definitions/HealthStatus"
      },
      "type": "object"
    },
    "InstanceIdList": {
      "items": {
        "$ref": "#/definitions/ResourceId"
      },
      "minItems": 1,
      "type": "array"
    },
    "InstanceNotFound": {},
    "InstanceSummary": {
      "description": "A complex type that contains information about the instances that you registered by using a specified service.",
      "properties": {
        "Attributes": {
          "allOf": [
            {
              "$ref": "#/definitions/Attributes"
            },
            {
              "description": "<p>A string map that contains the following information:</p> <ul> <li> <p>The attributes that are associate with the instance. </p> </li> <li> <p>For each attribute, the applicable value.</p> </li> </ul> <p>Supported attribute keys include the following:</p> <ul> <li> <p> <code>AWS_ALIAS_DNS_NAME</code>: For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that is associated with the load balancer. </p> </li> <li> <p> <code>AWS_EC2_INSTANCE_ID</code>: (HTTP namespaces only) The Amazon EC2 instance ID for the instance. When the <code>AWS_EC2_INSTANCE_ID</code> attribute is specified, then the <code>AWS_INSTANCE_IPV4</code> attribute contains the primary private IPv4 address.</p> </li> <li> <p> <code>AWS_INSTANCE_CNAME</code>: For a <code>CNAME</code> record, the domain name that Route 53 returns in response to DNS queries, for example, <code>example.com</code>.</p> </li> <li> <p> <code>AWS_INSTANCE_IPV4</code>: For an <code>A</code> record, the IPv4 address that Route 53 returns in response to DNS queries, for example, <code>192.0.2.44</code>.</p> </li> <li> <p> <code>AWS_INSTANCE_IPV6</code>: For an <code>AAAA</code> record, the IPv6 address that Route 53 returns in response to DNS queries, for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>.</p> </li> <li> <p> <code>AWS_INSTANCE_PORT</code>: For an <code>SRV</code> record, the value that Route 53 returns for the port. In addition, if the service includes <code>HealthCheckConfig</code>, the port on the endpoint that Route 53 sends requests to.</p> </li> </ul>"
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID for an instance that you created by using a specified service."
            }
          ]
        }
      },
      "type": "object"
    },
    "InstanceSummaryList": {
      "items": {
        "$ref": "#/definitions/InstanceSummary"
      },
      "type": "array"
    },
    "InvalidInput": {},
    "ListInstancesRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of instances that you want AWS Cloud Map to return in the response to a <code>ListInstances</code> request. If you don't specify a value for <code>MaxResults</code>, AWS Cloud Map returns up to 100 instances."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "<p>For the first <code>ListInstances</code> request, omit this value.</p> <p>If more than <code>MaxResults</code> instances match the specified criteria, you can submit another <code>ListInstances</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p>"
            }
          ]
        },
        "ServiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the service that you want to list instances for."
            }
          ]
        }
      },
      "required": [
        "ServiceId"
      ],
      "title": "ListInstancesRequest",
      "type": "object"
    },
    "ListInstancesResponse": {
      "example": {
        "Instances": [
          {
            "Attributes": {
              "AWS_INSTANCE_IPV4": "172.2.1.3",
              "AWS_INSTANCE_PORT": "808"
            },
            "Id": "i-06bdabbae60f65a4e"
          }
        ]
      },
      "properties": {
        "Instances": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceSummaryList"
            },
            {
              "description": "Summary information about the instances that are associated with the specified service."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If more than <code>MaxResults</code> instances match the specified criteria, you can submit another <code>ListInstances</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListNamespacesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceFilters"
            },
            {
              "description": "<p>A complex type that contains specifications for the namespaces that you want to list.</p> <p>If you specify more than one filter, a namespace must match all filters to be returned by <code>ListNamespaces</code>.</p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of namespaces that you want AWS Cloud Map to return in the response to a <code>ListNamespaces</code> request. If you don't specify a value for <code>MaxResults</code>, AWS Cloud Map returns up to 100 namespaces."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "<p>For the first <code>ListNamespaces</code> request, omit this value.</p> <p>If the response contains <code>NextToken</code>, submit another <code>ListNamespaces</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p> <note> <p>AWS Cloud Map gets <code>MaxResults</code> namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first <code>MaxResults</code> namespaces matched the specified criteria but that subsequent groups of <code>MaxResults</code> namespaces do contain namespaces that match the criteria.</p> </note>"
            }
          ]
        }
      },
      "title": "ListNamespacesRequest",
      "type": "object"
    },
    "ListNamespacesResponse": {
      "example": {
        "Namespaces": [
          {
            "Arn": "arn:aws:servicediscovery:us-west-2:123456789012:namespace/ns-a3ccy2e7e3a7rile",
            "CreateDate": 1585354387.357,
            "Id": "ns-a3ccy2e7e3a7rile",
            "Name": "local",
            "Properties": {
              "DnsProperties": {
                "HostedZoneId": "Z06752353VBUDTC32S84S"
              },
              "HttpProperties": {
                "HttpName": "local"
              }
            },
            "Type": "DNS_PRIVATE"
          },
          {
            "Arn": "arn:aws:servicediscovery:us-west-2:123456789012:namespace/ns-pocfyjtrsmwtvcxx",
            "CreateDate": 1586468974.698,
            "Description": "My second namespace",
            "Id": "ns-pocfyjtrsmwtvcxx",
            "Name": "My-second-namespace",
            "Properties": {
              "DnsProperties": {},
              "HttpProperties": {
                "HttpName": "My-second-namespace"
              }
            },
            "Type": "HTTP"
          },
          {
            "Arn": "arn:aws:servicediscovery:us-west-2:123456789012:namespace/ns-ylexjili4cdxy3xm",
            "CreateDate": 1587055896.798,
            "Id": "ns-ylexjili4cdxy3xm",
            "Name": "example.com",
            "Properties": {
              "DnsProperties": {
                "HostedZoneId": "Z09983722P0QME1B3KC8I"
              },
              "HttpProperties": {
                "HttpName": "example.com"
              }
            },
            "Type": "DNS_PRIVATE"
          }
        ]
      },
      "properties": {
        "Namespaces": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceSummariesList"
            },
            {
              "description": "An array that contains one <code>NamespaceSummary</code> object for each namespace that matches the specified filter criteria."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "<p>If the response contains <code>NextToken</code>, submit another <code>ListNamespaces</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p> <note> <p>AWS Cloud Map gets <code>MaxResults</code> namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first <code>MaxResults</code> namespaces matched the specified criteria but that subsequent groups of <code>MaxResults</code> namespaces do contain namespaces that match the criteria.</p> </note>"
            }
          ]
        }
      },
      "type": "object"
    },
    "ListOperationsRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationFilters"
            },
            {
              "description": "<p>A complex type that contains specifications for the operations that you want to list, for example, operations that you started between a specified start date and end date.</p> <p>If you specify more than one filter, an operation must match all filters to be returned by <code>ListOperations</code>.</p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of items that you want AWS Cloud Map to return in the response to a <code>ListOperations</code> request. If you don't specify a value for <code>MaxResults</code>, AWS Cloud Map returns up to 100 operations."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "<p>For the first <code>ListOperations</code> request, omit this value.</p> <p>If the response contains <code>NextToken</code>, submit another <code>ListOperations</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p> <note> <p>AWS Cloud Map gets <code>MaxResults</code> operations and then filters them based on the specified criteria. It's possible that no operations in the first <code>MaxResults</code> operations matched the specified criteria but that subsequent groups of <code>MaxResults</code> operations do contain operations that match the criteria.</p> </note>"
            }
          ]
        }
      },
      "title": "ListOperationsRequest",
      "type": "object"
    },
    "ListOperationsResponse": {
      "example": {
        "Operations": [
          {
            "Id": "76yy8ovhpdz0plmjzbsnqgnrqvpv2qdt-kexample",
            "Status": "SUCCESS"
          },
          {
            "Id": "prysnyzpji3u2ciy45nke83x2zanl7yk-dexample",
            "Status": "SUCCESS"
          },
          {
            "Id": "ko4ekftir7kzlbechsh7xvcdgcpk66gh-7example",
            "Status": "PENDING"
          }
        ]
      },
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "<p>If the response contains <code>NextToken</code>, submit another <code>ListOperations</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p> <note> <p>AWS Cloud Map gets <code>MaxResults</code> operations and then filters them based on the specified criteria. It's possible that no operations in the first <code>MaxResults</code> operations matched the specified criteria but that subsequent groups of <code>MaxResults</code> operations do contain operations that match the criteria.</p> </note>"
            }
          ]
        },
        "Operations": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationSummaryList"
            },
            {
              "description": "Summary information about the operations that match the specified criteria."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListServicesRequest": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceFilters"
            },
            {
              "description": "<p>A complex type that contains specifications for the namespaces that you want to list services for. </p> <p>If you specify more than one filter, an operation must match all filters to be returned by <code>ListServices</code>.</p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of services that you want AWS Cloud Map to return in the response to a <code>ListServices</code> request. If you don't specify a value for <code>MaxResults</code>, AWS Cloud Map returns up to 100 services."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "<p>For the first <code>ListServices</code> request, omit this value.</p> <p>If the response contains <code>NextToken</code>, submit another <code>ListServices</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p> <note> <p>AWS Cloud Map gets <code>MaxResults</code> services and then filters them based on the specified criteria. It's possible that no services in the first <code>MaxResults</code> services matched the specified criteria but that subsequent groups of <code>MaxResults</code> services do contain services that match the criteria.</p> </note>"
            }
          ]
        }
      },
      "title": "ListServicesRequest",
      "type": "object"
    },
    "ListServicesResponse": {
      "example": {
        "Services": [
          {
            "Arn": "arn:aws:servicediscovery:us-west-2:123456789012:service/srv-p5zdwlg5uvvzjita",
            "CreateDate": 1587081768.334,
            "DnsConfig": {
              "DnsRecords": [
                {
                  "TTL": 60,
                  "Type": "A"
                }
              ],
              "RoutingPolicy": "MULTIVALUE"
            },
            "Id": "srv-p5zdwlg5uvvzjita",
            "Name": "myservice"
          }
        ]
      },
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "<p>If the response contains <code>NextToken</code>, submit another <code>ListServices</code> request to get the next group of results. Specify the value of <code>NextToken</code> from the previous response in the next request.</p> <note> <p>AWS Cloud Map gets <code>MaxResults</code> services and then filters them based on the specified criteria. It's possible that no services in the first <code>MaxResults</code> services matched the specified criteria but that subsequent groups of <code>MaxResults</code> services do contain services that match the criteria.</p> </note>"
            }
          ]
        },
        "Services": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceSummariesList"
            },
            {
              "description": "An array that contains one <code>ServiceSummary</code> object for each service that matches the specified filter criteria."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "ResourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource that you want to retrieve tags for."
            }
          ]
        }
      },
      "required": [
        "ResourceARN"
      ],
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "example": {
        "Tags": [
          {
            "Key": "Project",
            "Value": "Zeta"
          },
          {
            "Key": "Department",
            "Value": "Engineering"
          }
        ]
      },
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags that are assigned to the resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaxResults": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "Message": {
      "type": "string"
    },
    "Namespace": {
      "description": "A complex type that contains information about a specified namespace.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that AWS Cloud Map assigns to the namespace when you create it."
            }
          ]
        },
        "CreateDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date that the namespace was created, in Unix date/time format and Coordinated Universal Time (UTC). The value of <code>CreateDate</code> is accurate to milliseconds. For example, the value <code>1516925490.087</code> represents Friday, January 26, 2018 12:11:30.087 AM."
            }
          ]
        },
        "CreatorRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "A unique string that identifies the request and that allows failed requests to be retried without the risk of executing an operation twice. "
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The description that you specify for the namespace when you create it."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of a namespace."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceName"
            },
            {
              "description": "The name of the namespace, such as <code>example.com</code>."
            }
          ]
        },
        "Properties": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceProperties"
            },
            {
              "description": "A complex type that contains information that's specific to the type of the namespace."
            }
          ]
        },
        "ServiceCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceCount"
            },
            {
              "description": "The number of services that are associated with the namespace."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceType"
            },
            {
              "description": "<p>The type of the namespace. The methods for discovering instances depends on the value that you specify:</p> <ul> <li> <p> <code>HTTP</code>: Instances can be discovered only programmatically, using the AWS Cloud Map <code>DiscoverInstances</code> API.</p> </li> <li> <p> <code>DNS_PUBLIC</code>: Instances can be discovered using public DNS queries and using the <code>DiscoverInstances</code> API.</p> </li> <li> <p> <code>DNS_PRIVATE</code>: Instances can be discovered using DNS queries in VPCs and using the <code>DiscoverInstances</code> API.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "NamespaceAlreadyExists": {},
    "NamespaceFilter": {
      "description": "A complex type that identifies the namespaces that you want to list. You can choose to list public or private namespaces.",
      "properties": {
        "Condition": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterCondition"
            },
            {
              "description": "<p>The operator that you want to use to determine whether <code>ListNamespaces</code> returns a namespace. Valid values for <code>condition</code> include:</p> <ul> <li> <p> <code>EQ</code>: When you specify <code>EQ</code> for the condition, you can choose to list only public namespaces or private namespaces, but not both. <code>EQ</code> is the default condition and can be omitted.</p> </li> <li> <p> <code>IN</code>: When you specify <code>IN</code> for the condition, you can choose to list public namespaces, private namespaces, or both. </p> </li> <li> <p> <code>BETWEEN</code>: Not applicable</p> </li> </ul>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceFilterName"
            },
            {
              "description": "Specify <code>TYPE</code>."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterValues"
            },
            {
              "description": "<p>If you specify <code>EQ</code> for <code>Condition</code>, specify either <code>DNS_PUBLIC</code> or <code>DNS_PRIVATE</code>.</p> <p>If you specify <code>IN</code> for <code>Condition</code>, you can specify <code>DNS_PUBLIC</code>, <code>DNS_PRIVATE</code>, or both.</p>"
            }
          ]
        }
      },
      "required": [
        "Name",
        "Values"
      ],
      "type": "object"
    },
    "NamespaceFilterName": {
      "enum": [
        "TYPE"
      ],
      "type": "string"
    },
    "NamespaceFilters": {
      "items": {
        "$ref": "#/definitions/NamespaceFilter"
      },
      "type": "array"
    },
    "NamespaceName": {
      "maxLength": 1024,
      "type": "string"
    },
    "NamespaceNotFound": {},
    "NamespaceProperties": {
      "description": "A complex type that contains information that is specific to the namespace type.",
      "properties": {
        "DnsProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsProperties"
            },
            {
              "description": "A complex type that contains the ID for the Route 53 hosted zone that AWS Cloud Map creates when you create a namespace."
            }
          ]
        },
        "HttpProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/HttpProperties"
            },
            {
              "description": "A complex type that contains the name of an HTTP namespace."
            }
          ]
        }
      },
      "type": "object"
    },
    "NamespaceSummariesList": {
      "items": {
        "$ref": "#/definitions/NamespaceSummary"
      },
      "type": "array"
    },
    "NamespaceSummary": {
      "description": "A complex type that contains information about a namespace.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that AWS Cloud Map assigns to the namespace when you create it."
            }
          ]
        },
        "CreateDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the namespace was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "A description for the namespace."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the namespace."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceName"
            },
            {
              "description": "The name of the namespace. When you create a namespace, AWS Cloud Map automatically creates a Route 53 hosted zone that has the same name as the namespace."
            }
          ]
        },
        "Properties": {
          "$ref": "#/definitions/NamespaceProperties"
        },
        "ServiceCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceCount"
            },
            {
              "description": "The number of services that were created using the namespace."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/NamespaceType"
            },
            {
              "description": "The type of the namespace, either public or private."
            }
          ]
        }
      },
      "type": "object"
    },
    "NamespaceType": {
      "enum": [
        "DNS_PUBLIC",
        "DNS_PRIVATE",
        "HTTP"
      ],
      "type": "string"
    },
    "NextToken": {
      "maxLength": 4096,
      "type": "string"
    },
    "Operation": {
      "description": "A complex type that contains information about a specified operation.",
      "properties": {
        "CreateDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the request was submitted, in Unix date/time format and Coordinated Universal Time (UTC). The value of <code>CreateDate</code> is accurate to milliseconds. For example, the value <code>1516925490.087</code> represents Friday, January 26, 2018 12:11:30.087 AM."
            }
          ]
        },
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/Code"
            },
            {
              "description": "<p>The code associated with <code>ErrorMessage</code>. Values for <code>ErrorCode</code> include the following:</p> <ul> <li> <p> <code>ACCESS_DENIED</code> </p> </li> <li> <p> <code>CANNOT_CREATE_HOSTED_ZONE</code> </p> </li> <li> <p> <code>EXPIRED_TOKEN</code> </p> </li> <li> <p> <code>HOSTED_ZONE_NOT_FOUND</code> </p> </li> <li> <p> <code>INTERNAL_FAILURE</code> </p> </li> <li> <p> <code>INVALID_CHANGE_BATCH</code> </p> </li> <li> <p> <code>THROTTLED_REQUEST</code> </p> </li> </ul>"
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "If the value of <code>Status</code> is <code>FAIL</code>, the reason that the operation failed."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationId"
            },
            {
              "description": "The ID of the operation that you want to get information about."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationStatus"
            },
            {
              "description": "<p>The status of the operation. Values include the following:</p> <ul> <li> <p> <b>SUBMITTED</b>: This is the initial state immediately after you submit a request.</p> </li> <li> <p> <b>PENDING</b>: AWS Cloud Map is performing the operation.</p> </li> <li> <p> <b>SUCCESS</b>: The operation succeeded.</p> </li> <li> <p> <b>FAIL</b>: The operation failed. For the failure reason, see <code>ErrorMessage</code>.</p> </li> </ul>"
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationTargetsMap"
            },
            {
              "description": "<p>The name of the target entity that is associated with the operation:</p> <ul> <li> <p> <b>NAMESPACE</b>: The namespace ID is returned in the <code>ResourceId</code> property.</p> </li> <li> <p> <b>SERVICE</b>: The service ID is returned in the <code>ResourceId</code> property.</p> </li> <li> <p> <b>INSTANCE</b>: The instance ID is returned in the <code>ResourceId</code> property.</p> </li> </ul>"
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationType"
            },
            {
              "description": "The name of the operation that is associated with the specified ID."
            }
          ]
        },
        "UpdateDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the value of <code>Status</code> changed to the current value, in Unix date/time format and Coordinated Universal Time (UTC). The value of <code>UpdateDate</code> is accurate to milliseconds. For example, the value <code>1516925490.087</code> represents Friday, January 26, 2018 12:11:30.087 AM."
            }
          ]
        }
      },
      "type": "object"
    },
    "OperationFilter": {
      "description": "A complex type that lets you select the operations that you want to list.",
      "properties": {
        "Condition": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterCondition"
            },
            {
              "description": "<p>The operator that you want to use to determine whether an operation matches the specified value. Valid values for condition include:</p> <ul> <li> <p> <code>EQ</code>: When you specify <code>EQ</code> for the condition, you can specify only one value. <code>EQ</code> is supported for <code>NAMESPACE_ID</code>, <code>SERVICE_ID</code>, <code>STATUS</code>, and <code>TYPE</code>. <code>EQ</code> is the default condition and can be omitted.</p> </li> <li> <p> <code>IN</code>: When you specify <code>IN</code> for the condition, you can specify a list of one or more values. <code>IN</code> is supported for <code>STATUS</code> and <code>TYPE</code>. An operation must match one of the specified values to be returned in the response.</p> </li> <li> <p> <code>BETWEEN</code>: Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value. <code>BETWEEN</code> is supported for <code>UPDATE_DATE</code>. </p> </li> </ul>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationFilterName"
            },
            {
              "description": "<p>Specify the operations that you want to get:</p> <ul> <li> <p> <b>NAMESPACE_ID</b>: Gets operations related to specified namespaces.</p> </li> <li> <p> <b>SERVICE_ID</b>: Gets operations related to specified services.</p> </li> <li> <p> <b>STATUS</b>: Gets operations based on the status of the operations: <code>SUBMITTED</code>, <code>PENDING</code>, <code>SUCCEED</code>, or <code>FAIL</code>.</p> </li> <li> <p> <b>TYPE</b>: Gets specified types of operation.</p> </li> <li> <p> <b>UPDATE_DATE</b>: Gets operations that changed status during a specified date/time range. </p> </li> </ul>"
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterValues"
            },
            {
              "description": "<p>Specify values that are applicable to the value that you specify for <code>Name</code>: </p> <ul> <li> <p> <b>NAMESPACE_ID</b>: Specify one namespace ID.</p> </li> <li> <p> <b>SERVICE_ID</b>: Specify one service ID.</p> </li> <li> <p> <b>STATUS</b>: Specify one or more statuses: <code>SUBMITTED</code>, <code>PENDING</code>, <code>SUCCEED</code>, or <code>FAIL</code>.</p> </li> <li> <p> <b>TYPE</b>: Specify one or more of the following types: <code>CREATE_NAMESPACE</code>, <code>DELETE_NAMESPACE</code>, <code>UPDATE_SERVICE</code>, <code>REGISTER_INSTANCE</code>, or <code>DEREGISTER_INSTANCE</code>.</p> </li> <li> <p> <b>UPDATE_DATE</b>: Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "Name",
        "Values"
      ],
      "type": "object"
    },
    "OperationFilterName": {
      "enum": [
        "NAMESPACE_ID",
        "SERVICE_ID",
        "STATUS",
        "TYPE",
        "UPDATE_DATE"
      ],
      "type": "string"
    },
    "OperationFilters": {
      "items": {
        "$ref": "#/definitions/OperationFilter"
      },
      "type": "array"
    },
    "OperationId": {
      "maxLength": 255,
      "type": "string"
    },
    "OperationNotFound": {},
    "OperationStatus": {
      "enum": [
        "SUBMITTED",
        "PENDING",
        "SUCCESS",
        "FAIL"
      ],
      "type": "string"
    },
    "OperationSummary": {
      "description": "A complex type that contains information about an operation that matches the criteria that you specified in a <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_ListOperations.html\">ListOperations</a> request.",
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationId"
            },
            {
              "description": "The ID for an operation."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationStatus"
            },
            {
              "description": "<p>The status of the operation. Values include the following:</p> <ul> <li> <p> <b>SUBMITTED</b>: This is the initial state immediately after you submit a request.</p> </li> <li> <p> <b>PENDING</b>: AWS Cloud Map is performing the operation.</p> </li> <li> <p> <b>SUCCESS</b>: The operation succeeded.</p> </li> <li> <p> <b>FAIL</b>: The operation failed. For the failure reason, see <code>ErrorMessage</code>.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "OperationSummaryList": {
      "items": {
        "$ref": "#/definitions/OperationSummary"
      },
      "type": "array"
    },
    "OperationTargetType": {
      "enum": [
        "NAMESPACE",
        "SERVICE",
        "INSTANCE"
      ],
      "type": "string"
    },
    "OperationTargetsMap": {
      "additionalProperties": {
        "$ref": "#/definitions/ResourceId"
      },
      "type": "object"
    },
    "OperationType": {
      "enum": [
        "CREATE_NAMESPACE",
        "DELETE_NAMESPACE",
        "UPDATE_SERVICE",
        "REGISTER_INSTANCE",
        "DEREGISTER_INSTANCE"
      ],
      "type": "string"
    },
    "RecordTTL": {
      "maximum": 2147483647,
      "minimum": 0,
      "type": "integer"
    },
    "RecordType": {
      "enum": [
        "SRV",
        "A",
        "AAAA",
        "CNAME"
      ],
      "type": "string"
    },
    "RegisterInstanceRequest": {
      "properties": {
        "Attributes": {
          "allOf": [
            {
              "$ref": "#/definitions/Attributes"
            },
            {
              "description": "<p>A string map that contains the following information for the service that you specify in <code>ServiceId</code>:</p> <ul> <li> <p>The attributes that apply to the records that are defined in the service. </p> </li> <li> <p>For each attribute, the applicable value.</p> </li> </ul> <p>Supported attribute keys include the following:</p> <p> <b>AWS_ALIAS_DNS_NAME</b> </p> <p>If you want AWS Cloud Map to create an Amazon Route 53 alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that is associated with the load balancer. For information about how to get the DNS name, see \"DNSName\" in the topic <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html\">AliasTarget</a> in the <i>Route 53 API Reference</i>.</p> <p>Note the following:</p> <ul> <li> <p>The configuration for the service that is specified by <code>ServiceId</code> must include settings for an <code>A</code> record, an <code>AAAA</code> record, or both.</p> </li> <li> <p>In the service that is specified by <code>ServiceId</code>, the value of <code>RoutingPolicy</code> must be <code>WEIGHTED</code>.</p> </li> <li> <p>If the service that is specified by <code>ServiceId</code> includes <code>HealthCheckConfig</code> settings, AWS Cloud Map will create the Route 53 health check, but it won't associate the health check with the alias record.</p> </li> <li> <p>Auto naming currently doesn't support creating alias records that route traffic to AWS resources other than Elastic Load Balancing load balancers.</p> </li> <li> <p>If you specify a value for <code>AWS_ALIAS_DNS_NAME</code>, don't specify values for any of the <code>AWS_INSTANCE</code> attributes.</p> </li> </ul> <p> <b>AWS_EC2_INSTANCE_ID</b> </p> <p> <i>HTTP namespaces only.</i> The Amazon EC2 instance ID for the instance. If the <code>AWS_EC2_INSTANCE_ID</code> attribute is specified, then the only other attribute that can be specified is <code>AWS_INIT_HEALTH_STATUS</code>. When the <code>AWS_EC2_INSTANCE_ID</code> attribute is specified, then the <code>AWS_INSTANCE_IPV4</code> attribute will be filled out with the primary private IPv4 address.</p> <p> <b>AWS_INIT_HEALTH_STATUS</b> </p> <p>If the service configuration includes <code>HealthCheckCustomConfig</code>, you can optionally use <code>AWS_INIT_HEALTH_STATUS</code> to specify the initial status of the custom health check, <code>HEALTHY</code> or <code>UNHEALTHY</code>. If you don't specify a value for <code>AWS_INIT_HEALTH_STATUS</code>, the initial status is <code>HEALTHY</code>.</p> <p> <b>AWS_INSTANCE_CNAME</b> </p> <p>If the service configuration includes a <code>CNAME</code> record, the domain name that you want Route 53 to return in response to DNS queries, for example, <code>example.com</code>.</p> <p>This value is required if the service specified by <code>ServiceId</code> includes settings for an <code>CNAME</code> record.</p> <p> <b>AWS_INSTANCE_IPV4</b> </p> <p>If the service configuration includes an <code>A</code> record, the IPv4 address that you want Route 53 to return in response to DNS queries, for example, <code>192.0.2.44</code>.</p> <p>This value is required if the service specified by <code>ServiceId</code> includes settings for an <code>A</code> record. If the service includes settings for an <code>SRV</code> record, you must specify a value for <code>AWS_INSTANCE_IPV4</code>, <code>AWS_INSTANCE_IPV6</code>, or both.</p> <p> <b>AWS_INSTANCE_IPV6</b> </p> <p>If the service configuration includes an <code>AAAA</code> record, the IPv6 address that you want Route 53 to return in response to DNS queries, for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>.</p> <p>This value is required if the service specified by <code>ServiceId</code> includes settings for an <code>AAAA</code> record. If the service includes settings for an <code>SRV</code> record, you must specify a value for <code>AWS_INSTANCE_IPV4</code>, <code>AWS_INSTANCE_IPV6</code>, or both.</p> <p> <b>AWS_INSTANCE_PORT</b> </p> <p>If the service includes an <code>SRV</code> record, the value that you want Route 53 to return for the port.</p> <p>If the service includes <code>HealthCheckConfig</code>, the port on the endpoint that you want Route 53 to send requests to. </p> <p>This value is required if you specified settings for an <code>SRV</code> record or a Route 53 health check when you created the service.</p> <p> <b>Custom attributes</b> </p> <p>You can add up to 30 custom attributes. For each key-value pair, the maximum length of the attribute name is 255 characters, and the maximum length of the attribute value is 1,024 characters. The total size of all provided attributes (sum of all keys and values) must not exceed 5,000 characters.</p>"
            }
          ]
        },
        "CreatorRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "A unique string that identifies the request and that allows failed <code>RegisterInstance</code> requests to be retried without the risk of executing the operation twice. You must use a unique <code>CreatorRequestId</code> string every time you submit a <code>RegisterInstance</code> request if you're registering additional instances for the same namespace and service. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp."
            }
          ]
        },
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "<p>An identifier that you want to associate with the instance. Note the following:</p> <ul> <li> <p>If the service that is specified by <code>ServiceId</code> includes settings for an <code>SRV</code> record, the value of <code>InstanceId</code> is automatically included as part of the value for the <code>SRV</code> record. For more information, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_DnsRecord.html#cloudmap-Type-DnsRecord-Type\">DnsRecord &gt; Type</a>.</p> </li> <li> <p>You can use this value to update an existing instance.</p> </li> <li> <p>To register a new instance, you must specify a value that is unique among instances that you register by using the same service. </p> </li> <li> <p>If you specify an existing <code>InstanceId</code> and <code>ServiceId</code>, AWS Cloud Map updates the existing DNS records, if any. If there's also an existing health check, AWS Cloud Map deletes the old health check and creates a new one. </p> <note> <p>The health check isn't deleted immediately, so it will still appear for a while if you submit a <code>ListHealthChecks</code> request, for example.</p> </note> </li> </ul>"
            }
          ]
        },
        "ServiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the service that you want to use for settings for the instance."
            }
          ]
        }
      },
      "required": [
        "ServiceId",
        "InstanceId",
        "Attributes"
      ],
      "title": "RegisterInstanceRequest",
      "type": "object"
    },
    "RegisterInstanceResponse": {
      "example": {
        "OperationId": "4yejorelbukcjzpnr6tlmrghsjwpngf4-k95yg2u7"
      },
      "properties": {
        "OperationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationId"
            },
            {
              "description": "A value that you can use to determine whether the request completed successfully. To get the status of the operation, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html\">GetOperation</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "RequestLimitExceeded": {},
    "ResourceCount": {
      "type": "integer"
    },
    "ResourceDescription": {
      "maxLength": 1024,
      "type": "string"
    },
    "ResourceId": {
      "maxLength": 64,
      "type": "string"
    },
    "ResourceInUse": {},
    "ResourceLimitExceeded": {},
    "ResourceNotFoundException": {},
    "ResourcePath": {
      "maxLength": 255,
      "type": "string"
    },
    "RoutingPolicy": {
      "enum": [
        "MULTIVALUE",
        "WEIGHTED"
      ],
      "type": "string"
    },
    "Service": {
      "description": "A complex type that contains information about the specified service.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that AWS Cloud Map assigns to the service when you create it."
            }
          ]
        },
        "CreateDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the service was created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CreateDate</code> is accurate to milliseconds. For example, the value <code>1516925490.087</code> represents Friday, January 26, 2018 12:11:30.087 AM."
            }
          ]
        },
        "CreatorRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "A unique string that identifies the request and that allows failed requests to be retried without the risk of executing the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The description of the service."
            }
          ]
        },
        "DnsConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsConfig"
            },
            {
              "description": "A complex type that contains information about the Route 53 DNS records that you want AWS Cloud Map to create when you register an instance."
            }
          ]
        },
        "HealthCheckConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckConfig"
            },
            {
              "description": "<p> <i>Public DNS and HTTP namespaces only.</i> A complex type that contains settings for an optional health check. If you specify settings for a health check, AWS Cloud Map associates the health check with the records that you specify in <code>DnsConfig</code>.</p> <p>For information about the charges for health checks, see <a href=\"http://aws.amazon.com/route53/pricing/\">Amazon Route 53 Pricing</a>.</p>"
            }
          ]
        },
        "HealthCheckCustomConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/HealthCheckCustomConfig"
            },
            {
              "description": "<p>A complex type that contains information about an optional custom health check.</p> <important> <p>If you specify a health check configuration, you can specify either <code>HealthCheckCustomConfig</code> or <code>HealthCheckConfig</code> but not both.</p> </important>"
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID that AWS Cloud Map assigned to the service when you created it."
            }
          ]
        },
        "InstanceCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceCount"
            },
            {
              "description": "The number of instances that are currently associated with the service. Instances that were previously associated with the service but that have been deleted are not included in the count. The count might not reflect pending registrations and deregistrations."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The name of the service."
            }
          ]
        },
        "NamespaceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the namespace that was used to create the service."
            }
          ]
        }
      },
      "type": "object"
    },
    "ServiceAlreadyExists": {},
    "ServiceChange": {
      "description": "A complex type that contains changes to an existing service.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "A description for the service."
            }
          ]
        },
        "DnsConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsConfigChange"
            },
            {
              "description": "A complex type that contains information about the Route 53 DNS records that you want AWS Cloud Map to create when you register an instance."
            }
          ]
        },
        "HealthCheckConfig": {
          "$ref": "#/definitions/HealthCheckConfig"
        }
      },
      "type": "object"
    },
    "ServiceFilter": {
      "description": "A complex type that lets you specify the namespaces that you want to list services for.",
      "properties": {
        "Condition": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterCondition"
            },
            {
              "description": "<p>The operator that you want to use to determine whether a service is returned by <code>ListServices</code>. Valid values for <code>Condition</code> include the following:</p> <ul> <li> <p> <code>EQ</code>: When you specify <code>EQ</code>, specify one namespace ID for <code>Values</code>. <code>EQ</code> is the default condition and can be omitted.</p> </li> <li> <p> <code>IN</code>: When you specify <code>IN</code>, specify a list of the IDs for the namespaces that you want <code>ListServices</code> to return a list of services for.</p> </li> <li> <p> <code>BETWEEN</code>: Not applicable.</p> </li> </ul>"
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceFilterName"
            },
            {
              "description": "Specify <code>NAMESPACE_ID</code>."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterValues"
            },
            {
              "description": "The values that are applicable to the value that you specify for <code>Condition</code> to filter the list of services."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Values"
      ],
      "type": "object"
    },
    "ServiceFilterName": {
      "enum": [
        "NAMESPACE_ID"
      ],
      "type": "string"
    },
    "ServiceFilters": {
      "items": {
        "$ref": "#/definitions/ServiceFilter"
      },
      "type": "array"
    },
    "ServiceName": {
      "pattern": "((?=^.{1,127}$)^([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9]))*$)|(^\\.$)",
      "type": "string"
    },
    "ServiceNotFound": {},
    "ServiceSummariesList": {
      "items": {
        "$ref": "#/definitions/ServiceSummary"
      },
      "type": "array"
    },
    "ServiceSummary": {
      "description": "A complex type that contains information about a specified service.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that AWS Cloud Map assigns to the service when you create it."
            }
          ]
        },
        "CreateDate": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the service was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceDescription"
            },
            {
              "description": "The description that you specify when you create the service."
            }
          ]
        },
        "DnsConfig": {
          "$ref": "#/definitions/DnsConfig"
        },
        "HealthCheckConfig": {
          "$ref": "#/definitions/HealthCheckConfig"
        },
        "HealthCheckCustomConfig": {
          "$ref": "#/definitions/HealthCheckCustomConfig"
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID that AWS Cloud Map assigned to the service when you created it."
            }
          ]
        },
        "InstanceCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceCount"
            },
            {
              "description": "The number of instances that are currently associated with the service. Instances that were previously associated with the service but that have been deleted are not included in the count. The count might not reflect pending registrations and deregistrations."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceName"
            },
            {
              "description": "The name of the service."
            }
          ]
        }
      },
      "type": "object"
    },
    "Tag": {
      "description": "A custom key-value pair associated with a resource.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKey"
            },
            {
              "description": "The key identifier, or name, of the tag."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/TagValue"
            },
            {
              "description": "The string value associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "maxItems": 200,
      "minItems": 0,
      "type": "array"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "maxItems": 200,
      "minItems": 0,
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "ResourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource that you want to retrieve tags for."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags to add to the specified resource. Specifying the tag key is required. You can set the value of a tag to an empty string, but you can't set the value of a tag to null."
            }
          ]
        }
      },
      "required": [
        "ResourceARN",
        "Tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagResourceResponse": {
      "example": {},
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "TooManyTagsException": {},
    "UntagResourceRequest": {
      "properties": {
        "ResourceARN": {
          "allOf": [
            {
              "$ref": "#/definitions/AmazonResourceName"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource that you want to retrieve tags for."
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeyList"
            },
            {
              "description": "The tag keys to remove from the specified resource."
            }
          ]
        }
      },
      "required": [
        "ResourceARN",
        "TagKeys"
      ],
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UntagResourceResponse": {
      "example": {},
      "properties": {},
      "type": "object"
    },
    "UpdateInstanceCustomHealthStatusRequest": {
      "properties": {
        "InstanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the instance that you want to change the health status for."
            }
          ]
        },
        "ServiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the service that includes the configuration for the custom health check that you want to change the status for."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomHealthStatus"
            },
            {
              "description": "The new status of the instance, <code>HEALTHY</code> or <code>UNHEALTHY</code>."
            }
          ]
        }
      },
      "required": [
        "ServiceId",
        "InstanceId",
        "Status"
      ],
      "title": "UpdateInstanceCustomHealthStatusRequest",
      "type": "object"
    },
    "UpdateServiceRequest": {
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "The ID of the service that you want to update."
            }
          ]
        },
        "Service": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceChange"
            },
            {
              "description": "A complex type that contains the new settings for the service."
            }
          ]
        }
      },
      "required": [
        "Id",
        "Service"
      ],
      "title": "UpdateServiceRequest",
      "type": "object"
    },
    "UpdateServiceResponse": {
      "example": {
        "OperationId": "m35hsdrkxwjffm3xef4bxyy6vc3ewakx-jdn3y5g5"
      },
      "properties": {
        "OperationId": {
          "allOf": [
            {
              "$ref": "#/definitions/OperationId"
            },
            {
              "description": "A value that you can use to determine whether the request completed successfully. To get the status of the operation, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html\">GetOperation</a>."
            }
          ]
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/servicediscovery/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}