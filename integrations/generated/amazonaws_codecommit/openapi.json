{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS CodeCommit</fullname> <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for AWS CodeCommit API along with usage examples.</p> <p>You can use the AWS CodeCommit API to work with the following objects:</p> <p>Repositories, by calling the following:</p> <ul> <li> <p> <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p> </li> <li> <p> <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p> </li> <li> <p> <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p> </li> <li> <p> <a>GetRepository</a>, which returns information about a specified repository.</p> </li> <li> <p> <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p> </li> <li> <p> <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p> </li> <li> <p> <a>UpdateRepositoryName</a>, which changes the name of the repository. If you change the name of a repository, no other users of that repository can access it until you send them the new HTTPS or SSH URL to use.</p> </li> </ul> <p>Branches, by calling the following:</p> <ul> <li> <p> <a>CreateBranch</a>, which creates a branch in a specified repository.</p> </li> <li> <p> <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p> </li> <li> <p> <a>GetBranch</a>, which returns information about a specified branch.</p> </li> <li> <p> <a>ListBranches</a>, which lists all branches for a specified repository.</p> </li> <li> <p> <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p> </li> </ul> <p>Files, by calling the following:</p> <ul> <li> <p> <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p> </li> <li> <p> <a>GetBlob</a>, which returns the base-64 encoded content of an individual Git blob object in a repository.</p> </li> <li> <p> <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p> </li> <li> <p> <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p> </li> <li> <p> <a>PutFile</a>, which adds or modifies a single file in a specified repository and branch.</p> </li> </ul> <p>Commits, by calling the following:</p> <ul> <li> <p> <a>BatchGetCommits</a>, which returns information about one or more commits in a repository.</p> </li> <li> <p> <a>CreateCommit</a>, which creates a commit for changes to a repository.</p> </li> <li> <p> <a>GetCommit</a>, which returns information about a commit, including commit messages and author and committer information.</p> </li> <li> <p> <a>GetDifferences</a>, which returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference).</p> </li> </ul> <p>Merges, by calling the following:</p> <ul> <li> <p> <a>BatchDescribeMergeConflicts</a>, which returns information about conflicts in a merge between commits in a repository.</p> </li> <li> <p> <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced commit between two branches or commits for the purpose of comparing them and identifying any potential conflicts.</p> </li> <li> <p> <a>DescribeMergeConflicts</a>, which returns information about merge conflicts between the base, source, and destination versions of a file in a potential merge.</p> </li> <li> <p> <a>GetMergeCommit</a>, which returns information about the merge between a source and destination commit. </p> </li> <li> <p> <a>GetMergeConflicts</a>, which returns information about merge conflicts between the source and destination branch in a pull request.</p> </li> <li> <p> <a>GetMergeOptions</a>, which returns information about the available merge options between two branches or commit specifiers.</p> </li> <li> <p> <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward merge option.</p> </li> <li> <p> <a>MergeBranchesBySquash</a>, which merges two branches using the squash merge option.</p> </li> <li> <p> <a>MergeBranchesByThreeWay</a>, which merges two branches using the three-way merge option.</p> </li> </ul> <p>Pull requests, by calling the following:</p> <ul> <li> <p> <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p> </li> <li> <p> <a>CreatePullRequestApprovalRule</a>, which creates an approval rule for a specified pull request.</p> </li> <li> <p> <a>DeletePullRequestApprovalRule</a>, which deletes an approval rule for a specified pull request.</p> </li> <li> <p> <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p> </li> <li> <p> <a>EvaluatePullRequestApprovalRules</a>, which evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p> </li> <li> <p> <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p> </li> <li> <p> <a>GetPullRequest</a>, which returns information about a specified pull request.</p> </li> <li> <p> <a>GetPullRequestApprovalStates</a>, which returns information about the approval states for a specified pull request.</p> </li> <li> <p> <a>GetPullRequestOverrideState</a>, which returns information about whether approval rules have been set aside (overriden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p> </li> <li> <p> <a>ListPullRequests</a>, which lists all pull requests for a repository.</p> </li> <li> <p> <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the fast-forward merge option.</p> </li> <li> <p> <a>MergePullRequestBySquash</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the squash merge option.</p> </li> <li> <p> <a>MergePullRequestByThreeWay</a>. which merges the source destination branch of a pull request into the specified destination branch for that pull request using the three-way merge option.</p> </li> <li> <p> <a>OverridePullRequestApprovalRules</a>, which sets aside all approval rule requirements for a pull request.</p> </li> <li> <p> <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p> </li> <li> <p> <a>UpdatePullRequestApprovalRuleContent</a>, which updates the structure of an approval rule for a pull request.</p> </li> <li> <p> <a>UpdatePullRequestApprovalState</a>, which updates the state of an approval on a pull request.</p> </li> <li> <p> <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p> </li> </ul> <p>Approval rule templates, by calling the following:</p> <ul> <li> <p> <a>AssociateApprovalRuleTemplateWithRepository</a>, which associates a template with a specified repository. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repository.</p> </li> <li> <p> <a>BatchAssociateApprovalRuleTemplateWithRepositories</a>, which associates a template with one or more specified repositories. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repositories.</p> </li> <li> <p> <a>BatchDisassociateApprovalRuleTemplateFromRepositories</a>, which removes the association between a template and specified repositories so that approval rules based on the template are not automatically created when pull requests are created in those repositories.</p> </li> <li> <p> <a>CreateApprovalRuleTemplate</a>, which creates a template for approval rules that can then be associated with one or more repositories in your AWS account.</p> </li> <li> <p> <a>DeleteApprovalRuleTemplate</a>, which deletes the specified template. It does not remove approval rules on pull requests already created with the template.</p> </li> <li> <p> <a>DisassociateApprovalRuleTemplateFromRepository</a>, which removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository.</p> </li> <li> <p> <a>GetApprovalRuleTemplate</a>, which returns information about an approval rule template.</p> </li> <li> <p> <a>ListApprovalRuleTemplates</a>, which lists all approval rule templates in the AWS Region in your AWS account.</p> </li> <li> <p> <a>ListAssociatedApprovalRuleTemplatesForRepository</a>, which lists all approval rule templates that are associated with a specified repository.</p> </li> <li> <p> <a>ListRepositoriesForApprovalRuleTemplate</a>, which lists all repositories associated with the specified approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateDescription</a>, which updates the description of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateName</a>, which updates the name of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateContent</a>, which updates the content of an approval rule template.</p> </li> </ul> <p>Comments in a repository, by calling the following:</p> <ul> <li> <p> <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p> </li> <li> <p> <a>GetComment</a>, which returns information about a comment on a commit.</p> </li> <li> <p> <a>GetCommentReactions</a>, which returns information about emoji reactions to comments.</p> </li> <li> <p> <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentReply</a>, which creates a reply to a comment.</p> </li> <li> <p> <a>PutCommentReaction</a>, which creates or updates an emoji reaction to a comment.</p> </li> <li> <p> <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p> </li> </ul> <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:</p> <ul> <li> <p> <a>ListTagsForResource</a>, which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p> </li> <li> <p> <a>TagResource</a>, which adds or updates tags for a resource in AWS CodeCommit.</p> </li> <li> <p> <a>UntagResource</a>, which removes tags for a resource in AWS CodeCommit.</p> </li> </ul> <p>Triggers, by calling the following:</p> <ul> <li> <p> <a>GetRepositoryTriggers</a>, which returns information about triggers configured for a repository.</p> </li> <li> <p> <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can be used to create or delete triggers.</p> </li> <li> <p> <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger by sending data to the trigger target.</p> </li> </ul> <p>For information about how to use AWS CodeCommit, see the <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">AWS CodeCommit User Guide</a>.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS CodeCommit",
    "version": "2015-04-13",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/codecommit-2015-04-13.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "codecommit",
    "x-datafire": {
      "name": "amazonaws_codecommit",
      "type": "openapi"
    }
  },
  "host": "codecommit.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssociateApprovalRuleTemplateWithRepositoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateDoesNotExistException"
            }
          },
          "483": {
            "description": "MaximumRuleTemplatesAssociatedWithRepositoryException",
            "schema": {
              "$ref": "#/definitions/MaximumRuleTemplatesAssociatedWithRepositoryException"
            }
          },
          "484": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "485": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "486": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "487": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "488": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "489": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "490": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "491": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Creates an association between an approval rule template and a specified repository. Then, the next time a pull request is created in the repository where the destination reference (if specified) matches the destination reference (branch) for the pull request, an approval rule that matches the template conditions is automatically created for that pull request. If no destination references are specified in the template, an approval rule that matches the template contents is created for all pull requests in that repository.",
        "operationId": "AssociateApprovalRuleTemplateWithRepository"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchAssociateApprovalRuleTemplateWithRepositoriesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchAssociateApprovalRuleTemplateWithRepositoriesOutput"
            }
          },
          "480": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateDoesNotExistException"
            }
          },
          "483": {
            "description": "RepositoryNamesRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNamesRequiredException"
            }
          },
          "484": {
            "description": "MaximumRepositoryNamesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumRepositoryNamesExceededException"
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Creates an association between an approval rule template and one or more specified repositories. ",
        "operationId": "BatchAssociateApprovalRuleTemplateWithRepositories"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.BatchDescribeMergeConflicts": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.BatchDescribeMergeConflicts"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDescribeMergeConflictsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDescribeMergeConflictsOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "MergeOptionRequiredException",
            "schema": {
              "$ref": "#/definitions/MergeOptionRequiredException"
            }
          },
          "484": {
            "description": "InvalidMergeOptionException",
            "schema": {
              "$ref": "#/definitions/InvalidMergeOptionException"
            }
          },
          "485": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "486": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "487": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "488": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "489": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "490": {
            "description": "InvalidMaxConflictFilesException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxConflictFilesException"
            }
          },
          "491": {
            "description": "InvalidMaxMergeHunksException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxMergeHunksException"
            }
          },
          "492": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "493": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "494": {
            "description": "MaximumFileContentToLoadExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileContentToLoadExceededException"
            }
          },
          "495": {
            "description": "MaximumItemsToCompareExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumItemsToCompareExceededException"
            }
          },
          "496": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "497": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "498": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "499": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "500": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.",
        "operationId": "BatchDescribeMergeConflicts"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDisassociateApprovalRuleTemplateFromRepositoriesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput"
            }
          },
          "480": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateDoesNotExistException"
            }
          },
          "483": {
            "description": "RepositoryNamesRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNamesRequiredException"
            }
          },
          "484": {
            "description": "MaximumRepositoryNamesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumRepositoryNamesExceededException"
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Removes the association between an approval rule template and one or more specified repositories. ",
        "operationId": "BatchDisassociateApprovalRuleTemplateFromRepositories"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.BatchGetCommits": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.BatchGetCommits"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetCommitsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetCommitsOutput"
            }
          },
          "480": {
            "description": "CommitIdsListRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitIdsListRequiredException"
            }
          },
          "481": {
            "description": "CommitIdsLimitExceededException",
            "schema": {
              "$ref": "#/definitions/CommitIdsLimitExceededException"
            }
          },
          "482": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "483": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "484": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about the contents of one or more commits in a repository.",
        "operationId": "BatchGetCommits"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.BatchGetRepositories": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.BatchGetRepositories"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetRepositoriesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetRepositoriesOutput"
            }
          },
          "480": {
            "description": "RepositoryNamesRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNamesRequiredException"
            }
          },
          "481": {
            "description": "MaximumRepositoryNamesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumRepositoryNamesExceededException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Returns information about one or more repositories.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>",
        "operationId": "BatchGetRepositories"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreateApprovalRuleTemplate": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.CreateApprovalRuleTemplate"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApprovalRuleTemplateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateApprovalRuleTemplateOutput"
            }
          },
          "480": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateNameAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameAlreadyExistsException"
            }
          },
          "483": {
            "description": "ApprovalRuleTemplateContentRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateContentRequiredException"
            }
          },
          "484": {
            "description": "InvalidApprovalRuleTemplateContentException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateContentException"
            }
          },
          "485": {
            "description": "InvalidApprovalRuleTemplateDescriptionException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateDescriptionException"
            }
          },
          "486": {
            "description": "NumberOfRuleTemplatesExceededException",
            "schema": {
              "$ref": "#/definitions/NumberOfRuleTemplatesExceededException"
            }
          }
        },
        "description": "Creates a template for approval rules that can then be associated with one or more repositories in your AWS account. When you associate a template with a repository, AWS CodeCommit creates an approval rule that matches the conditions of the template for all pull requests that meet the conditions of the template. For more information, see <a>AssociateApprovalRuleTemplateWithRepository</a>.",
        "operationId": "CreateApprovalRuleTemplate"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreateBranch": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.CreateBranch"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBranchInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "484": {
            "description": "BranchNameExistsException",
            "schema": {
              "$ref": "#/definitions/BranchNameExistsException"
            }
          },
          "485": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "486": {
            "description": "CommitIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitIdRequiredException"
            }
          },
          "487": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "488": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "489": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "490": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "491": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "492": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "493": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Creates a branch in a repository and points the branch to a commit.</p> <note> <p>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</p> </note>",
        "operationId": "CreateBranch"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreateCommit": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.CreateCommit"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCommitInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateCommitOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "ParentCommitIdRequiredException",
            "schema": {
              "$ref": "#/definitions/ParentCommitIdRequiredException"
            }
          },
          "484": {
            "description": "InvalidParentCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidParentCommitIdException"
            }
          },
          "485": {
            "description": "ParentCommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ParentCommitDoesNotExistException"
            }
          },
          "486": {
            "description": "ParentCommitIdOutdatedException",
            "schema": {
              "$ref": "#/definitions/ParentCommitIdOutdatedException"
            }
          },
          "487": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "488": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "489": {
            "description": "BranchDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/BranchDoesNotExistException"
            }
          },
          "490": {
            "description": "BranchNameIsTagNameException",
            "schema": {
              "$ref": "#/definitions/BranchNameIsTagNameException"
            }
          },
          "491": {
            "description": "FileEntryRequiredException",
            "schema": {
              "$ref": "#/definitions/FileEntryRequiredException"
            }
          },
          "492": {
            "description": "MaximumFileEntriesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileEntriesExceededException"
            }
          },
          "493": {
            "description": "PutFileEntryConflictException",
            "schema": {
              "$ref": "#/definitions/PutFileEntryConflictException"
            }
          },
          "494": {
            "description": "SourceFileOrContentRequiredException",
            "schema": {
              "$ref": "#/definitions/SourceFileOrContentRequiredException"
            }
          },
          "495": {
            "description": "FileContentAndSourceFileSpecifiedException",
            "schema": {
              "$ref": "#/definitions/FileContentAndSourceFileSpecifiedException"
            }
          },
          "496": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "497": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "498": {
            "description": "SamePathRequestException",
            "schema": {
              "$ref": "#/definitions/SamePathRequestException"
            }
          },
          "499": {
            "description": "FileDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/FileDoesNotExistException"
            }
          },
          "500": {
            "description": "FileContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FileContentSizeLimitExceededException"
            }
          },
          "501": {
            "description": "FolderContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FolderContentSizeLimitExceededException"
            }
          },
          "502": {
            "description": "InvalidDeletionParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidDeletionParameterException"
            }
          },
          "503": {
            "description": "RestrictedSourceFileException",
            "schema": {
              "$ref": "#/definitions/RestrictedSourceFileException"
            }
          },
          "504": {
            "description": "FileModeRequiredException",
            "schema": {
              "$ref": "#/definitions/FileModeRequiredException"
            }
          },
          "505": {
            "description": "InvalidFileModeException",
            "schema": {
              "$ref": "#/definitions/InvalidFileModeException"
            }
          },
          "506": {
            "description": "NameLengthExceededException",
            "schema": {
              "$ref": "#/definitions/NameLengthExceededException"
            }
          },
          "507": {
            "description": "InvalidEmailException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailException"
            }
          },
          "508": {
            "description": "CommitMessageLengthExceededException",
            "schema": {
              "$ref": "#/definitions/CommitMessageLengthExceededException"
            }
          },
          "509": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "510": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "511": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "512": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "513": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          },
          "514": {
            "description": "NoChangeException",
            "schema": {
              "$ref": "#/definitions/NoChangeException"
            }
          },
          "515": {
            "description": "FileNameConflictsWithDirectoryNameException",
            "schema": {
              "$ref": "#/definitions/FileNameConflictsWithDirectoryNameException"
            }
          },
          "516": {
            "description": "DirectoryNameConflictsWithFileNameException",
            "schema": {
              "$ref": "#/definitions/DirectoryNameConflictsWithFileNameException"
            }
          },
          "517": {
            "description": "FilePathConflictsWithSubmodulePathException",
            "schema": {
              "$ref": "#/definitions/FilePathConflictsWithSubmodulePathException"
            }
          }
        },
        "description": "Creates a commit for a repository on the tip of a specified branch.",
        "operationId": "CreateCommit"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreatePullRequest": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.CreatePullRequest"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePullRequestInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePullRequestOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          },
          "488": {
            "description": "ClientRequestTokenRequiredException",
            "schema": {
              "$ref": "#/definitions/ClientRequestTokenRequiredException"
            }
          },
          "489": {
            "description": "InvalidClientRequestTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidClientRequestTokenException"
            }
          },
          "490": {
            "description": "IdempotencyParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotencyParameterMismatchException"
            }
          },
          "491": {
            "description": "ReferenceNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ReferenceNameRequiredException"
            }
          },
          "492": {
            "description": "InvalidReferenceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidReferenceNameException"
            }
          },
          "493": {
            "description": "ReferenceDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ReferenceDoesNotExistException"
            }
          },
          "494": {
            "description": "ReferenceTypeNotSupportedException",
            "schema": {
              "$ref": "#/definitions/ReferenceTypeNotSupportedException"
            }
          },
          "495": {
            "description": "TitleRequiredException",
            "schema": {
              "$ref": "#/definitions/TitleRequiredException"
            }
          },
          "496": {
            "description": "InvalidTitleException",
            "schema": {
              "$ref": "#/definitions/InvalidTitleException"
            }
          },
          "497": {
            "description": "InvalidDescriptionException",
            "schema": {
              "$ref": "#/definitions/InvalidDescriptionException"
            }
          },
          "498": {
            "description": "TargetsRequiredException",
            "schema": {
              "$ref": "#/definitions/TargetsRequiredException"
            }
          },
          "499": {
            "description": "InvalidTargetsException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetsException"
            }
          },
          "500": {
            "description": "TargetRequiredException",
            "schema": {
              "$ref": "#/definitions/TargetRequiredException"
            }
          },
          "501": {
            "description": "InvalidTargetException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetException"
            }
          },
          "502": {
            "description": "MultipleRepositoriesInPullRequestException",
            "schema": {
              "$ref": "#/definitions/MultipleRepositoriesInPullRequestException"
            }
          },
          "503": {
            "description": "MaximumOpenPullRequestsExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumOpenPullRequestsExceededException"
            }
          },
          "504": {
            "description": "SourceAndDestinationAreSameException",
            "schema": {
              "$ref": "#/definitions/SourceAndDestinationAreSameException"
            }
          }
        },
        "description": "Creates a pull request in the specified repository.",
        "operationId": "CreatePullRequest"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreatePullRequestApprovalRule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.CreatePullRequestApprovalRule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePullRequestApprovalRuleInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePullRequestApprovalRuleOutput"
            }
          },
          "480": {
            "description": "ApprovalRuleNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApprovalRuleNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleNameException"
            }
          },
          "482": {
            "description": "ApprovalRuleNameAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleNameAlreadyExistsException"
            }
          },
          "483": {
            "description": "ApprovalRuleContentRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleContentRequiredException"
            }
          },
          "484": {
            "description": "InvalidApprovalRuleContentException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleContentException"
            }
          },
          "485": {
            "description": "NumberOfRulesExceededException",
            "schema": {
              "$ref": "#/definitions/NumberOfRulesExceededException"
            }
          },
          "486": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "487": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "488": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "489": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          },
          "490": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "491": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "492": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "493": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "494": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Creates an approval rule for a pull request.",
        "operationId": "CreatePullRequestApprovalRule"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreateRepository": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.CreateRepository"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRepositoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateRepositoryOutput"
            }
          },
          "480": {
            "description": "RepositoryNameExistsException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameExistsException"
            }
          },
          "481": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "InvalidRepositoryDescriptionException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryDescriptionException"
            }
          },
          "484": {
            "description": "RepositoryLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RepositoryLimitExceededException"
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          },
          "490": {
            "description": "InvalidTagsMapException",
            "schema": {
              "$ref": "#/definitions/InvalidTagsMapException"
            }
          },
          "491": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "492": {
            "description": "InvalidSystemTagUsageException",
            "schema": {
              "$ref": "#/definitions/InvalidSystemTagUsageException"
            }
          },
          "493": {
            "description": "TagPolicyException",
            "schema": {
              "$ref": "#/definitions/TagPolicyException"
            }
          }
        },
        "description": "Creates a new, empty repository.",
        "operationId": "CreateRepository"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.CreateUnreferencedMergeCommit"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUnreferencedMergeCommitInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateUnreferencedMergeCommitOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "484": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "485": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "486": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "487": {
            "description": "MergeOptionRequiredException",
            "schema": {
              "$ref": "#/definitions/MergeOptionRequiredException"
            }
          },
          "488": {
            "description": "InvalidMergeOptionException",
            "schema": {
              "$ref": "#/definitions/InvalidMergeOptionException"
            }
          },
          "489": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "490": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "491": {
            "description": "InvalidConflictResolutionException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionException"
            }
          },
          "492": {
            "description": "ManualMergeRequiredException",
            "schema": {
              "$ref": "#/definitions/ManualMergeRequiredException"
            }
          },
          "493": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumConflictResolutionEntriesExceededException"
            }
          },
          "494": {
            "description": "MultipleConflictResolutionEntriesException",
            "schema": {
              "$ref": "#/definitions/MultipleConflictResolutionEntriesException"
            }
          },
          "495": {
            "description": "ReplacementTypeRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementTypeRequiredException"
            }
          },
          "496": {
            "description": "InvalidReplacementTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementTypeException"
            }
          },
          "497": {
            "description": "ReplacementContentRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementContentRequiredException"
            }
          },
          "498": {
            "description": "InvalidReplacementContentException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementContentException"
            }
          },
          "499": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "500": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "501": {
            "description": "FileContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FileContentSizeLimitExceededException"
            }
          },
          "502": {
            "description": "FolderContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FolderContentSizeLimitExceededException"
            }
          },
          "503": {
            "description": "MaximumFileContentToLoadExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileContentToLoadExceededException"
            }
          },
          "504": {
            "description": "MaximumItemsToCompareExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumItemsToCompareExceededException"
            }
          },
          "505": {
            "description": "ConcurrentReferenceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentReferenceUpdateException"
            }
          },
          "506": {
            "description": "FileModeRequiredException",
            "schema": {
              "$ref": "#/definitions/FileModeRequiredException"
            }
          },
          "507": {
            "description": "InvalidFileModeException",
            "schema": {
              "$ref": "#/definitions/InvalidFileModeException"
            }
          },
          "508": {
            "description": "NameLengthExceededException",
            "schema": {
              "$ref": "#/definitions/NameLengthExceededException"
            }
          },
          "509": {
            "description": "InvalidEmailException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailException"
            }
          },
          "510": {
            "description": "CommitMessageLengthExceededException",
            "schema": {
              "$ref": "#/definitions/CommitMessageLengthExceededException"
            }
          },
          "511": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "512": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "513": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "514": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "515": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit.</p> <note> <p>This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p> </note>",
        "operationId": "CreateUnreferencedMergeCommit"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeleteApprovalRuleTemplate": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.DeleteApprovalRuleTemplate"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteApprovalRuleTemplateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteApprovalRuleTemplateOutput"
            }
          },
          "480": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateInUseException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateInUseException"
            }
          }
        },
        "description": "Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.",
        "operationId": "DeleteApprovalRuleTemplate"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeleteBranch": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.DeleteBranch"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBranchInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteBranchOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "484": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "485": {
            "description": "DefaultBranchCannotBeDeletedException",
            "schema": {
              "$ref": "#/definitions/DefaultBranchCannotBeDeletedException"
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Deletes a branch from a repository, unless that branch is the default branch for the repository. ",
        "operationId": "DeleteBranch"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeleteCommentContent": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.DeleteCommentContent"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteCommentContentInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteCommentContentOutput"
            }
          },
          "480": {
            "description": "CommentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommentDoesNotExistException"
            }
          },
          "481": {
            "description": "CommentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentIdRequiredException"
            }
          },
          "482": {
            "description": "InvalidCommentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommentIdException"
            }
          },
          "483": {
            "description": "CommentDeletedException",
            "schema": {
              "$ref": "#/definitions/CommentDeletedException"
            }
          }
        },
        "description": "Deletes the content of a comment made on a change, file, or commit in a repository.",
        "operationId": "DeleteCommentContent"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeleteFile": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.DeleteFile"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteFileInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteFileOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "ParentCommitIdRequiredException",
            "schema": {
              "$ref": "#/definitions/ParentCommitIdRequiredException"
            }
          },
          "484": {
            "description": "InvalidParentCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidParentCommitIdException"
            }
          },
          "485": {
            "description": "ParentCommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ParentCommitDoesNotExistException"
            }
          },
          "486": {
            "description": "ParentCommitIdOutdatedException",
            "schema": {
              "$ref": "#/definitions/ParentCommitIdOutdatedException"
            }
          },
          "487": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "488": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "489": {
            "description": "FileDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/FileDoesNotExistException"
            }
          },
          "490": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "491": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "492": {
            "description": "BranchDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/BranchDoesNotExistException"
            }
          },
          "493": {
            "description": "BranchNameIsTagNameException",
            "schema": {
              "$ref": "#/definitions/BranchNameIsTagNameException"
            }
          },
          "494": {
            "description": "NameLengthExceededException",
            "schema": {
              "$ref": "#/definitions/NameLengthExceededException"
            }
          },
          "495": {
            "description": "InvalidEmailException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailException"
            }
          },
          "496": {
            "description": "CommitMessageLengthExceededException",
            "schema": {
              "$ref": "#/definitions/CommitMessageLengthExceededException"
            }
          },
          "497": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "498": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "499": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "500": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "501": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.",
        "operationId": "DeleteFile"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeletePullRequestApprovalRule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.DeletePullRequestApprovalRule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePullRequestApprovalRuleInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePullRequestApprovalRuleOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          },
          "484": {
            "description": "ApprovalRuleNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleNameRequiredException"
            }
          },
          "485": {
            "description": "InvalidApprovalRuleNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleNameException"
            }
          },
          "486": {
            "description": "CannotDeleteApprovalRuleFromTemplateException",
            "schema": {
              "$ref": "#/definitions/CannotDeleteApprovalRuleFromTemplateException"
            }
          },
          "487": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "488": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "489": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "490": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "491": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the pull request was created. You cannot delete an approval rule from a merged or closed pull request.",
        "operationId": "DeletePullRequestApprovalRule"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DeleteRepository": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.DeleteRepository"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRepositoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteRepositoryOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "483": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "484": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "485": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "486": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Deletes a repository. If a specified repository was already deleted, a null repository ID is returned.</p> <important> <p>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository fail.</p> </important>",
        "operationId": "DeleteRepository"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DescribeMergeConflicts": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxMergeHunks",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.DescribeMergeConflicts"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeMergeConflictsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeMergeConflictsOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "MergeOptionRequiredException",
            "schema": {
              "$ref": "#/definitions/MergeOptionRequiredException"
            }
          },
          "484": {
            "description": "InvalidMergeOptionException",
            "schema": {
              "$ref": "#/definitions/InvalidMergeOptionException"
            }
          },
          "485": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "486": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "487": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "488": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "489": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "490": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "491": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "492": {
            "description": "FileDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/FileDoesNotExistException"
            }
          },
          "493": {
            "description": "InvalidMaxMergeHunksException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxMergeHunksException"
            }
          },
          "494": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "495": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "496": {
            "description": "MaximumFileContentToLoadExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileContentToLoadExceededException"
            }
          },
          "497": {
            "description": "MaximumItemsToCompareExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumItemsToCompareExceededException"
            }
          },
          "498": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "499": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "500": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "501": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "502": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.",
        "operationId": "DescribeMergeConflicts"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DescribePullRequestEvents": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.DescribePullRequestEvents"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePullRequestEventsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePullRequestEventsOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidPullRequestEventTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestEventTypeException"
            }
          },
          "484": {
            "description": "InvalidActorArnException",
            "schema": {
              "$ref": "#/definitions/InvalidActorArnException"
            }
          },
          "485": {
            "description": "ActorDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ActorDoesNotExistException"
            }
          },
          "486": {
            "description": "InvalidMaxResultsException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxResultsException"
            }
          },
          "487": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about one or more pull request events.",
        "operationId": "DescribePullRequestEvents"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisassociateApprovalRuleTemplateFromRepositoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateDoesNotExistException"
            }
          },
          "483": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "484": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "485": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository. This does not delete any approval rules previously created for pull requests through the template association.",
        "operationId": "DisassociateApprovalRuleTemplateFromRepository"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.EvaluatePullRequestApprovalRules": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.EvaluatePullRequestApprovalRules"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EvaluatePullRequestApprovalRulesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EvaluatePullRequestApprovalRulesOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidRevisionIdException",
            "schema": {
              "$ref": "#/definitions/InvalidRevisionIdException"
            }
          },
          "484": {
            "description": "RevisionIdRequiredException",
            "schema": {
              "$ref": "#/definitions/RevisionIdRequiredException"
            }
          },
          "485": {
            "description": "RevisionNotCurrentException",
            "schema": {
              "$ref": "#/definitions/RevisionNotCurrentException"
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Evaluates whether a pull request has met all the conditions specified in its associated approval rules.",
        "operationId": "EvaluatePullRequestApprovalRules"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetApprovalRuleTemplate": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetApprovalRuleTemplate"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetApprovalRuleTemplateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetApprovalRuleTemplateOutput"
            }
          },
          "480": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateDoesNotExistException"
            }
          }
        },
        "description": "Returns information about a specified approval rule template.",
        "operationId": "GetApprovalRuleTemplate"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetBlob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetBlob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBlobInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBlobOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "BlobIdRequiredException",
            "schema": {
              "$ref": "#/definitions/BlobIdRequiredException"
            }
          },
          "484": {
            "description": "InvalidBlobIdException",
            "schema": {
              "$ref": "#/definitions/InvalidBlobIdException"
            }
          },
          "485": {
            "description": "BlobIdDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/BlobIdDoesNotExistException"
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          },
          "491": {
            "description": "FileTooLargeException",
            "schema": {
              "$ref": "#/definitions/FileTooLargeException"
            }
          }
        },
        "description": "Returns the base-64 encoded content of an individual blob in a repository.",
        "operationId": "GetBlob"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetBranch": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetBranch"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBranchInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetBranchOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "484": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "485": {
            "description": "BranchDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/BranchDoesNotExistException"
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about a repository branch, including its name and the last commit ID.",
        "operationId": "GetBranch"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetComment": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetComment"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCommentInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCommentOutput"
            }
          },
          "480": {
            "description": "CommentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommentDoesNotExistException"
            }
          },
          "481": {
            "description": "CommentDeletedException",
            "schema": {
              "$ref": "#/definitions/CommentDeletedException"
            }
          },
          "482": {
            "description": "CommentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidCommentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommentIdException"
            }
          },
          "484": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "485": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "486": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "487": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "488": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Returns the content of a comment made on a change, file, or commit in a repository. </p> <note> <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.</p> </note>",
        "operationId": "GetComment"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetCommentReactions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.GetCommentReactions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCommentReactionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCommentReactionsOutput"
            }
          },
          "480": {
            "description": "CommentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommentDoesNotExistException"
            }
          },
          "481": {
            "description": "CommentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentIdRequiredException"
            }
          },
          "482": {
            "description": "InvalidCommentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommentIdException"
            }
          },
          "483": {
            "description": "InvalidReactionUserArnException",
            "schema": {
              "$ref": "#/definitions/InvalidReactionUserArnException"
            }
          },
          "484": {
            "description": "InvalidMaxResultsException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxResultsException"
            }
          },
          "485": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "486": {
            "description": "CommentDeletedException",
            "schema": {
              "$ref": "#/definitions/CommentDeletedException"
            }
          }
        },
        "description": "Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.",
        "operationId": "GetCommentReactions"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetCommentsForComparedCommit": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.GetCommentsForComparedCommit"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCommentsForComparedCommitInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCommentsForComparedCommitOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "CommitIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitIdRequiredException"
            }
          },
          "484": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "485": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "486": {
            "description": "InvalidMaxResultsException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxResultsException"
            }
          },
          "487": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Returns information about comments made on the comparison between two commits.</p> <note> <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.</p> </note>",
        "operationId": "GetCommentsForComparedCommit"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetCommentsForPullRequest": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.GetCommentsForPullRequest"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCommentsForPullRequestInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCommentsForPullRequestOutput"
            }
          },
          "480": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "481": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "483": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "484": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "485": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "486": {
            "description": "CommitIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitIdRequiredException"
            }
          },
          "487": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "488": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "489": {
            "description": "InvalidMaxResultsException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxResultsException"
            }
          },
          "490": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "491": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "schema": {
              "$ref": "#/definitions/RepositoryNotAssociatedWithPullRequestException"
            }
          },
          "492": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "493": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "494": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "495": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "496": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Returns comments made on a pull request.</p> <note> <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.</p> </note>",
        "operationId": "GetCommentsForPullRequest"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetCommit": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetCommit"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCommitInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCommitOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "CommitIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitIdRequiredException"
            }
          },
          "484": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "485": {
            "description": "CommitIdDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitIdDoesNotExistException"
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about a commit, including commit message and committer information.",
        "operationId": "GetCommit"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetDifferences": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.GetDifferences"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDifferencesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDifferencesOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "484": {
            "description": "InvalidMaxResultsException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxResultsException"
            }
          },
          "485": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "486": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "487": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "488": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "489": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "490": {
            "description": "PathDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PathDoesNotExistException"
            }
          },
          "491": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "492": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "493": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "494": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "495": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.",
        "operationId": "GetDifferences"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetFile": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetFile"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetFileInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetFileOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "484": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "485": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "486": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "487": {
            "description": "FileDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/FileDoesNotExistException"
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          },
          "493": {
            "description": "FileTooLargeException",
            "schema": {
              "$ref": "#/definitions/FileTooLargeException"
            }
          }
        },
        "description": "Returns the base-64 encoded contents of a specified file and its metadata.",
        "operationId": "GetFile"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetFolder": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetFolder"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetFolderInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetFolderOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "484": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "485": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "486": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "487": {
            "description": "FolderDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/FolderDoesNotExistException"
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns the contents of a specified folder in a repository.",
        "operationId": "GetFolder"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetMergeCommit": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetMergeCommit"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMergeCommitInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMergeCommitOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "484": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "485": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "486": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "487": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about a specified merge commit.",
        "operationId": "GetMergeCommit"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetMergeConflicts": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxConflictFiles",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.GetMergeConflicts"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMergeConflictsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMergeConflictsOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "MergeOptionRequiredException",
            "schema": {
              "$ref": "#/definitions/MergeOptionRequiredException"
            }
          },
          "484": {
            "description": "InvalidMergeOptionException",
            "schema": {
              "$ref": "#/definitions/InvalidMergeOptionException"
            }
          },
          "485": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "486": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "487": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "488": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "489": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "490": {
            "description": "InvalidMaxConflictFilesException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxConflictFilesException"
            }
          },
          "491": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "492": {
            "description": "InvalidDestinationCommitSpecifierException",
            "schema": {
              "$ref": "#/definitions/InvalidDestinationCommitSpecifierException"
            }
          },
          "493": {
            "description": "InvalidSourceCommitSpecifierException",
            "schema": {
              "$ref": "#/definitions/InvalidSourceCommitSpecifierException"
            }
          },
          "494": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "495": {
            "description": "MaximumFileContentToLoadExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileContentToLoadExceededException"
            }
          },
          "496": {
            "description": "MaximumItemsToCompareExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumItemsToCompareExceededException"
            }
          },
          "497": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "498": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "499": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "500": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "501": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.",
        "operationId": "GetMergeConflicts"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetMergeOptions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetMergeOptions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMergeOptionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMergeOptionsOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "484": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "485": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "486": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "487": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "488": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "489": {
            "description": "MaximumFileContentToLoadExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileContentToLoadExceededException"
            }
          },
          "490": {
            "description": "MaximumItemsToCompareExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumItemsToCompareExceededException"
            }
          },
          "491": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "492": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "493": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "494": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "495": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about the merge options available for merging two specified branches. For details about why a merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.",
        "operationId": "GetMergeOptions"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetPullRequest": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetPullRequest"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPullRequestInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPullRequestOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Gets information about a pull request in a specified repository.",
        "operationId": "GetPullRequest"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetPullRequestApprovalStates": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetPullRequestApprovalStates"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPullRequestApprovalStatesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPullRequestApprovalStatesOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidRevisionIdException",
            "schema": {
              "$ref": "#/definitions/InvalidRevisionIdException"
            }
          },
          "484": {
            "description": "RevisionIdRequiredException",
            "schema": {
              "$ref": "#/definitions/RevisionIdRequiredException"
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more approval rules applied to them.",
        "operationId": "GetPullRequestApprovalStates"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetPullRequestOverrideState": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetPullRequestOverrideState"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPullRequestOverrideStateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPullRequestOverrideStateOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidRevisionIdException",
            "schema": {
              "$ref": "#/definitions/InvalidRevisionIdException"
            }
          },
          "484": {
            "description": "RevisionIdRequiredException",
            "schema": {
              "$ref": "#/definitions/RevisionIdRequiredException"
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns information about whether approval rules have been set aside (overridden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.",
        "operationId": "GetPullRequestOverrideState"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetRepository": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetRepository"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRepositoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetRepositoryOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Returns information about a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>",
        "operationId": "GetRepository"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.GetRepositoryTriggers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.GetRepositoryTriggers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRepositoryTriggersInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetRepositoryTriggersOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Gets information about triggers configured for a repository.",
        "operationId": "GetRepositoryTriggers"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListApprovalRuleTemplates": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.ListApprovalRuleTemplates"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListApprovalRuleTemplatesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListApprovalRuleTemplatesOutput"
            }
          },
          "480": {
            "description": "InvalidMaxResultsException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxResultsException"
            }
          },
          "481": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          }
        },
        "description": "Lists all approval rule templates in the specified AWS Region in your AWS account. If an AWS Region is not specified, the AWS Region where you are signed in is used.",
        "operationId": "ListApprovalRuleTemplates"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListAssociatedApprovalRuleTemplatesForRepositoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListAssociatedApprovalRuleTemplatesForRepositoryOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidMaxResultsException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxResultsException"
            }
          },
          "484": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Lists all approval rule templates that are associated with a specified repository.",
        "operationId": "ListAssociatedApprovalRuleTemplatesForRepository"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListBranches": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.ListBranches"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListBranchesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBranchesOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "484": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "485": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "486": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "487": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          },
          "488": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          }
        },
        "description": "Gets information about one or more branches in a repository.",
        "operationId": "ListBranches"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListPullRequests": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.ListPullRequests"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPullRequestsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPullRequestsOutput"
            }
          },
          "480": {
            "description": "InvalidPullRequestStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestStatusException"
            }
          },
          "481": {
            "description": "InvalidAuthorArnException",
            "schema": {
              "$ref": "#/definitions/InvalidAuthorArnException"
            }
          },
          "482": {
            "description": "AuthorDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/AuthorDoesNotExistException"
            }
          },
          "483": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "484": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "485": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "486": {
            "description": "InvalidMaxResultsException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxResultsException"
            }
          },
          "487": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "488": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "489": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "490": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "491": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "492": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.",
        "operationId": "ListPullRequests"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListRepositories": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.ListRepositories"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListRepositoriesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListRepositoriesOutput"
            }
          },
          "480": {
            "description": "InvalidSortByException",
            "schema": {
              "$ref": "#/definitions/InvalidSortByException"
            }
          },
          "481": {
            "description": "InvalidOrderException",
            "schema": {
              "$ref": "#/definitions/InvalidOrderException"
            }
          },
          "482": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          }
        },
        "description": "Gets information about one or more repositories.",
        "operationId": "ListRepositories"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListRepositoriesForApprovalRuleTemplateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListRepositoriesForApprovalRuleTemplateOutput"
            }
          },
          "480": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidMaxResultsException",
            "schema": {
              "$ref": "#/definitions/InvalidMaxResultsException"
            }
          },
          "484": {
            "description": "InvalidContinuationTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidContinuationTokenException"
            }
          },
          "485": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "486": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "487": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "488": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "489": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Lists all repositories associated with the specified approval rule template.",
        "operationId": "ListRepositoriesForApprovalRuleTemplate"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceOutput"
            }
          },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "ResourceArnRequiredException",
            "schema": {
              "$ref": "#/definitions/ResourceArnRequiredException"
            }
          },
          "483": {
            "description": "InvalidResourceArnException",
            "schema": {
              "$ref": "#/definitions/InvalidResourceArnException"
            }
          }
        },
        "description": "Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\">CodeCommit Resources and Operations</a> in the<i> AWS CodeCommit User Guide</i>.",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByFastForward": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.MergeBranchesByFastForward"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MergeBranchesByFastForwardInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MergeBranchesByFastForwardOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "484": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "485": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "486": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "487": {
            "description": "InvalidTargetBranchException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetBranchException"
            }
          },
          "488": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "489": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "490": {
            "description": "BranchNameIsTagNameException",
            "schema": {
              "$ref": "#/definitions/BranchNameIsTagNameException"
            }
          },
          "491": {
            "description": "BranchDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/BranchDoesNotExistException"
            }
          },
          "492": {
            "description": "ManualMergeRequiredException",
            "schema": {
              "$ref": "#/definitions/ManualMergeRequiredException"
            }
          },
          "493": {
            "description": "ConcurrentReferenceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentReferenceUpdateException"
            }
          },
          "494": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "495": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "496": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "497": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "498": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Merges two branches using the fast-forward merge strategy.",
        "operationId": "MergeBranchesByFastForward"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergeBranchesBySquash": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.MergeBranchesBySquash"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MergeBranchesBySquashInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MergeBranchesBySquashOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "484": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "485": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "486": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "487": {
            "description": "InvalidTargetBranchException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetBranchException"
            }
          },
          "488": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "489": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "490": {
            "description": "BranchNameIsTagNameException",
            "schema": {
              "$ref": "#/definitions/BranchNameIsTagNameException"
            }
          },
          "491": {
            "description": "BranchDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/BranchDoesNotExistException"
            }
          },
          "492": {
            "description": "ManualMergeRequiredException",
            "schema": {
              "$ref": "#/definitions/ManualMergeRequiredException"
            }
          },
          "493": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "494": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "495": {
            "description": "InvalidConflictResolutionException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionException"
            }
          },
          "496": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumConflictResolutionEntriesExceededException"
            }
          },
          "497": {
            "description": "MultipleConflictResolutionEntriesException",
            "schema": {
              "$ref": "#/definitions/MultipleConflictResolutionEntriesException"
            }
          },
          "498": {
            "description": "ReplacementTypeRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementTypeRequiredException"
            }
          },
          "499": {
            "description": "InvalidReplacementTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementTypeException"
            }
          },
          "500": {
            "description": "ReplacementContentRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementContentRequiredException"
            }
          },
          "501": {
            "description": "InvalidReplacementContentException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementContentException"
            }
          },
          "502": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "503": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "504": {
            "description": "FileContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FileContentSizeLimitExceededException"
            }
          },
          "505": {
            "description": "FolderContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FolderContentSizeLimitExceededException"
            }
          },
          "506": {
            "description": "MaximumFileContentToLoadExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileContentToLoadExceededException"
            }
          },
          "507": {
            "description": "MaximumItemsToCompareExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumItemsToCompareExceededException"
            }
          },
          "508": {
            "description": "FileModeRequiredException",
            "schema": {
              "$ref": "#/definitions/FileModeRequiredException"
            }
          },
          "509": {
            "description": "InvalidFileModeException",
            "schema": {
              "$ref": "#/definitions/InvalidFileModeException"
            }
          },
          "510": {
            "description": "NameLengthExceededException",
            "schema": {
              "$ref": "#/definitions/NameLengthExceededException"
            }
          },
          "511": {
            "description": "InvalidEmailException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailException"
            }
          },
          "512": {
            "description": "CommitMessageLengthExceededException",
            "schema": {
              "$ref": "#/definitions/CommitMessageLengthExceededException"
            }
          },
          "513": {
            "description": "ConcurrentReferenceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentReferenceUpdateException"
            }
          },
          "514": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "515": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "516": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "517": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "518": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Merges two branches using the squash merge strategy.",
        "operationId": "MergeBranchesBySquash"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByThreeWay": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.MergeBranchesByThreeWay"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MergeBranchesByThreeWayInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MergeBranchesByThreeWayOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "484": {
            "description": "CommitRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitRequiredException"
            }
          },
          "485": {
            "description": "InvalidCommitException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitException"
            }
          },
          "486": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "487": {
            "description": "InvalidTargetBranchException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetBranchException"
            }
          },
          "488": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "489": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "490": {
            "description": "BranchNameIsTagNameException",
            "schema": {
              "$ref": "#/definitions/BranchNameIsTagNameException"
            }
          },
          "491": {
            "description": "BranchDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/BranchDoesNotExistException"
            }
          },
          "492": {
            "description": "ManualMergeRequiredException",
            "schema": {
              "$ref": "#/definitions/ManualMergeRequiredException"
            }
          },
          "493": {
            "description": "ConcurrentReferenceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentReferenceUpdateException"
            }
          },
          "494": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "495": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "496": {
            "description": "InvalidConflictResolutionException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionException"
            }
          },
          "497": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumConflictResolutionEntriesExceededException"
            }
          },
          "498": {
            "description": "MultipleConflictResolutionEntriesException",
            "schema": {
              "$ref": "#/definitions/MultipleConflictResolutionEntriesException"
            }
          },
          "499": {
            "description": "ReplacementTypeRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementTypeRequiredException"
            }
          },
          "500": {
            "description": "InvalidReplacementTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementTypeException"
            }
          },
          "501": {
            "description": "ReplacementContentRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementContentRequiredException"
            }
          },
          "502": {
            "description": "InvalidReplacementContentException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementContentException"
            }
          },
          "503": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "504": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "505": {
            "description": "FileContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FileContentSizeLimitExceededException"
            }
          },
          "506": {
            "description": "FolderContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FolderContentSizeLimitExceededException"
            }
          },
          "507": {
            "description": "MaximumFileContentToLoadExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileContentToLoadExceededException"
            }
          },
          "508": {
            "description": "MaximumItemsToCompareExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumItemsToCompareExceededException"
            }
          },
          "509": {
            "description": "FileModeRequiredException",
            "schema": {
              "$ref": "#/definitions/FileModeRequiredException"
            }
          },
          "510": {
            "description": "InvalidFileModeException",
            "schema": {
              "$ref": "#/definitions/InvalidFileModeException"
            }
          },
          "511": {
            "description": "NameLengthExceededException",
            "schema": {
              "$ref": "#/definitions/NameLengthExceededException"
            }
          },
          "512": {
            "description": "InvalidEmailException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailException"
            }
          },
          "513": {
            "description": "CommitMessageLengthExceededException",
            "schema": {
              "$ref": "#/definitions/CommitMessageLengthExceededException"
            }
          },
          "514": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "515": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "516": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "517": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "518": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Merges two specified branches using the three-way merge strategy.",
        "operationId": "MergeBranchesByThreeWay"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByFastForward": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.MergePullRequestByFastForward"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MergePullRequestByFastForwardInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MergePullRequestByFastForwardOutput"
            }
          },
          "480": {
            "description": "ManualMergeRequiredException",
            "schema": {
              "$ref": "#/definitions/ManualMergeRequiredException"
            }
          },
          "481": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          },
          "482": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "484": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "485": {
            "description": "TipOfSourceReferenceIsDifferentException",
            "schema": {
              "$ref": "#/definitions/TipOfSourceReferenceIsDifferentException"
            }
          },
          "486": {
            "description": "ReferenceDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ReferenceDoesNotExistException"
            }
          },
          "487": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "488": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "schema": {
              "$ref": "#/definitions/RepositoryNotAssociatedWithPullRequestException"
            }
          },
          "489": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "490": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "491": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "492": {
            "description": "ConcurrentReferenceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentReferenceUpdateException"
            }
          },
          "493": {
            "description": "PullRequestApprovalRulesNotSatisfiedException",
            "schema": {
              "$ref": "#/definitions/PullRequestApprovalRulesNotSatisfiedException"
            }
          },
          "494": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "495": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "496": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "497": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "498": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.",
        "operationId": "MergePullRequestByFastForward"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergePullRequestBySquash": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.MergePullRequestBySquash"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MergePullRequestBySquashInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MergePullRequestBySquashOutput"
            }
          },
          "480": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          },
          "481": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "484": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "485": {
            "description": "ManualMergeRequiredException",
            "schema": {
              "$ref": "#/definitions/ManualMergeRequiredException"
            }
          },
          "486": {
            "description": "TipOfSourceReferenceIsDifferentException",
            "schema": {
              "$ref": "#/definitions/TipOfSourceReferenceIsDifferentException"
            }
          },
          "487": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "488": {
            "description": "NameLengthExceededException",
            "schema": {
              "$ref": "#/definitions/NameLengthExceededException"
            }
          },
          "489": {
            "description": "InvalidEmailException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailException"
            }
          },
          "490": {
            "description": "CommitMessageLengthExceededException",
            "schema": {
              "$ref": "#/definitions/CommitMessageLengthExceededException"
            }
          },
          "491": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "492": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "493": {
            "description": "InvalidConflictResolutionException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionException"
            }
          },
          "494": {
            "description": "ReplacementTypeRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementTypeRequiredException"
            }
          },
          "495": {
            "description": "InvalidReplacementTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementTypeException"
            }
          },
          "496": {
            "description": "MultipleConflictResolutionEntriesException",
            "schema": {
              "$ref": "#/definitions/MultipleConflictResolutionEntriesException"
            }
          },
          "497": {
            "description": "ReplacementContentRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementContentRequiredException"
            }
          },
          "498": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumConflictResolutionEntriesExceededException"
            }
          },
          "499": {
            "description": "ConcurrentReferenceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentReferenceUpdateException"
            }
          },
          "500": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "501": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "502": {
            "description": "InvalidFileModeException",
            "schema": {
              "$ref": "#/definitions/InvalidFileModeException"
            }
          },
          "503": {
            "description": "InvalidReplacementContentException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementContentException"
            }
          },
          "504": {
            "description": "FileContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FileContentSizeLimitExceededException"
            }
          },
          "505": {
            "description": "FolderContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FolderContentSizeLimitExceededException"
            }
          },
          "506": {
            "description": "MaximumFileContentToLoadExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileContentToLoadExceededException"
            }
          },
          "507": {
            "description": "MaximumItemsToCompareExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumItemsToCompareExceededException"
            }
          },
          "508": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "509": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "510": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "511": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "schema": {
              "$ref": "#/definitions/RepositoryNotAssociatedWithPullRequestException"
            }
          },
          "512": {
            "description": "PullRequestApprovalRulesNotSatisfiedException",
            "schema": {
              "$ref": "#/definitions/PullRequestApprovalRulesNotSatisfiedException"
            }
          },
          "513": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "514": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "515": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "516": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "517": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.",
        "operationId": "MergePullRequestBySquash"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.MergePullRequestByThreeWay"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MergePullRequestByThreeWayInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MergePullRequestByThreeWayOutput"
            }
          },
          "480": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          },
          "481": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "484": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "485": {
            "description": "ManualMergeRequiredException",
            "schema": {
              "$ref": "#/definitions/ManualMergeRequiredException"
            }
          },
          "486": {
            "description": "TipOfSourceReferenceIsDifferentException",
            "schema": {
              "$ref": "#/definitions/TipOfSourceReferenceIsDifferentException"
            }
          },
          "487": {
            "description": "TipsDivergenceExceededException",
            "schema": {
              "$ref": "#/definitions/TipsDivergenceExceededException"
            }
          },
          "488": {
            "description": "NameLengthExceededException",
            "schema": {
              "$ref": "#/definitions/NameLengthExceededException"
            }
          },
          "489": {
            "description": "InvalidEmailException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailException"
            }
          },
          "490": {
            "description": "CommitMessageLengthExceededException",
            "schema": {
              "$ref": "#/definitions/CommitMessageLengthExceededException"
            }
          },
          "491": {
            "description": "InvalidConflictDetailLevelException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictDetailLevelException"
            }
          },
          "492": {
            "description": "InvalidConflictResolutionStrategyException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionStrategyException"
            }
          },
          "493": {
            "description": "InvalidConflictResolutionException",
            "schema": {
              "$ref": "#/definitions/InvalidConflictResolutionException"
            }
          },
          "494": {
            "description": "ReplacementTypeRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementTypeRequiredException"
            }
          },
          "495": {
            "description": "InvalidReplacementTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementTypeException"
            }
          },
          "496": {
            "description": "MultipleConflictResolutionEntriesException",
            "schema": {
              "$ref": "#/definitions/MultipleConflictResolutionEntriesException"
            }
          },
          "497": {
            "description": "ReplacementContentRequiredException",
            "schema": {
              "$ref": "#/definitions/ReplacementContentRequiredException"
            }
          },
          "498": {
            "description": "MaximumConflictResolutionEntriesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumConflictResolutionEntriesExceededException"
            }
          },
          "499": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "500": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "501": {
            "description": "InvalidFileModeException",
            "schema": {
              "$ref": "#/definitions/InvalidFileModeException"
            }
          },
          "502": {
            "description": "InvalidReplacementContentException",
            "schema": {
              "$ref": "#/definitions/InvalidReplacementContentException"
            }
          },
          "503": {
            "description": "FileContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FileContentSizeLimitExceededException"
            }
          },
          "504": {
            "description": "FolderContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FolderContentSizeLimitExceededException"
            }
          },
          "505": {
            "description": "MaximumFileContentToLoadExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumFileContentToLoadExceededException"
            }
          },
          "506": {
            "description": "MaximumItemsToCompareExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumItemsToCompareExceededException"
            }
          },
          "507": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "508": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "509": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "510": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "schema": {
              "$ref": "#/definitions/RepositoryNotAssociatedWithPullRequestException"
            }
          },
          "511": {
            "description": "ConcurrentReferenceUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentReferenceUpdateException"
            }
          },
          "512": {
            "description": "PullRequestApprovalRulesNotSatisfiedException",
            "schema": {
              "$ref": "#/definitions/PullRequestApprovalRulesNotSatisfiedException"
            }
          },
          "513": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "514": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "515": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "516": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "517": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.",
        "operationId": "MergePullRequestByThreeWay"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.OverridePullRequestApprovalRules": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.OverridePullRequestApprovalRules"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OverridePullRequestApprovalRulesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidRevisionIdException",
            "schema": {
              "$ref": "#/definitions/InvalidRevisionIdException"
            }
          },
          "484": {
            "description": "RevisionIdRequiredException",
            "schema": {
              "$ref": "#/definitions/RevisionIdRequiredException"
            }
          },
          "485": {
            "description": "InvalidOverrideStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidOverrideStatusException"
            }
          },
          "486": {
            "description": "OverrideStatusRequiredException",
            "schema": {
              "$ref": "#/definitions/OverrideStatusRequiredException"
            }
          },
          "487": {
            "description": "OverrideAlreadySetException",
            "schema": {
              "$ref": "#/definitions/OverrideAlreadySetException"
            }
          },
          "488": {
            "description": "RevisionNotCurrentException",
            "schema": {
              "$ref": "#/definitions/RevisionNotCurrentException"
            }
          },
          "489": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          },
          "490": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "491": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "492": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "493": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "494": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Sets aside (overrides) all approval rule requirements for a specified pull request.",
        "operationId": "OverridePullRequestApprovalRules"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PostCommentForComparedCommit": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.PostCommentForComparedCommit"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCommentForComparedCommitInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PostCommentForComparedCommitOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "ClientRequestTokenRequiredException",
            "schema": {
              "$ref": "#/definitions/ClientRequestTokenRequiredException"
            }
          },
          "484": {
            "description": "InvalidClientRequestTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidClientRequestTokenException"
            }
          },
          "485": {
            "description": "IdempotencyParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotencyParameterMismatchException"
            }
          },
          "486": {
            "description": "CommentContentRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentContentRequiredException"
            }
          },
          "487": {
            "description": "CommentContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/CommentContentSizeLimitExceededException"
            }
          },
          "488": {
            "description": "InvalidFileLocationException",
            "schema": {
              "$ref": "#/definitions/InvalidFileLocationException"
            }
          },
          "489": {
            "description": "InvalidRelativeFileVersionEnumException",
            "schema": {
              "$ref": "#/definitions/InvalidRelativeFileVersionEnumException"
            }
          },
          "490": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "491": {
            "description": "InvalidFilePositionException",
            "schema": {
              "$ref": "#/definitions/InvalidFilePositionException"
            }
          },
          "492": {
            "description": "CommitIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitIdRequiredException"
            }
          },
          "493": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "494": {
            "description": "BeforeCommitIdAndAfterCommitIdAreSameException",
            "schema": {
              "$ref": "#/definitions/BeforeCommitIdAndAfterCommitIdAreSameException"
            }
          },
          "495": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "496": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "497": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "498": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "499": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          },
          "500": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "501": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "502": {
            "description": "PathDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PathDoesNotExistException"
            }
          },
          "503": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          }
        },
        "description": "Posts a comment on the comparison between two commits.",
        "operationId": "PostCommentForComparedCommit"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PostCommentForPullRequest": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.PostCommentForPullRequest"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCommentForPullRequestInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PostCommentForPullRequestOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "RepositoryNotAssociatedWithPullRequestException",
            "schema": {
              "$ref": "#/definitions/RepositoryNotAssociatedWithPullRequestException"
            }
          },
          "484": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "485": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "486": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "487": {
            "description": "ClientRequestTokenRequiredException",
            "schema": {
              "$ref": "#/definitions/ClientRequestTokenRequiredException"
            }
          },
          "488": {
            "description": "InvalidClientRequestTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidClientRequestTokenException"
            }
          },
          "489": {
            "description": "IdempotencyParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotencyParameterMismatchException"
            }
          },
          "490": {
            "description": "CommentContentRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentContentRequiredException"
            }
          },
          "491": {
            "description": "CommentContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/CommentContentSizeLimitExceededException"
            }
          },
          "492": {
            "description": "InvalidFileLocationException",
            "schema": {
              "$ref": "#/definitions/InvalidFileLocationException"
            }
          },
          "493": {
            "description": "InvalidRelativeFileVersionEnumException",
            "schema": {
              "$ref": "#/definitions/InvalidRelativeFileVersionEnumException"
            }
          },
          "494": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "495": {
            "description": "InvalidFilePositionException",
            "schema": {
              "$ref": "#/definitions/InvalidFilePositionException"
            }
          },
          "496": {
            "description": "CommitIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommitIdRequiredException"
            }
          },
          "497": {
            "description": "InvalidCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommitIdException"
            }
          },
          "498": {
            "description": "BeforeCommitIdAndAfterCommitIdAreSameException",
            "schema": {
              "$ref": "#/definitions/BeforeCommitIdAndAfterCommitIdAreSameException"
            }
          },
          "499": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "500": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "501": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "502": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "503": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          },
          "504": {
            "description": "CommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommitDoesNotExistException"
            }
          },
          "505": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "506": {
            "description": "PathDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PathDoesNotExistException"
            }
          },
          "507": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          }
        },
        "description": "Posts a comment on a pull request.",
        "operationId": "PostCommentForPullRequest"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PostCommentReply": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.PostCommentReply"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCommentReplyInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PostCommentReplyOutput"
            }
          },
          "480": {
            "description": "ClientRequestTokenRequiredException",
            "schema": {
              "$ref": "#/definitions/ClientRequestTokenRequiredException"
            }
          },
          "481": {
            "description": "InvalidClientRequestTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidClientRequestTokenException"
            }
          },
          "482": {
            "description": "IdempotencyParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotencyParameterMismatchException"
            }
          },
          "483": {
            "description": "CommentContentRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentContentRequiredException"
            }
          },
          "484": {
            "description": "CommentContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/CommentContentSizeLimitExceededException"
            }
          },
          "485": {
            "description": "CommentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommentDoesNotExistException"
            }
          },
          "486": {
            "description": "CommentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentIdRequiredException"
            }
          },
          "487": {
            "description": "InvalidCommentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommentIdException"
            }
          }
        },
        "description": "Posts a comment in reply to an existing comment on a comparison between commits or a pull request.",
        "operationId": "PostCommentReply"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PutCommentReaction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.PutCommentReaction"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutCommentReactionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "CommentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommentDoesNotExistException"
            }
          },
          "481": {
            "description": "CommentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentIdRequiredException"
            }
          },
          "482": {
            "description": "InvalidCommentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommentIdException"
            }
          },
          "483": {
            "description": "InvalidReactionValueException",
            "schema": {
              "$ref": "#/definitions/InvalidReactionValueException"
            }
          },
          "484": {
            "description": "ReactionValueRequiredException",
            "schema": {
              "$ref": "#/definitions/ReactionValueRequiredException"
            }
          },
          "485": {
            "description": "ReactionLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ReactionLimitExceededException"
            }
          },
          "486": {
            "description": "CommentDeletedException",
            "schema": {
              "$ref": "#/definitions/CommentDeletedException"
            }
          }
        },
        "description": "Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.",
        "operationId": "PutCommentReaction"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PutFile": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.PutFile"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutFileInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutFileOutput"
            }
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "483": {
            "description": "ParentCommitIdRequiredException",
            "schema": {
              "$ref": "#/definitions/ParentCommitIdRequiredException"
            }
          },
          "484": {
            "description": "InvalidParentCommitIdException",
            "schema": {
              "$ref": "#/definitions/InvalidParentCommitIdException"
            }
          },
          "485": {
            "description": "ParentCommitDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ParentCommitDoesNotExistException"
            }
          },
          "486": {
            "description": "ParentCommitIdOutdatedException",
            "schema": {
              "$ref": "#/definitions/ParentCommitIdOutdatedException"
            }
          },
          "487": {
            "description": "FileContentRequiredException",
            "schema": {
              "$ref": "#/definitions/FileContentRequiredException"
            }
          },
          "488": {
            "description": "FileContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FileContentSizeLimitExceededException"
            }
          },
          "489": {
            "description": "FolderContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/FolderContentSizeLimitExceededException"
            }
          },
          "490": {
            "description": "PathRequiredException",
            "schema": {
              "$ref": "#/definitions/PathRequiredException"
            }
          },
          "491": {
            "description": "InvalidPathException",
            "schema": {
              "$ref": "#/definitions/InvalidPathException"
            }
          },
          "492": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "493": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "494": {
            "description": "BranchDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/BranchDoesNotExistException"
            }
          },
          "495": {
            "description": "BranchNameIsTagNameException",
            "schema": {
              "$ref": "#/definitions/BranchNameIsTagNameException"
            }
          },
          "496": {
            "description": "InvalidFileModeException",
            "schema": {
              "$ref": "#/definitions/InvalidFileModeException"
            }
          },
          "497": {
            "description": "NameLengthExceededException",
            "schema": {
              "$ref": "#/definitions/NameLengthExceededException"
            }
          },
          "498": {
            "description": "InvalidEmailException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailException"
            }
          },
          "499": {
            "description": "CommitMessageLengthExceededException",
            "schema": {
              "$ref": "#/definitions/CommitMessageLengthExceededException"
            }
          },
          "500": {
            "description": "InvalidDeletionParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidDeletionParameterException"
            }
          },
          "501": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "502": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "503": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "504": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "505": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          },
          "506": {
            "description": "SameFileContentException",
            "schema": {
              "$ref": "#/definitions/SameFileContentException"
            }
          },
          "507": {
            "description": "FileNameConflictsWithDirectoryNameException",
            "schema": {
              "$ref": "#/definitions/FileNameConflictsWithDirectoryNameException"
            }
          },
          "508": {
            "description": "DirectoryNameConflictsWithFileNameException",
            "schema": {
              "$ref": "#/definitions/DirectoryNameConflictsWithFileNameException"
            }
          },
          "509": {
            "description": "FilePathConflictsWithSubmodulePathException",
            "schema": {
              "$ref": "#/definitions/FilePathConflictsWithSubmodulePathException"
            }
          }
        },
        "description": "Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.",
        "operationId": "PutFile"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.PutRepositoryTriggers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.PutRepositoryTriggers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutRepositoryTriggersInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutRepositoryTriggersOutput"
            }
          },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "481": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "RepositoryTriggersListRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggersListRequiredException"
            }
          },
          "484": {
            "description": "MaximumRepositoryTriggersExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumRepositoryTriggersExceededException"
            }
          },
          "485": {
            "description": "InvalidRepositoryTriggerNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerNameException"
            }
          },
          "486": {
            "description": "InvalidRepositoryTriggerDestinationArnException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerDestinationArnException"
            }
          },
          "487": {
            "description": "InvalidRepositoryTriggerRegionException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerRegionException"
            }
          },
          "488": {
            "description": "InvalidRepositoryTriggerCustomDataException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerCustomDataException"
            }
          },
          "489": {
            "description": "MaximumBranchesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumBranchesExceededException"
            }
          },
          "490": {
            "description": "InvalidRepositoryTriggerBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerBranchNameException"
            }
          },
          "491": {
            "description": "InvalidRepositoryTriggerEventsException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerEventsException"
            }
          },
          "492": {
            "description": "RepositoryTriggerNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggerNameRequiredException"
            }
          },
          "493": {
            "description": "RepositoryTriggerDestinationArnRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggerDestinationArnRequiredException"
            }
          },
          "494": {
            "description": "RepositoryTriggerBranchNameListRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggerBranchNameListRequiredException"
            }
          },
          "495": {
            "description": "RepositoryTriggerEventsListRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggerEventsListRequiredException"
            }
          },
          "496": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "497": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "498": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "499": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "500": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Replaces all triggers for a repository. Used to create or delete triggers.",
        "operationId": "PutRepositoryTriggers"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "ResourceArnRequiredException",
            "schema": {
              "$ref": "#/definitions/ResourceArnRequiredException"
            }
          },
          "483": {
            "description": "InvalidResourceArnException",
            "schema": {
              "$ref": "#/definitions/InvalidResourceArnException"
            }
          },
          "484": {
            "description": "TagsMapRequiredException",
            "schema": {
              "$ref": "#/definitions/TagsMapRequiredException"
            }
          },
          "485": {
            "description": "InvalidTagsMapException",
            "schema": {
              "$ref": "#/definitions/InvalidTagsMapException"
            }
          },
          "486": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "487": {
            "description": "InvalidSystemTagUsageException",
            "schema": {
              "$ref": "#/definitions/InvalidSystemTagUsageException"
            }
          },
          "488": {
            "description": "TagPolicyException",
            "schema": {
              "$ref": "#/definitions/TagPolicyException"
            }
          }
        },
        "description": "Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>.",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.TestRepositoryTriggers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.TestRepositoryTriggers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestRepositoryTriggersInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TestRepositoryTriggersOutput"
            }
          },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "481": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "RepositoryTriggersListRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggersListRequiredException"
            }
          },
          "484": {
            "description": "MaximumRepositoryTriggersExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumRepositoryTriggersExceededException"
            }
          },
          "485": {
            "description": "InvalidRepositoryTriggerNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerNameException"
            }
          },
          "486": {
            "description": "InvalidRepositoryTriggerDestinationArnException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerDestinationArnException"
            }
          },
          "487": {
            "description": "InvalidRepositoryTriggerRegionException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerRegionException"
            }
          },
          "488": {
            "description": "InvalidRepositoryTriggerCustomDataException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerCustomDataException"
            }
          },
          "489": {
            "description": "MaximumBranchesExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumBranchesExceededException"
            }
          },
          "490": {
            "description": "InvalidRepositoryTriggerBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerBranchNameException"
            }
          },
          "491": {
            "description": "InvalidRepositoryTriggerEventsException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryTriggerEventsException"
            }
          },
          "492": {
            "description": "RepositoryTriggerNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggerNameRequiredException"
            }
          },
          "493": {
            "description": "RepositoryTriggerDestinationArnRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggerDestinationArnRequiredException"
            }
          },
          "494": {
            "description": "RepositoryTriggerBranchNameListRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggerBranchNameListRequiredException"
            }
          },
          "495": {
            "description": "RepositoryTriggerEventsListRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryTriggerEventsListRequiredException"
            }
          },
          "496": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "497": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "498": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "499": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "500": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.",
        "operationId": "TestRepositoryTriggers"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "482": {
            "description": "ResourceArnRequiredException",
            "schema": {
              "$ref": "#/definitions/ResourceArnRequiredException"
            }
          },
          "483": {
            "description": "InvalidResourceArnException",
            "schema": {
              "$ref": "#/definitions/InvalidResourceArnException"
            }
          },
          "484": {
            "description": "TagKeysListRequiredException",
            "schema": {
              "$ref": "#/definitions/TagKeysListRequiredException"
            }
          },
          "485": {
            "description": "InvalidTagKeysListException",
            "schema": {
              "$ref": "#/definitions/InvalidTagKeysListException"
            }
          },
          "486": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "487": {
            "description": "InvalidSystemTagUsageException",
            "schema": {
              "$ref": "#/definitions/InvalidSystemTagUsageException"
            }
          },
          "488": {
            "description": "TagPolicyException",
            "schema": {
              "$ref": "#/definitions/TagPolicyException"
            }
          }
        },
        "description": "Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats\">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>.",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateContent": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdateApprovalRuleTemplateContent"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApprovalRuleTemplateContentInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateApprovalRuleTemplateContentOutput"
            }
          },
          "480": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "481": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidApprovalRuleTemplateContentException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateContentException"
            }
          },
          "484": {
            "description": "InvalidRuleContentSha256Exception",
            "schema": {
              "$ref": "#/definitions/InvalidRuleContentSha256Exception"
            }
          },
          "485": {
            "description": "ApprovalRuleTemplateContentRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateContentRequiredException"
            }
          }
        },
        "description": "Updates the content of an approval rule template. You can change the number of required approvals, the membership of the approval rule, and whether an approval pool is defined.",
        "operationId": "UpdateApprovalRuleTemplateContent"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateDescription": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdateApprovalRuleTemplateDescription"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApprovalRuleTemplateDescriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateApprovalRuleTemplateDescriptionOutput"
            }
          },
          "480": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "481": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidApprovalRuleTemplateDescriptionException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateDescriptionException"
            }
          }
        },
        "description": "Updates the description for a specified approval rule template.",
        "operationId": "UpdateApprovalRuleTemplateDescription"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateName": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdateApprovalRuleTemplateName"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApprovalRuleTemplateNameInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateApprovalRuleTemplateNameOutput"
            }
          },
          "480": {
            "description": "InvalidApprovalRuleTemplateNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleTemplateNameException"
            }
          },
          "481": {
            "description": "ApprovalRuleTemplateNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameRequiredException"
            }
          },
          "482": {
            "description": "ApprovalRuleTemplateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateDoesNotExistException"
            }
          },
          "483": {
            "description": "ApprovalRuleTemplateNameAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleTemplateNameAlreadyExistsException"
            }
          }
        },
        "description": "Updates the name of a specified approval rule template.",
        "operationId": "UpdateApprovalRuleTemplateName"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateComment": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdateComment"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCommentInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateCommentOutput"
            }
          },
          "480": {
            "description": "CommentContentRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentContentRequiredException"
            }
          },
          "481": {
            "description": "CommentContentSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/CommentContentSizeLimitExceededException"
            }
          },
          "482": {
            "description": "CommentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CommentDoesNotExistException"
            }
          },
          "483": {
            "description": "CommentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/CommentIdRequiredException"
            }
          },
          "484": {
            "description": "InvalidCommentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidCommentIdException"
            }
          },
          "485": {
            "description": "CommentNotCreatedByCallerException",
            "schema": {
              "$ref": "#/definitions/CommentNotCreatedByCallerException"
            }
          },
          "486": {
            "description": "CommentDeletedException",
            "schema": {
              "$ref": "#/definitions/CommentDeletedException"
            }
          }
        },
        "description": "Replaces the contents of a comment.",
        "operationId": "UpdateComment"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateDefaultBranch": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdateDefaultBranch"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDefaultBranchInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "BranchNameRequiredException",
            "schema": {
              "$ref": "#/definitions/BranchNameRequiredException"
            }
          },
          "484": {
            "description": "InvalidBranchNameException",
            "schema": {
              "$ref": "#/definitions/InvalidBranchNameException"
            }
          },
          "485": {
            "description": "BranchDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/BranchDoesNotExistException"
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Sets or changes the default branch name for the specified repository.</p> <note> <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p> </note>",
        "operationId": "UpdateDefaultBranch"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalRuleContent": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdatePullRequestApprovalRuleContent"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePullRequestApprovalRuleContentInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePullRequestApprovalRuleContentOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          },
          "484": {
            "description": "ApprovalRuleNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleNameRequiredException"
            }
          },
          "485": {
            "description": "InvalidApprovalRuleNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleNameException"
            }
          },
          "486": {
            "description": "ApprovalRuleDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleDoesNotExistException"
            }
          },
          "487": {
            "description": "InvalidRuleContentSha256Exception",
            "schema": {
              "$ref": "#/definitions/InvalidRuleContentSha256Exception"
            }
          },
          "488": {
            "description": "ApprovalRuleContentRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalRuleContentRequiredException"
            }
          },
          "489": {
            "description": "InvalidApprovalRuleContentException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalRuleContentException"
            }
          },
          "490": {
            "description": "CannotModifyApprovalRuleFromTemplateException",
            "schema": {
              "$ref": "#/definitions/CannotModifyApprovalRuleFromTemplateException"
            }
          },
          "491": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "492": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "493": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "494": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "495": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and the approval pool for approvers. ",
        "operationId": "UpdatePullRequestApprovalRuleContent"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalState": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdatePullRequestApprovalState"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePullRequestApprovalStateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidRevisionIdException",
            "schema": {
              "$ref": "#/definitions/InvalidRevisionIdException"
            }
          },
          "484": {
            "description": "RevisionIdRequiredException",
            "schema": {
              "$ref": "#/definitions/RevisionIdRequiredException"
            }
          },
          "485": {
            "description": "InvalidApprovalStateException",
            "schema": {
              "$ref": "#/definitions/InvalidApprovalStateException"
            }
          },
          "486": {
            "description": "ApprovalStateRequiredException",
            "schema": {
              "$ref": "#/definitions/ApprovalStateRequiredException"
            }
          },
          "487": {
            "description": "PullRequestCannotBeApprovedByAuthorException",
            "schema": {
              "$ref": "#/definitions/PullRequestCannotBeApprovedByAuthorException"
            }
          },
          "488": {
            "description": "RevisionNotCurrentException",
            "schema": {
              "$ref": "#/definitions/RevisionNotCurrentException"
            }
          },
          "489": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          },
          "490": {
            "description": "MaximumNumberOfApprovalsExceededException",
            "schema": {
              "$ref": "#/definitions/MaximumNumberOfApprovalsExceededException"
            }
          },
          "491": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "492": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "493": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "494": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "495": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Updates the state of a user's approval on a pull request. The user is derived from the signed-in account when the request is made.",
        "operationId": "UpdatePullRequestApprovalState"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestDescription": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdatePullRequestDescription"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePullRequestDescriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePullRequestDescriptionOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidDescriptionException",
            "schema": {
              "$ref": "#/definitions/InvalidDescriptionException"
            }
          },
          "484": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          }
        },
        "description": "Replaces the contents of the description of a pull request.",
        "operationId": "UpdatePullRequestDescription"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdatePullRequestStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePullRequestStatusInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePullRequestStatusOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidPullRequestStatusUpdateException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestStatusUpdateException"
            }
          },
          "484": {
            "description": "InvalidPullRequestStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestStatusException"
            }
          },
          "485": {
            "description": "PullRequestStatusRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestStatusRequiredException"
            }
          },
          "486": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "487": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "488": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "489": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "490": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "Updates the status of a pull request. ",
        "operationId": "UpdatePullRequestStatus"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestTitle": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdatePullRequestTitle"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePullRequestTitleInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePullRequestTitleOutput"
            }
          },
          "480": {
            "description": "PullRequestDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/PullRequestDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidPullRequestIdException",
            "schema": {
              "$ref": "#/definitions/InvalidPullRequestIdException"
            }
          },
          "482": {
            "description": "PullRequestIdRequiredException",
            "schema": {
              "$ref": "#/definitions/PullRequestIdRequiredException"
            }
          },
          "483": {
            "description": "TitleRequiredException",
            "schema": {
              "$ref": "#/definitions/TitleRequiredException"
            }
          },
          "484": {
            "description": "InvalidTitleException",
            "schema": {
              "$ref": "#/definitions/InvalidTitleException"
            }
          },
          "485": {
            "description": "PullRequestAlreadyClosedException",
            "schema": {
              "$ref": "#/definitions/PullRequestAlreadyClosedException"
            }
          }
        },
        "description": "Replaces the title of a pull request.",
        "operationId": "UpdatePullRequestTitle"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryDescription": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdateRepositoryDescription"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRepositoryDescriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "481": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          },
          "483": {
            "description": "InvalidRepositoryDescriptionException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryDescriptionException"
            }
          },
          "484": {
            "description": "EncryptionIntegrityChecksFailedException",
            "schema": {
              "$ref": "#/definitions/EncryptionIntegrityChecksFailedException"
            }
          },
          "485": {
            "description": "EncryptionKeyAccessDeniedException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyAccessDeniedException"
            }
          },
          "486": {
            "description": "EncryptionKeyDisabledException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyDisabledException"
            }
          },
          "487": {
            "description": "EncryptionKeyNotFoundException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyNotFoundException"
            }
          },
          "488": {
            "description": "EncryptionKeyUnavailableException",
            "schema": {
              "$ref": "#/definitions/EncryptionKeyUnavailableException"
            }
          }
        },
        "description": "<p>Sets or changes the comment or description for a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>",
        "operationId": "UpdateRepositoryDescription"
      }
    },
    "/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryName": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeCommit_20150413.UpdateRepositoryName"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRepositoryNameInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "RepositoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RepositoryDoesNotExistException"
            }
          },
          "481": {
            "description": "RepositoryNameExistsException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameExistsException"
            }
          },
          "482": {
            "description": "RepositoryNameRequiredException",
            "schema": {
              "$ref": "#/definitions/RepositoryNameRequiredException"
            }
          },
          "483": {
            "description": "InvalidRepositoryNameException",
            "schema": {
              "$ref": "#/definitions/InvalidRepositoryNameException"
            }
          }
        },
        "description": "Renames a repository. The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix .git is prohibited. For more information about the limits on repository names, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">Limits</a> in the AWS CodeCommit User Guide.",
        "operationId": "UpdateRepositoryName"
      }
    }
  },
  "definitions": {
    "AccountId": {
      "type": "string"
    },
    "ActorDoesNotExistException": {},
    "AdditionalData": {
      "type": "string"
    },
    "Approval": {
      "description": "Returns information about a specific approval on a pull request.",
      "properties": {
        "approvalState": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalState"
            },
            {
              "description": "The state of the approval, APPROVE or REVOKE. REVOKE states are not stored."
            }
          ]
        },
        "userArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the user."
            }
          ]
        }
      },
      "type": "object"
    },
    "ApprovalList": {
      "items": {
        "$ref": "#/definitions/Approval"
      },
      "type": "array"
    },
    "ApprovalRule": {
      "description": "Returns information about an approval rule.",
      "properties": {
        "approvalRuleContent": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleContent"
            },
            {
              "description": "The content of the approval rule."
            }
          ]
        },
        "approvalRuleId": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleId"
            },
            {
              "description": "The system-generated ID of the approval rule."
            }
          ]
        },
        "approvalRuleName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleName"
            },
            {
              "description": "The name of the approval rule."
            }
          ]
        },
        "creationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/CreationDate"
            },
            {
              "description": "The date the approval rule was created, in timestamp format."
            }
          ]
        },
        "lastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/LastModifiedDate"
            },
            {
              "description": "The date the approval rule was most recently changed, in timestamp format."
            }
          ]
        },
        "lastModifiedUser": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule."
            }
          ]
        },
        "originApprovalRuleTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/OriginApprovalRuleTemplate"
            },
            {
              "description": "The approval rule template used to create the rule."
            }
          ]
        },
        "ruleContentSha256": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleContentSha256"
            },
            {
              "description": "The SHA-256 hash signature for the content of the approval rule."
            }
          ]
        }
      },
      "type": "object"
    },
    "ApprovalRuleContent": {
      "maxLength": 3000,
      "minLength": 1,
      "type": "string"
    },
    "ApprovalRuleContentRequiredException": {},
    "ApprovalRuleDoesNotExistException": {},
    "ApprovalRuleEventMetadata": {
      "description": "Returns information about an event for an approval rule.",
      "properties": {
        "approvalRuleContent": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleContent"
            },
            {
              "description": "The content of the approval rule."
            }
          ]
        },
        "approvalRuleId": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleId"
            },
            {
              "description": "The system-generated ID of the approval rule."
            }
          ]
        },
        "approvalRuleName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleName"
            },
            {
              "description": "The name of the approval rule."
            }
          ]
        }
      },
      "type": "object"
    },
    "ApprovalRuleId": {
      "type": "string"
    },
    "ApprovalRuleName": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "ApprovalRuleNameAlreadyExistsException": {},
    "ApprovalRuleNameRequiredException": {},
    "ApprovalRuleOverriddenEventMetadata": {
      "description": "Returns information about an override event for approval rules for a pull request.",
      "properties": {
        "overrideStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/OverrideStatus"
            },
            {
              "description": "The status of the override event."
            }
          ]
        },
        "revisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionId"
            },
            {
              "description": "The revision ID of the pull request when the override event occurred."
            }
          ]
        }
      },
      "type": "object"
    },
    "ApprovalRuleTemplate": {
      "description": "Returns information about an approval rule template.",
      "properties": {
        "approvalRuleTemplateContent": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateContent"
            },
            {
              "description": "The content of the approval rule template."
            }
          ]
        },
        "approvalRuleTemplateDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateDescription"
            },
            {
              "description": "The description of the approval rule template."
            }
          ]
        },
        "approvalRuleTemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateId"
            },
            {
              "description": "The system-generated ID of the approval rule template."
            }
          ]
        },
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the approval rule template."
            }
          ]
        },
        "creationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/CreationDate"
            },
            {
              "description": "The date the approval rule template was created, in timestamp format."
            }
          ]
        },
        "lastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/LastModifiedDate"
            },
            {
              "description": "The date the approval rule template was most recently changed, in timestamp format."
            }
          ]
        },
        "lastModifiedUser": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule template."
            }
          ]
        },
        "ruleContentSha256": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleContentSha256"
            },
            {
              "description": "The SHA-256 hash signature for the content of the approval rule template."
            }
          ]
        }
      },
      "type": "object"
    },
    "ApprovalRuleTemplateContent": {
      "maxLength": 3000,
      "minLength": 1,
      "type": "string"
    },
    "ApprovalRuleTemplateContentRequiredException": {},
    "ApprovalRuleTemplateDescription": {
      "maxLength": 1000,
      "minLength": 0,
      "type": "string"
    },
    "ApprovalRuleTemplateDoesNotExistException": {},
    "ApprovalRuleTemplateId": {
      "type": "string"
    },
    "ApprovalRuleTemplateInUseException": {},
    "ApprovalRuleTemplateName": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "ApprovalRuleTemplateNameAlreadyExistsException": {},
    "ApprovalRuleTemplateNameList": {
      "items": {
        "$ref": "#/definitions/ApprovalRuleTemplateName"
      },
      "type": "array"
    },
    "ApprovalRuleTemplateNameRequiredException": {},
    "ApprovalRulesList": {
      "items": {
        "$ref": "#/definitions/ApprovalRule"
      },
      "type": "array"
    },
    "ApprovalRulesNotSatisfiedList": {
      "items": {
        "$ref": "#/definitions/ApprovalRuleName"
      },
      "type": "array"
    },
    "ApprovalRulesSatisfiedList": {
      "items": {
        "$ref": "#/definitions/ApprovalRuleName"
      },
      "type": "array"
    },
    "ApprovalState": {
      "enum": [
        "APPROVE",
        "REVOKE"
      ],
      "type": "string"
    },
    "ApprovalStateChangedEventMetadata": {
      "description": "Returns information about a change in the approval state for a pull request.",
      "properties": {
        "approvalStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalState"
            },
            {
              "description": "The approval status for the pull request."
            }
          ]
        },
        "revisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionId"
            },
            {
              "description": "The revision ID of the pull request when the approval state changed."
            }
          ]
        }
      },
      "type": "object"
    },
    "ApprovalStateRequiredException": {},
    "Approved": {
      "type": "boolean"
    },
    "Arn": {
      "type": "string"
    },
    "AssociateApprovalRuleTemplateWithRepositoryInput": {
      "properties": {
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name for the approval rule template. "
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that you want to associate with the template."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName",
        "repositoryName"
      ],
      "title": "AssociateApprovalRuleTemplateWithRepositoryInput",
      "type": "object"
    },
    "AuthorDoesNotExistException": {},
    "BatchAssociateApprovalRuleTemplateWithRepositoriesError": {
      "description": "Returns information about errors in a BatchAssociateApprovalRuleTemplateWithRepositories operation.",
      "properties": {
        "errorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorCode"
            },
            {
              "description": "An error code that specifies whether the repository name was not valid or not found."
            }
          ]
        },
        "errorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessage"
            },
            {
              "description": "An error message that provides details about why the repository name was not found or not valid."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where the association was not made."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList": {
      "items": {
        "$ref": "#/definitions/BatchAssociateApprovalRuleTemplateWithRepositoriesError"
      },
      "type": "array"
    },
    "BatchAssociateApprovalRuleTemplateWithRepositoriesInput": {
      "properties": {
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the template you want to associate with one or more repositories."
            }
          ]
        },
        "repositoryNames": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryNameList"
            },
            {
              "description": "<p>The names of the repositories you want to associate with the template.</p> <note> <p>The length constraint limit is for each string in the array. The array itself can be empty.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName",
        "repositoryNames"
      ],
      "title": "BatchAssociateApprovalRuleTemplateWithRepositoriesInput",
      "type": "object"
    },
    "BatchAssociateApprovalRuleTemplateWithRepositoriesOutput": {
      "properties": {
        "associatedRepositoryNames": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryNameList"
            },
            {
              "description": "A list of names of the repositories that have been associated with the template."
            }
          ]
        },
        "errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList"
            },
            {
              "description": "A list of any errors that might have occurred while attempting to create the association between the template and the repositories."
            }
          ]
        }
      },
      "required": [
        "associatedRepositoryNames",
        "errors"
      ],
      "type": "object"
    },
    "BatchDescribeMergeConflictsError": {
      "description": "Returns information about errors in a BatchDescribeMergeConflicts operation.",
      "properties": {
        "exceptionName": {
          "allOf": [
            {
              "$ref": "#/definitions/ExceptionName"
            },
            {
              "description": "The name of the exception."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The path to the file."
            }
          ]
        },
        "message": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "The message provided by the exception."
            }
          ]
        }
      },
      "required": [
        "filePath",
        "exceptionName",
        "message"
      ],
      "type": "object"
    },
    "BatchDescribeMergeConflictsErrors": {
      "items": {
        "$ref": "#/definitions/BatchDescribeMergeConflictsError"
      },
      "type": "array"
    },
    "BatchDescribeMergeConflictsInput": {
      "properties": {
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "destinationCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "filePaths": {
          "allOf": [
            {
              "$ref": "#/definitions/FilePaths"
            },
            {
              "description": "The path of the target files used to describe the conflicts. If not specified, the default is all conflict files."
            }
          ]
        },
        "maxConflictFiles": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of files to include in the output."
            }
          ]
        },
        "maxMergeHunks": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of merge hunks to include in the output."
            }
          ]
        },
        "mergeOption": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeOptionTypeEnum"
            },
            {
              "description": "The merge option or strategy you want to use to merge the code."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the merge conflicts you want to review."
            }
          ]
        },
        "sourceCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "destinationCommitSpecifier",
        "sourceCommitSpecifier",
        "mergeOption"
      ],
      "title": "BatchDescribeMergeConflictsInput",
      "type": "object"
    },
    "BatchDescribeMergeConflictsOutput": {
      "properties": {
        "baseCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the merge base."
            }
          ]
        },
        "conflicts": {
          "allOf": [
            {
              "$ref": "#/definitions/Conflicts"
            },
            {
              "description": "A list of conflicts for each file, including the conflict metadata and the hunks of the differences between the files."
            }
          ]
        },
        "destinationCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the destination commit specifier that was used in the merge evaluation."
            }
          ]
        },
        "errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchDescribeMergeConflictsErrors"
            },
            {
              "description": "A list of any errors returned while describing the merge conflicts for each file."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that can be used in a request to return the next batch of the results."
            }
          ]
        },
        "sourceCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the source commit specifier that was used in the merge evaluation."
            }
          ]
        }
      },
      "required": [
        "conflicts",
        "destinationCommitId",
        "sourceCommitId"
      ],
      "type": "object"
    },
    "BatchDisassociateApprovalRuleTemplateFromRepositoriesError": {
      "description": "Returns information about errors in a BatchDisassociateApprovalRuleTemplateFromRepositories operation.",
      "properties": {
        "errorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorCode"
            },
            {
              "description": "An error code that specifies whether the repository name was not valid or not found."
            }
          ]
        },
        "errorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessage"
            },
            {
              "description": "An error message that provides details about why the repository name was either not found or not valid."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where the association with the template was not able to be removed."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList": {
      "items": {
        "$ref": "#/definitions/BatchDisassociateApprovalRuleTemplateFromRepositoriesError"
      },
      "type": "array"
    },
    "BatchDisassociateApprovalRuleTemplateFromRepositoriesInput": {
      "properties": {
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the template that you want to disassociate from one or more repositories."
            }
          ]
        },
        "repositoryNames": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryNameList"
            },
            {
              "description": "<p>The repository names that you want to disassociate from the approval rule template.</p> <note> <p>The length constraint limit is for each string in the array. The array itself can be empty.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName",
        "repositoryNames"
      ],
      "title": "BatchDisassociateApprovalRuleTemplateFromRepositoriesInput",
      "type": "object"
    },
    "BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput": {
      "properties": {
        "disassociatedRepositoryNames": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryNameList"
            },
            {
              "description": "A list of repository names that have had their association with the template removed."
            }
          ]
        },
        "errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList"
            },
            {
              "description": "A list of any errors that might have occurred while attempting to remove the association between the template and the repositories."
            }
          ]
        }
      },
      "required": [
        "disassociatedRepositoryNames",
        "errors"
      ],
      "type": "object"
    },
    "BatchGetCommitsError": {
      "description": "Returns information about errors in a BatchGetCommits operation.",
      "properties": {
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "A commit ID that either could not be found or was not in a valid format."
            }
          ]
        },
        "errorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorCode"
            },
            {
              "description": "An error code that specifies whether the commit ID was not valid or not found."
            }
          ]
        },
        "errorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessage"
            },
            {
              "description": "An error message that provides detail about why the commit ID either was not found or was not valid."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetCommitsErrorsList": {
      "items": {
        "$ref": "#/definitions/BatchGetCommitsError"
      },
      "type": "array"
    },
    "BatchGetCommitsInput": {
      "properties": {
        "commitIds": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitIdsInputList"
            },
            {
              "description": "<p>The full commit IDs of the commits to get information about.</p> <note> <p>You must supply the full SHA IDs of each commit. You cannot use shortened SHA IDs.</p> </note>"
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the commits."
            }
          ]
        }
      },
      "required": [
        "commitIds",
        "repositoryName"
      ],
      "title": "BatchGetCommitsInput",
      "type": "object"
    },
    "BatchGetCommitsOutput": {
      "properties": {
        "commits": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitObjectsList"
            },
            {
              "description": "An array of commit data type objects, each of which contains information about a specified commit."
            }
          ]
        },
        "errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchGetCommitsErrorsList"
            },
            {
              "description": "Returns any commit IDs for which information could not be found. For example, if one of the commit IDs was a shortened SHA ID or that commit was not found in the specified repository, the ID returns an error object with more information."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetRepositoriesInput": {
      "description": "Represents the input of a batch get repositories operation.",
      "properties": {
        "repositoryNames": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryNameList"
            },
            {
              "description": "<p>The names of the repositories to get information about.</p> <note> <p>The length constraint limit is for each string in the array. The array itself can be empty.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "repositoryNames"
      ],
      "title": "BatchGetRepositoriesInput",
      "type": "object"
    },
    "BatchGetRepositoriesOutput": {
      "description": "Represents the output of a batch get repositories operation.",
      "properties": {
        "repositories": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryMetadataList"
            },
            {
              "description": "A list of repositories returned by the batch get repositories operation."
            }
          ]
        },
        "repositoriesNotFound": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryNotFoundList"
            },
            {
              "description": "Returns a list of repository names for which information could not be found."
            }
          ]
        }
      },
      "type": "object"
    },
    "BeforeCommitIdAndAfterCommitIdAreSameException": {},
    "BlobIdDoesNotExistException": {},
    "BlobIdRequiredException": {},
    "BlobMetadata": {
      "description": "Returns information about a specific Git blob object.",
      "properties": {
        "blobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full ID of the blob."
            }
          ]
        },
        "mode": {
          "allOf": [
            {
              "$ref": "#/definitions/Mode"
            },
            {
              "description": "<p>The file mode permissions of the blob. File mode permission codes include:</p> <ul> <li> <p> <code>100644</code> indicates read/write</p> </li> <li> <p> <code>100755</code> indicates read/write/execute</p> </li> <li> <p> <code>160000</code> indicates a submodule</p> </li> <li> <p> <code>120000</code> indicates a symlink</p> </li> </ul>"
            }
          ]
        },
        "path": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The path to the blob and associated file name, if any."
            }
          ]
        }
      },
      "type": "object"
    },
    "BranchDoesNotExistException": {},
    "BranchInfo": {
      "description": "Returns information about a branch.",
      "properties": {
        "branchName": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The name of the branch."
            }
          ]
        },
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The ID of the last commit made to the branch."
            }
          ]
        }
      },
      "type": "object"
    },
    "BranchName": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "BranchNameExistsException": {},
    "BranchNameIsTagNameException": {},
    "BranchNameList": {
      "items": {
        "$ref": "#/definitions/BranchName"
      },
      "type": "array"
    },
    "BranchNameRequiredException": {},
    "CallerReactions": {
      "items": {
        "$ref": "#/definitions/ReactionValue"
      },
      "type": "array"
    },
    "CannotDeleteApprovalRuleFromTemplateException": {},
    "CannotModifyApprovalRuleFromTemplateException": {},
    "CapitalBoolean": {
      "type": "boolean"
    },
    "ChangeTypeEnum": {
      "enum": [
        "A",
        "M",
        "D"
      ],
      "type": "string"
    },
    "ClientRequestToken": {
      "type": "string"
    },
    "ClientRequestTokenRequiredException": {},
    "CloneUrlHttp": {
      "type": "string"
    },
    "CloneUrlSsh": {
      "type": "string"
    },
    "Comment": {
      "description": "Returns information about a specific comment.",
      "properties": {
        "authorArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the person who posted the comment."
            }
          ]
        },
        "callerReactions": {
          "allOf": [
            {
              "$ref": "#/definitions/CallerReactions"
            },
            {
              "description": "The emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API."
            }
          ]
        },
        "clientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestToken"
            },
            {
              "description": "A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token."
            }
          ]
        },
        "commentId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentId"
            },
            {
              "description": "The system-generated comment ID."
            }
          ]
        },
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/Content"
            },
            {
              "description": "The content of the comment."
            }
          ]
        },
        "creationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/CreationDate"
            },
            {
              "description": "The date and time the comment was created, in timestamp format."
            }
          ]
        },
        "deleted": {
          "allOf": [
            {
              "$ref": "#/definitions/IsCommentDeleted"
            },
            {
              "description": "A Boolean value indicating whether the comment has been deleted."
            }
          ]
        },
        "inReplyTo": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentId"
            },
            {
              "description": "The ID of the comment for which this comment is a reply, if any."
            }
          ]
        },
        "lastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/LastModifiedDate"
            },
            {
              "description": "The date and time the comment was most recently modified, in timestamp format."
            }
          ]
        },
        "reactionCounts": {
          "allOf": [
            {
              "$ref": "#/definitions/ReactionCountsMap"
            },
            {
              "description": "A string to integer map that represents the number of individual users who have responded to a comment with the specified reactions."
            }
          ]
        }
      },
      "type": "object"
    },
    "CommentContentRequiredException": {},
    "CommentContentSizeLimitExceededException": {},
    "CommentDeletedException": {},
    "CommentDoesNotExistException": {},
    "CommentId": {
      "type": "string"
    },
    "CommentIdRequiredException": {},
    "CommentNotCreatedByCallerException": {},
    "Comments": {
      "items": {
        "$ref": "#/definitions/Comment"
      },
      "type": "array"
    },
    "CommentsForComparedCommit": {
      "description": "Returns information about comments on the comparison between two commits.",
      "properties": {
        "afterBlobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full blob ID of the commit used to establish the after of the comparison."
            }
          ]
        },
        "afterCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit used to establish the after of the comparison."
            }
          ]
        },
        "beforeBlobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full blob ID of the commit used to establish the before of the comparison."
            }
          ]
        },
        "beforeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit used to establish the before of the comparison."
            }
          ]
        },
        "comments": {
          "allOf": [
            {
              "$ref": "#/definitions/Comments"
            },
            {
              "description": "An array of comment objects. Each comment object contains information about a comment on the comparison between commits."
            }
          ]
        },
        "location": {
          "allOf": [
            {
              "$ref": "#/definitions/Location"
            },
            {
              "description": "Location information about the comment on the comparison, including the file name, line number, and whether the version of the file where the comment was made is BEFORE or AFTER."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the compared commits."
            }
          ]
        }
      },
      "type": "object"
    },
    "CommentsForComparedCommitData": {
      "items": {
        "$ref": "#/definitions/CommentsForComparedCommit"
      },
      "type": "array"
    },
    "CommentsForPullRequest": {
      "description": "Returns information about comments on a pull request.",
      "properties": {
        "afterBlobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full blob ID of the file on which you want to comment on the source commit."
            }
          ]
        },
        "afterCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit that was the tip of the source branch at the time the comment was made. "
            }
          ]
        },
        "beforeBlobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full blob ID of the file on which you want to comment on the destination commit."
            }
          ]
        },
        "beforeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit that was the tip of the destination branch when the pull request was created. This commit is superceded by the after commit in the source branch when and if you merge the source branch into the destination branch."
            }
          ]
        },
        "comments": {
          "allOf": [
            {
              "$ref": "#/definitions/Comments"
            },
            {
              "description": "An array of comment objects. Each comment object contains information about a comment on the pull request."
            }
          ]
        },
        "location": {
          "allOf": [
            {
              "$ref": "#/definitions/Location"
            },
            {
              "description": "Location information about the comment on the pull request, including the file name, line number, and whether the version of the file where the comment was made is BEFORE (destination branch) or AFTER (source branch)."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CommentsForPullRequestData": {
      "items": {
        "$ref": "#/definitions/CommentsForPullRequest"
      },
      "type": "array"
    },
    "Commit": {
      "description": "Returns information about a specific commit.",
      "properties": {
        "additionalData": {
          "allOf": [
            {
              "$ref": "#/definitions/AdditionalData"
            },
            {
              "description": "Any other data associated with the specified commit."
            }
          ]
        },
        "author": {
          "allOf": [
            {
              "$ref": "#/definitions/UserInfo"
            },
            {
              "description": "Information about the author of the specified commit. Information includes the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured in Git."
            }
          ]
        },
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full SHA ID of the specified commit. "
            }
          ]
        },
        "committer": {
          "allOf": [
            {
              "$ref": "#/definitions/UserInfo"
            },
            {
              "description": "<p>Information about the person who committed the specified commit, also known as the committer. Information includes the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured in Git.</p> <p>For more information about the difference between an author and a committer in Git, see <a href=\"http://git-scm.com/book/ch2-3.html\">Viewing the Commit History</a> in Pro Git by Scott Chacon and Ben Straub.</p>"
            }
          ]
        },
        "message": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "The commit message associated with the specified commit."
            }
          ]
        },
        "parents": {
          "allOf": [
            {
              "$ref": "#/definitions/ParentList"
            },
            {
              "description": "A list of parent commits for the specified commit. Each parent commit ID is the full commit ID."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "Tree information for the specified commit."
            }
          ]
        }
      },
      "type": "object"
    },
    "CommitDoesNotExistException": {},
    "CommitId": {
      "type": "string"
    },
    "CommitIdDoesNotExistException": {},
    "CommitIdRequiredException": {},
    "CommitIdsInputList": {
      "items": {
        "$ref": "#/definitions/ObjectId"
      },
      "type": "array"
    },
    "CommitIdsLimitExceededException": {},
    "CommitIdsListRequiredException": {},
    "CommitMessageLengthExceededException": {},
    "CommitName": {
      "type": "string"
    },
    "CommitObjectsList": {
      "items": {
        "$ref": "#/definitions/Commit"
      },
      "type": "array"
    },
    "CommitRequiredException": {},
    "ConcurrentReferenceUpdateException": {},
    "Conflict": {
      "description": "Information about conflicts in a merge operation.",
      "properties": {
        "conflictMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictMetadata"
            },
            {
              "description": "Metadata about a conflict in a merge operation."
            }
          ]
        },
        "mergeHunks": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeHunks"
            },
            {
              "description": "A list of hunks that contain the differences between files or lines causing the conflict."
            }
          ]
        }
      },
      "type": "object"
    },
    "ConflictDetailLevelTypeEnum": {
      "enum": [
        "FILE_LEVEL",
        "LINE_LEVEL"
      ],
      "type": "string"
    },
    "ConflictMetadata": {
      "description": "Information about the metadata for a conflict in a merge operation.",
      "properties": {
        "contentConflict": {
          "allOf": [
            {
              "$ref": "#/definitions/IsContentConflict"
            },
            {
              "description": "A boolean value indicating whether there are conflicts in the content of a file."
            }
          ]
        },
        "fileModeConflict": {
          "allOf": [
            {
              "$ref": "#/definitions/IsFileModeConflict"
            },
            {
              "description": "A boolean value indicating whether there are conflicts in the file mode of a file."
            }
          ]
        },
        "fileModes": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModes"
            },
            {
              "description": "The file modes of the file in the source, destination, and base of the merge."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The path of the file that contains conflicts."
            }
          ]
        },
        "fileSizes": {
          "allOf": [
            {
              "$ref": "#/definitions/FileSizes"
            },
            {
              "description": "The file sizes of the file in the source, destination, and base of the merge."
            }
          ]
        },
        "isBinaryFile": {
          "allOf": [
            {
              "$ref": "#/definitions/IsBinaryFile"
            },
            {
              "description": "A boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge."
            }
          ]
        },
        "mergeOperations": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeOperations"
            },
            {
              "description": "Whether an add, modify, or delete operation caused the conflict between the source and destination of the merge."
            }
          ]
        },
        "numberOfConflicts": {
          "allOf": [
            {
              "$ref": "#/definitions/NumberOfConflicts"
            },
            {
              "description": "The number of conflicts, including both hunk conflicts and metadata conflicts."
            }
          ]
        },
        "objectTypeConflict": {
          "allOf": [
            {
              "$ref": "#/definitions/IsObjectTypeConflict"
            },
            {
              "description": "A boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule."
            }
          ]
        },
        "objectTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectTypes"
            },
            {
              "description": "Information about any object type conflicts in a merge operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "ConflictMetadataList": {
      "items": {
        "$ref": "#/definitions/ConflictMetadata"
      },
      "type": "array"
    },
    "ConflictResolution": {
      "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.",
      "properties": {
        "deleteFiles": {
          "allOf": [
            {
              "$ref": "#/definitions/DeleteFileEntries"
            },
            {
              "description": "Files to be deleted as part of the merge conflict resolution."
            }
          ]
        },
        "replaceContents": {
          "allOf": [
            {
              "$ref": "#/definitions/ReplaceContentEntries"
            },
            {
              "description": "Files to have content replaced as part of the merge conflict resolution."
            }
          ]
        },
        "setFileModes": {
          "allOf": [
            {
              "$ref": "#/definitions/SetFileModeEntries"
            },
            {
              "description": "File modes that are set as part of the merge conflict resolution."
            }
          ]
        }
      },
      "type": "object"
    },
    "ConflictResolutionStrategyTypeEnum": {
      "enum": [
        "NONE",
        "ACCEPT_SOURCE",
        "ACCEPT_DESTINATION",
        "AUTOMERGE"
      ],
      "type": "string"
    },
    "Conflicts": {
      "items": {
        "$ref": "#/definitions/Conflict"
      },
      "type": "array"
    },
    "Content": {
      "type": "string"
    },
    "Count": {
      "type": "integer"
    },
    "CreateApprovalRuleTemplateInput": {
      "properties": {
        "approvalRuleTemplateContent": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateContent"
            },
            {
              "description": "<p>The content of the approval rule that is created on pull requests in associated repositories. If you specify one or more destination references (branches), approval rules are created in an associated repository only if their destination references (branches) match those specified in the template.</p> <note> <p>When you create the content of the approval rule template, you can specify approvers in an approval pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>: This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>, all of the following are counted as approvals coming from that user:</p> <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p> </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p> </li> </ul> <p>This option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>) unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully qualified ARN</b>: This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul> <p>For more information about IAM ARNs, wildcards, and formats, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>"
            }
          ]
        },
        "approvalRuleTemplateDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateDescription"
            },
            {
              "description": "The description of the approval rule template. Consider providing a description that explains what this template does and when it might be appropriate to associate it with repositories."
            }
          ]
        },
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the approval rule template. Provide descriptive names, because this name is applied to the approval rules created automatically in associated repositories."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName",
        "approvalRuleTemplateContent"
      ],
      "title": "CreateApprovalRuleTemplateInput",
      "type": "object"
    },
    "CreateApprovalRuleTemplateOutput": {
      "properties": {
        "approvalRuleTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplate"
            },
            {
              "description": "The content and structure of the created approval rule template."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplate"
      ],
      "type": "object"
    },
    "CreateBranchInput": {
      "description": "Represents the input of a create branch operation.",
      "properties": {
        "branchName": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The name of the new branch to create."
            }
          ]
        },
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The ID of the commit to point the new branch to."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository in which you want to create the new branch."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "branchName",
        "commitId"
      ],
      "title": "CreateBranchInput",
      "type": "object"
    },
    "CreateCommitInput": {
      "properties": {
        "authorName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the author who created the commit. This information is used as both the author and committer for the commit."
            }
          ]
        },
        "branchName": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The name of the branch where you create the commit."
            }
          ]
        },
        "commitMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "The commit message you want to include in the commit. Commit messages are limited to 256 KB. If no message is specified, a default message is used."
            }
          ]
        },
        "deleteFiles": {
          "allOf": [
            {
              "$ref": "#/definitions/DeleteFileEntries"
            },
            {
              "description": "The files to delete in this commit. These files still exist in earlier commits."
            }
          ]
        },
        "email": {
          "allOf": [
            {
              "$ref": "#/definitions/Email"
            },
            {
              "description": "The email address of the person who created the commit."
            }
          ]
        },
        "keepEmptyFolders": {
          "allOf": [
            {
              "$ref": "#/definitions/KeepEmptyFolders"
            },
            {
              "description": "If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a ..gitkeep file is created for empty folders. The default is false."
            }
          ]
        },
        "parentCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The ID of the commit that is the parent of the commit you create. Not required if this is an empty repository."
            }
          ]
        },
        "putFiles": {
          "allOf": [
            {
              "$ref": "#/definitions/PutFileEntries"
            },
            {
              "description": "The files to add or update in this commit."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you create the commit."
            }
          ]
        },
        "setFileModes": {
          "allOf": [
            {
              "$ref": "#/definitions/SetFileModeEntries"
            },
            {
              "description": "The file modes to update for files in this commit."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "branchName"
      ],
      "title": "CreateCommitInput",
      "type": "object"
    },
    "CreateCommitOutput": {
      "properties": {
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full commit ID of the commit that contains your committed file changes."
            }
          ]
        },
        "filesAdded": {
          "allOf": [
            {
              "$ref": "#/definitions/FilesMetadata"
            },
            {
              "description": "The files added as part of the committed file changes."
            }
          ]
        },
        "filesDeleted": {
          "allOf": [
            {
              "$ref": "#/definitions/FilesMetadata"
            },
            {
              "description": "The files deleted as part of the committed file changes."
            }
          ]
        },
        "filesUpdated": {
          "allOf": [
            {
              "$ref": "#/definitions/FilesMetadata"
            },
            {
              "description": "The files updated as part of the commited file changes."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full SHA-1 pointer of the tree information for the commit that contains the commited file changes."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreatePullRequestApprovalRuleInput": {
      "properties": {
        "approvalRuleContent": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleContent"
            },
            {
              "description": "<p>The content of the approval rule, including the number of approvals needed and the structure of an approval pool defined for approvals, if any. For more information about approval pools, see the AWS CodeCommit User Guide.</p> <note> <p>When you create the content of the approval rule, you can specify approvers in an approval pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>: This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>, all of the following would be counted as approvals coming from that user:</p> <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p> </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p> </li> </ul> <p>This option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>) unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully qualified ARN</b>: This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul> <p>For more information about IAM ARNs, wildcards, and formats, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>"
            }
          ]
        },
        "approvalRuleName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleName"
            },
            {
              "description": "The name for the approval rule."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request for which you want to create the approval rule."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "approvalRuleName",
        "approvalRuleContent"
      ],
      "title": "CreatePullRequestApprovalRuleInput",
      "type": "object"
    },
    "CreatePullRequestApprovalRuleOutput": {
      "properties": {
        "approvalRule": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRule"
            },
            {
              "description": "Information about the created approval rule."
            }
          ]
        }
      },
      "required": [
        "approvalRule"
      ],
      "type": "object"
    },
    "CreatePullRequestInput": {
      "properties": {
        "clientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestToken"
            },
            {
              "description": "<p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.</p> <note> <p>The AWS SDKs prepopulate client request tokens. If you are using an AWS SDK, an idempotency token is created for you.</p> </note>"
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description of the pull request."
            }
          ]
        },
        "targets": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetList"
            },
            {
              "description": "The targets for the pull request, including the source of the code to be reviewed (the source branch) and the destination where the creator of the pull request intends the code to be merged after the pull request is closed (the destination branch)."
            }
          ]
        },
        "title": {
          "allOf": [
            {
              "$ref": "#/definitions/Title"
            },
            {
              "description": "The title of the pull request. This title is used to identify the pull request to other users in the repository."
            }
          ]
        }
      },
      "required": [
        "title",
        "targets"
      ],
      "title": "CreatePullRequestInput",
      "type": "object"
    },
    "CreatePullRequestOutput": {
      "properties": {
        "pullRequest": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequest"
            },
            {
              "description": "Information about the newly created pull request."
            }
          ]
        }
      },
      "required": [
        "pullRequest"
      ],
      "type": "object"
    },
    "CreateRepositoryInput": {
      "description": "Represents the input of a create repository operation.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "One or more tag key-value pairs to use when tagging this repository."
            }
          ]
        },
        "repositoryDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryDescription"
            },
            {
              "description": "<p>A comment or description about the new repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>"
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "<p>The name of the new repository to be created.</p> <note> <p>The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. For more information about the limits on repository names, see <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html\">Limits</a> in the <i>AWS CodeCommit User Guide</i>. The suffix .git is prohibited.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "repositoryName"
      ],
      "title": "CreateRepositoryInput",
      "type": "object"
    },
    "CreateRepositoryOutput": {
      "description": "Represents the output of a create repository operation.",
      "properties": {
        "repositoryMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryMetadata"
            },
            {
              "description": "Information about the newly created repository."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateUnreferencedMergeCommitInput": {
      "properties": {
        "authorName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the author who created the unreferenced commit. This information is used as both the author and committer for the commit."
            }
          ]
        },
        "commitMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "The commit message for the unreferenced commit."
            }
          ]
        },
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolution": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolution"
            },
            {
              "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "destinationCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "email": {
          "allOf": [
            {
              "$ref": "#/definitions/Email"
            },
            {
              "description": "The email address for the person who created the unreferenced commit."
            }
          ]
        },
        "keepEmptyFolders": {
          "allOf": [
            {
              "$ref": "#/definitions/KeepEmptyFolders"
            },
            {
              "description": "If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false."
            }
          ]
        },
        "mergeOption": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeOptionTypeEnum"
            },
            {
              "description": "The merge option or strategy you want to use to merge the code."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to create the unreferenced merge commit."
            }
          ]
        },
        "sourceCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "sourceCommitSpecifier",
        "destinationCommitSpecifier",
        "mergeOption"
      ],
      "title": "CreateUnreferencedMergeCommitInput",
      "type": "object"
    },
    "CreateUnreferencedMergeCommitOutput": {
      "properties": {
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full commit ID of the commit that contains your merge results."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full SHA-1 pointer of the tree information for the commit that contains the merge results."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreationDate": {
      "format": "date-time",
      "type": "string"
    },
    "Date": {
      "type": "string"
    },
    "DefaultBranchCannotBeDeletedException": {},
    "DeleteApprovalRuleTemplateInput": {
      "properties": {
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the approval rule template to delete."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName"
      ],
      "title": "DeleteApprovalRuleTemplateInput",
      "type": "object"
    },
    "DeleteApprovalRuleTemplateOutput": {
      "properties": {
        "approvalRuleTemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateId"
            },
            {
              "description": "The system-generated ID of the deleted approval rule template. If the template has been previously deleted, the only response is a 200 OK."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateId"
      ],
      "type": "object"
    },
    "DeleteBranchInput": {
      "description": "Represents the input of a delete branch operation.",
      "properties": {
        "branchName": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The name of the branch to delete."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the branch to be deleted."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "branchName"
      ],
      "title": "DeleteBranchInput",
      "type": "object"
    },
    "DeleteBranchOutput": {
      "description": "Represents the output of a delete branch operation.",
      "properties": {
        "deletedBranch": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchInfo"
            },
            {
              "description": "Information about the branch deleted by the operation, including the branch name and the commit ID that was the tip of the branch."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteCommentContentInput": {
      "properties": {
        "commentId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentId"
            },
            {
              "description": "The unique, system-generated ID of the comment. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>."
            }
          ]
        }
      },
      "required": [
        "commentId"
      ],
      "title": "DeleteCommentContentInput",
      "type": "object"
    },
    "DeleteCommentContentOutput": {
      "properties": {
        "comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "Information about the comment you just deleted."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteFileEntries": {
      "items": {
        "$ref": "#/definitions/DeleteFileEntry"
      },
      "type": "array"
    },
    "DeleteFileEntry": {
      "description": "A file that is deleted as part of a commit.",
      "properties": {
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The full path of the file to be deleted, including the name of the file."
            }
          ]
        }
      },
      "required": [
        "filePath"
      ],
      "type": "object"
    },
    "DeleteFileInput": {
      "properties": {
        "branchName": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The name of the branch where the commit that deletes the file is made."
            }
          ]
        },
        "commitMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "The commit message you want to include as part of deleting the file. Commit messages are limited to 256 KB. If no message is specified, a default message is used."
            }
          ]
        },
        "email": {
          "allOf": [
            {
              "$ref": "#/definitions/Email"
            },
            {
              "description": "The email address for the commit that deletes the file. If no email address is specified, the email address is left blank."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path to the file that to be deleted, including the full name and extension of that file. For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples."
            }
          ]
        },
        "keepEmptyFolders": {
          "allOf": [
            {
              "$ref": "#/definitions/KeepEmptyFolders"
            },
            {
              "description": "If a file is the only object in the folder or directory, specifies whether to delete the folder or directory that contains the file. By default, empty folders are deleted. This includes empty folders that are part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, deleting the last file in dir4 also deletes the empty folders dir4, dir3, and dir2."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the author of the commit that deletes the file. If no name is specified, the user's ARN is used as the author name and committer name."
            }
          ]
        },
        "parentCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The ID of the commit that is the tip of the branch where you want to create the commit that deletes the file. This must be the HEAD commit for the branch. The commit that deletes the file is created from this commit ID."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the file to delete."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "branchName",
        "filePath",
        "parentCommitId"
      ],
      "title": "DeleteFileInput",
      "type": "object"
    },
    "DeleteFileOutput": {
      "properties": {
        "blobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The blob ID removed from the tree as part of deleting the file."
            }
          ]
        },
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full commit ID of the commit that contains the change that deletes the file."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path to the file to be deleted, including the full name and extension of that file."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full SHA-1 pointer of the tree information for the commit that contains the delete file change."
            }
          ]
        }
      },
      "required": [
        "commitId",
        "blobId",
        "treeId",
        "filePath"
      ],
      "type": "object"
    },
    "DeletePullRequestApprovalRuleInput": {
      "properties": {
        "approvalRuleName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleName"
            },
            {
              "description": "The name of the approval rule you want to delete."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request that contains the approval rule you want to delete."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "approvalRuleName"
      ],
      "title": "DeletePullRequestApprovalRuleInput",
      "type": "object"
    },
    "DeletePullRequestApprovalRuleOutput": {
      "properties": {
        "approvalRuleId": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleId"
            },
            {
              "description": "<p>The ID of the deleted approval rule. </p> <note> <p>If the approval rule was deleted in an earlier API call, the response is 200 OK without content.</p> </note>"
            }
          ]
        }
      },
      "required": [
        "approvalRuleId"
      ],
      "type": "object"
    },
    "DeleteRepositoryInput": {
      "description": "Represents the input of a delete repository operation.",
      "properties": {
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository to delete."
            }
          ]
        }
      },
      "required": [
        "repositoryName"
      ],
      "title": "DeleteRepositoryInput",
      "type": "object"
    },
    "DeleteRepositoryOutput": {
      "description": "Represents the output of a delete repository operation.",
      "properties": {
        "repositoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryId"
            },
            {
              "description": "The ID of the repository that was deleted."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeMergeConflictsInput": {
      "properties": {
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "destinationCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The path of the target files used to describe the conflicts. "
            }
          ]
        },
        "maxMergeHunks": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of merge hunks to include in the output."
            }
          ]
        },
        "mergeOption": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeOptionTypeEnum"
            },
            {
              "description": "The merge option or strategy you want to use to merge the code."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to get information about a merge conflict."
            }
          ]
        },
        "sourceCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "destinationCommitSpecifier",
        "sourceCommitSpecifier",
        "mergeOption",
        "filePath"
      ],
      "title": "DescribeMergeConflictsInput",
      "type": "object"
    },
    "DescribeMergeConflictsOutput": {
      "properties": {
        "baseCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the merge base."
            }
          ]
        },
        "conflictMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictMetadata"
            },
            {
              "description": "Contains metadata about the conflicts found in the merge."
            }
          ]
        },
        "destinationCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the destination commit specifier that was used in the merge evaluation."
            }
          ]
        },
        "mergeHunks": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeHunks"
            },
            {
              "description": "A list of merge hunks of the differences between the files or lines."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that can be used in a request to return the next batch of the results."
            }
          ]
        },
        "sourceCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the source commit specifier that was used in the merge evaluation."
            }
          ]
        }
      },
      "required": [
        "conflictMetadata",
        "mergeHunks",
        "destinationCommitId",
        "sourceCommitId"
      ],
      "type": "object"
    },
    "DescribePullRequestEventsInput": {
      "properties": {
        "actorArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with more commits or changing the status of a pull request."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "A non-zero, non-negative integer used to limit the number of returned results. The default is 100 events, which is also the maximum number of events that can be returned in a result."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        },
        "pullRequestEventType": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestEventType"
            },
            {
              "description": "Optional. The pull request event type about which you want to return information."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        }
      },
      "required": [
        "pullRequestId"
      ],
      "title": "DescribePullRequestEventsInput",
      "type": "object"
    },
    "DescribePullRequestEventsOutput": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that can be used in a request to return the next batch of the results."
            }
          ]
        },
        "pullRequestEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestEventList"
            },
            {
              "description": "Information about the pull request events."
            }
          ]
        }
      },
      "required": [
        "pullRequestEvents"
      ],
      "type": "object"
    },
    "Description": {
      "maxLength": 10240,
      "type": "string"
    },
    "Difference": {
      "description": "Returns information about a set of differences for a commit specifier.",
      "properties": {
        "afterBlob": {
          "allOf": [
            {
              "$ref": "#/definitions/BlobMetadata"
            },
            {
              "description": "Information about an <code>afterBlob</code> data type object, including the ID, the file mode permission code, and the path."
            }
          ]
        },
        "beforeBlob": {
          "allOf": [
            {
              "$ref": "#/definitions/BlobMetadata"
            },
            {
              "description": "Information about a <code>beforeBlob</code> data type object, including the ID, the file mode permission code, and the path."
            }
          ]
        },
        "changeType": {
          "allOf": [
            {
              "$ref": "#/definitions/ChangeTypeEnum"
            },
            {
              "description": "Whether the change type of the difference is an addition (A), deletion (D), or modification (M)."
            }
          ]
        }
      },
      "type": "object"
    },
    "DifferenceList": {
      "items": {
        "$ref": "#/definitions/Difference"
      },
      "type": "array"
    },
    "DirectoryNameConflictsWithFileNameException": {},
    "DisassociateApprovalRuleTemplateFromRepositoryInput": {
      "properties": {
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the approval rule template to disassociate from a specified repository."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository you want to disassociate from the template."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName",
        "repositoryName"
      ],
      "title": "DisassociateApprovalRuleTemplateFromRepositoryInput",
      "type": "object"
    },
    "Email": {
      "type": "string"
    },
    "EncryptionIntegrityChecksFailedException": {},
    "EncryptionKeyAccessDeniedException": {},
    "EncryptionKeyDisabledException": {},
    "EncryptionKeyNotFoundException": {},
    "EncryptionKeyUnavailableException": {},
    "ErrorCode": {
      "type": "string"
    },
    "ErrorMessage": {
      "type": "string"
    },
    "EvaluatePullRequestApprovalRulesInput": {
      "properties": {
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request you want to evaluate."
            }
          ]
        },
        "revisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionId"
            },
            {
              "description": "The system-generated ID for the pull request revision. To retrieve the most recent revision ID for a pull request, use <a>GetPullRequest</a>."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "revisionId"
      ],
      "title": "EvaluatePullRequestApprovalRulesInput",
      "type": "object"
    },
    "EvaluatePullRequestApprovalRulesOutput": {
      "properties": {
        "evaluation": {
          "allOf": [
            {
              "$ref": "#/definitions/Evaluation"
            },
            {
              "description": "The result of the evaluation, including the names of the rules whose conditions have been met (if any), the names of the rules whose conditions have not been met (if any), whether the pull request is in the approved state, and whether the pull request approval rule has been set aside by an override. "
            }
          ]
        }
      },
      "required": [
        "evaluation"
      ],
      "type": "object"
    },
    "Evaluation": {
      "description": "Returns information about the approval rules applied to a pull request and whether conditions have been met.",
      "properties": {
        "approvalRulesNotSatisfied": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRulesNotSatisfiedList"
            },
            {
              "description": "The names of the approval rules that have not had their conditions met."
            }
          ]
        },
        "approvalRulesSatisfied": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRulesSatisfiedList"
            },
            {
              "description": "The names of the approval rules that have had their conditions met."
            }
          ]
        },
        "approved": {
          "allOf": [
            {
              "$ref": "#/definitions/Approved"
            },
            {
              "description": "Whether the state of the pull request is approved."
            }
          ]
        },
        "overridden": {
          "allOf": [
            {
              "$ref": "#/definitions/Overridden"
            },
            {
              "description": "Whether the approval rule requirements for the pull request have been overridden and no longer need to be met."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventDate": {
      "format": "date-time",
      "type": "string"
    },
    "ExceptionName": {
      "type": "string"
    },
    "File": {
      "description": "Returns information about a file in a repository.",
      "properties": {
        "absolutePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path to the file in the repository."
            }
          ]
        },
        "blobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The blob ID that contains the file information."
            }
          ]
        },
        "fileMode": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL."
            }
          ]
        },
        "relativePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The relative path of the file from the folder where the query originated."
            }
          ]
        }
      },
      "type": "object"
    },
    "FileContent": {
      "maxLength": 6291456,
      "type": "string"
    },
    "FileContentAndSourceFileSpecifiedException": {},
    "FileContentRequiredException": {},
    "FileContentSizeLimitExceededException": {},
    "FileDoesNotExistException": {},
    "FileEntryRequiredException": {},
    "FileList": {
      "items": {
        "$ref": "#/definitions/File"
      },
      "type": "array"
    },
    "FileMetadata": {
      "description": "A file to be added, updated, or deleted as part of a commit.",
      "properties": {
        "absolutePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The full path to the file to be added or updated, including the name of the file."
            }
          ]
        },
        "blobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The blob ID that contains the file information."
            }
          ]
        },
        "fileMode": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL."
            }
          ]
        }
      },
      "type": "object"
    },
    "FileModeRequiredException": {},
    "FileModeTypeEnum": {
      "enum": [
        "EXECUTABLE",
        "NORMAL",
        "SYMLINK"
      ],
      "type": "string"
    },
    "FileModes": {
      "description": "Information about file modes in a merge or pull request.",
      "properties": {
        "base": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The file mode of a file in the base of a merge or pull request."
            }
          ]
        },
        "destination": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The file mode of a file in the destination of a merge or pull request."
            }
          ]
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The file mode of a file in the source of a merge or pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "FileNameConflictsWithDirectoryNameException": {},
    "FilePathConflictsWithSubmodulePathException": {},
    "FilePaths": {
      "items": {
        "$ref": "#/definitions/Path"
      },
      "type": "array"
    },
    "FileSize": {
      "type": "integer"
    },
    "FileSizes": {
      "description": "Information about the size of files in a merge or pull request.",
      "properties": {
        "base": {
          "allOf": [
            {
              "$ref": "#/definitions/FileSize"
            },
            {
              "description": "The size of a file in the base of a merge or pull request."
            }
          ]
        },
        "destination": {
          "allOf": [
            {
              "$ref": "#/definitions/FileSize"
            },
            {
              "description": "The size of a file in the destination of a merge or pull request."
            }
          ]
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/definitions/FileSize"
            },
            {
              "description": "The size of a file in the source of a merge or pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "FileTooLargeException": {},
    "FilesMetadata": {
      "items": {
        "$ref": "#/definitions/FileMetadata"
      },
      "type": "array"
    },
    "Folder": {
      "description": "Returns information about a folder in a repository.",
      "properties": {
        "absolutePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path of the folder in the repository."
            }
          ]
        },
        "relativePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The relative path of the specified folder from the folder where the query originated."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full SHA-1 pointer of the tree information for the commit that contains the folder."
            }
          ]
        }
      },
      "type": "object"
    },
    "FolderContentSizeLimitExceededException": {},
    "FolderDoesNotExistException": {},
    "FolderList": {
      "items": {
        "$ref": "#/definitions/Folder"
      },
      "type": "array"
    },
    "GetApprovalRuleTemplateInput": {
      "properties": {
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the approval rule template for which you want to get information."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName"
      ],
      "title": "GetApprovalRuleTemplateInput",
      "type": "object"
    },
    "GetApprovalRuleTemplateOutput": {
      "properties": {
        "approvalRuleTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplate"
            },
            {
              "description": "The content and structure of the approval rule template."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplate"
      ],
      "type": "object"
    },
    "GetBlobInput": {
      "description": "Represents the input of a get blob operation.",
      "properties": {
        "blobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The ID of the blob, which is its SHA-1 pointer."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the blob."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "blobId"
      ],
      "title": "GetBlobInput",
      "type": "object"
    },
    "GetBlobOutput": {
      "description": "Represents the output of a get blob operation.",
      "properties": {
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/blob"
            },
            {
              "description": "The content of the blob, usually a file."
            }
          ]
        }
      },
      "required": [
        "content"
      ],
      "type": "object"
    },
    "GetBranchInput": {
      "description": "Represents the input of a get branch operation.",
      "properties": {
        "branchName": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The name of the branch for which you want to retrieve information."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the branch for which you want to retrieve information."
            }
          ]
        }
      },
      "title": "GetBranchInput",
      "type": "object"
    },
    "GetBranchOutput": {
      "description": "Represents the output of a get branch operation.",
      "properties": {
        "branch": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchInfo"
            },
            {
              "description": "The name of the branch."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetCommentInput": {
      "properties": {
        "commentId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentId"
            },
            {
              "description": "The unique, system-generated ID of the comment. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>."
            }
          ]
        }
      },
      "required": [
        "commentId"
      ],
      "title": "GetCommentInput",
      "type": "object"
    },
    "GetCommentOutput": {
      "properties": {
        "comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "The contents of the comment."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetCommentReactionsInput": {
      "properties": {
        "commentId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentId"
            },
            {
              "description": "The ID of the comment for which you want to get reactions information."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "A non-zero, non-negative integer used to limit the number of returned results. The default is the same as the allowed maximum, 1,000."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results. "
            }
          ]
        },
        "reactionUserArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Optional. The Amazon Resource Name (ARN) of the user or identity for which you want to get reaction information."
            }
          ]
        }
      },
      "required": [
        "commentId"
      ],
      "title": "GetCommentReactionsInput",
      "type": "object"
    },
    "GetCommentReactionsOutput": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that can be used in a request to return the next batch of the results."
            }
          ]
        },
        "reactionsForComment": {
          "allOf": [
            {
              "$ref": "#/definitions/ReactionsForCommentList"
            },
            {
              "description": "An array of reactions to the specified comment."
            }
          ]
        }
      },
      "required": [
        "reactionsForComment"
      ],
      "type": "object"
    },
    "GetCommentsForComparedCommitInput": {
      "properties": {
        "afterCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "To establish the directionality of the comparison, the full commit ID of the after commit."
            }
          ]
        },
        "beforeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "To establish the directionality of the comparison, the full commit ID of the before commit."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "A non-zero, non-negative integer used to limit the number of returned results. The default is 100 comments, but you can configure up to 500."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that when provided in a request, returns the next batch of the results. "
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to compare commits."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "afterCommitId"
      ],
      "title": "GetCommentsForComparedCommitInput",
      "type": "object"
    },
    "GetCommentsForComparedCommitOutput": {
      "properties": {
        "commentsForComparedCommitData": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentsForComparedCommitData"
            },
            {
              "description": "A list of comment objects on the compared commit."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that can be used in a request to return the next batch of the results."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetCommentsForPullRequestInput": {
      "properties": {
        "afterCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit in the source branch that was the tip of the branch at the time the comment was made."
            }
          ]
        },
        "beforeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "A non-zero, non-negative integer used to limit the number of returned results. The default is 100 comments. You can return up to 500 comments with a single request."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the pull request."
            }
          ]
        }
      },
      "required": [
        "pullRequestId"
      ],
      "title": "GetCommentsForPullRequestInput",
      "type": "object"
    },
    "GetCommentsForPullRequestOutput": {
      "properties": {
        "commentsForPullRequestData": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentsForPullRequestData"
            },
            {
              "description": "An array of comment objects on the pull request."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that can be used in a request to return the next batch of the results."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetCommitInput": {
      "description": "Represents the input of a get commit operation.",
      "properties": {
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID. Commit IDs are the full SHA ID of the commit."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository to which the commit was made."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "commitId"
      ],
      "title": "GetCommitInput",
      "type": "object"
    },
    "GetCommitOutput": {
      "description": "Represents the output of a get commit operation.",
      "properties": {
        "commit": {
          "allOf": [
            {
              "$ref": "#/definitions/Commit"
            },
            {
              "description": "A commit data type object that contains information about the specified commit."
            }
          ]
        }
      },
      "required": [
        "commit"
      ],
      "type": "object"
    },
    "GetDifferencesInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "A non-zero, non-negative integer used to limit the number of returned results."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        },
        "afterCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit."
            }
          ]
        },
        "afterPath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name of a directory or folder, if it has changed. If not specified, differences are shown for all paths."
            }
          ]
        },
        "beforeCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, the full commit ID). Optional. If not specified, all changes before the <code>afterCommitSpecifier</code> value are shown. If you do not use <code>beforeCommitSpecifier</code> in your request, consider limiting the results with <code>maxResults</code>."
            }
          ]
        },
        "beforePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous name of a directory or folder. If <code>beforePath</code> and <code>afterPath</code> are not specified, differences are shown for all paths."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to get differences."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "afterCommitSpecifier"
      ],
      "title": "GetDifferencesInput",
      "type": "object"
    },
    "GetDifferencesOutput": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that can be used in a request to return the next batch of the results."
            }
          ]
        },
        "differences": {
          "allOf": [
            {
              "$ref": "#/definitions/DifferenceList"
            },
            {
              "description": "A data type object that contains information about the differences, including whether the difference is added, modified, or deleted (A, D, M)."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetFileInput": {
      "properties": {
        "commitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The fully quaified reference that identifies the commit that contains the file. For example, you can specify a full commit ID, a tag, a branch name, or a reference such as refs/heads/master. If none is provided, the head commit is used."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path to the file, including the full name and extension of the file. For example, /examples/file.md is the fully qualified path to a file named file.md in a folder named examples."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the file."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "filePath"
      ],
      "title": "GetFileInput",
      "type": "object"
    },
    "GetFileOutput": {
      "properties": {
        "blobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The blob ID of the object that represents the file content."
            }
          ]
        },
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full commit ID of the commit that contains the content returned by GetFile."
            }
          ]
        },
        "fileContent": {
          "allOf": [
            {
              "$ref": "#/definitions/FileContent"
            },
            {
              "description": "The base-64 encoded binary data object that represents the content of the file."
            }
          ]
        },
        "fileMode": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "<p>The extrapolated file mode permissions of the blob. Valid values include strings such as EXECUTABLE and not numeric values.</p> <note> <p>The file mode permissions returned by this API are not the standard file mode permission values, such as 100644, but rather extrapolated values. See the supported return values.</p> </note>"
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path to the specified file. Returns the name and extension of the file."
            }
          ]
        },
        "fileSize": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectSize"
            },
            {
              "description": "The size of the contents of the file, in bytes."
            }
          ]
        }
      },
      "required": [
        "commitId",
        "blobId",
        "filePath",
        "fileMode",
        "fileSize",
        "fileContent"
      ],
      "type": "object"
    },
    "GetFolderInput": {
      "properties": {
        "commitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "A fully qualified reference used to identify a commit that contains the version of the folder's content to return. A fully qualified reference can be a commit ID, branch name, tag, or reference such as HEAD. If no specifier is provided, the folder content is returned as it exists in the HEAD commit."
            }
          ]
        },
        "folderPath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository. "
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "folderPath"
      ],
      "title": "GetFolderInput",
      "type": "object"
    },
    "GetFolderOutput": {
      "properties": {
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full commit ID used as a reference for the returned version of the folder content."
            }
          ]
        },
        "files": {
          "allOf": [
            {
              "$ref": "#/definitions/FileList"
            },
            {
              "description": "The list of files in the specified folder, if any."
            }
          ]
        },
        "folderPath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path of the folder whose contents are returned."
            }
          ]
        },
        "subFolders": {
          "allOf": [
            {
              "$ref": "#/definitions/FolderList"
            },
            {
              "description": "The list of folders that exist under the specified folder, if any."
            }
          ]
        },
        "subModules": {
          "allOf": [
            {
              "$ref": "#/definitions/SubModuleList"
            },
            {
              "description": "The list of submodules in the specified folder, if any."
            }
          ]
        },
        "symbolicLinks": {
          "allOf": [
            {
              "$ref": "#/definitions/SymbolicLinkList"
            },
            {
              "description": "The list of symbolic links to other files and folders in the specified folder, if any."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full SHA-1 pointer of the tree information for the commit that contains the folder."
            }
          ]
        }
      },
      "required": [
        "commitId",
        "folderPath"
      ],
      "type": "object"
    },
    "GetMergeCommitInput": {
      "properties": {
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "destinationCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the merge commit about which you want to get information."
            }
          ]
        },
        "sourceCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "sourceCommitSpecifier",
        "destinationCommitSpecifier"
      ],
      "title": "GetMergeCommitInput",
      "type": "object"
    },
    "GetMergeCommitOutput": {
      "properties": {
        "baseCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the merge base."
            }
          ]
        },
        "destinationCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the destination commit specifier that was used in the merge evaluation."
            }
          ]
        },
        "mergedCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID for the merge commit created when the source branch was merged into the destination branch. If the fast-forward merge strategy was used, there is no merge commit."
            }
          ]
        },
        "sourceCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the source commit specifier that was used in the merge evaluation."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMergeConflictsInput": {
      "properties": {
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "destinationCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "maxConflictFiles": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of files to include in the output."
            }
          ]
        },
        "mergeOption": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeOptionTypeEnum"
            },
            {
              "description": "The merge option or strategy you want to use to merge the code. "
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where the pull request was created."
            }
          ]
        },
        "sourceCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "destinationCommitSpecifier",
        "sourceCommitSpecifier",
        "mergeOption"
      ],
      "title": "GetMergeConflictsInput",
      "type": "object"
    },
    "GetMergeConflictsOutput": {
      "properties": {
        "baseCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the merge base."
            }
          ]
        },
        "conflictMetadataList": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictMetadataList"
            },
            {
              "description": "A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty."
            }
          ]
        },
        "destinationCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the destination commit specifier that was used in the merge evaluation."
            }
          ]
        },
        "mergeable": {
          "allOf": [
            {
              "$ref": "#/definitions/IsMergeable"
            },
            {
              "description": "A Boolean value that indicates whether the code is mergeable by the specified merge option."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that can be used in a request to return the next batch of the results."
            }
          ]
        },
        "sourceCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the source commit specifier that was used in the merge evaluation."
            }
          ]
        }
      },
      "required": [
        "mergeable",
        "destinationCommitId",
        "sourceCommitId",
        "conflictMetadataList"
      ],
      "type": "object"
    },
    "GetMergeOptionsInput": {
      "properties": {
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "destinationCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the commits about which you want to get merge options."
            }
          ]
        },
        "sourceCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "sourceCommitSpecifier",
        "destinationCommitSpecifier"
      ],
      "title": "GetMergeOptionsInput",
      "type": "object"
    },
    "GetMergeOptionsOutput": {
      "properties": {
        "baseCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the merge base."
            }
          ]
        },
        "destinationCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the destination commit specifier that was used in the merge evaluation."
            }
          ]
        },
        "mergeOptions": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeOptions"
            },
            {
              "description": "The merge option or strategy used to merge the code."
            }
          ]
        },
        "sourceCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the source commit specifier that was used in the merge evaluation."
            }
          ]
        }
      },
      "required": [
        "mergeOptions",
        "sourceCommitId",
        "destinationCommitId",
        "baseCommitId"
      ],
      "type": "object"
    },
    "GetPullRequestApprovalStatesInput": {
      "properties": {
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID for the pull request."
            }
          ]
        },
        "revisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionId"
            },
            {
              "description": "The system-generated ID for the pull request revision."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "revisionId"
      ],
      "title": "GetPullRequestApprovalStatesInput",
      "type": "object"
    },
    "GetPullRequestApprovalStatesOutput": {
      "properties": {
        "approvals": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalList"
            },
            {
              "description": "Information about users who have approved the pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetPullRequestInput": {
      "properties": {
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        }
      },
      "required": [
        "pullRequestId"
      ],
      "title": "GetPullRequestInput",
      "type": "object"
    },
    "GetPullRequestOutput": {
      "properties": {
        "pullRequest": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequest"
            },
            {
              "description": "Information about the specified pull request."
            }
          ]
        }
      },
      "required": [
        "pullRequest"
      ],
      "type": "object"
    },
    "GetPullRequestOverrideStateInput": {
      "properties": {
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The ID of the pull request for which you want to get information about whether approval rules have been set aside (overridden)."
            }
          ]
        },
        "revisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionId"
            },
            {
              "description": "The system-generated ID of the revision for the pull request. To retrieve the most recent revision ID, use <a>GetPullRequest</a>."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "revisionId"
      ],
      "title": "GetPullRequestOverrideStateInput",
      "type": "object"
    },
    "GetPullRequestOverrideStateOutput": {
      "properties": {
        "overridden": {
          "allOf": [
            {
              "$ref": "#/definitions/Overridden"
            },
            {
              "description": "A Boolean value that indicates whether a pull request has had its rules set aside (TRUE) or whether all approval rules still apply (FALSE)."
            }
          ]
        },
        "overrider": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetRepositoryInput": {
      "description": "Represents the input of a get repository operation.",
      "properties": {
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository to get information about."
            }
          ]
        }
      },
      "required": [
        "repositoryName"
      ],
      "title": "GetRepositoryInput",
      "type": "object"
    },
    "GetRepositoryOutput": {
      "description": "Represents the output of a get repository operation.",
      "properties": {
        "repositoryMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryMetadata"
            },
            {
              "description": "Information about the repository."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetRepositoryTriggersInput": {
      "description": "Represents the input of a get repository triggers operation.",
      "properties": {
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository for which the trigger is configured."
            }
          ]
        }
      },
      "required": [
        "repositoryName"
      ],
      "title": "GetRepositoryTriggersInput",
      "type": "object"
    },
    "GetRepositoryTriggersOutput": {
      "description": "Represents the output of a get repository triggers operation.",
      "properties": {
        "configurationId": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggersConfigurationId"
            },
            {
              "description": "The system-generated unique ID for the trigger."
            }
          ]
        },
        "triggers": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggersList"
            },
            {
              "description": "The JSON block of configuration information for each trigger."
            }
          ]
        }
      },
      "type": "object"
    },
    "HunkContent": {
      "type": "string"
    },
    "IdempotencyParameterMismatchException": {},
    "InvalidActorArnException": {},
    "InvalidApprovalRuleContentException": {},
    "InvalidApprovalRuleNameException": {},
    "InvalidApprovalRuleTemplateContentException": {},
    "InvalidApprovalRuleTemplateDescriptionException": {},
    "InvalidApprovalRuleTemplateNameException": {},
    "InvalidApprovalStateException": {},
    "InvalidAuthorArnException": {},
    "InvalidBlobIdException": {},
    "InvalidBranchNameException": {},
    "InvalidClientRequestTokenException": {},
    "InvalidCommentIdException": {},
    "InvalidCommitException": {},
    "InvalidCommitIdException": {},
    "InvalidConflictDetailLevelException": {},
    "InvalidConflictResolutionException": {},
    "InvalidConflictResolutionStrategyException": {},
    "InvalidContinuationTokenException": {},
    "InvalidDeletionParameterException": {},
    "InvalidDescriptionException": {},
    "InvalidDestinationCommitSpecifierException": {},
    "InvalidEmailException": {},
    "InvalidFileLocationException": {},
    "InvalidFileModeException": {},
    "InvalidFilePositionException": {},
    "InvalidMaxConflictFilesException": {},
    "InvalidMaxMergeHunksException": {},
    "InvalidMaxResultsException": {},
    "InvalidMergeOptionException": {},
    "InvalidOrderException": {},
    "InvalidOverrideStatusException": {},
    "InvalidParentCommitIdException": {},
    "InvalidPathException": {},
    "InvalidPullRequestEventTypeException": {},
    "InvalidPullRequestIdException": {},
    "InvalidPullRequestStatusException": {},
    "InvalidPullRequestStatusUpdateException": {},
    "InvalidReactionUserArnException": {},
    "InvalidReactionValueException": {},
    "InvalidReferenceNameException": {},
    "InvalidRelativeFileVersionEnumException": {},
    "InvalidReplacementContentException": {},
    "InvalidReplacementTypeException": {},
    "InvalidRepositoryDescriptionException": {},
    "InvalidRepositoryNameException": {},
    "InvalidRepositoryTriggerBranchNameException": {},
    "InvalidRepositoryTriggerCustomDataException": {},
    "InvalidRepositoryTriggerDestinationArnException": {},
    "InvalidRepositoryTriggerEventsException": {},
    "InvalidRepositoryTriggerNameException": {},
    "InvalidRepositoryTriggerRegionException": {},
    "InvalidResourceArnException": {},
    "InvalidRevisionIdException": {},
    "InvalidRuleContentSha256Exception": {},
    "InvalidSortByException": {},
    "InvalidSourceCommitSpecifierException": {},
    "InvalidSystemTagUsageException": {},
    "InvalidTagKeysListException": {},
    "InvalidTagsMapException": {},
    "InvalidTargetBranchException": {},
    "InvalidTargetException": {},
    "InvalidTargetsException": {},
    "InvalidTitleException": {},
    "IsBinaryFile": {
      "description": "Information about whether a file is binary or textual in a merge or pull request operation.",
      "properties": {
        "base": {
          "allOf": [
            {
              "$ref": "#/definitions/CapitalBoolean"
            },
            {
              "description": "The binary or non-binary status of a file in the base of a merge or pull request."
            }
          ]
        },
        "destination": {
          "allOf": [
            {
              "$ref": "#/definitions/CapitalBoolean"
            },
            {
              "description": "The binary or non-binary status of a file in the destination of a merge or pull request."
            }
          ]
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/definitions/CapitalBoolean"
            },
            {
              "description": "The binary or non-binary status of file in the source of a merge or pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "IsCommentDeleted": {
      "type": "boolean"
    },
    "IsContentConflict": {
      "type": "boolean"
    },
    "IsFileModeConflict": {
      "type": "boolean"
    },
    "IsHunkConflict": {
      "type": "boolean"
    },
    "IsMergeable": {
      "type": "boolean"
    },
    "IsMerged": {
      "type": "boolean"
    },
    "IsMove": {
      "type": "boolean"
    },
    "IsObjectTypeConflict": {
      "type": "boolean"
    },
    "KeepEmptyFolders": {
      "type": "boolean"
    },
    "LastModifiedDate": {
      "format": "date-time",
      "type": "string"
    },
    "Limit": {
      "type": "integer"
    },
    "LineNumber": {
      "type": "integer"
    },
    "ListApprovalRuleTemplatesInput": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "A non-zero, non-negative integer used to limit the number of returned results."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        }
      },
      "title": "ListApprovalRuleTemplatesInput",
      "type": "object"
    },
    "ListApprovalRuleTemplatesOutput": {
      "properties": {
        "approvalRuleTemplateNames": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateNameList"
            },
            {
              "description": "The names of all the approval rule templates found in the AWS Region for your AWS account."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that allows the operation to batch the next results of the operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListAssociatedApprovalRuleTemplatesForRepositoryInput": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "A non-zero, non-negative integer used to limit the number of returned results."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository for which you want to list all associated approval rule templates."
            }
          ]
        }
      },
      "required": [
        "repositoryName"
      ],
      "title": "ListAssociatedApprovalRuleTemplatesForRepositoryInput",
      "type": "object"
    },
    "ListAssociatedApprovalRuleTemplatesForRepositoryOutput": {
      "properties": {
        "approvalRuleTemplateNames": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateNameList"
            },
            {
              "description": "The names of all approval rule templates associated with the repository."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that allows the operation to batch the next results of the operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListBranchesInput": {
      "description": "Represents the input of a list branches operation.",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that allows the operation to batch the results."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the branches."
            }
          ]
        }
      },
      "required": [
        "repositoryName"
      ],
      "title": "ListBranchesInput",
      "type": "object"
    },
    "ListBranchesOutput": {
      "description": "Represents the output of a list branches operation.",
      "properties": {
        "branches": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchNameList"
            },
            {
              "description": "The list of branch names."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that returns the batch of the results."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListPullRequestsInput": {
      "properties": {
        "authorArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "Optional. The Amazon Resource Name (ARN) of the user who created the pull request. If used, this filters the results to pull requests created by that user."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "A non-zero, non-negative integer used to limit the number of returned results."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        },
        "pullRequestStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestStatusEnum"
            },
            {
              "description": "Optional. The status of the pull request. If used, this refines the results to the pull requests that match the specified status."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository for which you want to list pull requests."
            }
          ]
        }
      },
      "required": [
        "repositoryName"
      ],
      "title": "ListPullRequestsInput",
      "type": "object"
    },
    "ListPullRequestsOutput": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that allows the operation to batch the next results of the operation."
            }
          ]
        },
        "pullRequestIds": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestIdList"
            },
            {
              "description": "The system-generated IDs of the pull requests."
            }
          ]
        }
      },
      "required": [
        "pullRequestIds"
      ],
      "type": "object"
    },
    "ListRepositoriesForApprovalRuleTemplateInput": {
      "properties": {
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the approval rule template for which you want to list repositories that are associated with that template."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "A non-zero, non-negative integer used to limit the number of returned results."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName"
      ],
      "title": "ListRepositoriesForApprovalRuleTemplateInput",
      "type": "object"
    },
    "ListRepositoriesForApprovalRuleTemplateOutput": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that allows the operation to batch the next results of the operation."
            }
          ]
        },
        "repositoryNames": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryNameList"
            },
            {
              "description": "A list of repository names that are associated with the specified approval rule template."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListRepositoriesInput": {
      "description": "Represents the input of a list repositories operation.",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved."
            }
          ]
        },
        "order": {
          "allOf": [
            {
              "$ref": "#/definitions/OrderEnum"
            },
            {
              "description": "The order in which to sort the results of a list repositories operation."
            }
          ]
        },
        "sortBy": {
          "allOf": [
            {
              "$ref": "#/definitions/SortByEnum"
            },
            {
              "description": "The criteria used to sort the results of a list repositories operation."
            }
          ]
        }
      },
      "title": "ListRepositoriesInput",
      "type": "object"
    },
    "ListRepositoriesOutput": {
      "description": "Represents the output of a list repositories operation.",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved."
            }
          ]
        },
        "repositories": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryNameIdPairList"
            },
            {
              "description": "Lists the repositories called by the list repositories operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceInput": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that, when provided in a request, returns the next batch of the results."
            }
          ]
        },
        "resourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource for which you want to get information about tags, if any."
            }
          ]
        }
      },
      "required": [
        "resourceArn"
      ],
      "title": "ListTagsForResourceInput",
      "type": "object"
    },
    "ListTagsForResourceOutput": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "A list of tag key and value pairs associated with the specified resource."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An enumeration token that allows the operation to batch the next results of the operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "Location": {
      "description": "Returns information about the location of a change or comment in the comparison between two commits or a pull request.",
      "properties": {
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The name of the file being compared, including its extension and subdirectory, if any."
            }
          ]
        },
        "filePosition": {
          "allOf": [
            {
              "$ref": "#/definitions/Position"
            },
            {
              "description": "The position of a change in a compared file, in line number format."
            }
          ]
        },
        "relativeFileVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/RelativeFileVersionEnum"
            },
            {
              "description": "In a comparison of commits or a pull request, whether the change is in the before or after of that comparison."
            }
          ]
        }
      },
      "type": "object"
    },
    "ManualMergeRequiredException": {},
    "MaxResults": {
      "type": "integer"
    },
    "MaximumBranchesExceededException": {},
    "MaximumConflictResolutionEntriesExceededException": {},
    "MaximumFileContentToLoadExceededException": {},
    "MaximumFileEntriesExceededException": {},
    "MaximumItemsToCompareExceededException": {},
    "MaximumNumberOfApprovalsExceededException": {},
    "MaximumOpenPullRequestsExceededException": {},
    "MaximumRepositoryNamesExceededException": {},
    "MaximumRepositoryTriggersExceededException": {},
    "MaximumRuleTemplatesAssociatedWithRepositoryException": {},
    "MergeBranchesByFastForwardInput": {
      "properties": {
        "destinationCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to merge two branches."
            }
          ]
        },
        "sourceCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "targetBranch": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The branch where the merge is applied."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "sourceCommitSpecifier",
        "destinationCommitSpecifier"
      ],
      "title": "MergeBranchesByFastForwardInput",
      "type": "object"
    },
    "MergeBranchesByFastForwardOutput": {
      "properties": {
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the merge in the destination or target branch."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The tree ID of the merge in the destination or target branch."
            }
          ]
        }
      },
      "type": "object"
    },
    "MergeBranchesBySquashInput": {
      "properties": {
        "authorName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the author who created the commit. This information is used as both the author and committer for the commit."
            }
          ]
        },
        "commitMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "The commit message for the merge."
            }
          ]
        },
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolution": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolution"
            },
            {
              "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "destinationCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "email": {
          "allOf": [
            {
              "$ref": "#/definitions/Email"
            },
            {
              "description": "The email address of the person merging the branches. This information is used in the commit information for the merge."
            }
          ]
        },
        "keepEmptyFolders": {
          "allOf": [
            {
              "$ref": "#/definitions/KeepEmptyFolders"
            },
            {
              "description": "If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to merge two branches."
            }
          ]
        },
        "sourceCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "targetBranch": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The branch where the merge is applied. "
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "sourceCommitSpecifier",
        "destinationCommitSpecifier"
      ],
      "title": "MergeBranchesBySquashInput",
      "type": "object"
    },
    "MergeBranchesBySquashOutput": {
      "properties": {
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the merge in the destination or target branch."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The tree ID of the merge in the destination or target branch."
            }
          ]
        }
      },
      "type": "object"
    },
    "MergeBranchesByThreeWayInput": {
      "properties": {
        "authorName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the author who created the commit. This information is used as both the author and committer for the commit."
            }
          ]
        },
        "commitMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "The commit message to include in the commit information for the merge."
            }
          ]
        },
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolution": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolution"
            },
            {
              "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "destinationCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "email": {
          "allOf": [
            {
              "$ref": "#/definitions/Email"
            },
            {
              "description": "The email address of the person merging the branches. This information is used in the commit information for the merge."
            }
          ]
        },
        "keepEmptyFolders": {
          "allOf": [
            {
              "$ref": "#/definitions/KeepEmptyFolders"
            },
            {
              "description": "If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to merge two branches."
            }
          ]
        },
        "sourceCommitSpecifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitName"
            },
            {
              "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
            }
          ]
        },
        "targetBranch": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The branch where the merge is applied. "
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "sourceCommitSpecifier",
        "destinationCommitSpecifier"
      ],
      "title": "MergeBranchesByThreeWayInput",
      "type": "object"
    },
    "MergeBranchesByThreeWayOutput": {
      "properties": {
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID of the merge in the destination or target branch."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The tree ID of the merge in the destination or target branch."
            }
          ]
        }
      },
      "type": "object"
    },
    "MergeHunk": {
      "description": "Information about merge hunks in a merge or pull request operation.",
      "properties": {
        "base": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeHunkDetail"
            },
            {
              "description": "Information about the merge hunk in the base of a merge or pull request."
            }
          ]
        },
        "destination": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeHunkDetail"
            },
            {
              "description": "Information about the merge hunk in the destination of a merge or pull request."
            }
          ]
        },
        "isConflict": {
          "allOf": [
            {
              "$ref": "#/definitions/IsHunkConflict"
            },
            {
              "description": "A Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. True when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge do not set this to true."
            }
          ]
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeHunkDetail"
            },
            {
              "description": "Information about the merge hunk in the source of a merge or pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "MergeHunkDetail": {
      "description": "Information about the details of a merge hunk that contains a conflict in a merge or pull request operation.",
      "properties": {
        "endLine": {
          "allOf": [
            {
              "$ref": "#/definitions/LineNumber"
            },
            {
              "description": "The end position of the hunk in the merge result."
            }
          ]
        },
        "hunkContent": {
          "allOf": [
            {
              "$ref": "#/definitions/HunkContent"
            },
            {
              "description": "The base-64 encoded content of the hunk merged region that might contain a conflict."
            }
          ]
        },
        "startLine": {
          "allOf": [
            {
              "$ref": "#/definitions/LineNumber"
            },
            {
              "description": "The start position of the hunk in the merge result."
            }
          ]
        }
      },
      "type": "object"
    },
    "MergeHunks": {
      "items": {
        "$ref": "#/definitions/MergeHunk"
      },
      "type": "array"
    },
    "MergeMetadata": {
      "description": "Returns information about a merge or potential merge between a source reference and a destination reference in a pull request.",
      "properties": {
        "isMerged": {
          "allOf": [
            {
              "$ref": "#/definitions/IsMerged"
            },
            {
              "description": "A Boolean value indicating whether the merge has been made."
            }
          ]
        },
        "mergeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The commit ID for the merge commit, if any."
            }
          ]
        },
        "mergeOption": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeOptionTypeEnum"
            },
            {
              "description": "The merge strategy used in the merge."
            }
          ]
        },
        "mergedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the user who merged the branches."
            }
          ]
        }
      },
      "type": "object"
    },
    "MergeOperations": {
      "description": "Information about the file operation conflicts in a merge operation.",
      "properties": {
        "destination": {
          "allOf": [
            {
              "$ref": "#/definitions/ChangeTypeEnum"
            },
            {
              "description": "The operation on a file in the destination of a merge or pull request."
            }
          ]
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/definitions/ChangeTypeEnum"
            },
            {
              "description": "The operation (add, modify, or delete) on a file in the source of a merge or pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "MergeOptionRequiredException": {},
    "MergeOptionTypeEnum": {
      "enum": [
        "FAST_FORWARD_MERGE",
        "SQUASH_MERGE",
        "THREE_WAY_MERGE"
      ],
      "type": "string"
    },
    "MergeOptions": {
      "items": {
        "$ref": "#/definitions/MergeOptionTypeEnum"
      },
      "type": "array"
    },
    "MergePullRequestByFastForwardInput": {
      "properties": {
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where the pull request was created."
            }
          ]
        },
        "sourceCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "repositoryName"
      ],
      "title": "MergePullRequestByFastForwardInput",
      "type": "object"
    },
    "MergePullRequestByFastForwardOutput": {
      "properties": {
        "pullRequest": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequest"
            },
            {
              "description": "Information about the specified pull request, including the merge."
            }
          ]
        }
      },
      "type": "object"
    },
    "MergePullRequestBySquashInput": {
      "properties": {
        "authorName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the author who created the commit. This information is used as both the author and committer for the commit."
            }
          ]
        },
        "commitMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "The commit message to include in the commit information for the merge."
            }
          ]
        },
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolution": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolution"
            },
            {
              "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "email": {
          "allOf": [
            {
              "$ref": "#/definitions/Email"
            },
            {
              "description": "The email address of the person merging the branches. This information is used in the commit information for the merge."
            }
          ]
        },
        "keepEmptyFolders": {
          "allOf": [
            {
              "$ref": "#/definitions/KeepEmptyFolders"
            },
            {
              "description": "If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where the pull request was created."
            }
          ]
        },
        "sourceCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "repositoryName"
      ],
      "title": "MergePullRequestBySquashInput",
      "type": "object"
    },
    "MergePullRequestBySquashOutput": {
      "properties": {
        "pullRequest": {
          "$ref": "#/definitions/PullRequest"
        }
      },
      "type": "object"
    },
    "MergePullRequestByThreeWayInput": {
      "properties": {
        "authorName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the author who created the commit. This information is used as both the author and committer for the commit."
            }
          ]
        },
        "commitMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "The commit message to include in the commit information for the merge."
            }
          ]
        },
        "conflictDetailLevel": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictDetailLevelTypeEnum"
            },
            {
              "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
            }
          ]
        },
        "conflictResolution": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolution"
            },
            {
              "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge."
            }
          ]
        },
        "conflictResolutionStrategy": {
          "allOf": [
            {
              "$ref": "#/definitions/ConflictResolutionStrategyTypeEnum"
            },
            {
              "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
            }
          ]
        },
        "email": {
          "allOf": [
            {
              "$ref": "#/definitions/Email"
            },
            {
              "description": "The email address of the person merging the branches. This information is used in the commit information for the merge."
            }
          ]
        },
        "keepEmptyFolders": {
          "allOf": [
            {
              "$ref": "#/definitions/KeepEmptyFolders"
            },
            {
              "description": "If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where the pull request was created."
            }
          ]
        },
        "sourceCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "repositoryName"
      ],
      "title": "MergePullRequestByThreeWayInput",
      "type": "object"
    },
    "MergePullRequestByThreeWayOutput": {
      "properties": {
        "pullRequest": {
          "$ref": "#/definitions/PullRequest"
        }
      },
      "type": "object"
    },
    "Message": {
      "type": "string"
    },
    "Mode": {
      "type": "string"
    },
    "MultipleConflictResolutionEntriesException": {},
    "MultipleRepositoriesInPullRequestException": {},
    "Name": {
      "type": "string"
    },
    "NameLengthExceededException": {},
    "NextToken": {
      "type": "string"
    },
    "NoChangeException": {},
    "NumberOfConflicts": {
      "type": "integer"
    },
    "NumberOfRuleTemplatesExceededException": {},
    "NumberOfRulesExceededException": {},
    "ObjectId": {
      "type": "string"
    },
    "ObjectSize": {
      "type": "integer"
    },
    "ObjectTypeEnum": {
      "enum": [
        "FILE",
        "DIRECTORY",
        "GIT_LINK",
        "SYMBOLIC_LINK"
      ],
      "type": "string"
    },
    "ObjectTypes": {
      "description": "Information about the type of an object in a merge operation.",
      "properties": {
        "base": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectTypeEnum"
            },
            {
              "description": "The type of the object in the base commit of the merge."
            }
          ]
        },
        "destination": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectTypeEnum"
            },
            {
              "description": "The type of the object in the destination branch."
            }
          ]
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectTypeEnum"
            },
            {
              "description": "The type of the object in the source branch."
            }
          ]
        }
      },
      "type": "object"
    },
    "OrderEnum": {
      "enum": [
        "ascending",
        "descending"
      ],
      "type": "string"
    },
    "OriginApprovalRuleTemplate": {
      "description": "Returns information about the template that created the approval rule for a pull request.",
      "properties": {
        "approvalRuleTemplateId": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateId"
            },
            {
              "description": "The ID of the template that created the approval rule."
            }
          ]
        },
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the template that created the approval rule."
            }
          ]
        }
      },
      "type": "object"
    },
    "Overridden": {
      "type": "boolean"
    },
    "OverrideAlreadySetException": {},
    "OverridePullRequestApprovalRulesInput": {
      "properties": {
        "overrideStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/OverrideStatus"
            },
            {
              "description": "Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <a>GetPullRequest</a>."
            }
          ]
        },
        "revisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionId"
            },
            {
              "description": "The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "revisionId",
        "overrideStatus"
      ],
      "title": "OverridePullRequestApprovalRulesInput",
      "type": "object"
    },
    "OverrideStatus": {
      "enum": [
        "OVERRIDE",
        "REVOKE"
      ],
      "type": "string"
    },
    "OverrideStatusRequiredException": {},
    "ParentCommitDoesNotExistException": {},
    "ParentCommitIdOutdatedException": {},
    "ParentCommitIdRequiredException": {},
    "ParentList": {
      "items": {
        "$ref": "#/definitions/ObjectId"
      },
      "type": "array"
    },
    "Path": {
      "type": "string"
    },
    "PathDoesNotExistException": {},
    "PathRequiredException": {},
    "Position": {
      "type": "integer"
    },
    "PostCommentForComparedCommitInput": {
      "properties": {
        "afterCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "To establish the directionality of the comparison, the full commit ID of the after commit."
            }
          ]
        },
        "beforeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "To establish the directionality of the comparison, the full commit ID of the before commit. Required for commenting on any commit unless that commit is the initial commit."
            }
          ]
        },
        "clientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestToken"
            },
            {
              "description": "A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token."
            }
          ]
        },
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/Content"
            },
            {
              "description": "The content of the comment you want to make."
            }
          ]
        },
        "location": {
          "allOf": [
            {
              "$ref": "#/definitions/Location"
            },
            {
              "description": "The location of the comparison where you want to comment."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to post a comment on the comparison between commits."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "afterCommitId",
        "content"
      ],
      "title": "PostCommentForComparedCommitInput",
      "type": "object"
    },
    "PostCommentForComparedCommitOutput": {
      "properties": {
        "afterBlobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "In the directionality you established, the blob ID of the after blob."
            }
          ]
        },
        "afterCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "In the directionality you established, the full commit ID of the after commit."
            }
          ]
        },
        "beforeBlobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "In the directionality you established, the blob ID of the before blob."
            }
          ]
        },
        "beforeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "In the directionality you established, the full commit ID of the before commit."
            }
          ]
        },
        "comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "The content of the comment you posted."
            }
          ]
        },
        "location": {
          "allOf": [
            {
              "$ref": "#/definitions/Location"
            },
            {
              "description": "The location of the comment in the comparison between the two commits."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you posted a comment on the comparison between commits."
            }
          ]
        }
      },
      "type": "object"
    },
    "PostCommentForPullRequestInput": {
      "properties": {
        "afterCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit in the source branch that is the current tip of the branch for the pull request when you post the comment."
            }
          ]
        },
        "beforeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created."
            }
          ]
        },
        "clientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestToken"
            },
            {
              "description": "A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token."
            }
          ]
        },
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/Content"
            },
            {
              "description": "The content of your comment on the change."
            }
          ]
        },
        "location": {
          "allOf": [
            {
              "$ref": "#/definitions/Location"
            },
            {
              "description": "The location of the change where you want to post your comment. If no location is provided, the comment is posted as a general comment on the pull request difference between the before commit ID and the after commit ID."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to post a comment on a pull request."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "repositoryName",
        "beforeCommitId",
        "afterCommitId",
        "content"
      ],
      "title": "PostCommentForPullRequestInput",
      "type": "object"
    },
    "PostCommentForPullRequestOutput": {
      "properties": {
        "afterBlobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "In the directionality of the pull request, the blob ID of the after blob."
            }
          ]
        },
        "afterCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit in the destination branch where the pull request is merged."
            }
          ]
        },
        "beforeBlobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "In the directionality of the pull request, the blob ID of the before blob."
            }
          ]
        },
        "beforeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request."
            }
          ]
        },
        "comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "The content of the comment you posted."
            }
          ]
        },
        "location": {
          "allOf": [
            {
              "$ref": "#/definitions/Location"
            },
            {
              "description": "The location of the change where you posted your comment."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. "
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you posted a comment on a pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "PostCommentReplyInput": {
      "properties": {
        "clientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestToken"
            },
            {
              "description": "A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token."
            }
          ]
        },
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/Content"
            },
            {
              "description": "The contents of your reply to a comment."
            }
          ]
        },
        "inReplyTo": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentId"
            },
            {
              "description": "The system-generated ID of the comment to which you want to reply. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>."
            }
          ]
        }
      },
      "required": [
        "inReplyTo",
        "content"
      ],
      "title": "PostCommentReplyInput",
      "type": "object"
    },
    "PostCommentReplyOutput": {
      "properties": {
        "comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "Information about the reply to a comment."
            }
          ]
        }
      },
      "type": "object"
    },
    "PullRequest": {
      "description": "Returns information about a pull request.",
      "properties": {
        "approvalRules": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRulesList"
            },
            {
              "description": "The approval rules applied to the pull request."
            }
          ]
        },
        "authorArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the user who created the pull request."
            }
          ]
        },
        "clientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestToken"
            },
            {
              "description": "A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token."
            }
          ]
        },
        "creationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/CreationDate"
            },
            {
              "description": "The date and time the pull request was originally created, in timestamp format."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request."
            }
          ]
        },
        "lastActivityDate": {
          "allOf": [
            {
              "$ref": "#/definitions/LastModifiedDate"
            },
            {
              "description": "The day and time of the last user or system activity on the pull request, in timestamp format."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. "
            }
          ]
        },
        "pullRequestStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestStatusEnum"
            },
            {
              "description": "The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>."
            }
          ]
        },
        "pullRequestTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestTargetList"
            },
            {
              "description": "The targets of the pull request, including the source branch and destination branch for the pull request."
            }
          ]
        },
        "revisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionId"
            },
            {
              "description": "The system-generated revision ID for the pull request."
            }
          ]
        },
        "title": {
          "allOf": [
            {
              "$ref": "#/definitions/Title"
            },
            {
              "description": "The user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users."
            }
          ]
        }
      },
      "type": "object"
    },
    "PullRequestAlreadyClosedException": {},
    "PullRequestApprovalRulesNotSatisfiedException": {},
    "PullRequestCannotBeApprovedByAuthorException": {},
    "PullRequestCreatedEventMetadata": {
      "description": "Metadata about the pull request that is used when comparing the pull request source with its destination.",
      "properties": {
        "destinationCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The commit ID of the tip of the branch specified as the destination branch when the pull request was created."
            }
          ]
        },
        "mergeBase": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The commit ID of the most recent commit that the source branch and the destination branch have in common."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where the pull request was created."
            }
          ]
        },
        "sourceCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The commit ID on the source branch used when the pull request was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "PullRequestDoesNotExistException": {},
    "PullRequestEvent": {
      "description": "Returns information about a pull request event.",
      "properties": {
        "actorArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with more commits or changing the status of a pull request."
            }
          ]
        },
        "approvalRuleEventMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleEventMetadata"
            },
            {
              "description": "Information about a pull request event."
            }
          ]
        },
        "approvalRuleOverriddenEventMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleOverriddenEventMetadata"
            },
            {
              "description": "Information about an approval rule override event for a pull request."
            }
          ]
        },
        "approvalStateChangedEventMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalStateChangedEventMetadata"
            },
            {
              "description": "Information about an approval state change for a pull request."
            }
          ]
        },
        "eventDate": {
          "allOf": [
            {
              "$ref": "#/definitions/EventDate"
            },
            {
              "description": "The day and time of the pull request event, in timestamp format."
            }
          ]
        },
        "pullRequestCreatedEventMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestCreatedEventMetadata"
            },
            {
              "description": "Information about the source and destination branches for the pull request."
            }
          ]
        },
        "pullRequestEventType": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestEventType"
            },
            {
              "description": "The type of the pull request event (for example, a status change event (PULL_REQUEST_STATUS_CHANGED) or update event (PULL_REQUEST_SOURCE_REFERENCE_UPDATED))."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request."
            }
          ]
        },
        "pullRequestMergedStateChangedEventMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestMergedStateChangedEventMetadata"
            },
            {
              "description": "Information about the change in mergability state for the pull request event."
            }
          ]
        },
        "pullRequestSourceReferenceUpdatedEventMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestSourceReferenceUpdatedEventMetadata"
            },
            {
              "description": "Information about the updated source branch for the pull request event. "
            }
          ]
        },
        "pullRequestStatusChangedEventMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestStatusChangedEventMetadata"
            },
            {
              "description": "Information about the change in status for the pull request event."
            }
          ]
        }
      },
      "type": "object"
    },
    "PullRequestEventList": {
      "items": {
        "$ref": "#/definitions/PullRequestEvent"
      },
      "type": "array"
    },
    "PullRequestEventType": {
      "enum": [
        "PULL_REQUEST_CREATED",
        "PULL_REQUEST_STATUS_CHANGED",
        "PULL_REQUEST_SOURCE_REFERENCE_UPDATED",
        "PULL_REQUEST_MERGE_STATE_CHANGED",
        "PULL_REQUEST_APPROVAL_RULE_CREATED",
        "PULL_REQUEST_APPROVAL_RULE_UPDATED",
        "PULL_REQUEST_APPROVAL_RULE_DELETED",
        "PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN",
        "PULL_REQUEST_APPROVAL_STATE_CHANGED"
      ],
      "type": "string"
    },
    "PullRequestId": {
      "type": "string"
    },
    "PullRequestIdList": {
      "items": {
        "$ref": "#/definitions/PullRequestId"
      },
      "type": "array"
    },
    "PullRequestIdRequiredException": {},
    "PullRequestMergedStateChangedEventMetadata": {
      "description": "Returns information about the change in the merge state for a pull request event. ",
      "properties": {
        "destinationReference": {
          "allOf": [
            {
              "$ref": "#/definitions/ReferenceName"
            },
            {
              "description": "The name of the branch that the pull request is merged into."
            }
          ]
        },
        "mergeMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeMetadata"
            },
            {
              "description": "Information about the merge state change event."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where the pull request was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "PullRequestSourceReferenceUpdatedEventMetadata": {
      "description": "Information about an update to the source branch of a pull request.",
      "properties": {
        "afterCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated."
            }
          ]
        },
        "beforeCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated."
            }
          ]
        },
        "mergeBase": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The commit ID of the most recent commit that the source branch and the destination branch have in common."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where the pull request was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "PullRequestStatusChangedEventMetadata": {
      "description": "Information about a change to the status of a pull request.",
      "properties": {
        "pullRequestStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestStatusEnum"
            },
            {
              "description": "The changed status of the pull request."
            }
          ]
        }
      },
      "type": "object"
    },
    "PullRequestStatusEnum": {
      "enum": [
        "OPEN",
        "CLOSED"
      ],
      "type": "string"
    },
    "PullRequestStatusRequiredException": {},
    "PullRequestTarget": {
      "description": "Returns information about a pull request target.",
      "properties": {
        "destinationCommit": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged."
            }
          ]
        },
        "destinationReference": {
          "allOf": [
            {
              "$ref": "#/definitions/ReferenceName"
            },
            {
              "description": "The branch of the repository where the pull request changes are merged. Also known as the destination branch. "
            }
          ]
        },
        "mergeBase": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The commit ID of the most recent commit that the source branch and the destination branch have in common."
            }
          ]
        },
        "mergeMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/MergeMetadata"
            },
            {
              "description": "Returns metadata about the state of the merge, including whether the merge has been made."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the pull request source and destination branches."
            }
          ]
        },
        "sourceCommit": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch."
            }
          ]
        },
        "sourceReference": {
          "allOf": [
            {
              "$ref": "#/definitions/ReferenceName"
            },
            {
              "description": "The branch of the repository that contains the changes for the pull request. Also known as the source branch."
            }
          ]
        }
      },
      "type": "object"
    },
    "PullRequestTargetList": {
      "items": {
        "$ref": "#/definitions/PullRequestTarget"
      },
      "type": "array"
    },
    "PutCommentReactionInput": {
      "properties": {
        "commentId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentId"
            },
            {
              "description": "The ID of the comment to which you want to add or update a reaction."
            }
          ]
        },
        "reactionValue": {
          "allOf": [
            {
              "$ref": "#/definitions/ReactionValue"
            },
            {
              "description": "The emoji reaction you want to add or update. To remove a reaction, provide a value of blank or null. You can also provide the value of none. For information about emoji reaction values supported in AWS CodeCommit, see the <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-commit-comment.html#emoji-reaction-table\">AWS CodeCommit User Guide</a>."
            }
          ]
        }
      },
      "required": [
        "commentId",
        "reactionValue"
      ],
      "title": "PutCommentReactionInput",
      "type": "object"
    },
    "PutFileEntries": {
      "items": {
        "$ref": "#/definitions/PutFileEntry"
      },
      "type": "array"
    },
    "PutFileEntry": {
      "description": "Information about a file added or updated as part of a commit.",
      "properties": {
        "fileContent": {
          "allOf": [
            {
              "$ref": "#/definitions/FileContent"
            },
            {
              "description": "The content of the file, if a source file is not specified."
            }
          ]
        },
        "fileMode": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The full path to the file in the repository, including the name of the file."
            }
          ]
        },
        "sourceFile": {
          "allOf": [
            {
              "$ref": "#/definitions/SourceFileSpecifier"
            },
            {
              "description": "The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly."
            }
          ]
        }
      },
      "required": [
        "filePath"
      ],
      "type": "object"
    },
    "PutFileEntryConflictException": {},
    "PutFileInput": {
      "properties": {
        "branchName": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The name of the branch where you want to add or update the file. If this is an empty repository, this branch is created."
            }
          ]
        },
        "commitMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "A message about why this file was added or updated. Although it is optional, a message makes the commit history for your repository more useful."
            }
          ]
        },
        "email": {
          "allOf": [
            {
              "$ref": "#/definitions/Email"
            },
            {
              "description": "An email address for the person adding or updating the file."
            }
          ]
        },
        "fileContent": {
          "allOf": [
            {
              "$ref": "#/definitions/FileContent"
            },
            {
              "description": "The content of the file, in binary object format. "
            }
          ]
        },
        "fileMode": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The file mode permissions of the blob. Valid file mode permissions are listed here."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "<p>The name of the file you want to add or update, including the relative path to the file in the repository.</p> <note> <p>If the path does not currently exist in the repository, the path is created as part of adding the file.</p> </note>"
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the person adding or updating the file. Although it is optional, a name makes the commit history for your repository more useful."
            }
          ]
        },
        "parentCommitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "<p>The full commit ID of the head commit in the branch where you want to add or update the file. If this is an empty repository, no commit ID is required. If this is not an empty repository, a commit ID is required. </p> <p>The commit ID must match the ID of the head commit at the time of the operation. Otherwise, an error occurs, and the file is not added or updated.</p>"
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to add or update the file."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "branchName",
        "fileContent",
        "filePath"
      ],
      "title": "PutFileInput",
      "type": "object"
    },
    "PutFileOutput": {
      "properties": {
        "blobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The ID of the blob, which is its SHA-1 pointer."
            }
          ]
        },
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full SHA ID of the commit that contains this file change."
            }
          ]
        },
        "treeId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The full SHA-1 pointer of the tree information for the commit that contains this file change."
            }
          ]
        }
      },
      "required": [
        "commitId",
        "blobId",
        "treeId"
      ],
      "type": "object"
    },
    "PutRepositoryTriggersInput": {
      "description": "Represents the input of a put repository triggers operation.",
      "properties": {
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository where you want to create or update the trigger."
            }
          ]
        },
        "triggers": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggersList"
            },
            {
              "description": "The JSON block of configuration information for each trigger."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "triggers"
      ],
      "title": "PutRepositoryTriggersInput",
      "type": "object"
    },
    "PutRepositoryTriggersOutput": {
      "description": "Represents the output of a put repository triggers operation.",
      "properties": {
        "configurationId": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggersConfigurationId"
            },
            {
              "description": "The system-generated unique ID for the create or update operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "ReactionCountsMap": {
      "additionalProperties": {
        "$ref": "#/definitions/Count"
      },
      "type": "object"
    },
    "ReactionEmoji": {
      "type": "string"
    },
    "ReactionForComment": {
      "description": "Information about the reaction values provided by users on a comment.",
      "properties": {
        "reaction": {
          "allOf": [
            {
              "$ref": "#/definitions/ReactionValueFormats"
            },
            {
              "description": "The reaction for a specified comment."
            }
          ]
        },
        "reactionUsers": {
          "allOf": [
            {
              "$ref": "#/definitions/ReactionUsersList"
            },
            {
              "description": "The Amazon Resource Names (ARNs) of users who have provided reactions to the comment."
            }
          ]
        },
        "reactionsFromDeletedUsersCount": {
          "allOf": [
            {
              "$ref": "#/definitions/Count"
            },
            {
              "description": "A numerical count of users who reacted with the specified emoji whose identities have been subsequently deleted from IAM. While these IAM users or roles no longer exist, the reactions might still appear in total reaction counts."
            }
          ]
        }
      },
      "type": "object"
    },
    "ReactionLimitExceededException": {},
    "ReactionShortCode": {
      "type": "string"
    },
    "ReactionUnicode": {
      "type": "string"
    },
    "ReactionUsersList": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "type": "array"
    },
    "ReactionValue": {
      "type": "string"
    },
    "ReactionValueFormats": {
      "description": "Information about the values for reactions to a comment. AWS CodeCommit supports a limited set of reactions.",
      "properties": {
        "emoji": {
          "allOf": [
            {
              "$ref": "#/definitions/ReactionEmoji"
            },
            {
              "description": "The Emoji Version 1.0 graphic of the reaction. These graphics are interpreted slightly differently on different operating systems."
            }
          ]
        },
        "shortCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ReactionShortCode"
            },
            {
              "description": "The emoji short code for the reaction. Short codes are interpreted slightly differently on different operating systems. "
            }
          ]
        },
        "unicode": {
          "allOf": [
            {
              "$ref": "#/definitions/ReactionUnicode"
            },
            {
              "description": "The Unicode codepoint for the reaction."
            }
          ]
        }
      },
      "type": "object"
    },
    "ReactionValueRequiredException": {},
    "ReactionsForCommentList": {
      "items": {
        "$ref": "#/definitions/ReactionForComment"
      },
      "type": "array"
    },
    "ReferenceDoesNotExistException": {},
    "ReferenceName": {
      "type": "string"
    },
    "ReferenceNameRequiredException": {},
    "ReferenceTypeNotSupportedException": {},
    "RelativeFileVersionEnum": {
      "enum": [
        "BEFORE",
        "AFTER"
      ],
      "type": "string"
    },
    "ReplaceContentEntries": {
      "items": {
        "$ref": "#/definitions/ReplaceContentEntry"
      },
      "type": "array"
    },
    "ReplaceContentEntry": {
      "description": "Information about a replacement content entry in the conflict of a merge or pull request operation.",
      "properties": {
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/FileContent"
            },
            {
              "description": "The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT."
            }
          ]
        },
        "fileMode": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The file mode to apply during conflict resoltion."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The path of the conflicting file."
            }
          ]
        },
        "replacementType": {
          "allOf": [
            {
              "$ref": "#/definitions/ReplacementTypeEnum"
            },
            {
              "description": "The replacement type to use when determining how to resolve the conflict."
            }
          ]
        }
      },
      "required": [
        "filePath",
        "replacementType"
      ],
      "type": "object"
    },
    "ReplacementContentRequiredException": {},
    "ReplacementTypeEnum": {
      "enum": [
        "KEEP_BASE",
        "KEEP_SOURCE",
        "KEEP_DESTINATION",
        "USE_NEW_CONTENT"
      ],
      "type": "string"
    },
    "ReplacementTypeRequiredException": {},
    "RepositoryDescription": {
      "maxLength": 1000,
      "type": "string"
    },
    "RepositoryDoesNotExistException": {},
    "RepositoryId": {
      "type": "string"
    },
    "RepositoryLimitExceededException": {},
    "RepositoryMetadata": {
      "description": "Information about a repository.",
      "properties": {
        "Arn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the repository."
            }
          ]
        },
        "accountId": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The ID of the AWS account associated with the repository."
            }
          ]
        },
        "cloneUrlHttp": {
          "allOf": [
            {
              "$ref": "#/definitions/CloneUrlHttp"
            },
            {
              "description": "The URL to use for cloning the repository over HTTPS."
            }
          ]
        },
        "cloneUrlSsh": {
          "allOf": [
            {
              "$ref": "#/definitions/CloneUrlSsh"
            },
            {
              "description": "The URL to use for cloning the repository over SSH."
            }
          ]
        },
        "creationDate": {
          "allOf": [
            {
              "$ref": "#/definitions/CreationDate"
            },
            {
              "description": "The date and time the repository was created, in timestamp format."
            }
          ]
        },
        "defaultBranch": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The repository's default branch name."
            }
          ]
        },
        "lastModifiedDate": {
          "allOf": [
            {
              "$ref": "#/definitions/LastModifiedDate"
            },
            {
              "description": "The date and time the repository was last modified, in timestamp format."
            }
          ]
        },
        "repositoryDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryDescription"
            },
            {
              "description": "A comment or description about the repository."
            }
          ]
        },
        "repositoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryId"
            },
            {
              "description": "The ID of the repository."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The repository's name."
            }
          ]
        }
      },
      "type": "object"
    },
    "RepositoryMetadataList": {
      "items": {
        "$ref": "#/definitions/RepositoryMetadata"
      },
      "type": "array"
    },
    "RepositoryName": {
      "maxLength": 100,
      "minLength": 1,
      "pattern": "[\\w\\.-]+",
      "type": "string"
    },
    "RepositoryNameExistsException": {},
    "RepositoryNameIdPair": {
      "description": "Information about a repository name and ID.",
      "properties": {
        "repositoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryId"
            },
            {
              "description": "The ID associated with the repository."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name associated with the repository."
            }
          ]
        }
      },
      "type": "object"
    },
    "RepositoryNameIdPairList": {
      "items": {
        "$ref": "#/definitions/RepositoryNameIdPair"
      },
      "type": "array"
    },
    "RepositoryNameList": {
      "items": {
        "$ref": "#/definitions/RepositoryName"
      },
      "type": "array"
    },
    "RepositoryNameRequiredException": {},
    "RepositoryNamesRequiredException": {},
    "RepositoryNotAssociatedWithPullRequestException": {},
    "RepositoryNotFoundList": {
      "items": {
        "$ref": "#/definitions/RepositoryName"
      },
      "type": "array"
    },
    "RepositoryTrigger": {
      "description": "Information about a trigger for a repository.",
      "properties": {
        "branches": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchNameList"
            },
            {
              "description": "<p>The branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.</p> <note> <p>Although no content is required in the array, you must include the array itself.</p> </note>"
            }
          ]
        },
        "customData": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggerCustomData"
            },
            {
              "description": "Any custom data associated with the trigger to be included in the information sent to the target of the trigger."
            }
          ]
        },
        "destinationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS)."
            }
          ]
        },
        "events": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggerEventList"
            },
            {
              "description": "<p>The repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS. </p> <note> <p>The valid value \"all\" cannot be used with any other values.</p> </note>"
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggerName"
            },
            {
              "description": "The name of the trigger."
            }
          ]
        }
      },
      "required": [
        "name",
        "destinationArn",
        "events"
      ],
      "type": "object"
    },
    "RepositoryTriggerBranchNameListRequiredException": {},
    "RepositoryTriggerCustomData": {
      "type": "string"
    },
    "RepositoryTriggerDestinationArnRequiredException": {},
    "RepositoryTriggerEventEnum": {
      "enum": [
        "all",
        "updateReference",
        "createReference",
        "deleteReference"
      ],
      "type": "string"
    },
    "RepositoryTriggerEventList": {
      "items": {
        "$ref": "#/definitions/RepositoryTriggerEventEnum"
      },
      "type": "array"
    },
    "RepositoryTriggerEventsListRequiredException": {},
    "RepositoryTriggerExecutionFailure": {
      "description": "A trigger failed to run.",
      "properties": {
        "failureMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggerExecutionFailureMessage"
            },
            {
              "description": "Message information about the trigger that did not run."
            }
          ]
        },
        "trigger": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggerName"
            },
            {
              "description": "The name of the trigger that did not run."
            }
          ]
        }
      },
      "type": "object"
    },
    "RepositoryTriggerExecutionFailureList": {
      "items": {
        "$ref": "#/definitions/RepositoryTriggerExecutionFailure"
      },
      "type": "array"
    },
    "RepositoryTriggerExecutionFailureMessage": {
      "type": "string"
    },
    "RepositoryTriggerName": {
      "type": "string"
    },
    "RepositoryTriggerNameList": {
      "items": {
        "$ref": "#/definitions/RepositoryTriggerName"
      },
      "type": "array"
    },
    "RepositoryTriggerNameRequiredException": {},
    "RepositoryTriggersConfigurationId": {
      "type": "string"
    },
    "RepositoryTriggersList": {
      "items": {
        "$ref": "#/definitions/RepositoryTrigger"
      },
      "type": "array"
    },
    "RepositoryTriggersListRequiredException": {},
    "ResourceArn": {
      "type": "string"
    },
    "ResourceArnRequiredException": {},
    "RestrictedSourceFileException": {},
    "RevisionId": {
      "type": "string"
    },
    "RevisionIdRequiredException": {},
    "RevisionNotCurrentException": {},
    "RuleContentSha256": {
      "type": "string"
    },
    "SameFileContentException": {},
    "SamePathRequestException": {},
    "SetFileModeEntries": {
      "items": {
        "$ref": "#/definitions/SetFileModeEntry"
      },
      "type": "array"
    },
    "SetFileModeEntry": {
      "description": "Information about the file mode changes.",
      "properties": {
        "fileMode": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The file mode for the file."
            }
          ]
        },
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The full path to the file, including the name of the file."
            }
          ]
        }
      },
      "required": [
        "filePath",
        "fileMode"
      ],
      "type": "object"
    },
    "SortByEnum": {
      "enum": [
        "repositoryName",
        "lastModifiedDate"
      ],
      "type": "string"
    },
    "SourceAndDestinationAreSameException": {},
    "SourceFileOrContentRequiredException": {},
    "SourceFileSpecifier": {
      "description": "Information about a source file that is part of changes made in a commit.",
      "properties": {
        "filePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The full path to the file, including the name of the file."
            }
          ]
        },
        "isMove": {
          "allOf": [
            {
              "$ref": "#/definitions/IsMove"
            },
            {
              "description": "Whether to remove the source file from the parent commit."
            }
          ]
        }
      },
      "required": [
        "filePath"
      ],
      "type": "object"
    },
    "SubModule": {
      "description": "Returns information about a submodule reference in a repository folder.",
      "properties": {
        "absolutePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path to the folder that contains the reference to the submodule."
            }
          ]
        },
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The commit ID that contains the reference to the submodule."
            }
          ]
        },
        "relativePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The relative path of the submodule from the folder where the query originated."
            }
          ]
        }
      },
      "type": "object"
    },
    "SubModuleList": {
      "items": {
        "$ref": "#/definitions/SubModule"
      },
      "type": "array"
    },
    "SymbolicLink": {
      "description": "Returns information about a symbolic link in a repository folder.",
      "properties": {
        "absolutePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The fully qualified path to the folder that contains the symbolic link."
            }
          ]
        },
        "blobId": {
          "allOf": [
            {
              "$ref": "#/definitions/ObjectId"
            },
            {
              "description": "The blob ID that contains the information about the symbolic link."
            }
          ]
        },
        "fileMode": {
          "allOf": [
            {
              "$ref": "#/definitions/FileModeTypeEnum"
            },
            {
              "description": "The file mode permissions of the blob that cotains information about the symbolic link."
            }
          ]
        },
        "relativePath": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The relative path of the symbolic link from the folder where the query originated."
            }
          ]
        }
      },
      "type": "object"
    },
    "SymbolicLinkList": {
      "items": {
        "$ref": "#/definitions/SymbolicLink"
      },
      "type": "array"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagKeysList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "TagKeysListRequiredException": {},
    "TagPolicyException": {},
    "TagResourceInput": {
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The key-value pair to use when tagging this repository."
            }
          ]
        },
        "resourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource to which you want to add or update tags."
            }
          ]
        }
      },
      "required": [
        "resourceArn",
        "tags"
      ],
      "title": "TagResourceInput",
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "TagsMap": {
      "additionalProperties": {
        "$ref": "#/definitions/TagValue"
      },
      "type": "object"
    },
    "TagsMapRequiredException": {},
    "Target": {
      "description": "Returns information about a target for a pull request.",
      "properties": {
        "destinationReference": {
          "allOf": [
            {
              "$ref": "#/definitions/ReferenceName"
            },
            {
              "description": "The branch of the repository where the pull request changes are merged. Also known as the destination branch."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository that contains the pull request."
            }
          ]
        },
        "sourceReference": {
          "allOf": [
            {
              "$ref": "#/definitions/ReferenceName"
            },
            {
              "description": "The branch of the repository that contains the changes for the pull request. Also known as the source branch."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "sourceReference"
      ],
      "type": "object"
    },
    "TargetList": {
      "items": {
        "$ref": "#/definitions/Target"
      },
      "type": "array"
    },
    "TargetRequiredException": {},
    "TargetsRequiredException": {},
    "TestRepositoryTriggersInput": {
      "description": "Represents the input of a test repository triggers operation.",
      "properties": {
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository in which to test the triggers."
            }
          ]
        },
        "triggers": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggersList"
            },
            {
              "description": "The list of triggers to test."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "triggers"
      ],
      "title": "TestRepositoryTriggersInput",
      "type": "object"
    },
    "TestRepositoryTriggersOutput": {
      "description": "Represents the output of a test repository triggers operation.",
      "properties": {
        "failedExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggerExecutionFailureList"
            },
            {
              "description": "The list of triggers that were not tested. This list provides the names of the triggers that could not be tested, separated by commas."
            }
          ]
        },
        "successfulExecutions": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryTriggerNameList"
            },
            {
              "description": "The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas."
            }
          ]
        }
      },
      "type": "object"
    },
    "TipOfSourceReferenceIsDifferentException": {},
    "TipsDivergenceExceededException": {},
    "Title": {
      "maxLength": 150,
      "type": "string"
    },
    "TitleRequiredException": {},
    "TooManyTagsException": {},
    "UntagResourceInput": {
      "properties": {
        "resourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource to which you want to remove tags."
            }
          ]
        },
        "tagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeysList"
            },
            {
              "description": "The tag key for each tag that you want to remove from the resource."
            }
          ]
        }
      },
      "required": [
        "resourceArn",
        "tagKeys"
      ],
      "title": "UntagResourceInput",
      "type": "object"
    },
    "UpdateApprovalRuleTemplateContentInput": {
      "properties": {
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the approval rule template where you want to update the content of the rule. "
            }
          ]
        },
        "existingRuleContentSha256": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleContentSha256"
            },
            {
              "description": "The SHA-256 hash signature for the content of the approval rule. You can retrieve this information by using <a>GetPullRequest</a>."
            }
          ]
        },
        "newRuleContent": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateContent"
            },
            {
              "description": "The content that replaces the existing content of the rule. Content statements must be complete. You cannot provide only the changes."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName",
        "newRuleContent"
      ],
      "title": "UpdateApprovalRuleTemplateContentInput",
      "type": "object"
    },
    "UpdateApprovalRuleTemplateContentOutput": {
      "properties": {
        "approvalRuleTemplate": {
          "$ref": "#/definitions/ApprovalRuleTemplate"
        }
      },
      "required": [
        "approvalRuleTemplate"
      ],
      "type": "object"
    },
    "UpdateApprovalRuleTemplateDescriptionInput": {
      "properties": {
        "approvalRuleTemplateDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateDescription"
            },
            {
              "description": "The updated description of the approval rule template."
            }
          ]
        },
        "approvalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The name of the template for which you want to update the description."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplateName",
        "approvalRuleTemplateDescription"
      ],
      "title": "UpdateApprovalRuleTemplateDescriptionInput",
      "type": "object"
    },
    "UpdateApprovalRuleTemplateDescriptionOutput": {
      "properties": {
        "approvalRuleTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplate"
            },
            {
              "description": "The structure and content of the updated approval rule template."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplate"
      ],
      "type": "object"
    },
    "UpdateApprovalRuleTemplateNameInput": {
      "properties": {
        "newApprovalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The new name you want to apply to the approval rule template."
            }
          ]
        },
        "oldApprovalRuleTemplateName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplateName"
            },
            {
              "description": "The current name of the approval rule template."
            }
          ]
        }
      },
      "required": [
        "oldApprovalRuleTemplateName",
        "newApprovalRuleTemplateName"
      ],
      "title": "UpdateApprovalRuleTemplateNameInput",
      "type": "object"
    },
    "UpdateApprovalRuleTemplateNameOutput": {
      "properties": {
        "approvalRuleTemplate": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleTemplate"
            },
            {
              "description": "The structure and content of the updated approval rule template."
            }
          ]
        }
      },
      "required": [
        "approvalRuleTemplate"
      ],
      "type": "object"
    },
    "UpdateCommentInput": {
      "properties": {
        "commentId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentId"
            },
            {
              "description": "The system-generated ID of the comment you want to update. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>."
            }
          ]
        },
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/Content"
            },
            {
              "description": "The updated content to replace the existing content of the comment."
            }
          ]
        }
      },
      "required": [
        "commentId",
        "content"
      ],
      "title": "UpdateCommentInput",
      "type": "object"
    },
    "UpdateCommentOutput": {
      "properties": {
        "comment": {
          "allOf": [
            {
              "$ref": "#/definitions/Comment"
            },
            {
              "description": "Information about the updated comment."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateDefaultBranchInput": {
      "description": "Represents the input of an update default branch operation.",
      "properties": {
        "defaultBranchName": {
          "allOf": [
            {
              "$ref": "#/definitions/BranchName"
            },
            {
              "description": "The name of the branch to set as the default."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository to set or change the default branch for."
            }
          ]
        }
      },
      "required": [
        "repositoryName",
        "defaultBranchName"
      ],
      "title": "UpdateDefaultBranchInput",
      "type": "object"
    },
    "UpdatePullRequestApprovalRuleContentInput": {
      "properties": {
        "approvalRuleName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleName"
            },
            {
              "description": "The name of the approval rule you want to update."
            }
          ]
        },
        "existingRuleContentSha256": {
          "allOf": [
            {
              "$ref": "#/definitions/RuleContentSha256"
            },
            {
              "description": "The SHA-256 hash signature for the content of the approval rule. You can retrieve this information by using <a>GetPullRequest</a>."
            }
          ]
        },
        "newRuleContent": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRuleContent"
            },
            {
              "description": "<p>The updated content for the approval rule.</p> <note> <p>When you update the content of the approval rule, you can specify approvers in an approval pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>: This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>, all of the following are counted as approvals coming from that user:</p> <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p> </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p> </li> </ul> <p>This option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>) unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully qualified ARN</b>: This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul> <p>For more information about IAM ARNs, wildcards, and formats, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>"
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "approvalRuleName",
        "newRuleContent"
      ],
      "title": "UpdatePullRequestApprovalRuleContentInput",
      "type": "object"
    },
    "UpdatePullRequestApprovalRuleContentOutput": {
      "properties": {
        "approvalRule": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalRule"
            },
            {
              "description": "Information about the updated approval rule."
            }
          ]
        }
      },
      "required": [
        "approvalRule"
      ],
      "type": "object"
    },
    "UpdatePullRequestApprovalStateInput": {
      "properties": {
        "approvalState": {
          "allOf": [
            {
              "$ref": "#/definitions/ApprovalState"
            },
            {
              "description": "The approval state to associate with the user on the pull request."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request."
            }
          ]
        },
        "revisionId": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionId"
            },
            {
              "description": "The system-generated ID of the revision."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "revisionId",
        "approvalState"
      ],
      "title": "UpdatePullRequestApprovalStateInput",
      "type": "object"
    },
    "UpdatePullRequestDescriptionInput": {
      "properties": {
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The updated content of the description for the pull request. This content replaces the existing description."
            }
          ]
        },
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "description"
      ],
      "title": "UpdatePullRequestDescriptionInput",
      "type": "object"
    },
    "UpdatePullRequestDescriptionOutput": {
      "properties": {
        "pullRequest": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequest"
            },
            {
              "description": "Information about the updated pull request."
            }
          ]
        }
      },
      "required": [
        "pullRequest"
      ],
      "type": "object"
    },
    "UpdatePullRequestStatusInput": {
      "properties": {
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        },
        "pullRequestStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestStatusEnum"
            },
            {
              "description": "The status of the pull request. The only valid operations are to update the status from <code>OPEN</code> to <code>OPEN</code>, <code>OPEN</code> to <code>CLOSED</code> or from <code>CLOSED</code> to <code>CLOSED</code>."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "pullRequestStatus"
      ],
      "title": "UpdatePullRequestStatusInput",
      "type": "object"
    },
    "UpdatePullRequestStatusOutput": {
      "properties": {
        "pullRequest": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequest"
            },
            {
              "description": "Information about the pull request."
            }
          ]
        }
      },
      "required": [
        "pullRequest"
      ],
      "type": "object"
    },
    "UpdatePullRequestTitleInput": {
      "properties": {
        "pullRequestId": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequestId"
            },
            {
              "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
            }
          ]
        },
        "title": {
          "allOf": [
            {
              "$ref": "#/definitions/Title"
            },
            {
              "description": "The updated title of the pull request. This replaces the existing title."
            }
          ]
        }
      },
      "required": [
        "pullRequestId",
        "title"
      ],
      "title": "UpdatePullRequestTitleInput",
      "type": "object"
    },
    "UpdatePullRequestTitleOutput": {
      "properties": {
        "pullRequest": {
          "allOf": [
            {
              "$ref": "#/definitions/PullRequest"
            },
            {
              "description": "Information about the updated pull request."
            }
          ]
        }
      },
      "required": [
        "pullRequest"
      ],
      "type": "object"
    },
    "UpdateRepositoryDescriptionInput": {
      "description": "Represents the input of an update repository description operation.",
      "properties": {
        "repositoryDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryDescription"
            },
            {
              "description": "The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters."
            }
          ]
        },
        "repositoryName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The name of the repository to set or change the comment or description for."
            }
          ]
        }
      },
      "required": [
        "repositoryName"
      ],
      "title": "UpdateRepositoryDescriptionInput",
      "type": "object"
    },
    "UpdateRepositoryNameInput": {
      "description": "Represents the input of an update repository description operation.",
      "properties": {
        "newName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The new name for the repository."
            }
          ]
        },
        "oldName": {
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryName"
            },
            {
              "description": "The current name of the repository."
            }
          ]
        }
      },
      "required": [
        "oldName",
        "newName"
      ],
      "title": "UpdateRepositoryNameInput",
      "type": "object"
    },
    "UserInfo": {
      "description": "Information about the user who made a specified commit.",
      "properties": {
        "date": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date when the specified commit was commited, in timestamp format with GMT offset."
            }
          ]
        },
        "email": {
          "allOf": [
            {
              "$ref": "#/definitions/Email"
            },
            {
              "description": "The email address associated with the user who made the commit, if any."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the user who made the specified commit."
            }
          ]
        }
      },
      "type": "object"
    },
    "blob": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/codecommit/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}