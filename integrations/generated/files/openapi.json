{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "app.files.com",
  "basePath": "/api/rest/v1",
  "info": {
    "contact": {
      "email": "support@files.com",
      "name": "Files.com Customer Success Team"
    },
    "title": "Files.com",
    "version": "0.0.1",
    "x-apisguru-categories": [
      "developer_tools"
    ],
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://app.files.com/api/rest/v1/swagger_doc.json",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "files.com",
    "x-datafire": {
      "name": "files",
      "type": "openapi"
    }
  },
  "produces": [
    "application/json",
    "application/xml"
  ],
  "securityDefinitions": {
    "api_key": {
      "description": "API Key - supports user-based or site-wide API keys",
      "in": "header",
      "name": "X-FilesAPI-Key",
      "type": "apiKey"
    }
  },
  "tags": [
    {
      "description": "Operations about api_keys",
      "name": "api_key"
    },
    {
      "description": "Operations about api_keys",
      "name": "api_keys"
    },
    {
      "description": "Operations about sites",
      "name": "site"
    },
    {
      "description": "Operations about users",
      "name": "user"
    },
    {
      "description": "Operations about users",
      "name": "users"
    },
    {
      "description": "Operations about as2_keys",
      "name": "as2_keys"
    },
    {
      "description": "Operations about automations",
      "name": "automations"
    },
    {
      "description": "Operations about behaviors",
      "name": "behaviors"
    },
    {
      "description": "Operations about bundles",
      "name": "bundles"
    },
    {
      "description": "Operations about dns_records",
      "name": "dns_records"
    },
    {
      "description": "Operations about files",
      "name": "files"
    },
    {
      "description": "Operations about file_actions",
      "name": "file_actions"
    },
    {
      "description": "Operations about file_comments",
      "name": "file_comments"
    },
    {
      "description": "Operations about file_comment_reactions",
      "name": "file_comment_reactions"
    },
    {
      "description": "Operations about folders",
      "name": "folders"
    },
    {
      "description": "Operations about groups",
      "name": "groups"
    },
    {
      "description": "Operations about group_users",
      "name": "group_users"
    },
    {
      "description": "Operations about histories",
      "name": "history"
    },
    {
      "description": "Operations about history_exports",
      "name": "history_exports"
    },
    {
      "description": "Operations about invoices",
      "name": "invoices"
    },
    {
      "description": "Operations about ip_addresses",
      "name": "ip_addresses"
    },
    {
      "description": "Operations about locks",
      "name": "locks"
    },
    {
      "description": "Operations about messages",
      "name": "messages"
    },
    {
      "description": "Operations about message_comments",
      "name": "message_comments"
    },
    {
      "description": "Operations about message_comment_reactions",
      "name": "message_comment_reactions"
    },
    {
      "description": "Operations about message_reactions",
      "name": "message_reactions"
    },
    {
      "description": "Operations about notifications",
      "name": "notifications"
    },
    {
      "description": "Operations about payments",
      "name": "payments"
    },
    {
      "description": "Operations about permissions",
      "name": "permissions"
    },
    {
      "description": "Operations about projects",
      "name": "projects"
    },
    {
      "description": "Operations about public_keys",
      "name": "public_keys"
    },
    {
      "description": "Operations about remote_servers",
      "name": "remote_servers"
    },
    {
      "description": "Operations about requests",
      "name": "requests"
    },
    {
      "description": "Operations about sessions",
      "name": "sessions"
    },
    {
      "description": "Operations about sso_strategies",
      "name": "sso_strategies"
    },
    {
      "description": "Operations about styles",
      "name": "styles"
    },
    {
      "description": "Operations about usage_snapshots",
      "name": "usage_snapshots"
    },
    {
      "description": "Operations about usage_daily_snapshots",
      "name": "usage_daily_snapshots"
    },
    {
      "description": "Operations about user_cipher_uses",
      "name": "user_cipher_uses"
    }
  ],
  "paths": {
    "/api_key": {
      "delete": {
        "description": "Delete current API key.  (Requires current API connection to be using an API key.)",
        "operationId": "DeleteCurrent",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "api_key"
        ],
        "x-authentication": [
          "desktop_app"
        ]
      },
      "get": {
        "description": "Show information about current API key.  (Requires current API connection to be using an API key.)",
        "operationId": "FindCurrent",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The ApiKey object.",
            "schema": {
              "$ref": "#/definitions/ApiKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "api_key"
        ],
        "x-authentication": [
          "desktop_app"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update current API key.  (Requires current API connection to be using an API key.)",
        "operationId": "UpdateCurrent",
        "parameters": [
          {
            "default": "My Key",
            "description": "Internal name for key.  For your reference only.",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank, or set to `desktop_app` to restrict the key to only desktop app functions.",
            "in": "formData",
            "name": "permission_set",
            "required": false,
            "type": "string"
          },
          {
            "description": "Have the key expire at this date/time.",
            "in": "formData",
            "name": "expires_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The ApiKey object.",
            "schema": {
              "$ref": "#/definitions/ApiKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "api_key"
        ],
        "x-authentication": [
          "desktop_app"
        ]
      }
    },
    "/api_keys": {
      "get": {
        "description": "List Api Keys",
        "operationId": "getApiKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of ApiKeys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ApiKeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "api_keys"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "site/api_keys",
          "user/api_keys",
          "users/:user_id/api_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Api Key",
        "operationId": "postApiKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "My Key",
            "description": "Internal name for key.  For your reference only.",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank, or set to 'desktop_app' to restrict the key to only desktop app functions.",
            "in": "formData",
            "name": "permission_set",
            "required": false,
            "type": "string"
          },
          {
            "description": "Have the key expire at this date/time.",
            "in": "formData",
            "name": "expires_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The ApiKeys object.",
            "schema": {
              "$ref": "#/definitions/ApiKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "api_keys"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "site/api_keys",
          "user/api_keys",
          "users/:user_id/api_keys"
        ]
      }
    },
    "/api_keys/{id}": {
      "delete": {
        "description": "Delete Api Key",
        "operationId": "deleteApiKeysId",
        "parameters": [
          {
            "description": "Api Key ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "api_keys"
        ],
        "x-authentication": [
          "self_managed"
        ]
      },
      "get": {
        "description": "Show Api Key",
        "operationId": "getApiKeysId",
        "parameters": [
          {
            "description": "Api Key ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The ApiKeys object.",
            "schema": {
              "$ref": "#/definitions/ApiKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "api_keys"
        ],
        "x-authentication": [
          "self_managed"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Api Key",
        "operationId": "patchApiKeysId",
        "parameters": [
          {
            "description": "Api Key ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "My Key",
            "description": "Internal name for key.  For your reference only.",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank, or set to 'desktop_app' to restrict the key to only desktop app functions.",
            "in": "formData",
            "name": "permission_set",
            "required": false,
            "type": "string"
          },
          {
            "description": "Have the key expire at this date/time.",
            "in": "formData",
            "name": "expires_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The ApiKeys object.",
            "schema": {
              "$ref": "#/definitions/ApiKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "api_keys"
        ],
        "x-authentication": [
          "self_managed"
        ]
      }
    },
    "/as2_keys": {
      "get": {
        "description": "List As2 Keys",
        "operationId": "getAs2Keys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of As2Keys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/As2KeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "as2_keys"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/as2_keys",
          "users/:user_id/as2_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create As2 Key",
        "operationId": "postAs2Keys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "Test",
            "description": "AS2 Partnership Name",
            "in": "formData",
            "name": "as2_partnership_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Actual contents of Public key.",
            "in": "formData",
            "name": "public_key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The As2Keys object.",
            "schema": {
              "$ref": "#/definitions/As2KeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "as2_keys"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/as2_keys",
          "users/:user_id/as2_keys"
        ]
      }
    },
    "/as2_keys/{id}": {
      "delete": {
        "description": "Delete As2 Key",
        "operationId": "deleteAs2KeysId",
        "parameters": [
          {
            "description": "As2 Key ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "as2_keys"
        ],
        "x-authentication": [
          "self_managed"
        ]
      },
      "get": {
        "description": "Show As2 Key",
        "operationId": "getAs2KeysId",
        "parameters": [
          {
            "description": "As2 Key ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The As2Keys object.",
            "schema": {
              "$ref": "#/definitions/As2KeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "as2_keys"
        ],
        "x-authentication": [
          "self_managed"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update As2 Key",
        "operationId": "patchAs2KeysId",
        "parameters": [
          {
            "description": "As2 Key ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "Test",
            "description": "AS2 Partnership Name",
            "in": "formData",
            "name": "as2_partnership_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The As2Keys object.",
            "schema": {
              "$ref": "#/definitions/As2KeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "as2_keys"
        ],
        "x-authentication": [
          "self_managed"
        ]
      }
    },
    "/automations": {
      "get": {
        "description": "List Automations",
        "operationId": "getAutomations",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of automation to filter by.",
            "in": "query",
            "name": "automation",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Automations objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/AutomationEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "automations"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Automation",
        "operationId": "postAutomations",
        "parameters": [
          {
            "default": "create_folder",
            "description": "Type of automation.  One of: `create_folder`, `request_file`, `request_move`",
            "in": "formData",
            "name": "automation",
            "required": true,
            "type": "string"
          },
          {
            "default": "source",
            "description": "Source Path",
            "in": "formData",
            "name": "source",
            "required": false,
            "type": "string"
          },
          {
            "default": "destination",
            "description": "Destination Path",
            "in": "formData",
            "name": "destination",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set, this string in the destination path will be replaced with the value in `destination_replace_to`.",
            "in": "formData",
            "name": "destination_replace_from",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.",
            "in": "formData",
            "name": "destination_replace_to",
            "required": false,
            "type": "string"
          },
          {
            "default": "year",
            "description": "How often to run this automation? One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`",
            "in": "formData",
            "name": "interval",
            "required": false,
            "type": "string"
          },
          {
            "description": "Path on which this Automation runs.  Supports globs.",
            "in": "formData",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited.",
            "in": "formData",
            "name": "user_ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited.",
            "in": "formData",
            "name": "group_ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Automations object.",
            "schema": {
              "$ref": "#/definitions/AutomationEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "automations"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/automations/{id}": {
      "delete": {
        "description": "Delete Automation",
        "operationId": "deleteAutomationsId",
        "parameters": [
          {
            "description": "Automation ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "automations"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "get": {
        "description": "Show Automation",
        "operationId": "getAutomationsId",
        "parameters": [
          {
            "description": "Automation ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Automations object.",
            "schema": {
              "$ref": "#/definitions/AutomationEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "automations"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Automation",
        "operationId": "patchAutomationsId",
        "parameters": [
          {
            "description": "Automation ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "create_folder",
            "description": "Type of automation.  One of: `create_folder`, `request_file`, `request_move`",
            "in": "formData",
            "name": "automation",
            "required": true,
            "type": "string"
          },
          {
            "default": "source",
            "description": "Source Path",
            "in": "formData",
            "name": "source",
            "required": false,
            "type": "string"
          },
          {
            "default": "destination",
            "description": "Destination Path",
            "in": "formData",
            "name": "destination",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set, this string in the destination path will be replaced with the value in `destination_replace_to`.",
            "in": "formData",
            "name": "destination_replace_from",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.",
            "in": "formData",
            "name": "destination_replace_to",
            "required": false,
            "type": "string"
          },
          {
            "default": "year",
            "description": "How often to run this automation? One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`",
            "in": "formData",
            "name": "interval",
            "required": false,
            "type": "string"
          },
          {
            "description": "Path on which this Automation runs.  Supports globs.",
            "in": "formData",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited.",
            "in": "formData",
            "name": "user_ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited.",
            "in": "formData",
            "name": "group_ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Automations object.",
            "schema": {
              "$ref": "#/definitions/AutomationEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "automations"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/behaviors": {
      "get": {
        "description": "List Behaviors",
        "operationId": "getBehaviors",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set, only shows folder behaviors matching this behavior type.",
            "in": "query",
            "name": "behavior",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Behaviors objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/BehaviorEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "behaviors"
        ],
        "x-authentication": []
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Behavior",
        "operationId": "postBehaviors",
        "parameters": [
          {
            "default": "{\"method\": \"GET\"}",
            "description": "The value of the folder behavior.  Can be a integer, array, or hash depending on the type of folder behavior.",
            "in": "formData",
            "name": "value",
            "required": false,
            "type": "string"
          },
          {
            "description": "Certain behaviors may require a file, for instance, the \"watermark\" behavior requires a watermark image",
            "in": "formData",
            "name": "attachment_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "Folder behaviors path.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "default": "webhook",
            "description": "Behavior type.",
            "in": "formData",
            "name": "behavior",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Behaviors object.",
            "schema": {
              "$ref": "#/definitions/BehaviorEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "behaviors"
        ],
        "x-authentication": []
      }
    },
    "/behaviors/folders/?*path": {
      "get": {
        "description": "List Behaviors by path",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Path to operate on.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Show behaviors above this path?",
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set only shows folder behaviors matching this behavior type.",
            "in": "query",
            "name": "behavior",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Behaviors objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/BehaviorEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "behaviors"
        ],
        "x-authentication": [],
        "operationId": "behaviors.folders._path.get"
      }
    },
    "/behaviors/webhook/test": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Test webhook.",
        "operationId": "postBehaviorsWebhookTest",
        "parameters": [
          {
            "default": "https://www.site.com/...",
            "description": "URL for testing the webhook.",
            "in": "formData",
            "name": "url",
            "required": true,
            "type": "string"
          },
          {
            "default": "GET",
            "description": "HTTP method(GET or POST).",
            "in": "formData",
            "name": "method",
            "required": false,
            "type": "string"
          },
          {
            "default": "RAW",
            "description": "HTTP encoding method.  Can be JSON, XML, or RAW (form data).",
            "in": "formData",
            "name": "encoding",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Behaviors object.",
            "schema": {
              "$ref": "#/definitions/StatusEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "behaviors"
        ],
        "x-authentication": [
          "folder_admin"
        ],
        "x-path_aliases": [
          "site/test-webhook"
        ]
      }
    },
    "/behaviors/{id}": {
      "delete": {
        "description": "Delete Behavior",
        "operationId": "deleteBehaviorsId",
        "parameters": [
          {
            "description": "Behavior ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "behaviors"
        ],
        "x-authentication": []
      },
      "get": {
        "description": "Show Behavior",
        "operationId": "getBehaviorsId",
        "parameters": [
          {
            "description": "Behavior ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Behaviors object.",
            "schema": {
              "$ref": "#/definitions/BehaviorEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "behaviors"
        ],
        "x-authentication": []
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Behavior",
        "operationId": "patchBehaviorsId",
        "parameters": [
          {
            "description": "Behavior ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-types": [
              {
                "type": "string"
              },
              {
                "format": "int32",
                "type": "integer"
              },
              {
                "type": "object"
              }
            ]
          },
          {
            "default": "{\"method\": \"GET\"}",
            "description": "The value of the folder behavior.  Can be a integer, array, or hash depending on the type of folder behavior.",
            "in": "formData",
            "name": "value",
            "required": false,
            "type": "string"
          },
          {
            "description": "Certain behaviors may require a file, for instance, the \"watermark\" behavior requires a watermark image",
            "in": "formData",
            "name": "attachment_file",
            "required": false,
            "type": "file",
            "x-types": [
              {
                "type": "string"
              },
              {
                "format": "int32",
                "type": "integer"
              },
              {
                "type": "object"
              }
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Behaviors object.",
            "schema": {
              "$ref": "#/definitions/BehaviorEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "behaviors"
        ],
        "x-authentication": []
      }
    },
    "/bundles": {
      "get": {
        "description": "List Bundles",
        "operationId": "getBundles",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Bundles objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/BundleEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "bundles"
        ],
        "x-authentication": []
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Bundle",
        "operationId": "postBundles",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "A list of paths to include in this bundle.",
            "in": "formData",
            "items": {
              "type": "string"
            },
            "name": "paths",
            "required": true,
            "type": "array"
          },
          {
            "default": "Password",
            "description": "Password for this bundle.",
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Bundle expiration date/time",
            "format": "date-time",
            "in": "formData",
            "name": "expires_at",
            "required": false,
            "type": "string"
          },
          {
            "default": "The public description of the bundle.",
            "description": "Public description",
            "in": "formData",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": "The internal note on the bundle.",
            "description": "Bundle internal note",
            "in": "formData",
            "name": "note",
            "required": false,
            "type": "string"
          },
          {
            "default": "abc123",
            "description": "Bundle code.  This code forms the end part of the Public URL.",
            "in": "formData",
            "name": "code",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Bundles object.",
            "schema": {
              "$ref": "#/definitions/BundleEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "bundles"
        ],
        "x-authentication": [
          "desktop_app"
        ]
      }
    },
    "/bundles/{id}": {
      "delete": {
        "description": "Delete Bundle",
        "operationId": "deleteBundlesId",
        "parameters": [
          {
            "description": "Bundle ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "bundles"
        ],
        "x-authentication": []
      },
      "get": {
        "description": "Show Bundle",
        "operationId": "getBundlesId",
        "parameters": [
          {
            "description": "Bundle ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Bundles object.",
            "schema": {
              "$ref": "#/definitions/BundleEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "bundles"
        ],
        "x-authentication": []
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Bundle",
        "operationId": "patchBundlesId",
        "parameters": [
          {
            "description": "Bundle ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "Password",
            "description": "Password for this bundle.",
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Bundle expiration date/time",
            "format": "date-time",
            "in": "formData",
            "name": "expires_at",
            "required": false,
            "type": "string"
          },
          {
            "default": "The public description of the bundle.",
            "description": "Public description",
            "in": "formData",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": "The internal note on the bundle.",
            "description": "Bundle internal note",
            "in": "formData",
            "name": "note",
            "required": false,
            "type": "string"
          },
          {
            "default": "abc123",
            "description": "Bundle code.  This code forms the end part of the Public URL.",
            "in": "formData",
            "name": "code",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Bundles object.",
            "schema": {
              "$ref": "#/definitions/BundleEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "bundles"
        ],
        "x-authentication": []
      }
    },
    "/bundles/{id}/share": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Send email(s) with a link to bundle",
        "operationId": "postBundlesIdShare",
        "parameters": [
          {
            "description": "Bundle ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A list of email addresses to share this bundle with.",
            "in": "formData",
            "items": {
              "type": "string"
            },
            "name": "to",
            "required": true,
            "type": "array"
          },
          {
            "default": "Just a note.",
            "description": "Note to include in email.",
            "in": "formData",
            "name": "note",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "bundles"
        ],
        "x-authentication": []
      }
    },
    "/dns_records": {
      "get": {
        "description": "Show site DNS configuration.",
        "operationId": "getDnsRecords",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of DnsRecords objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/DnsRecordEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "dns_records"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ],
        "x-path_aliases": [
          "site/dns_records"
        ]
      }
    },
    "/file_actions/begin_upload/?*path": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Begin file upload",
        "operationId": "BeginUpload",
        "parameters": [
          {
            "description": "Path to operate on.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Create parent directories if they do not exist?",
            "in": "formData",
            "name": "mkdir_parents",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Part if uploading a part.",
            "format": "int32",
            "in": "formData",
            "name": "part",
            "required": false,
            "type": "integer"
          },
          {
            "description": "How many parts to fetch?",
            "format": "int32",
            "in": "formData",
            "name": "parts",
            "required": false,
            "type": "integer"
          },
          {
            "description": "",
            "in": "formData",
            "name": "ref",
            "required": false,
            "type": "string"
          },
          {
            "description": "File byte offset to restart from.",
            "format": "int32",
            "in": "formData",
            "name": "restart",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Allow file rename instead of overwrite?",
            "in": "formData",
            "name": "with_rename",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The FileActions object.",
            "schema": {
              "$ref": "#/definitions/FilePartUploadEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "file_actions"
        ],
        "x-authentication": [
          "desktop_app",
          "inbox"
        ]
      }
    },
    "/file_actions/copy/?*path": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Copy file/folder",
        "operationId": "Copy",
        "parameters": [
          {
            "description": "Path to operate on.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Copy destination path.",
            "in": "formData",
            "name": "destination",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "file_actions"
        ],
        "x-authentication": [
          "desktop_app"
        ]
      }
    },
    "/file_actions/move/?*path": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Move file/folder",
        "operationId": "Move",
        "parameters": [
          {
            "description": "Path to operate on.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Move destination path.",
            "in": "formData",
            "name": "destination",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "file_actions"
        ],
        "x-authentication": [
          "desktop_app"
        ]
      }
    },
    "/file_comment_reactions": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create File Comment Reaction",
        "operationId": "postFileCommentReactions",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ID of file comment to attach reaction to.",
            "format": "int32",
            "in": "formData",
            "name": "file_comment_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Emoji to react with.",
            "in": "formData",
            "name": "emoji",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The FileCommentReactions object.",
            "schema": {
              "$ref": "#/definitions/FileCommentReactionEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "file_comment_reactions"
        ],
        "x-authentication": []
      }
    },
    "/file_comment_reactions/{id}": {
      "delete": {
        "description": "Delete File Comment Reaction",
        "operationId": "deleteFileCommentReactionsId",
        "parameters": [
          {
            "description": "File Comment Reaction ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "file_comment_reactions"
        ],
        "x-authentication": []
      }
    },
    "/file_comments": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create File Comment",
        "operationId": "postFileComments",
        "parameters": [
          {
            "description": "Comment body.",
            "in": "formData",
            "name": "body",
            "required": true,
            "type": "string"
          },
          {
            "description": "File path.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The FileComments object.",
            "schema": {
              "$ref": "#/definitions/FileCommentEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "file_comments"
        ],
        "x-authentication": []
      }
    },
    "/file_comments/files/?*path": {
      "get": {
        "description": "List File Comments by path",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Path to operate on.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of FileComments objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/FileCommentEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "file_comments"
        ],
        "x-authentication": [],
        "operationId": "file_comments.files._path.get"
      }
    },
    "/file_comments/{id}": {
      "delete": {
        "description": "Delete File Comment",
        "operationId": "deleteFileCommentsId",
        "parameters": [
          {
            "description": "File Comment ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "file_comments"
        ],
        "x-authentication": []
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update File Comment",
        "operationId": "patchFileCommentsId",
        "parameters": [
          {
            "description": "File Comment ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment body.",
            "in": "formData",
            "name": "body",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The FileComments object.",
            "schema": {
              "$ref": "#/definitions/FileCommentEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "file_comments"
        ],
        "x-authentication": []
      }
    },
    "/files/?*path": {
      "delete": {
        "description": "Delete file/folder",
        "operationId": "files._path.delete",
        "parameters": [
          {
            "description": "Path to operate on.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "If true, will recursively delete folers.  Otherwise, will error on non-empty folders.  For legacy reasons, this parameter may also be provided as the HTTP header `Depth: Infinity`",
            "in": "query",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "files"
        ],
        "x-authentication": [
          "desktop_app",
          "no_readonly"
        ]
      },
      "get": {
        "description": "Download file",
        "operationId": "Download",
        "parameters": [
          {
            "description": "Path to operate on.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Can be blank, `redirect` or `stat`.  If set to `stat`, we will return file information but without a download URL, and without logging a download.  If set to `redirect` we will serve a 302 redirect directly to the file.  This is used for integrations with Zapier, and is not recommended for most integrations.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "If provided, lookup the file by id instead of path.",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Include file preview information?",
            "in": "query",
            "name": "with_previews",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include file priority color information?",
            "in": "query",
            "name": "with_priority_color",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Files object.",
            "schema": {
              "$ref": "#/definitions/FileEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "files"
        ],
        "x-authentication": [
          "desktop_app",
          "no_readonly"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update file/folder metadata",
        "operationId": "files._path.patch",
        "parameters": [
          {
            "description": "Path to operate on.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Modified time of file.",
            "in": "formData",
            "name": "provided_mtime",
            "required": false,
            "type": "string"
          },
          {
            "default": "red",
            "description": "Priority/Bookmark color of file.",
            "in": "formData",
            "name": "priority_color",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Files object.",
            "schema": {
              "$ref": "#/definitions/FileEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "files"
        ],
        "x-authentication": [
          "desktop_app",
          "no_readonly"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Upload file",
        "operationId": "files._path.post",
        "parameters": [
          {
            "description": "Path to operate on.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "The action to perform.  Can be `append`, `attachment`, `end`, `upload`, `put`, or may not exist",
            "in": "formData",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "etag identifier.",
            "in": "formData",
            "items": {
              "type": "string"
            },
            "name": "etags[etag]",
            "required": true,
            "type": "array"
          },
          {
            "description": "Part number.",
            "in": "formData",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "etags[part]",
            "required": true,
            "type": "array"
          },
          {
            "description": "Length of file.",
            "format": "int32",
            "in": "formData",
            "name": "length",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Create parent directories if they do not exist?",
            "in": "formData",
            "name": "mkdir_parents",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Part if uploading a part.",
            "format": "int32",
            "in": "formData",
            "name": "part",
            "required": false,
            "type": "integer"
          },
          {
            "description": "How many parts to fetch?",
            "format": "int32",
            "in": "formData",
            "name": "parts",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User provided modification time.",
            "in": "formData",
            "name": "provided_mtime",
            "required": false,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "ref",
            "required": false,
            "type": "string"
          },
          {
            "description": "File byte offset to restart from.",
            "format": "int32",
            "in": "formData",
            "name": "restart",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Size of file.",
            "format": "int32",
            "in": "formData",
            "name": "size",
            "required": false,
            "type": "integer"
          },
          {
            "description": "If copying folder, copy just the structure?",
            "in": "formData",
            "name": "structure",
            "required": false,
            "type": "string"
          },
          {
            "description": "Allow file rename instead of overwrite?",
            "in": "formData",
            "name": "with_rename",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Files object.",
            "schema": {
              "$ref": "#/definitions/FileEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "files"
        ],
        "x-authentication": [
          "desktop_app",
          "inbox"
        ]
      }
    },
    "/folders/?*path": {
      "get": {
        "description": "List Folders by path",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Action to take.  Can be `count`, `count_nrs` (non recursive), `size`, `permissions`, or blank.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Path to operate on.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Send cursor to resume an existing list from the point at which you left off.  Get a cursor from an existing list via the X-Files-Cursor header.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "type": "string"
          },
          {
            "description": "If specified, will to filter folders/files list by this string.  Wildcards of `*` and `?` are acceptable here.",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Request a preview size.  Can be `small` (default), `large`, `xlarge`, or `pdf`.",
            "in": "query",
            "name": "preview_size",
            "required": false,
            "type": "string"
          },
          {
            "description": "If `search_all` is `true`, provide the search string here.  Otherwise, this parameter acts like an alias of `filter`.",
            "in": "query",
            "name": "search",
            "required": false,
            "type": "string"
          },
          {
            "description": "Search entire site?",
            "in": "query",
            "name": "search_all",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include file priority color information?",
            "in": "query",
            "name": "with_priority_color",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Folders objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/FileEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "folders"
        ],
        "x-authentication": [
          "desktop_app"
        ],
        "operationId": "folders._path.get"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create folder",
        "operationId": "folders._path.post",
        "parameters": [
          {
            "description": "Path to operate on.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Folders object.",
            "schema": {
              "$ref": "#/definitions/FileEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "folders"
        ],
        "x-authentication": [
          "desktop_app"
        ]
      }
    },
    "/group_users": {
      "get": {
        "description": "List Group Users",
        "operationId": "getGroupUsers",
        "parameters": [
          {
            "description": "User ID.  If provided, will return groups of which this user is a member.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID.  If provided, will return members of this group.",
            "format": "int32",
            "in": "query",
            "name": "group_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of GroupUsers objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupUserEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "group_users"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "user/groups",
          "users/:user_id/groups",
          "groups/:group_id/users"
        ]
      }
    },
    "/group_users/{id}": {
      "delete": {
        "description": "Delete Group User",
        "operationId": "deleteGroupUsersId",
        "parameters": [
          {
            "description": "Group User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "group_users"
        ],
        "x-authentication": [
          "site"
        ],
        "x-path_aliases": [
          "groups/:group_id/memberships/:user_id"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Group User",
        "operationId": "patchGroupUsersId",
        "parameters": [
          {
            "description": "Group User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Group ID to add user to.",
            "format": "int32",
            "in": "formData",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "User ID to add to group.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Is the user a group administrator?",
            "in": "formData",
            "name": "admin",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The GroupUsers object.",
            "schema": {
              "$ref": "#/definitions/GroupUserEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "group_users"
        ],
        "x-authentication": [
          "site"
        ],
        "x-path_aliases": [
          "groups/:group_id/memberships/:user_id"
        ]
      }
    },
    "/groups": {
      "get": {
        "description": "List Groups",
        "operationId": "getGroups",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Comma-separated list of group ids to include in results.",
            "in": "query",
            "name": "ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Groups objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [
          "folder_admin"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Group",
        "operationId": "postGroups",
        "parameters": [
          {
            "description": "Group name.",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group notes.",
            "in": "formData",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of user ids. If sent as a string, should be comma-delimited.",
            "in": "formData",
            "name": "user_ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of group admin user ids. If sent as a string, should be comma-delimited.",
            "in": "formData",
            "name": "admin_ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Groups object.",
            "schema": {
              "$ref": "#/definitions/GroupEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/groups/{group_id}/memberships/{user_id}": {
      "delete": {
        "description": "Delete Group User",
        "operationId": "deleteGroupsGroupIdMembershipsUserId",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [
          "site"
        ],
        "x-path_aliases": [
          "groups/:group_id/memberships/:user_id"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Group User",
        "operationId": "patchGroupsGroupIdMembershipsUserId",
        "parameters": [
          {
            "description": "Group ID to add user to.",
            "format": "int32",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "User ID to add to group.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Is the user a group administrator?",
            "in": "formData",
            "name": "admin",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The GroupUsers object.",
            "schema": {
              "$ref": "#/definitions/GroupUserEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [
          "site"
        ],
        "x-path_aliases": [
          "groups/:group_id/memberships/:user_id"
        ]
      }
    },
    "/groups/{group_id}/permissions": {
      "get": {
        "description": "List Permissions",
        "operationId": "getGroupsGroupIdPermissions",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Permission path.  If provided, will scope permissions to this path.",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID.  If provided, will scope permissions to this group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID.  If provided, will scope permissions to this user.",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "If searching by user or group, also include user's permissions that are inherited from its groups?",
            "in": "query",
            "name": "include_groups",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Permissions objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PermissionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "groups/:group_id/permissions",
          "users/:user_id/permissions"
        ]
      }
    },
    "/groups/{group_id}/users": {
      "get": {
        "description": "List Group Users",
        "operationId": "getGroupsGroupIdUsers",
        "parameters": [
          {
            "description": "User ID.  If provided, will return groups of which this user is a member.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID.  If provided, will return members of this group.",
            "format": "int32",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of GroupUsers objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupUserEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "user/groups",
          "users/:user_id/groups",
          "groups/:group_id/users"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create User",
        "operationId": "postGroupsGroupIdUsers",
        "parameters": [
          {
            "description": "An image file for your user avatar.",
            "in": "formData",
            "name": "avatar_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "If true, the avatar will be deleted.",
            "in": "formData",
            "name": "avatar_delete",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Used for changing a password on an existing user.",
            "in": "formData",
            "name": "change_password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional, but if provided, we will ensure that it matches the value sent in `change_password`.",
            "in": "formData",
            "name": "change_password_confirmation",
            "required": false,
            "type": "string"
          },
          {
            "description": "User's email.",
            "in": "formData",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `preview`, or `history`.",
            "in": "formData",
            "name": "grant_permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID to associate this user with.",
            "format": "int32",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A list of group ids to associate this user with.  Comma delimited.",
            "in": "formData",
            "name": "group_ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "User password.",
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional, but if provided, we will ensure that it matches the value sent in `password`.",
            "in": "formData",
            "name": "password_confirmation",
            "required": false,
            "type": "string"
          },
          {
            "description": "Signifies that the user has read all the announcements in the UI.",
            "in": "formData",
            "name": "announcements_read",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "127.0.0.1",
            "description": "A list of allowed IPs if applicable.  Newline delimited",
            "in": "formData",
            "name": "allowed_ips",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can the user create Bundles (aka Share Links)?  This field will be aliased or renamed in the future to `bundles_permission`.",
            "in": "formData",
            "name": "attachments_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Scheduled Date/Time at which user will be deactivated",
            "format": "date-time",
            "in": "formData",
            "name": "authenticate_until",
            "required": false,
            "type": "string"
          },
          {
            "default": "password",
            "description": "How is this user authenticated?",
            "enum": [
              "password",
              "ldap",
              "sso",
              "none"
            ],
            "in": "formData",
            "name": "authentication_method",
            "required": false,
            "type": "string"
          },
          {
            "description": "Allow this user to perform operations on the account, payments, and invoices?",
            "in": "formData",
            "name": "billing_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Exempt this user from being disabled based on inactivity?",
            "in": "formData",
            "name": "bypass_inactive_disable",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Allow this user to skip site-wide IP blacklists?",
            "in": "formData",
            "name": "bypass_site_allowed_ips",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user connect with WebDAV?",
            "in": "formData",
            "name": "dav_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.",
            "in": "formData",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user access with FTP/FTPS?",
            "in": "formData",
            "name": "ftp_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "en",
            "description": "Preferred language",
            "in": "formData",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": 18,
            "description": "Hour of the day at which daily notifications should be sent. Can be in range 0 to 23",
            "format": "int32",
            "in": "formData",
            "name": "notification_daily_send_time",
            "required": false,
            "type": "integer"
          },
          {
            "default": "John Doe",
            "description": "User's full name",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": "Internal notes on this user.",
            "description": "Any internal notes on the user",
            "in": "formData",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Number of days to allow user to use the same password",
            "format": "int32",
            "in": "formData",
            "name": "password_validity_days",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Should the user receive admin alerts such a certificate expiration notifications and overages?",
            "in": "formData",
            "name": "receive_admin_alerts",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is a password change required upon next user login?",
            "in": "formData",
            "name": "require_password_change",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can this user access the REST API?",
            "in": "formData",
            "name": "restapi_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Does this user manage it's own credentials or is it a shared/bot user?",
            "in": "formData",
            "name": "self_managed",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user access with SFTP?",
            "in": "formData",
            "name": "sftp_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is the user an administrator for this site?",
            "in": "formData",
            "name": "site_admin",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Skip Welcome page in the UI?",
            "in": "formData",
            "name": "skip_welcome_screen",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "always_require",
            "description": "SSL required setting",
            "enum": [
              "use_system_setting",
              "always_require",
              "never_require"
            ],
            "in": "formData",
            "name": "ssl_required",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "SSO (Single Sign On) strategy ID for the user, if applicable.",
            "format": "int32",
            "in": "formData",
            "name": "sso_strategy_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Is the user subscribed to the newsletter?",
            "in": "formData",
            "name": "subscribe_to_newsletter",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "Pacific Time (US & Canada)",
            "description": "User time zone",
            "in": "formData",
            "name": "time_zone",
            "required": false,
            "type": "string"
          },
          {
            "description": "Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.",
            "in": "formData",
            "name": "user_root",
            "required": false,
            "type": "string"
          },
          {
            "default": "user",
            "description": "User's username",
            "in": "formData",
            "name": "username",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Users object.",
            "schema": {
              "$ref": "#/definitions/UserEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "groups/:group_id/users"
        ]
      }
    },
    "/groups/{id}": {
      "delete": {
        "description": "Delete Group",
        "operationId": "deleteGroupsId",
        "parameters": [
          {
            "description": "Group ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "get": {
        "description": "Show Group",
        "operationId": "getGroupsId",
        "parameters": [
          {
            "description": "Group ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Groups object.",
            "schema": {
              "$ref": "#/definitions/GroupEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [
          "folder_admin"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Group",
        "operationId": "patchGroupsId",
        "parameters": [
          {
            "description": "Group ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Group name.",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group notes.",
            "in": "formData",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of user ids. If sent as a string, should be comma-delimited.",
            "in": "formData",
            "name": "user_ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of group admin user ids. If sent as a string, should be comma-delimited.",
            "in": "formData",
            "name": "admin_ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Groups object.",
            "schema": {
              "$ref": "#/definitions/GroupEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "groups"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/history": {
      "get": {
        "description": "List site full action history.",
        "operationId": "List",
        "parameters": [
          {
            "description": "Leave blank or set to a date/time to filter earlier entries.",
            "in": "query",
            "name": "start_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank or set to a date/time to filter later entries.",
            "in": "query",
            "name": "end_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Display format. Leave blank or set to `full` or `parent`.",
            "in": "query",
            "name": "display",
            "required": false,
            "type": "string"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of History objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ActionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "history"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/history/files(/*path)": {
      "get": {
        "description": "List history for specific file.",
        "operationId": "ListForFile",
        "parameters": [
          {
            "description": "Leave blank or set to a date/time to filter earlier entries.",
            "in": "query",
            "name": "start_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank or set to a date/time to filter later entries.",
            "in": "query",
            "name": "end_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Display format. Leave blank or set to `full` or `parent`.",
            "in": "query",
            "name": "display",
            "required": false,
            "type": "string"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Path to operate on.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of History objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ActionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "history"
        ],
        "x-authentication": []
      }
    },
    "/history/folders(/*path)": {
      "get": {
        "description": "List history for specific folder.",
        "operationId": "ListForFolder",
        "parameters": [
          {
            "description": "Leave blank or set to a date/time to filter earlier entries.",
            "in": "query",
            "name": "start_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank or set to a date/time to filter later entries.",
            "in": "query",
            "name": "end_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Display format. Leave blank or set to `full` or `parent`.",
            "in": "query",
            "name": "display",
            "required": false,
            "type": "string"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Path to operate on.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of History objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ActionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "history"
        ],
        "x-authentication": []
      }
    },
    "/history/login": {
      "get": {
        "description": "List site login history.",
        "operationId": "ListLogins",
        "parameters": [
          {
            "description": "Leave blank or set to a date/time to filter earlier entries.",
            "in": "query",
            "name": "start_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank or set to a date/time to filter later entries.",
            "in": "query",
            "name": "end_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Display format. Leave blank or set to `full` or `parent`.",
            "in": "query",
            "name": "display",
            "required": false,
            "type": "string"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of History objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ActionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "history"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/history/users/{user_id}": {
      "get": {
        "description": "List history for specific user.",
        "operationId": "ListForUser",
        "parameters": [
          {
            "description": "Leave blank or set to a date/time to filter earlier entries.",
            "in": "query",
            "name": "start_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank or set to a date/time to filter later entries.",
            "in": "query",
            "name": "end_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Display format. Leave blank or set to `full` or `parent`.",
            "in": "query",
            "name": "display",
            "required": false,
            "type": "string"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "User ID.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of History objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ActionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "history"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/history_exports": {
      "get": {
        "description": "List History Exports",
        "operationId": "getHistoryExports",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of HistoryExports objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/HistoryExportEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "history_exports"
        ],
        "x-authentication": []
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create History Export",
        "operationId": "postHistoryExports",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Start date/time of export range.",
            "format": "date-time",
            "in": "formData",
            "name": "start_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "End date/time of export range.",
            "format": "date-time",
            "in": "formData",
            "name": "end_at",
            "required": false,
            "type": "string"
          },
          {
            "default": "read",
            "description": "Filter results by this this action type. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`",
            "in": "formData",
            "name": "query_action",
            "required": false,
            "type": "string"
          },
          {
            "default": "ftp",
            "description": "Filter results by this this interface type. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`",
            "in": "formData",
            "name": "query_interface",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Return results that are actions performed by the user indiciated by this User ID",
            "format": "int32",
            "in": "formData",
            "name": "query_user_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Return results that are file actions related to the file indicated by this File ID",
            "format": "int32",
            "in": "formData",
            "name": "query_file_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Return results that are file actions inside the parent folder specified by this folder ID",
            "format": "int32",
            "in": "formData",
            "name": "query_parent_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "MyFile.txt",
            "description": "Return results that are file actions related to this path.",
            "in": "formData",
            "name": "query_path",
            "required": false,
            "type": "string"
          },
          {
            "default": "Folder",
            "description": "Return results that are file actions related to files or folders inside this folder path.",
            "in": "formData",
            "name": "query_folder",
            "required": false,
            "type": "string"
          },
          {
            "default": "SrcFolder",
            "description": "Return results that are file moves originating from this path.",
            "in": "formData",
            "name": "query_src",
            "required": false,
            "type": "string"
          },
          {
            "default": "DestFolder",
            "description": "Return results that are file moves with this path as destination.",
            "in": "formData",
            "name": "query_destination",
            "required": false,
            "type": "string"
          },
          {
            "default": "127.0.0.1",
            "description": "Filter results by this IP address.",
            "in": "formData",
            "name": "query_ip",
            "required": false,
            "type": "string"
          },
          {
            "default": "jerry",
            "description": "Filter results by this username.",
            "in": "formData",
            "name": "query_username",
            "required": false,
            "type": "string"
          },
          {
            "default": "bad_password",
            "description": "If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`",
            "in": "formData",
            "name": "query_failure_type",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID.",
            "format": "int32",
            "in": "formData",
            "name": "query_target_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "full",
            "description": "If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username.",
            "in": "formData",
            "name": "query_target_name",
            "required": false,
            "type": "string"
          },
          {
            "default": "full",
            "description": "If searching for Histories about Permisisons, this parameter restricts results to permissions of this level.",
            "in": "formData",
            "name": "query_target_permission",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID.",
            "format": "int32",
            "in": "formData",
            "name": "query_target_user_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "jerry",
            "description": "If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username.",
            "in": "formData",
            "name": "query_target_username",
            "required": false,
            "type": "string"
          },
          {
            "default": "windows",
            "description": "If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform.",
            "in": "formData",
            "name": "query_target_platform",
            "required": false,
            "type": "string"
          },
          {
            "default": "desktop_app",
            "description": "If searching for Histories about API keys, this parameter restricts results to API keys with this permission set.",
            "in": "formData",
            "name": "query_target_permission_set",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The HistoryExports object.",
            "schema": {
              "$ref": "#/definitions/HistoryExportEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "history_exports"
        ],
        "x-authentication": []
      }
    },
    "/history_exports/{id}": {
      "delete": {
        "description": "Delete History Export",
        "operationId": "deleteHistoryExportsId",
        "parameters": [
          {
            "description": "History Export ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "history_exports"
        ],
        "x-authentication": []
      },
      "get": {
        "description": "Show History Export",
        "operationId": "getHistoryExportsId",
        "parameters": [
          {
            "description": "History Export ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The HistoryExports object.",
            "schema": {
              "$ref": "#/definitions/HistoryExportEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "history_exports"
        ],
        "x-authentication": []
      }
    },
    "/invoices": {
      "get": {
        "description": "List Invoices",
        "operationId": "getInvoices",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Invoices objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/AccountLineItemEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "invoices"
        ],
        "x-authentication": [
          "overdue_ok",
          "billing"
        ]
      }
    },
    "/invoices/{id}": {
      "get": {
        "description": "Show Invoice",
        "operationId": "getInvoicesId",
        "parameters": [
          {
            "description": "Invoice ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Invoices object.",
            "schema": {
              "$ref": "#/definitions/AccountLineItemEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "invoices"
        ],
        "x-authentication": [
          "overdue_ok",
          "billing"
        ]
      }
    },
    "/ip_addresses": {
      "get": {
        "description": "List Ip Addresses",
        "operationId": "getIpAddresses",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of IpAddresses objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/IpAddressEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "ip_addresses"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ],
        "x-path_aliases": [
          "site/ip_addresses"
        ]
      }
    },
    "/locks/?*path": {
      "delete": {
        "description": "Delete Lock",
        "operationId": "locks._path.delete",
        "parameters": [
          {
            "description": "Path",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Lock token",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "locks"
        ],
        "x-authentication": [
          "desktop_app"
        ]
      },
      "get": {
        "description": "List Locks by path",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Path to operate on.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include locks from children objects?",
            "in": "query",
            "name": "include_children",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Locks objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/LockEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "locks"
        ],
        "x-authentication": [
          "desktop_app"
        ],
        "operationId": "locks._path.get"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Lock",
        "operationId": "locks._path.post",
        "parameters": [
          {
            "description": "Path",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Lock timeout length",
            "format": "int32",
            "in": "formData",
            "name": "timeout",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Locks object.",
            "schema": {
              "$ref": "#/definitions/LockEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "locks"
        ],
        "x-authentication": [
          "desktop_app"
        ]
      }
    },
    "/message_comment_reactions": {
      "get": {
        "description": "List Message Comment Reactions",
        "operationId": "getMessageCommentReactions",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Message comment to return reactions for.",
            "format": "int32",
            "in": "query",
            "name": "message_comment_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of MessageCommentReactions objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/MessageCommentReactionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_comment_reactions"
        ],
        "x-authentication": []
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Message Comment Reaction",
        "operationId": "postMessageCommentReactions",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Emoji to react with.",
            "in": "formData",
            "name": "emoji",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The MessageCommentReactions object.",
            "schema": {
              "$ref": "#/definitions/MessageCommentReactionEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_comment_reactions"
        ],
        "x-authentication": []
      }
    },
    "/message_comment_reactions/{id}": {
      "delete": {
        "description": "Delete Message Comment Reaction",
        "operationId": "deleteMessageCommentReactionsId",
        "parameters": [
          {
            "description": "Message Comment Reaction ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_comment_reactions"
        ],
        "x-authentication": []
      },
      "get": {
        "description": "Show Message Comment Reaction",
        "operationId": "getMessageCommentReactionsId",
        "parameters": [
          {
            "description": "Message Comment Reaction ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The MessageCommentReactions object.",
            "schema": {
              "$ref": "#/definitions/MessageCommentReactionEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_comment_reactions"
        ],
        "x-authentication": []
      }
    },
    "/message_comments": {
      "get": {
        "description": "List Message Comments",
        "operationId": "getMessageComments",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Message comment to return comments for.",
            "format": "int32",
            "in": "query",
            "name": "message_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of MessageComments objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/MessageCommentEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_comments"
        ],
        "x-authentication": []
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Message Comment",
        "operationId": "postMessageComments",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Comment body.",
            "in": "formData",
            "name": "body",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The MessageComments object.",
            "schema": {
              "$ref": "#/definitions/MessageCommentEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_comments"
        ],
        "x-authentication": []
      }
    },
    "/message_comments/{id}": {
      "delete": {
        "description": "Delete Message Comment",
        "operationId": "deleteMessageCommentsId",
        "parameters": [
          {
            "description": "Message Comment ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_comments"
        ],
        "x-authentication": []
      },
      "get": {
        "description": "Show Message Comment",
        "operationId": "getMessageCommentsId",
        "parameters": [
          {
            "description": "Message Comment ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The MessageComments object.",
            "schema": {
              "$ref": "#/definitions/MessageCommentEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_comments"
        ],
        "x-authentication": []
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Message Comment",
        "operationId": "patchMessageCommentsId",
        "parameters": [
          {
            "description": "Message Comment ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment body.",
            "in": "formData",
            "name": "body",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The MessageComments object.",
            "schema": {
              "$ref": "#/definitions/MessageCommentEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_comments"
        ],
        "x-authentication": []
      }
    },
    "/message_reactions": {
      "get": {
        "description": "List Message Reactions",
        "operationId": "getMessageReactions",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Message to return reactions for.",
            "format": "int32",
            "in": "query",
            "name": "message_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of MessageReactions objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/MessageReactionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_reactions"
        ],
        "x-authentication": []
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Message Reaction",
        "operationId": "postMessageReactions",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Emoji to react with.",
            "in": "formData",
            "name": "emoji",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The MessageReactions object.",
            "schema": {
              "$ref": "#/definitions/MessageReactionEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_reactions"
        ],
        "x-authentication": []
      }
    },
    "/message_reactions/{id}": {
      "delete": {
        "description": "Delete Message Reaction",
        "operationId": "deleteMessageReactionsId",
        "parameters": [
          {
            "description": "Message Reaction ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_reactions"
        ],
        "x-authentication": []
      },
      "get": {
        "description": "Show Message Reaction",
        "operationId": "getMessageReactionsId",
        "parameters": [
          {
            "description": "Message Reaction ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The MessageReactions object.",
            "schema": {
              "$ref": "#/definitions/MessageReactionEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "message_reactions"
        ],
        "x-authentication": []
      }
    },
    "/messages": {
      "get": {
        "description": "List Messages",
        "operationId": "getMessages",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Project to return messages for.",
            "format": "int32",
            "in": "query",
            "name": "project_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Messages objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/MessageEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "messages"
        ],
        "x-authentication": []
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Message",
        "operationId": "postMessages",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Project to attach the message to.",
            "format": "int32",
            "in": "formData",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Message subject.",
            "in": "formData",
            "name": "subject",
            "required": true,
            "type": "string"
          },
          {
            "description": "Message body.",
            "in": "formData",
            "name": "body",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Messages object.",
            "schema": {
              "$ref": "#/definitions/MessageEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "messages"
        ],
        "x-authentication": []
      }
    },
    "/messages/{id}": {
      "delete": {
        "description": "Delete Message",
        "operationId": "deleteMessagesId",
        "parameters": [
          {
            "description": "Message ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "messages"
        ],
        "x-authentication": []
      },
      "get": {
        "description": "Show Message",
        "operationId": "getMessagesId",
        "parameters": [
          {
            "description": "Message ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Messages object.",
            "schema": {
              "$ref": "#/definitions/MessageEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "messages"
        ],
        "x-authentication": []
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Message",
        "operationId": "patchMessagesId",
        "parameters": [
          {
            "description": "Message ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Project to attach the message to.",
            "format": "int32",
            "in": "formData",
            "name": "project_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Message subject.",
            "in": "formData",
            "name": "subject",
            "required": true,
            "type": "string"
          },
          {
            "description": "Message body.",
            "in": "formData",
            "name": "body",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Messages object.",
            "schema": {
              "$ref": "#/definitions/MessageEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "messages"
        ],
        "x-authentication": []
      }
    },
    "/notifications": {
      "get": {
        "description": "List Notifications",
        "operationId": "getNotifications",
        "parameters": [
          {
            "description": "Show notifications for this User ID.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Show notifications for this Group ID.",
            "format": "int32",
            "in": "query",
            "name": "group_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Notifications objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/NotificationEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "notifications"
        ],
        "x-authentication": []
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Notification",
        "operationId": "postNotifications",
        "parameters": [
          {
            "description": "The id of the user to notify. Provide `user_id`, `username` or `group_id`.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.",
            "in": "formData",
            "name": "notify_on_copy",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If `true` actions initiated by the user will still result in a notification",
            "in": "formData",
            "name": "notify_user_actions",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "daily",
            "description": "The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.",
            "in": "formData",
            "name": "send_interval",
            "required": false,
            "type": "string"
          },
          {
            "description": "The ID of the group to notify.  Provide `user_id`, `username` or `group_id`.",
            "format": "int32",
            "in": "formData",
            "name": "group_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Path",
            "in": "formData",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "The username of the user to notify.  Provide `user_id`, `username` or `group_id`.",
            "in": "formData",
            "name": "username",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Notifications object.",
            "schema": {
              "$ref": "#/definitions/NotificationEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "notifications"
        ],
        "x-authentication": []
      }
    },
    "/notifications/{id}": {
      "delete": {
        "description": "Delete Notification",
        "operationId": "deleteNotificationsId",
        "parameters": [
          {
            "description": "Notification ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "notifications"
        ],
        "x-authentication": []
      },
      "get": {
        "description": "Show Notification",
        "operationId": "getNotificationsId",
        "parameters": [
          {
            "description": "Notification ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Notifications object.",
            "schema": {
              "$ref": "#/definitions/NotificationEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "notifications"
        ],
        "x-authentication": []
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Notification",
        "operationId": "patchNotificationsId",
        "parameters": [
          {
            "description": "Notification ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.",
            "in": "formData",
            "name": "notify_on_copy",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If `true` actions initiated by the user will still result in a notification",
            "in": "formData",
            "name": "notify_user_actions",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "daily",
            "description": "The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.",
            "in": "formData",
            "name": "send_interval",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Notifications object.",
            "schema": {
              "$ref": "#/definitions/NotificationEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "notifications"
        ],
        "x-authentication": []
      }
    },
    "/payments": {
      "get": {
        "description": "List Payments",
        "operationId": "getPayments",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Payments objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/AccountLineItemEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "payments"
        ],
        "x-authentication": [
          "overdue_ok",
          "billing"
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "description": "Show Payment",
        "operationId": "getPaymentsId",
        "parameters": [
          {
            "description": "Payment ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Payments object.",
            "schema": {
              "$ref": "#/definitions/AccountLineItemEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "payments"
        ],
        "x-authentication": [
          "overdue_ok",
          "billing"
        ]
      }
    },
    "/permissions": {
      "get": {
        "description": "List Permissions",
        "operationId": "getPermissions",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Permission path.  If provided, will scope permissions to this path.",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID.  If provided, will scope permissions to this group.",
            "in": "query",
            "name": "group_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "User ID.  If provided, will scope permissions to this user.",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "If searching by user or group, also include user's permissions that are inherited from its groups?",
            "in": "query",
            "name": "include_groups",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Permissions objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PermissionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "permissions"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "groups/:group_id/permissions",
          "users/:user_id/permissions"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Permission",
        "operationId": "postPermissions",
        "parameters": [
          {
            "description": "Group ID",
            "format": "int32",
            "in": "formData",
            "name": "group_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Folder path",
            "in": "formData",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": " Permission type.  Can be `admin`, `full`, `readonly`, `writeonly`, `previewonly`, or `history`",
            "in": "formData",
            "name": "permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "Apply to subfolders recursively?",
            "in": "formData",
            "name": "recursive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "User ID.  Provide `username` or `user_id`",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User username.  Provide `username` or `user_id`",
            "in": "formData",
            "name": "username",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Permissions object.",
            "schema": {
              "$ref": "#/definitions/PermissionEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "permissions"
        ],
        "x-authentication": []
      }
    },
    "/permissions/{id}": {
      "delete": {
        "description": "Delete Permission",
        "operationId": "deletePermissionsId",
        "parameters": [
          {
            "description": "Permission ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "permissions"
        ],
        "x-authentication": []
      }
    },
    "/projects": {
      "get": {
        "description": "List Projects",
        "operationId": "getProjects",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Projects objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProjectEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "projects"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Project",
        "operationId": "postProjects",
        "parameters": [
          {
            "description": "Global permissions.  Can be: `none`, `anyone_with_read`, `anyone_with_full`.",
            "in": "formData",
            "name": "global_access",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Projects object.",
            "schema": {
              "$ref": "#/definitions/ProjectEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "projects"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/projects/{id}": {
      "delete": {
        "description": "Delete Project",
        "operationId": "deleteProjectsId",
        "parameters": [
          {
            "description": "Project ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "projects"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "get": {
        "description": "Show Project",
        "operationId": "getProjectsId",
        "parameters": [
          {
            "description": "Project ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Projects object.",
            "schema": {
              "$ref": "#/definitions/ProjectEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "projects"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Project",
        "operationId": "patchProjectsId",
        "parameters": [
          {
            "description": "Project ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Global permissions.  Can be: `none`, `anyone_with_read`, `anyone_with_full`.",
            "in": "formData",
            "name": "global_access",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Projects object.",
            "schema": {
              "$ref": "#/definitions/ProjectEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "projects"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/public_keys": {
      "get": {
        "description": "List Public Keys",
        "operationId": "getPublicKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of PublicKeys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PublicKeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "public_keys"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/public_keys",
          "users/:user_id/public_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Public Key",
        "operationId": "postPublicKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "My Main Key",
            "description": "Internal reference for key.",
            "in": "formData",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "description": "Actual contents of SSH key.",
            "in": "formData",
            "name": "public_key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The PublicKeys object.",
            "schema": {
              "$ref": "#/definitions/PublicKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "public_keys"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/public_keys",
          "users/:user_id/public_keys"
        ]
      }
    },
    "/public_keys/{id}": {
      "delete": {
        "description": "Delete Public Key",
        "operationId": "deletePublicKeysId",
        "parameters": [
          {
            "description": "Public Key ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "public_keys"
        ],
        "x-authentication": [
          "self_managed"
        ]
      },
      "get": {
        "description": "Show Public Key",
        "operationId": "getPublicKeysId",
        "parameters": [
          {
            "description": "Public Key ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The PublicKeys object.",
            "schema": {
              "$ref": "#/definitions/PublicKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "public_keys"
        ],
        "x-authentication": [
          "self_managed"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Public Key",
        "operationId": "patchPublicKeysId",
        "parameters": [
          {
            "description": "Public Key ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "My Main Key",
            "description": "Internal reference for key.",
            "in": "formData",
            "name": "title",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The PublicKeys object.",
            "schema": {
              "$ref": "#/definitions/PublicKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "public_keys"
        ],
        "x-authentication": [
          "self_managed"
        ]
      }
    },
    "/remote_servers": {
      "get": {
        "description": "List Remote Servers",
        "operationId": "getRemoteServers",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of RemoteServers objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/RemoteServerEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "remote_servers"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Remote Server",
        "operationId": "postRemoteServers",
        "parameters": [
          {
            "description": "AWS Access Key.",
            "in": "formData",
            "name": "aws_access_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "AWS secret key.",
            "in": "formData",
            "name": "aws_secret_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "Password if needed.",
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Private key if needed.",
            "in": "formData",
            "name": "private_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "A JSON file that contains the private key. To generate see https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey",
            "in": "formData",
            "name": "google_cloud_storage_credentials_json",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wasabi access key.",
            "in": "formData",
            "name": "wasabi_access_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wasabi secret key.",
            "in": "formData",
            "name": "wasabi_secret_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "Backblaze B2 Cloud Storage keyID.",
            "in": "formData",
            "name": "backblaze_b2_key_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Backblaze B2 Cloud Storage applicationKey.",
            "in": "formData",
            "name": "backblaze_b2_application_key",
            "required": false,
            "type": "string"
          },
          {
            "default": "remote-server.com",
            "description": "Hostname or IP address",
            "in": "formData",
            "name": "hostname",
            "required": false,
            "type": "string"
          },
          {
            "default": "My Remote server",
            "description": "Internal name for your reference",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).",
            "format": "int32",
            "in": "formData",
            "name": "max_connections",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Port for remote server.  Not needed for S3.",
            "format": "int32",
            "in": "formData",
            "name": "port",
            "required": false,
            "type": "integer"
          },
          {
            "default": "my-bucket",
            "description": "S3 bucket name",
            "in": "formData",
            "name": "s3_bucket",
            "required": false,
            "type": "string"
          },
          {
            "default": "us-east-1",
            "description": "S3 region",
            "in": "formData",
            "name": "s3_region",
            "required": false,
            "type": "string"
          },
          {
            "description": "Remote server certificate",
            "enum": [
              "require_match",
              "allow_any"
            ],
            "in": "formData",
            "name": "server_certificate",
            "required": false,
            "type": "string"
          },
          {
            "default": "[public key]",
            "description": "Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts",
            "in": "formData",
            "name": "server_host_key",
            "required": false,
            "type": "string"
          },
          {
            "default": "s3",
            "description": "Remote server type.",
            "enum": [
              "ftp",
              "sftp",
              "s3",
              "google_cloud_storage",
              "webdav",
              "wasabi",
              "backblaze_b2"
            ],
            "in": "formData",
            "name": "server_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Should we require SSL?",
            "enum": [
              "if_available",
              "require",
              "require_implicit",
              "never"
            ],
            "in": "formData",
            "name": "ssl",
            "required": false,
            "type": "string"
          },
          {
            "default": "user",
            "description": "Remote server username.  Not needed for S3 buckets.",
            "in": "formData",
            "name": "username",
            "required": false,
            "type": "string"
          },
          {
            "default": "my-bucket",
            "description": "Google Cloud Storage bucket name",
            "in": "formData",
            "name": "google_cloud_storage_bucket",
            "required": false,
            "type": "string"
          },
          {
            "default": "my-project",
            "description": "Google Cloud Project ID",
            "in": "formData",
            "name": "google_cloud_storage_project_id",
            "required": false,
            "type": "string"
          },
          {
            "default": "my-bucket",
            "description": "Backblaze B2 Cloud Storage Bucket name",
            "in": "formData",
            "name": "backblaze_b2_bucket",
            "required": false,
            "type": "string"
          },
          {
            "default": "s3.us-west-001.backblazeb2.com",
            "description": "Backblaze B2 Cloud Storage S3 Endpoint",
            "in": "formData",
            "name": "backblaze_b2_s3_endpoint",
            "required": false,
            "type": "string"
          },
          {
            "default": "us-west-1",
            "description": "Wasabi region",
            "in": "formData",
            "name": "wasabi_bucket",
            "required": false,
            "type": "string"
          },
          {
            "default": "my-bucket",
            "description": "Wasabi Bucket name",
            "in": "formData",
            "name": "wasabi_region",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The RemoteServers object.",
            "schema": {
              "$ref": "#/definitions/RemoteServerEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "remote_servers"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/remote_servers/{id}": {
      "delete": {
        "description": "Delete Remote Server",
        "operationId": "deleteRemoteServersId",
        "parameters": [
          {
            "description": "Remote Server ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "remote_servers"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "get": {
        "description": "Show Remote Server",
        "operationId": "getRemoteServersId",
        "parameters": [
          {
            "description": "Remote Server ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The RemoteServers object.",
            "schema": {
              "$ref": "#/definitions/RemoteServerEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "remote_servers"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Remote Server",
        "operationId": "patchRemoteServersId",
        "parameters": [
          {
            "description": "Remote Server ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "AWS Access Key.",
            "in": "formData",
            "name": "aws_access_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "AWS secret key.",
            "in": "formData",
            "name": "aws_secret_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "Password if needed.",
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Private key if needed.",
            "in": "formData",
            "name": "private_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "A JSON file that contains the private key. To generate see https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey",
            "in": "formData",
            "name": "google_cloud_storage_credentials_json",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wasabi access key.",
            "in": "formData",
            "name": "wasabi_access_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wasabi secret key.",
            "in": "formData",
            "name": "wasabi_secret_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "Backblaze B2 Cloud Storage keyID.",
            "in": "formData",
            "name": "backblaze_b2_key_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Backblaze B2 Cloud Storage applicationKey.",
            "in": "formData",
            "name": "backblaze_b2_application_key",
            "required": false,
            "type": "string"
          },
          {
            "default": "remote-server.com",
            "description": "Hostname or IP address",
            "in": "formData",
            "name": "hostname",
            "required": false,
            "type": "string"
          },
          {
            "default": "My Remote server",
            "description": "Internal name for your reference",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).",
            "format": "int32",
            "in": "formData",
            "name": "max_connections",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Port for remote server.  Not needed for S3.",
            "format": "int32",
            "in": "formData",
            "name": "port",
            "required": false,
            "type": "integer"
          },
          {
            "default": "my-bucket",
            "description": "S3 bucket name",
            "in": "formData",
            "name": "s3_bucket",
            "required": false,
            "type": "string"
          },
          {
            "default": "us-east-1",
            "description": "S3 region",
            "in": "formData",
            "name": "s3_region",
            "required": false,
            "type": "string"
          },
          {
            "description": "Remote server certificate",
            "enum": [
              "require_match",
              "allow_any"
            ],
            "in": "formData",
            "name": "server_certificate",
            "required": false,
            "type": "string"
          },
          {
            "default": "[public key]",
            "description": "Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts",
            "in": "formData",
            "name": "server_host_key",
            "required": false,
            "type": "string"
          },
          {
            "default": "s3",
            "description": "Remote server type.",
            "enum": [
              "ftp",
              "sftp",
              "s3",
              "google_cloud_storage",
              "webdav",
              "wasabi",
              "backblaze_b2"
            ],
            "in": "formData",
            "name": "server_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Should we require SSL?",
            "enum": [
              "if_available",
              "require",
              "require_implicit",
              "never"
            ],
            "in": "formData",
            "name": "ssl",
            "required": false,
            "type": "string"
          },
          {
            "default": "user",
            "description": "Remote server username.  Not needed for S3 buckets.",
            "in": "formData",
            "name": "username",
            "required": false,
            "type": "string"
          },
          {
            "default": "my-bucket",
            "description": "Google Cloud Storage bucket name",
            "in": "formData",
            "name": "google_cloud_storage_bucket",
            "required": false,
            "type": "string"
          },
          {
            "default": "my-project",
            "description": "Google Cloud Project ID",
            "in": "formData",
            "name": "google_cloud_storage_project_id",
            "required": false,
            "type": "string"
          },
          {
            "default": "my-bucket",
            "description": "Backblaze B2 Cloud Storage Bucket name",
            "in": "formData",
            "name": "backblaze_b2_bucket",
            "required": false,
            "type": "string"
          },
          {
            "default": "s3.us-west-001.backblazeb2.com",
            "description": "Backblaze B2 Cloud Storage S3 Endpoint",
            "in": "formData",
            "name": "backblaze_b2_s3_endpoint",
            "required": false,
            "type": "string"
          },
          {
            "default": "us-west-1",
            "description": "Wasabi region",
            "in": "formData",
            "name": "wasabi_bucket",
            "required": false,
            "type": "string"
          },
          {
            "default": "my-bucket",
            "description": "Wasabi Bucket name",
            "in": "formData",
            "name": "wasabi_region",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The RemoteServers object.",
            "schema": {
              "$ref": "#/definitions/RemoteServerEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "remote_servers"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/requests": {
      "get": {
        "description": "List Requests",
        "operationId": "getRequests",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show requests of the current user?  (Defaults to true if current user is not a site admin.)",
            "in": "query",
            "name": "mine",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Path to show requests for.  If omitted, shows all paths. Send `/` to represent the root directory.",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Requests objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/RequestEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "requests"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "requests/folders/*path"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Request",
        "operationId": "postRequests",
        "parameters": [
          {
            "description": "Folder path on which to request the file.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Destination filename (without extension) to request.",
            "in": "formData",
            "name": "destination",
            "required": true,
            "type": "string"
          },
          {
            "description": "A list of user IDs to request the file from. If sent as a string, it should be comma-delimited.",
            "in": "formData",
            "name": "user_ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "A list of group IDs to request the file from. If sent as a string, it should be comma-delimited.",
            "in": "formData",
            "name": "group_ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Requests object.",
            "schema": {
              "$ref": "#/definitions/RequestEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "requests"
        ],
        "x-authentication": []
      }
    },
    "/requests/folders/?*path": {
      "get": {
        "description": "List Requests",
        "operationId": "requests.folders._path.get",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only show requests of the current user?  (Defaults to true if current user is not a site admin.)",
            "in": "query",
            "name": "mine",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Path to show requests for.  If omitted, shows all paths. Send `/` to represent the root directory.",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Requests objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/RequestEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "requests"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "requests/folders/*path"
        ]
      }
    },
    "/requests/{id}": {
      "delete": {
        "description": "Delete Request",
        "operationId": "deleteRequestsId",
        "parameters": [
          {
            "description": "Request ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "requests"
        ],
        "x-authentication": []
      }
    },
    "/sessions": {
      "delete": {
        "description": "Delete user session (log out)",
        "operationId": "deleteSessions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "sessions"
        ],
        "x-authentication": []
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create user session (log in)",
        "operationId": "postSessions",
        "parameters": [
          {
            "default": "username",
            "description": "Username to sign in as",
            "in": "formData",
            "name": "username",
            "required": false,
            "type": "string"
          },
          {
            "default": "password",
            "description": "Password for sign in",
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "default": "123456",
            "description": "If this user has a 2FA device, provide its OTP or code here.",
            "in": "formData",
            "name": "otp",
            "required": false,
            "type": "string"
          },
          {
            "description": "Identifier for a partially-completed login",
            "in": "formData",
            "name": "partial_session_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Sessions object.",
            "schema": {
              "$ref": "#/definitions/SessionEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "sessions"
        ],
        "x-authentication": []
      }
    },
    "/site": {
      "get": {
        "description": "Show site settings",
        "operationId": "getSite",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Site object.",
            "schema": {
              "$ref": "#/definitions/SiteEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "site"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update site settings.",
        "operationId": "patchSite",
        "parameters": [
          {
            "description": "Site name",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Site subdomain",
            "in": "formData",
            "name": "subdomain",
            "required": false,
            "type": "string"
          },
          {
            "description": "Custom domain",
            "in": "formData",
            "name": "domain",
            "required": false,
            "type": "string"
          },
          {
            "description": "Main email for this site",
            "in": "formData",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Are manual Bundle names allowed?",
            "in": "formData",
            "name": "allow_bundle_names",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Site-wide Bundle expiration in days",
            "format": "int32",
            "in": "formData",
            "name": "bundle_expiration",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Notify site email of overages?",
            "in": "formData",
            "name": "overage_notify",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Will the welcome email be sent to new users?",
            "in": "formData",
            "name": "welcome_email_enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.",
            "in": "formData",
            "name": "ask_about_overwrites",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Show request access link for users without access?  Currently unused.",
            "in": "formData",
            "name": "show_request_access_link",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include this email in welcome emails if enabled",
            "in": "formData",
            "name": "welcome_email_cc",
            "required": false,
            "type": "string"
          },
          {
            "description": "Custom text send in user welcome email",
            "in": "formData",
            "name": "welcome_custom_text",
            "required": false,
            "type": "string"
          },
          {
            "description": "Site default language",
            "in": "formData",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "description": "Does FTP user Windows emulation mode?",
            "in": "formData",
            "name": "windows_mode_ftp",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Site default time zone",
            "in": "formData",
            "name": "default_time_zone",
            "required": false,
            "type": "string"
          },
          {
            "description": "Is the desktop app enabled?",
            "in": "formData",
            "name": "desktop_app",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is desktop app session IP pinning enabled?",
            "in": "formData",
            "name": "desktop_app_session_ip_pinning",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Desktop app session lifetime (in hours)",
            "format": "int32",
            "in": "formData",
            "name": "desktop_app_session_lifetime",
            "required": false,
            "type": "integer"
          },
          {
            "description": "If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.",
            "in": "formData",
            "name": "folder_permissions_groups_only",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Does the welcome screen appear?",
            "in": "formData",
            "name": "welcome_screen",
            "required": false,
            "type": "string"
          },
          {
            "description": "Session expiry in hours",
            "format": "double",
            "in": "formData",
            "name": "session_expiry",
            "required": false,
            "type": "number"
          },
          {
            "description": "Is SSL required?  Disabling this is insecure.",
            "in": "formData",
            "name": "ssl_required",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is TLS disabled(site setting)?",
            "in": "formData",
            "name": "tls_disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Will users be locked out after incorrect login attempts?",
            "in": "formData",
            "name": "user_lockout",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of login tries within `user_lockout_within` hours before users are locked out",
            "format": "int32",
            "in": "formData",
            "name": "user_lockout_tries",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of hours for user lockout window",
            "format": "int32",
            "in": "formData",
            "name": "user_lockout_within",
            "required": false,
            "type": "integer"
          },
          {
            "description": "How many hours to lock user out for failed password?",
            "format": "int32",
            "in": "formData",
            "name": "user_lockout_lock_period",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Include password in emails to new users?",
            "in": "formData",
            "name": "include_password_in_welcome_email",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "List of allowed IP addresses",
            "in": "formData",
            "name": "allowed_ips",
            "required": false,
            "type": "string"
          },
          {
            "description": "Number of days to keep deleted files",
            "format": "int32",
            "in": "formData",
            "name": "days_to_retain_backups",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of prior passwords to disallow",
            "format": "int32",
            "in": "formData",
            "name": "max_prior_passwords",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of days password is valid",
            "format": "int32",
            "in": "formData",
            "name": "password_validity_days",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Shortest password length for users",
            "format": "int32",
            "in": "formData",
            "name": "password_min_length",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Require a letter in passwords?",
            "in": "formData",
            "name": "password_require_letter",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Require lower and upper case letters in passwords?",
            "in": "formData",
            "name": "password_require_mixed",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Require special characters in password?",
            "in": "formData",
            "name": "password_require_special",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Require a number in passwords?",
            "in": "formData",
            "name": "password_require_number",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)",
            "in": "formData",
            "name": "password_require_unbreached",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Use user FTP roots also for SFTP?",
            "in": "formData",
            "name": "sftp_user_root_enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is password reset disabled?",
            "in": "formData",
            "name": "disable_password_reset",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Are files protected from modification?",
            "in": "formData",
            "name": "immutable_files",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)",
            "in": "formData",
            "name": "session_pinned_by_ip",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Do Bundles require password protection?",
            "in": "formData",
            "name": "bundle_password_required",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?",
            "in": "formData",
            "name": "password_requirements_apply_to_bundles",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Use servers in the USA only?",
            "in": "formData",
            "name": "opt_out_global",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Allow uploaders to set `provided_modified_at` for uploaded files?",
            "in": "formData",
            "name": "use_provided_modified_at",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is this site using a custom namespace for users?",
            "in": "formData",
            "name": "custom_namespace",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If greater than zero, users will unable to login if they do not show activity within this number of days.",
            "format": "int32",
            "in": "formData",
            "name": "disable_users_from_inactivity_period_days",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Is SMS two factor authentication allowed?",
            "in": "formData",
            "name": "allowed_2fa_method_sms",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is U2F two factor authentication allowed?",
            "in": "formData",
            "name": "allowed_2fa_method_u2f",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is TOTP two factor authentication allowed?",
            "in": "formData",
            "name": "allowed_2fa_method_totp",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is yubikey two factor authentication allowed?",
            "in": "formData",
            "name": "allowed_2fa_method_yubi",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Require two-factor authentication for all users?",
            "in": "formData",
            "name": "require_2fa",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?",
            "in": "formData",
            "name": "require_2fa_user_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Top bar background color",
            "in": "formData",
            "name": "color2_top",
            "required": false,
            "type": "string"
          },
          {
            "description": "Page link and button color",
            "in": "formData",
            "name": "color2_left",
            "required": false,
            "type": "string"
          },
          {
            "description": "Top bar link color",
            "in": "formData",
            "name": "color2_link",
            "required": false,
            "type": "string"
          },
          {
            "description": "Page link and button color",
            "in": "formData",
            "name": "color2_text",
            "required": false,
            "type": "string"
          },
          {
            "description": "Top bar text color",
            "in": "formData",
            "name": "color2_top_text",
            "required": false,
            "type": "string"
          },
          {
            "description": "Custom site header text",
            "in": "formData",
            "name": "site_header",
            "required": false,
            "type": "string"
          },
          {
            "description": "Custom site footer text",
            "in": "formData",
            "name": "site_footer",
            "required": false,
            "type": "string"
          },
          {
            "description": "Login help text",
            "in": "formData",
            "name": "login_help_text",
            "required": false,
            "type": "string"
          },
          {
            "description": "SMTP server hostname or IP",
            "in": "formData",
            "name": "smtp_address",
            "required": false,
            "type": "string"
          },
          {
            "description": "SMTP server authentication type",
            "in": "formData",
            "name": "smtp_authentication",
            "required": false,
            "type": "string"
          },
          {
            "description": "From address to use when mailing through custom SMTP",
            "in": "formData",
            "name": "smtp_from",
            "required": false,
            "type": "string"
          },
          {
            "description": "SMTP server username",
            "in": "formData",
            "name": "smtp_username",
            "required": false,
            "type": "string"
          },
          {
            "description": "SMTP server port",
            "format": "int32",
            "in": "formData",
            "name": "smtp_port",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Main LDAP setting: is LDAP enabled?",
            "in": "formData",
            "name": "ldap_enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "LDAP type",
            "in": "formData",
            "name": "ldap_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "LDAP host",
            "in": "formData",
            "name": "ldap_host",
            "required": false,
            "type": "string"
          },
          {
            "description": "LDAP backup host",
            "in": "formData",
            "name": "ldap_host_2",
            "required": false,
            "type": "string"
          },
          {
            "description": "LDAP backup host",
            "in": "formData",
            "name": "ldap_host_3",
            "required": false,
            "type": "string"
          },
          {
            "description": "LDAP port",
            "format": "int32",
            "in": "formData",
            "name": "ldap_port",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Use secure LDAP?",
            "in": "formData",
            "name": "ldap_secure",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Username for signing in to LDAP server.",
            "in": "formData",
            "name": "ldap_username",
            "required": false,
            "type": "string"
          },
          {
            "description": "LDAP username field",
            "in": "formData",
            "name": "ldap_username_field",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain name that will be appended to usernames",
            "in": "formData",
            "name": "ldap_domain",
            "required": false,
            "type": "string"
          },
          {
            "description": "Should we sync users from LDAP server?",
            "in": "formData",
            "name": "ldap_user_action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Should we sync groups from LDAP server?",
            "in": "formData",
            "name": "ldap_group_action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.",
            "in": "formData",
            "name": "ldap_user_include_groups",
            "required": false,
            "type": "string"
          },
          {
            "description": "Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.",
            "in": "formData",
            "name": "ldap_group_exclusion",
            "required": false,
            "type": "string"
          },
          {
            "description": "Comma or newline separated list of group names (with optional wildcards) to include when syncing.",
            "in": "formData",
            "name": "ldap_group_inclusion",
            "required": false,
            "type": "string"
          },
          {
            "description": "Base DN for looking up users in LDAP server",
            "in": "formData",
            "name": "ldap_base_dn",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "icon16_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "If true, will delete the file stored in icon16",
            "in": "formData",
            "name": "icon16_delete",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "icon32_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "If true, will delete the file stored in icon32",
            "in": "formData",
            "name": "icon32_delete",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "icon48_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "If true, will delete the file stored in icon48",
            "in": "formData",
            "name": "icon48_delete",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "icon128_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "If true, will delete the file stored in icon128",
            "in": "formData",
            "name": "icon128_delete",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "logo_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "If true, will delete the file stored in logo",
            "in": "formData",
            "name": "logo_delete",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If set to true, we will begin the process of disabling 2FA on this site.",
            "in": "formData",
            "name": "disable_2fa_with_delay",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "New LDAP password.",
            "in": "formData",
            "name": "ldap_password_change",
            "required": false,
            "type": "string"
          },
          {
            "description": "Confirm new LDAP password.",
            "in": "formData",
            "name": "ldap_password_change_confirmation",
            "required": false,
            "type": "string"
          },
          {
            "description": "Password for SMTP server.",
            "in": "formData",
            "name": "smtp_password",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Site object.",
            "schema": {
              "$ref": "#/definitions/SiteEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "site"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ],
        "x-reauthentication": {
          "params": [
            "email",
            "require_2fa",
            "require_2fa_user_type",
            "disable_2fa_with_delay"
          ],
          "required": true
        }
      }
    },
    "/site/api_keys": {
      "get": {
        "description": "List Api Keys",
        "operationId": "getSiteApiKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of ApiKeys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ApiKeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "site"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "site/api_keys",
          "user/api_keys",
          "users/:user_id/api_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Api Key",
        "operationId": "postSiteApiKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "My Key",
            "description": "Internal name for key.  For your reference only.",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank, or set to 'desktop_app' to restrict the key to only desktop app functions.",
            "in": "formData",
            "name": "permission_set",
            "required": false,
            "type": "string"
          },
          {
            "description": "Have the key expire at this date/time.",
            "in": "formData",
            "name": "expires_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The ApiKeys object.",
            "schema": {
              "$ref": "#/definitions/ApiKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "site"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "site/api_keys",
          "user/api_keys",
          "users/:user_id/api_keys"
        ]
      }
    },
    "/site/dns_records": {
      "get": {
        "description": "Show site DNS configuration.",
        "operationId": "getSiteDnsRecords",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of DnsRecords objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/DnsRecordEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "site"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ],
        "x-path_aliases": [
          "site/dns_records"
        ]
      }
    },
    "/site/ip_addresses": {
      "get": {
        "description": "List Ip Addresses",
        "operationId": "getSiteIpAddresses",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of IpAddresses objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/IpAddressEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "site"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ],
        "x-path_aliases": [
          "site/ip_addresses"
        ]
      }
    },
    "/site/test-webhook": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Test webhook.",
        "operationId": "postSiteTestWebhook",
        "parameters": [
          {
            "default": "https://www.site.com/...",
            "description": "URL for testing the webhook.",
            "in": "formData",
            "name": "url",
            "required": true,
            "type": "string"
          },
          {
            "default": "GET",
            "description": "HTTP method(GET or POST).",
            "in": "formData",
            "name": "method",
            "required": false,
            "type": "string"
          },
          {
            "default": "RAW",
            "description": "HTTP encoding method.  Can be JSON, XML, or RAW (form data).",
            "in": "formData",
            "name": "encoding",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Behaviors object.",
            "schema": {
              "$ref": "#/definitions/StatusEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "site"
        ],
        "x-authentication": [
          "folder_admin"
        ],
        "x-path_aliases": [
          "site/test-webhook"
        ]
      }
    },
    "/site/usage": {
      "get": {
        "description": "Get the most recent usage snapshot (usage data for billing purposes) for a Site.",
        "operationId": "getSiteUsage",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Site object.",
            "schema": {
              "$ref": "#/definitions/UsageSnapshotEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "site"
        ],
        "x-authentication": [
          "site",
          "overdue_ok",
          "billing"
        ]
      }
    },
    "/sso_strategies": {
      "get": {
        "description": "List Sso Strategies",
        "operationId": "getSsoStrategies",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of SsoStrategies objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/SsoStrategyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "sso_strategies"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/sso_strategies/{id}": {
      "get": {
        "description": "Show Sso Strategy",
        "operationId": "getSsoStrategiesId",
        "parameters": [
          {
            "description": "Sso Strategy ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The SsoStrategies object.",
            "schema": {
              "$ref": "#/definitions/SsoStrategyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "sso_strategies"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/styles/?*path": {
      "delete": {
        "description": "Delete Style",
        "operationId": "styles._path.delete",
        "parameters": [
          {
            "description": "Style path.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "styles"
        ],
        "x-authentication": [
          "site"
        ]
      },
      "get": {
        "description": "Show Style",
        "operationId": "styles._path.get",
        "parameters": [
          {
            "description": "Style path.",
            "in": "query",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Styles object.",
            "schema": {
              "$ref": "#/definitions/StyleEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "styles"
        ],
        "x-authentication": []
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update Style",
        "operationId": "styles._path.patch",
        "parameters": [
          {
            "description": "Style path.",
            "in": "formData",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "description": "Logo for custom branding.",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Styles object.",
            "schema": {
              "$ref": "#/definitions/StyleEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "styles"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/usage_daily_snapshots": {
      "get": {
        "description": "List Usage Daily Snapshots",
        "operationId": "getUsageDailySnapshots",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of UsageDailySnapshots objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/UsageDailySnapshotEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "usage_daily_snapshots"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/usage_snapshots": {
      "get": {
        "description": "List Usage Snapshots",
        "operationId": "getUsageSnapshots",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of UsageSnapshots objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/UsageSnapshotEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "usage_snapshots"
        ],
        "x-authentication": [
          "site"
        ]
      }
    },
    "/user": {
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update User",
        "operationId": "patchUser",
        "parameters": [
          {
            "description": "An image file for your user avatar.",
            "in": "formData",
            "name": "avatar_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "If true, the avatar will be deleted.",
            "in": "formData",
            "name": "avatar_delete",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Used for changing a password on an existing user.",
            "in": "formData",
            "name": "change_password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional, but if provided, we will ensure that it matches the value sent in `change_password`.",
            "in": "formData",
            "name": "change_password_confirmation",
            "required": false,
            "type": "string"
          },
          {
            "description": "User's email.",
            "in": "formData",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `preview`, or `history`.",
            "in": "formData",
            "name": "grant_permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID to associate this user with.",
            "format": "int32",
            "in": "formData",
            "name": "group_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "A list of group ids to associate this user with.  Comma delimited.",
            "in": "formData",
            "name": "group_ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "User password.",
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional, but if provided, we will ensure that it matches the value sent in `password`.",
            "in": "formData",
            "name": "password_confirmation",
            "required": false,
            "type": "string"
          },
          {
            "description": "Signifies that the user has read all the announcements in the UI.",
            "in": "formData",
            "name": "announcements_read",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "127.0.0.1",
            "description": "A list of allowed IPs if applicable.  Newline delimited",
            "in": "formData",
            "name": "allowed_ips",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can the user create Bundles (aka Share Links)?  This field will be aliased or renamed in the future to `bundles_permission`.",
            "in": "formData",
            "name": "attachments_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Scheduled Date/Time at which user will be deactivated",
            "format": "date-time",
            "in": "formData",
            "name": "authenticate_until",
            "required": false,
            "type": "string"
          },
          {
            "default": "password",
            "description": "How is this user authenticated?",
            "enum": [
              "password",
              "ldap",
              "sso",
              "none"
            ],
            "in": "formData",
            "name": "authentication_method",
            "required": false,
            "type": "string"
          },
          {
            "description": "Allow this user to perform operations on the account, payments, and invoices?",
            "in": "formData",
            "name": "billing_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Exempt this user from being disabled based on inactivity?",
            "in": "formData",
            "name": "bypass_inactive_disable",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Allow this user to skip site-wide IP blacklists?",
            "in": "formData",
            "name": "bypass_site_allowed_ips",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user connect with WebDAV?",
            "in": "formData",
            "name": "dav_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.",
            "in": "formData",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user access with FTP/FTPS?",
            "in": "formData",
            "name": "ftp_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "en",
            "description": "Preferred language",
            "in": "formData",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": 18,
            "description": "Hour of the day at which daily notifications should be sent. Can be in range 0 to 23",
            "format": "int32",
            "in": "formData",
            "name": "notification_daily_send_time",
            "required": false,
            "type": "integer"
          },
          {
            "default": "John Doe",
            "description": "User's full name",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": "Internal notes on this user.",
            "description": "Any internal notes on the user",
            "in": "formData",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Number of days to allow user to use the same password",
            "format": "int32",
            "in": "formData",
            "name": "password_validity_days",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Should the user receive admin alerts such a certificate expiration notifications and overages?",
            "in": "formData",
            "name": "receive_admin_alerts",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is a password change required upon next user login?",
            "in": "formData",
            "name": "require_password_change",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can this user access the REST API?",
            "in": "formData",
            "name": "restapi_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Does this user manage it's own credentials or is it a shared/bot user?",
            "in": "formData",
            "name": "self_managed",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user access with SFTP?",
            "in": "formData",
            "name": "sftp_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is the user an administrator for this site?",
            "in": "formData",
            "name": "site_admin",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Skip Welcome page in the UI?",
            "in": "formData",
            "name": "skip_welcome_screen",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "always_require",
            "description": "SSL required setting",
            "enum": [
              "use_system_setting",
              "always_require",
              "never_require"
            ],
            "in": "formData",
            "name": "ssl_required",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "SSO (Single Sign On) strategy ID for the user, if applicable.",
            "format": "int32",
            "in": "formData",
            "name": "sso_strategy_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Is the user subscribed to the newsletter?",
            "in": "formData",
            "name": "subscribe_to_newsletter",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "Pacific Time (US & Canada)",
            "description": "User time zone",
            "in": "formData",
            "name": "time_zone",
            "required": false,
            "type": "string"
          },
          {
            "description": "Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.",
            "in": "formData",
            "name": "user_root",
            "required": false,
            "type": "string"
          },
          {
            "default": "user",
            "description": "User's username",
            "in": "formData",
            "name": "username",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Users object.",
            "schema": {
              "$ref": "#/definitions/UserEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "user"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user"
        ],
        "x-reauthentication": {
          "params": [
            "password",
            "change_password",
            "email",
            "site_admin"
          ],
          "required": true
        }
      }
    },
    "/user/api_keys": {
      "get": {
        "description": "List Api Keys",
        "operationId": "getUserApiKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of ApiKeys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ApiKeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "user"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "site/api_keys",
          "user/api_keys",
          "users/:user_id/api_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Api Key",
        "operationId": "postUserApiKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "My Key",
            "description": "Internal name for key.  For your reference only.",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank, or set to 'desktop_app' to restrict the key to only desktop app functions.",
            "in": "formData",
            "name": "permission_set",
            "required": false,
            "type": "string"
          },
          {
            "description": "Have the key expire at this date/time.",
            "in": "formData",
            "name": "expires_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The ApiKeys object.",
            "schema": {
              "$ref": "#/definitions/ApiKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "user"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "site/api_keys",
          "user/api_keys",
          "users/:user_id/api_keys"
        ]
      }
    },
    "/user/as2_keys": {
      "get": {
        "description": "List As2 Keys",
        "operationId": "getUserAs2Keys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of As2Keys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/As2KeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "user"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/as2_keys",
          "users/:user_id/as2_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create As2 Key",
        "operationId": "postUserAs2Keys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "Test",
            "description": "AS2 Partnership Name",
            "in": "formData",
            "name": "as2_partnership_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Actual contents of Public key.",
            "in": "formData",
            "name": "public_key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The As2Keys object.",
            "schema": {
              "$ref": "#/definitions/As2KeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "user"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/as2_keys",
          "users/:user_id/as2_keys"
        ]
      }
    },
    "/user/groups": {
      "get": {
        "description": "List Group Users",
        "operationId": "getUserGroups",
        "parameters": [
          {
            "description": "User ID.  If provided, will return groups of which this user is a member.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID.  If provided, will return members of this group.",
            "format": "int32",
            "in": "query",
            "name": "group_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of GroupUsers objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupUserEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "user"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "user/groups",
          "users/:user_id/groups",
          "groups/:group_id/users"
        ]
      }
    },
    "/user/public_keys": {
      "get": {
        "description": "List Public Keys",
        "operationId": "getUserPublicKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of PublicKeys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PublicKeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "user"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/public_keys",
          "users/:user_id/public_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Public Key",
        "operationId": "postUserPublicKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "formData",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "My Main Key",
            "description": "Internal reference for key.",
            "in": "formData",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "description": "Actual contents of SSH key.",
            "in": "formData",
            "name": "public_key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The PublicKeys object.",
            "schema": {
              "$ref": "#/definitions/PublicKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "user"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/public_keys",
          "users/:user_id/public_keys"
        ]
      }
    },
    "/user_cipher_uses": {
      "get": {
        "description": "List User Cipher Uses",
        "operationId": "getUserCipherUses",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of UserCipherUses objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/UserCipherUseEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "user_cipher_uses"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "users/:user_id/cipher_uses"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "List Users",
        "operationId": "getUsers",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "List users matching username.",
            "in": "query",
            "name": "q[username]",
            "required": false,
            "type": "string"
          },
          {
            "description": "List users matching email.",
            "in": "query",
            "name": "q[email]",
            "required": false,
            "type": "string"
          },
          {
            "description": "List users matching notes field.",
            "in": "query",
            "name": "q[notes]",
            "required": false,
            "type": "string"
          },
          {
            "description": "If `true`, list only admin users.",
            "in": "query",
            "name": "q[admin]",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set, list only users with overridden allowed IP setting.",
            "in": "query",
            "name": "q[allowed_ips]",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set, list only users with overridden password validity days setting.",
            "in": "query",
            "name": "q[password_validity_days]",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set, list only users with overridden SSL required setting.",
            "in": "query",
            "name": "q[ssl_required]",
            "required": false,
            "type": "string"
          },
          {
            "description": "Searches for partial matches of name, username, or email.",
            "in": "query",
            "name": "search",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Users objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/UserEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "folder_admin",
          "overdue_ok"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create User",
        "operationId": "postUsers",
        "parameters": [
          {
            "description": "An image file for your user avatar.",
            "in": "formData",
            "name": "avatar_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "If true, the avatar will be deleted.",
            "in": "formData",
            "name": "avatar_delete",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Used for changing a password on an existing user.",
            "in": "formData",
            "name": "change_password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional, but if provided, we will ensure that it matches the value sent in `change_password`.",
            "in": "formData",
            "name": "change_password_confirmation",
            "required": false,
            "type": "string"
          },
          {
            "description": "User's email.",
            "in": "formData",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `preview`, or `history`.",
            "in": "formData",
            "name": "grant_permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID to associate this user with.",
            "format": "int32",
            "in": "formData",
            "name": "group_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "A list of group ids to associate this user with.  Comma delimited.",
            "in": "formData",
            "name": "group_ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "User password.",
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional, but if provided, we will ensure that it matches the value sent in `password`.",
            "in": "formData",
            "name": "password_confirmation",
            "required": false,
            "type": "string"
          },
          {
            "description": "Signifies that the user has read all the announcements in the UI.",
            "in": "formData",
            "name": "announcements_read",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "127.0.0.1",
            "description": "A list of allowed IPs if applicable.  Newline delimited",
            "in": "formData",
            "name": "allowed_ips",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can the user create Bundles (aka Share Links)?  This field will be aliased or renamed in the future to `bundles_permission`.",
            "in": "formData",
            "name": "attachments_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Scheduled Date/Time at which user will be deactivated",
            "format": "date-time",
            "in": "formData",
            "name": "authenticate_until",
            "required": false,
            "type": "string"
          },
          {
            "default": "password",
            "description": "How is this user authenticated?",
            "enum": [
              "password",
              "ldap",
              "sso",
              "none"
            ],
            "in": "formData",
            "name": "authentication_method",
            "required": false,
            "type": "string"
          },
          {
            "description": "Allow this user to perform operations on the account, payments, and invoices?",
            "in": "formData",
            "name": "billing_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Exempt this user from being disabled based on inactivity?",
            "in": "formData",
            "name": "bypass_inactive_disable",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Allow this user to skip site-wide IP blacklists?",
            "in": "formData",
            "name": "bypass_site_allowed_ips",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user connect with WebDAV?",
            "in": "formData",
            "name": "dav_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.",
            "in": "formData",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user access with FTP/FTPS?",
            "in": "formData",
            "name": "ftp_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "en",
            "description": "Preferred language",
            "in": "formData",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": 18,
            "description": "Hour of the day at which daily notifications should be sent. Can be in range 0 to 23",
            "format": "int32",
            "in": "formData",
            "name": "notification_daily_send_time",
            "required": false,
            "type": "integer"
          },
          {
            "default": "John Doe",
            "description": "User's full name",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": "Internal notes on this user.",
            "description": "Any internal notes on the user",
            "in": "formData",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Number of days to allow user to use the same password",
            "format": "int32",
            "in": "formData",
            "name": "password_validity_days",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Should the user receive admin alerts such a certificate expiration notifications and overages?",
            "in": "formData",
            "name": "receive_admin_alerts",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is a password change required upon next user login?",
            "in": "formData",
            "name": "require_password_change",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can this user access the REST API?",
            "in": "formData",
            "name": "restapi_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Does this user manage it's own credentials or is it a shared/bot user?",
            "in": "formData",
            "name": "self_managed",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user access with SFTP?",
            "in": "formData",
            "name": "sftp_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is the user an administrator for this site?",
            "in": "formData",
            "name": "site_admin",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Skip Welcome page in the UI?",
            "in": "formData",
            "name": "skip_welcome_screen",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "always_require",
            "description": "SSL required setting",
            "enum": [
              "use_system_setting",
              "always_require",
              "never_require"
            ],
            "in": "formData",
            "name": "ssl_required",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "SSO (Single Sign On) strategy ID for the user, if applicable.",
            "format": "int32",
            "in": "formData",
            "name": "sso_strategy_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Is the user subscribed to the newsletter?",
            "in": "formData",
            "name": "subscribe_to_newsletter",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "Pacific Time (US & Canada)",
            "description": "User time zone",
            "in": "formData",
            "name": "time_zone",
            "required": false,
            "type": "string"
          },
          {
            "description": "Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.",
            "in": "formData",
            "name": "user_root",
            "required": false,
            "type": "string"
          },
          {
            "default": "user",
            "description": "User's username",
            "in": "formData",
            "name": "username",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The Users object.",
            "schema": {
              "$ref": "#/definitions/UserEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "groups/:group_id/users"
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "description": "Delete User",
        "operationId": "deleteUsersId",
        "parameters": [
          {
            "description": "User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ],
        "x-reauthentication": {
          "always": true,
          "required": true
        }
      },
      "get": {
        "description": "Show User",
        "operationId": "getUsersId",
        "parameters": [
          {
            "description": "User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Users object.",
            "schema": {
              "$ref": "#/definitions/UserEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "folder_admin",
          "overdue_ok"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Update User",
        "operationId": "patchUsersId",
        "parameters": [
          {
            "description": "User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "An image file for your user avatar.",
            "in": "formData",
            "name": "avatar_file",
            "required": false,
            "type": "file"
          },
          {
            "description": "If true, the avatar will be deleted.",
            "in": "formData",
            "name": "avatar_delete",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Used for changing a password on an existing user.",
            "in": "formData",
            "name": "change_password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional, but if provided, we will ensure that it matches the value sent in `change_password`.",
            "in": "formData",
            "name": "change_password_confirmation",
            "required": false,
            "type": "string"
          },
          {
            "description": "User's email.",
            "in": "formData",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `preview`, or `history`.",
            "in": "formData",
            "name": "grant_permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID to associate this user with.",
            "format": "int32",
            "in": "formData",
            "name": "group_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "A list of group ids to associate this user with.  Comma delimited.",
            "in": "formData",
            "name": "group_ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "User password.",
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional, but if provided, we will ensure that it matches the value sent in `password`.",
            "in": "formData",
            "name": "password_confirmation",
            "required": false,
            "type": "string"
          },
          {
            "description": "Signifies that the user has read all the announcements in the UI.",
            "in": "formData",
            "name": "announcements_read",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "127.0.0.1",
            "description": "A list of allowed IPs if applicable.  Newline delimited",
            "in": "formData",
            "name": "allowed_ips",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can the user create Bundles (aka Share Links)?  This field will be aliased or renamed in the future to `bundles_permission`.",
            "in": "formData",
            "name": "attachments_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Scheduled Date/Time at which user will be deactivated",
            "format": "date-time",
            "in": "formData",
            "name": "authenticate_until",
            "required": false,
            "type": "string"
          },
          {
            "default": "password",
            "description": "How is this user authenticated?",
            "enum": [
              "password",
              "ldap",
              "sso",
              "none"
            ],
            "in": "formData",
            "name": "authentication_method",
            "required": false,
            "type": "string"
          },
          {
            "description": "Allow this user to perform operations on the account, payments, and invoices?",
            "in": "formData",
            "name": "billing_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Exempt this user from being disabled based on inactivity?",
            "in": "formData",
            "name": "bypass_inactive_disable",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Allow this user to skip site-wide IP blacklists?",
            "in": "formData",
            "name": "bypass_site_allowed_ips",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user connect with WebDAV?",
            "in": "formData",
            "name": "dav_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.",
            "in": "formData",
            "name": "disabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user access with FTP/FTPS?",
            "in": "formData",
            "name": "ftp_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "en",
            "description": "Preferred language",
            "in": "formData",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": 18,
            "description": "Hour of the day at which daily notifications should be sent. Can be in range 0 to 23",
            "format": "int32",
            "in": "formData",
            "name": "notification_daily_send_time",
            "required": false,
            "type": "integer"
          },
          {
            "default": "John Doe",
            "description": "User's full name",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": "Internal notes on this user.",
            "description": "Any internal notes on the user",
            "in": "formData",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Number of days to allow user to use the same password",
            "format": "int32",
            "in": "formData",
            "name": "password_validity_days",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Should the user receive admin alerts such a certificate expiration notifications and overages?",
            "in": "formData",
            "name": "receive_admin_alerts",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is a password change required upon next user login?",
            "in": "formData",
            "name": "require_password_change",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can this user access the REST API?",
            "in": "formData",
            "name": "restapi_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Does this user manage it's own credentials or is it a shared/bot user?",
            "in": "formData",
            "name": "self_managed",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Can the user access with SFTP?",
            "in": "formData",
            "name": "sftp_permission",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Is the user an administrator for this site?",
            "in": "formData",
            "name": "site_admin",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Skip Welcome page in the UI?",
            "in": "formData",
            "name": "skip_welcome_screen",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "always_require",
            "description": "SSL required setting",
            "enum": [
              "use_system_setting",
              "always_require",
              "never_require"
            ],
            "in": "formData",
            "name": "ssl_required",
            "required": false,
            "type": "string"
          },
          {
            "default": 1,
            "description": "SSO (Single Sign On) strategy ID for the user, if applicable.",
            "format": "int32",
            "in": "formData",
            "name": "sso_strategy_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Is the user subscribed to the newsletter?",
            "in": "formData",
            "name": "subscribe_to_newsletter",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "Pacific Time (US & Canada)",
            "description": "User time zone",
            "in": "formData",
            "name": "time_zone",
            "required": false,
            "type": "string"
          },
          {
            "description": "Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.",
            "in": "formData",
            "name": "user_root",
            "required": false,
            "type": "string"
          },
          {
            "default": "user",
            "description": "User's username",
            "in": "formData",
            "name": "username",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Users object.",
            "schema": {
              "$ref": "#/definitions/UserEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user"
        ],
        "x-reauthentication": {
          "params": [
            "password",
            "change_password",
            "email",
            "site_admin"
          ],
          "required": true
        }
      }
    },
    "/users/{id}/2fa/reset": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Trigger 2FA Reset process for user who has lost access to their existing 2FA methods.",
        "operationId": "postUsersId2faReset",
        "parameters": [
          {
            "description": "User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ],
        "x-reauthentication": {
          "always": true,
          "required": true
        }
      }
    },
    "/users/{id}/resend_welcome_email": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Resend user welcome email",
        "operationId": "postUsersIdResendWelcomeEmail",
        "parameters": [
          {
            "description": "User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ]
      }
    },
    "/users/{id}/unlock": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Unlock user who has been locked out due to failed logins.",
        "operationId": "postUsersIdUnlock",
        "parameters": [
          {
            "description": "User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No body."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "site",
          "overdue_ok"
        ]
      }
    },
    "/users/{user_id}/api_keys": {
      "get": {
        "description": "List Api Keys",
        "operationId": "getUsersUserIdApiKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of ApiKeys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ApiKeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "site/api_keys",
          "user/api_keys",
          "users/:user_id/api_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Api Key",
        "operationId": "postUsersUserIdApiKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "My Key",
            "description": "Internal name for key.  For your reference only.",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Leave blank, or set to 'desktop_app' to restrict the key to only desktop app functions.",
            "in": "formData",
            "name": "permission_set",
            "required": false,
            "type": "string"
          },
          {
            "description": "Have the key expire at this date/time.",
            "in": "formData",
            "name": "expires_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The ApiKeys object.",
            "schema": {
              "$ref": "#/definitions/ApiKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "site/api_keys",
          "user/api_keys",
          "users/:user_id/api_keys"
        ]
      }
    },
    "/users/{user_id}/as2_keys": {
      "get": {
        "description": "List As2 Keys",
        "operationId": "getUsersUserIdAs2Keys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of As2Keys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/As2KeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/as2_keys",
          "users/:user_id/as2_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create As2 Key",
        "operationId": "postUsersUserIdAs2Keys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "Test",
            "description": "AS2 Partnership Name",
            "in": "formData",
            "name": "as2_partnership_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Actual contents of Public key.",
            "in": "formData",
            "name": "public_key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The As2Keys object.",
            "schema": {
              "$ref": "#/definitions/As2KeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/as2_keys",
          "users/:user_id/as2_keys"
        ]
      }
    },
    "/users/{user_id}/cipher_uses": {
      "get": {
        "description": "List User Cipher Uses",
        "operationId": "getUsersUserIdCipherUses",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of UserCipherUses objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/UserCipherUseEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "users/:user_id/cipher_uses"
        ]
      }
    },
    "/users/{user_id}/groups": {
      "get": {
        "description": "List Group Users",
        "operationId": "getUsersUserIdGroups",
        "parameters": [
          {
            "description": "User ID.  If provided, will return groups of which this user is a member.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID.  If provided, will return members of this group.",
            "format": "int32",
            "in": "query",
            "name": "group_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of GroupUsers objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupUserEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "user/groups",
          "users/:user_id/groups",
          "groups/:group_id/users"
        ]
      }
    },
    "/users/{user_id}/permissions": {
      "get": {
        "description": "List Permissions",
        "operationId": "getUsersUserIdPermissions",
        "parameters": [
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "Permission path.  If provided, will scope permissions to this path.",
            "in": "query",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "Group ID.  If provided, will scope permissions to this group.",
            "in": "query",
            "name": "group_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "User ID.  If provided, will scope permissions to this user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "If searching by user or group, also include user's permissions that are inherited from its groups?",
            "in": "query",
            "name": "include_groups",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of Permissions objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PermissionEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [],
        "x-path_aliases": [
          "groups/:group_id/permissions",
          "users/:user_id/permissions"
        ]
      }
    },
    "/users/{user_id}/public_keys": {
      "get": {
        "description": "List Public Keys",
        "operationId": "getUsersUserIdPublicKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Current page number.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).",
            "format": "int32",
            "in": "query",
            "name": "per_page",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Deprecated: If set to `count` returns a count of matching records rather than the records themselves.",
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of PublicKeys objects.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PublicKeyEntity"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/public_keys",
          "users/:user_id/public_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "description": "Create Public Key",
        "operationId": "postUsersUserIdPublicKeys",
        "parameters": [
          {
            "description": "User ID.  Provide a value of `0` to operate the current session's user.",
            "format": "int32",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "My Main Key",
            "description": "Internal reference for key.",
            "in": "formData",
            "name": "title",
            "required": true,
            "type": "string"
          },
          {
            "description": "Actual contents of SSH key.",
            "in": "formData",
            "name": "public_key",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The PublicKeys object.",
            "schema": {
              "$ref": "#/definitions/PublicKeyEntity"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "423": {
            "description": "Locked"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "tags": [
          "users"
        ],
        "x-authentication": [
          "self_managed"
        ],
        "x-path_aliases": [
          "user/public_keys",
          "users/:user_id/public_keys"
        ]
      }
    }
  },
  "definitions": {
    "AccountLineItemEntity": {
      "description": "List Payments",
      "properties": {
        "amount": {
          "description": "Line item amount",
          "format": "double",
          "type": "number"
        },
        "balance": {
          "description": "Line item balance",
          "format": "double",
          "type": "number"
        },
        "created_at": {
          "description": "Line item created at",
          "format": "date-time",
          "type": "string"
        },
        "currency": {
          "description": "Line item currency",
          "example": "USD",
          "type": "string"
        },
        "download_uri": {
          "description": "Line item download uri",
          "example": "https://url...",
          "type": "string"
        },
        "id": {
          "description": "Line item Id",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "invoice_line_items": {
          "description": "Associated invoice line items",
          "items": {
            "$ref": "#/definitions/InvoiceLineItemEntity"
          },
          "type": "array"
        },
        "method": {
          "description": "Line item payment method",
          "example": "paypal",
          "type": "string"
        },
        "payment_line_items": {
          "description": "Associated payment line items",
          "items": {
            "$ref": "#/definitions/PaymentLineItemEntity"
          },
          "type": "array"
        },
        "payment_reversed_at": {
          "description": "Date/time payment was reversed if applicable",
          "format": "date-time",
          "type": "string"
        },
        "payment_type": {
          "description": "Type of payment if applicable",
          "example": "",
          "type": "string"
        },
        "site_name": {
          "description": "Site name this line item is for",
          "example": "My Site",
          "type": "string"
        },
        "type": {
          "description": "Type of line item, either payment or invoice",
          "example": "invoice",
          "type": "string"
        },
        "updated_at": {
          "description": "Line item updated at",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ActionEntity": {
      "description": "List site full action history.",
      "properties": {
        "action": {
          "description": "Type of action",
          "enum": [
            "create",
            "read",
            "update",
            "destroy",
            "move",
            "login",
            "failedlogin",
            "copy",
            "user_create",
            "user_update",
            "user_destroy",
            "group_create",
            "group_update",
            "group_destroy",
            "permission_create",
            "permission_destroy",
            "api_key_create",
            "api_key_update",
            "api_key_destroy"
          ],
          "example": "create",
          "type": "string"
        },
        "destination": {
          "description": "The destination path for this action, if applicable",
          "example": "/to_path",
          "type": "string"
        },
        "display": {
          "description": "Friendly displayed output",
          "example": "Actual text of the action here.",
          "type": "string"
        },
        "failure_type": {
          "description": "Failure type.  If action was a user login or session failure, why did it fail?",
          "enum": [
            "expired_trial",
            "account_overdue",
            "locked_out",
            "ip_mismatch",
            "password_mismatch",
            "site_mismatch",
            "username_not_found",
            "none",
            "no_ftp_permission",
            "no_web_permission",
            "no_directory",
            "errno_enoent",
            "no_sftp_permission",
            "no_dav_permission",
            "no_restapi_permission",
            "key_mismatch",
            "region_mismatch",
            "expired_access",
            "desktop_ip_mismatch",
            "desktop_api_key_not_used_quickly_enough",
            "disabled"
          ],
          "example": "none",
          "type": "string"
        },
        "id": {
          "description": "Action ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "interface": {
          "description": "Interface on which this action occurred.",
          "enum": [
            "web",
            "ftp",
            "robot",
            "jsapi",
            "webdesktopapi",
            "sftp",
            "dav",
            "desktop",
            "restapi",
            "scim"
          ],
          "example": "web",
          "type": "string"
        },
        "ip": {
          "description": "IP Address that performed this action",
          "example": "192.283.128.182",
          "type": "string"
        },
        "path": {
          "description": "Path",
          "example": "path",
          "type": "string"
        },
        "source": {
          "description": "The source path for this action, if applicable",
          "example": "/from_path",
          "type": "string"
        },
        "targets": {
          "description": "Targets",
          "items": {
            "example": [],
            "type": "string"
          },
          "type": "array"
        },
        "user_id": {
          "description": "User ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "username": {
          "description": "Username",
          "example": "user",
          "type": "string"
        },
        "when": {
          "description": "Action occurrence date/time",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "All File and Login actions on Files.com are recorded and can be queried via our History API.\n"
    },
    "ApiKeyEntity": {
      "description": "List Api Keys",
      "properties": {
        "created_at": {
          "description": "Time which API Key was created",
          "format": "date-time",
          "type": "string"
        },
        "descriptive_label": {
          "description": "Unique label that describes this API key.  Useful for external systems where you may have API keys from multiple accounts and want a human-readable label for each key.",
          "example": "Site-wide API key for https://site.files.com/ (key ID #1)",
          "type": "string"
        },
        "expires_at": {
          "description": "API Key expiration date",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "API Key ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "key": {
          "description": "API Key actual key string",
          "example": "[key]",
          "type": "string"
        },
        "last_use_at": {
          "description": "API Key last used - note this value is only updated once per 3 hour period, so the 'actual' time of last use may be up to 3 hours later than this timestamp.",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "Internal name for the API Key.  For your use.",
          "example": "My Main API Key",
          "type": "string"
        },
        "permission_set": {
          "description": "Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations.)  We hope to offer additional permission sets in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.",
          "enum": [
            "none",
            "full",
            "desktop_app",
            "sync_app"
          ],
          "example": "full",
          "type": "string"
        },
        "platform": {
          "description": "If this API key represents a Desktop app, what platform was it created on?",
          "example": "win32",
          "type": "string"
        },
        "user_id": {
          "description": "User ID for the owner of this API Key.  May be blank for Site-wide API Keys.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-docs": "API Keys allow programmatic access to your Site.\nAPI keys confer all the permissions of the user who owns them.\nIf an API key is created without a user owner, it is considered a site-wide API key, which has full permissions to do anything on the Site.\n"
    },
    "As2KeyEntity": {
      "description": "List As2 Keys",
      "properties": {
        "as2_partnership_name": {
          "description": "AS2 Partnership Name",
          "example": "Test",
          "type": "string"
        },
        "created_at": {
          "description": "AS2 Key created at date/time",
          "format": "date-time",
          "type": "string"
        },
        "fingerprint": {
          "description": "Public key fingerprint",
          "example": "cf:cb:d3:26:52:6c:55:88:83:17:13:cf:e7:70:eb:1b:32:37:38:c0",
          "type": "string"
        },
        "id": {
          "description": "AS2 Key ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-docs": "AS2 Public keys are used by Users who want to connect an AS2 (Applicability Statement v2) compatible client.\n"
    },
    "AutoEntity": {
      "properties": {
        "dynamic": {
          "description": "Additional data",
          "properties": {},
          "type": "object"
        }
      },
      "type": "object"
    },
    "AutomationEntity": {
      "description": "List Automations",
      "properties": {
        "automation": {
          "description": "Automation type",
          "enum": [
            "create_folder",
            "request_file",
            "request_move"
          ],
          "example": "create_folder",
          "type": "string"
        },
        "destination": {
          "description": "Destination Path",
          "example": "",
          "type": "string"
        },
        "destination_replace_from": {
          "description": "If set, this string in the destination path will be replaced with the value in `destination_replace_to`.",
          "example": "",
          "type": "string"
        },
        "destination_replace_to": {
          "description": "If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.",
          "example": "",
          "type": "string"
        },
        "group_ids": {
          "description": "IDs of Groups for the Automation (i.e. who to Request File from)",
          "items": {
            "example": [
              1,
              2
            ],
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "id": {
          "description": "Automation ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "interval": {
          "description": "How often to run this automation?  One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`",
          "example": "week",
          "type": "string"
        },
        "next_process_on": {
          "description": "Date this automation will next run.",
          "example": "2020-01-01",
          "type": "string"
        },
        "path": {
          "description": "Path on which this Automation runs.  Supports globs.",
          "example": "",
          "type": "string"
        },
        "realtime": {
          "description": "Does this automation run in real time?  This is a read-only property based on automation type.",
          "type": "boolean"
        },
        "source": {
          "description": "Source Path",
          "example": "",
          "type": "string"
        },
        "user_id": {
          "description": "User ID of the Automation's creator.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "user_ids": {
          "description": "IDs of Users for the Automation (i.e. who to Request File from)",
          "items": {
            "example": [
              1,
              2
            ],
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-docs": "Automations allow you to automate workflows on your Files.com site.\n\nAutomations are different from Behaviors because Behaviors are associated with a current folder, while Automations apply across your entire site.\nAlthough Automations may have a Path specified, it can be a glob (which includes wildcards), which affects multiple folders.\nAdditionally, paths in Automations can refer to folders which don't yet exist.\n\nAutomations are never removed when folders are removed, while Behaviors are removed when the associated folder is removed.\n\n\n## Automation Types\n\nThere are currently three types of automations:  Create Folder, Request File, and Request Move.\n\n\n### Create Folder Automation\n\nThe Create Folder automation creates folders on a schedule.\n\nExample Use case:  Our business files sales tax for each division in 11 states every quarter.\nI want to create the folders where those sales tax forms and data will be collected.\n\nI could create a Create Folder automation as follows:\n\n* Interval: `quarter_end`\n* Path: `/AccountingAndTax/SalesTax/State/*/`\n* Destination: `%Y/Quarter-ending-%m-%d`\n\n\n### Request File Automation\n\nThe Request File automation requests a file (optionally from a specific user) if it does not exist.\n\nExample Use case: Continuing our Sales Tax example from above, once the folders are\ncreated for the 11 states, our Bookkeeper needs to upload a `.xlsx` file\ncontaining the sales records for each state.\n\nWe can create a Request File automation as follows:\n\n* Path: `/AccountingAndTax/SalesTax/State/*/*/*/`\n* Destination: `SalesByState-%p3-%p2-%p1`\n* Group IDs: `123` (representing the Bookkeepers group)\n\nNote that the %p1, %p2 amd %p3 are references back into the folder hierarchy\n(parent 1, parent 2, etc), so that the file will be named with the state\nname and the quarter name in the file.  Example: `SalesByState-NV-2017-Quarter-ending-Dec-31.xlsx`\n\nNow, let's say that our Tax Accountant is in charge of filing the actual\nstate tax return once the Excel doc is completed by the Bookkeeper.  We\ncan create another Automation to let him know when it's his turn\nto operate:\n\n* Path: `/AccountingAndTax/SalesTax/State/*/*/%/`\n* Source: `SalesByState-%p3-%p2-%p1`\n* Destination: `StateSalesTaxReturn-Unsigned-%p3-%p2-%p1`\n* Group IDs: `124` (representing the Tax Accountants group)\n    Group: Tax Accountants\n\nSo the accountant will take the excel from the bookkeeper, generate the\nstate tax return, and then upload it as a PDF, ready for the CFO to\nsign.  How does the CFO know when to sign?  You guessed it, another\nAutomation will let him know when it's ready:\n\n* Path: `/AccountingAndTax/**/`\n* Source: `*-Unsigned-*`\n* Destination Replace From: `-Unsigned-`\n* Destination Replace To: `-Signed-`\n* Group IDs: `125` (representing the CFO group)\n\nThis Automation looks in every nested subfolder of `AcccountingAndTax`\n(that's the `/**/` in the path).  And it looks for any filename containing\nthe filename string `-Unsigned-`.  That's the cue to the CFO that something needs his\nsignature.\n\nRather than specifying the exact destination filename, we can specify a Destination Replace From\nand To in order to generate the new filename from the old filename.\n\nSo if `StateSalesTaxReturn-Unsigned-NV-2017-q4.pdf` is uploaded, this\nAutomation will trigger and expect the file `StateSalesTaxReturn-Signed-NV-2017-q4.pdf`\nfrom the CFO.\n\nYou could then put in place another rule for the Tax Accountant or\nBookkeeper to go do the actual filing once a signature is in place.\n\n\n### Request Move Automation\n\nThe Request Move automation requests that a file be moved.  This is an alternate way to implement approval workflows.\n\nA variant of the Request File automation, this Automation creates requests that a\nuser or group move a file, presumably indicating that they've taken some action on it.\n\nExample Use case: Action Verb uses Files.com to collect invoices from its Contractors, who\nupload new invoices into their own folder structure that only they have\npermissions to.  That structure looks like this:\n\n* `/Accounts Payable/Contractors/[contractor]/New/`\n* `/Accounts Payable/Contractors/[contractor]/Paid/`\n\nThe contractor has full permissions to the `New/` folder, but only\nread-only permissions to `Paid/`.  This allows them to upload and update\nnew invoices, but only view invoices that are already paid.  (Cool!)\n\nBut, as we grow to dozens of contractors, it becomes a tough task for\nAccounts Payable to check all the New folders daily.\n\nTo ensure Contractors get paid timely, we might set up Request Move automation:\n\n* Path: `/AccountsPayable/Contractors/*/New/`\n* Source: `*`\n* Destination: `../Paid/`\n* Group IDs: `126` (representing the Accounts Payable group)\n\n\n### Help us build the future of Automations\n\nDo you have an idea for something that would work well as a Files.com Automation?  Let us know!\nWe are actively improving the types of automations offered on our platform.\n"
    },
    "BehaviorEntity": {
      "description": "List Behaviors",
      "properties": {
        "attachment_url": {
          "description": "URL for attached file",
          "type": "string"
        },
        "behavior": {
          "description": "Behavior type.",
          "example": "webhook",
          "type": "string"
        },
        "id": {
          "description": "Folder behavior ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "Folder path",
          "example": "",
          "type": "string"
        },
        "value": {
          "description": "Settings for this behavior.  See the section above for an example value to provide here.  Formatting is different for each Behavior type.  May be sent as nested JSON or a single JSON-encoded string.  If using XML encoding for the API call, this data must be sent as a JSON-encoded string.",
          "example": "{ \"method\": \"GET\" }",
          "type": "object"
        }
      },
      "type": "object",
      "x-docs": "Behaviors are the API resource for what are also known as Folder Settings.  Every behavior is associated with a folder.\n\nDepending on the behavior, it may also operate on child folders.  It may be overridable at the child folder level or maybe can be added to at the child folder level.  The exact options for each behavior type are explained in the table below.\n\nAdditionally, some behaviors are visible to non-admins, and others are even settable by non-admins.  All the details are below.\n\nEach behavior uses a different format for storings its settings value.  Next to each behavior type is an example value.  Our API and SDKs currently require that the value for behaviors be sent as raw JSON within the `value` field.  Our SDK generator and API documentation generator doesn't fully keep up with this requirement, so if you need any help finding the exact syntax to use for your language or use case, just reach out.\n"
    },
    "BundleEntity": {
      "description": "List Bundles",
      "properties": {
        "code": {
          "description": "Bundle code.  This code forms the end part of the Public URL.",
          "example": "abc123",
          "type": "string"
        },
        "created_at": {
          "description": "Bundle created at date/time",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "Public description",
          "example": "The public description of the bundle.",
          "type": "string"
        },
        "expires_at": {
          "description": "Bundle expiration date/time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Bundle ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "note": {
          "description": "Bundle internal note",
          "example": "The internal note on the bundle.",
          "type": "string"
        },
        "password_protected": {
          "description": "Is this bundle password protected?",
          "type": "boolean"
        },
        "paths": {
          "description": "A list of paths in this bundle",
          "items": {
            "example": [
              "file.txt"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "url": {
          "description": "Public URL of Share Link",
          "example": "https://subdomain.files.com/f/12345678",
          "type": "string"
        },
        "user_id": {
          "description": "Bundle creator user ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "username": {
          "description": "Bundle creator username",
          "example": "user",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "Bundles are the API/SDK term for the feature called Share Links in the web interface.\nThe API provides the full set of actions related to Share Links, including sending them via E-Mail.\n\nPlease note that we very closely monitor the E-Mailing feature and any abuse will result in disabling of your site.\n"
    },
    "DnsRecordEntity": {
      "description": "Show site DNS configuration.",
      "properties": {
        "domain": {
          "description": "DNS record domain name",
          "example": "my-custom-domain.com",
          "type": "string"
        },
        "id": {
          "description": "Unique label for DNS record; used by Zapier and other integrations.",
          "example": "customdomain.com-CNAME-site.files.com",
          "type": "string"
        },
        "rrtype": {
          "description": "DNS record type",
          "example": "CNAME",
          "type": "string"
        },
        "value": {
          "description": "DNS record value",
          "example": "mysite.files.com",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "This resource allows retrieving the DNS records that are needed to configure custom DNS for a Site.\n"
    },
    "ErrorsEntity": {
      "properties": {
        "fields": {
          "description": "A list of fields where errors occur",
          "items": {
            "example": [],
            "type": "string"
          },
          "type": "array"
        },
        "messages": {
          "description": "A list of error messages",
          "items": {
            "example": [],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "FileCommentEntity": {
      "description": "List File Comments by path",
      "properties": {
        "body": {
          "description": "Comment body.",
          "example": "What a great file!",
          "type": "string"
        },
        "id": {
          "description": "File Comment ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "reactions": {
          "description": "Reactions to this comment.",
          "items": {
            "$ref": "#/definitions/FileCommentReactionEntity"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-docs": "File Comments are comments attached to a file by a user.\n"
    },
    "FileCommentReactionEntity": {
      "description": "Create File Comment Reaction",
      "properties": {
        "emoji": {
          "description": "Emoji used in the reaction.",
          "example": "👍",
          "type": "string"
        },
        "id": {
          "description": "Reaction ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-docs": "File Comment Reactionss are reactions that are attached to a comment on a file.\n"
    },
    "FileEntity": {
      "description": "List Folders by path",
      "properties": {
        "crc32": {
          "description": "File CRC32 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.",
          "example": "70976923",
          "type": "string"
        },
        "display_name": {
          "description": "File/Folder display name",
          "example": "file.txt",
          "type": "string"
        },
        "download_uri": {
          "description": "Link to download file. Provided only in response to a download request.",
          "example": "https://mysite.files.com/...",
          "type": "string"
        },
        "id": {
          "description": "File/Folder ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "md5": {
          "description": "File MD5 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.",
          "example": "17c54824e9931a4688ca032d03f6663c",
          "type": "string"
        },
        "mime_type": {
          "description": "MIME Type.  This is determined by the filename extension and is not stored separately internally.",
          "example": "application/octet-stream",
          "type": "string"
        },
        "mtime": {
          "description": "File last modified date/time, according to the server.  This is the timestamp of the last Files.com operation of the file, regardless of what modified timestamp was sent.",
          "format": "date-time",
          "type": "string"
        },
        "path": {
          "description": "File/Folder path",
          "example": "path/file.txt",
          "type": "string"
        },
        "permissions": {
          "description": "A short string representing the current user's permissions.  Can be `r`,`w`,`p`, or any combination",
          "example": "rpw",
          "type": "string"
        },
        "preview": {
          "$ref": "#/definitions/PreviewEntity",
          "description": "File preview"
        },
        "preview_id": {
          "description": "File preview ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "priority_color": {
          "description": "Bookmark/priority color of file/folder",
          "example": "red",
          "type": "string"
        },
        "provided_mtime": {
          "description": "File last modified date/time, according to the client who set it.  Files.com allows desktop, FTP, SFTP, and WebDAV clients to set modified at times.  This allows Desktop<->Cloud syncing to preserve modified at times.",
          "format": "date-time",
          "type": "string"
        },
        "region": {
          "description": "Region location",
          "example": "us-east-1",
          "type": "string"
        },
        "size": {
          "description": "File/Folder size",
          "example": 1024,
          "format": "int32",
          "type": "integer"
        },
        "subfolders_locked?": {
          "description": "Are subfolders locked and unable to be modified?",
          "type": "boolean"
        },
        "type": {
          "description": "Type: `directory` or `file`.",
          "example": "file",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FilePartUploadEntity": {
      "description": "Begin file upload",
      "properties": {
        "action": {
          "description": "Type of upload",
          "example": "upload/direct",
          "type": "string"
        },
        "ask_about_overwrites": {
          "description": "If false, rename conflicting files instead of asking for overwrite confirmation",
          "type": "boolean"
        },
        "available_parts": {
          "description": "Currently unused",
          "example": "",
          "type": "string"
        },
        "expires": {
          "description": "Currently unused",
          "example": "",
          "type": "string"
        },
        "headers": {
          "description": "Additional upload headers",
          "type": "object"
        },
        "http_method": {
          "description": "Upload method, usually POST",
          "example": "POST",
          "type": "string"
        },
        "next_partsize": {
          "description": "Currently unused",
          "example": "",
          "type": "string"
        },
        "parameters": {
          "description": "Additional upload parameters",
          "example": "",
          "type": "string"
        },
        "part_number": {
          "description": "Currently unused",
          "example": "",
          "type": "string"
        },
        "partsize": {
          "description": "Currently unused",
          "example": "",
          "type": "string"
        },
        "path": {
          "description": "Upload path",
          "example": "path",
          "type": "string"
        },
        "ref": {
          "description": "Reference name for this upload part",
          "example": "upload-1",
          "type": "string"
        },
        "send": {
          "description": "Content-Type and File to send",
          "type": "object"
        },
        "upload_uri": {
          "description": "URI to upload this part to",
          "example": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupEntity": {
      "description": "List Groups",
      "properties": {
        "admin_ids": {
          "description": "List of user IDs who are group administrators (separated by commas)",
          "items": {
            "example": [
              1
            ],
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "Group ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Group name",
          "example": "owners",
          "type": "string"
        },
        "notes": {
          "description": "Notes about this group",
          "example": "",
          "type": "string"
        },
        "user_ids": {
          "description": "List of user IDs who belong to this group (separated by commas)",
          "items": {
            "example": [
              1
            ],
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "usernames": {
          "description": "List of usernames who belong to this group (separated by commas)",
          "items": {
            "example": [
              "user"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-docs": "Groups are a powerful tool for permissions and user management on Files.com.  Users can belong to multiple groups.\n\nAll permissions can be managed via Groups, and Groups can also be synced to your identity platform via LDAP or SCIM.\n\nFiles.com's Group Admin feature allows you to define Group Admins, who then have access to add and remove users within their groups.\n"
    },
    "GroupUserEntity": {
      "description": "List Group Users",
      "properties": {
        "admin": {
          "description": "Is this user an administrator of this group?",
          "type": "boolean"
        },
        "id": {
          "description": "Group ID",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Group name",
          "example": "My Group",
          "type": "string"
        },
        "usernames": {
          "description": "A list of usernames for users in this group",
          "items": {
            "example": [
              "user"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-docs": "A GroupUser describes the membership of a User within a Group.\n"
    },
    "HistoryExportEntity": {
      "description": "List History Exports",
      "properties": {
        "end_at": {
          "description": "End date/time of export range.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "History Export ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "query_action": {
          "description": "Filter results by this this action type. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`",
          "example": "read",
          "type": "string"
        },
        "query_destination": {
          "description": "Return results that are file moves with this path as destination.",
          "example": "DestFolder",
          "type": "string"
        },
        "query_failure_type": {
          "description": "If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`",
          "example": "bad_password",
          "type": "string"
        },
        "query_file_id": {
          "description": "Return results that are file actions related to the file indicated by this File ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "query_folder": {
          "description": "Return results that are file actions related to files or folders inside this folder path.",
          "example": "Folder",
          "type": "string"
        },
        "query_interface": {
          "description": "Filter results by this this interface type. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`",
          "example": "ftp",
          "type": "string"
        },
        "query_ip": {
          "description": "Filter results by this IP address.",
          "example": "127.0.0.1",
          "type": "string"
        },
        "query_parent_id": {
          "description": "Return results that are file actions inside the parent folder specified by this folder ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "query_path": {
          "description": "Return results that are file actions related to this path.",
          "example": "MyFile.txt",
          "type": "string"
        },
        "query_src": {
          "description": "Return results that are file moves originating from this path.",
          "example": "SrcFolder",
          "type": "string"
        },
        "query_target_id": {
          "description": "If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "query_target_name": {
          "description": "If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username.",
          "example": "full",
          "type": "string"
        },
        "query_target_permission": {
          "description": "If searching for Histories about Permisisons, this parameter restricts results to permissions of this level.",
          "example": "full",
          "type": "string"
        },
        "query_target_permission_set": {
          "description": "If searching for Histories about API keys, this parameter restricts results to API keys with this permission set.",
          "example": "desktop_app",
          "type": "string"
        },
        "query_target_platform": {
          "description": "If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform.",
          "example": "windows",
          "type": "string"
        },
        "query_target_user_id": {
          "description": "If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "query_target_username": {
          "description": "If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username.",
          "example": "jerry",
          "type": "string"
        },
        "query_user_id": {
          "description": "Return results that are actions performed by the user indiciated by this User ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "query_username": {
          "description": "Filter results by this username.",
          "example": "jerry",
          "type": "string"
        },
        "start_at": {
          "description": "Start date/time of export range.",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Status of export.  Will be: `building` or `ready`",
          "example": "ready",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "The History Export resource on the API is used to export historical action (history) logs.  We store recent\naction logs in a separate location from archived logs.  This API is used to query historical logs that\naren't available in the regular History API because they've aged out.\n\nAll queries against the archive must be submitted as Exports.  (Even our Web UI creates an Export behind\nthe scenes.)\n\nActions that are less than 24 hours old may not be available in this API.  (But, they may also be made available\nearlier on a best-effort basis.)  Thus, if you want to see all history for a given file or folder, you should\nquery both this API and the \"live\" History API.\n\nThat's exactly what our Web UI does.\n\nThe best practice that we follow and recommend when doing a query against both APIs is to use a value of yesterday's\nmidnight Eastern time as the `end_at` for queries against the HistoryExport API and as the `start_at` for\nqueries against the History API. This ensures that you retrieve all entries, with no overlap.\n\nWe use Amazon Athena behind the scenes for processing these queries, and as such, have powerful\nsearch capabilities.  We've done our best to expose search capabilities via this History Export API.\n\nIn any query field in this API, you may specify multiple values separated by commas.  That means that commas\ncannot be searched for themselves, and neither can single quotation marks.\n\nWe do not currently partition data by date on the backend, so all queries result in a full scan of the entire\ndata lake.  This means that all queries will take about the same amount of time to complete, and we incur about\nthe same cost per query internally.  We don't typically bill our customers for these queries, assuming\nusage is occasional and manual.\n\nIf you intend to use this API for high volume or automated use, please contact us with more information\nabout your use case.  We may decide to change the backend data schema to match your use case more closely, and\nwe may also need to charge an additional cost per query.\n"
    },
    "ImageEntity": {
      "properties": {
        "name": {
          "description": "Image name",
          "example": "My logo",
          "type": "string"
        },
        "uri": {
          "description": "Image URI",
          "example": "https://mysite.files.com/.../my_image.png",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceLineItemEntity": {
      "properties": {
        "amount": {
          "description": "Invoice line item amount",
          "format": "double",
          "type": "number"
        },
        "created_at": {
          "description": "Invoice line item created at date/time",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "Invoice line item description",
          "example": "Service from 2019-01-01 through 2019-12-31",
          "type": "string"
        },
        "plan": {
          "description": "Plan name",
          "example": "Enterprise",
          "type": "string"
        },
        "service_end_at": {
          "description": "Invoice line item service end date/time",
          "format": "date-time",
          "type": "string"
        },
        "service_start_at": {
          "description": "Invoice line item service start date/time",
          "format": "date-time",
          "type": "string"
        },
        "site": {
          "description": "Site name",
          "example": "My site",
          "type": "string"
        },
        "type": {
          "description": "Invoice line item type",
          "enum": [
            "invoice",
            "adjustment",
            "overage"
          ],
          "example": "invoice",
          "type": "string"
        },
        "updated_at": {
          "description": "Invoice line item updated date/time",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IpAddressEntity": {
      "description": "List Ip Addresses",
      "properties": {
        "associated_with": {
          "description": "The object that this public IP address list is associated with.",
          "example": "Site",
          "type": "string"
        },
        "group_id": {
          "description": "Group ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "description": "Unique label for list; used by Zapier and other integrations.",
          "example": "Site",
          "type": "string"
        },
        "ip_addresses": {
          "description": "A list of IP addresses.",
          "items": {
            "example": "127.0.0.1",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-docs": "Customers who maintain custom firewall configurations may require knowing the public IP addresses of Files.com's edge servers.\n\nThis API resource provides an updated list of IP addresses that you can use to automate keeping your firewall's configuration up to date.\n"
    },
    "LockEntity": {
      "description": "List Locks by path",
      "properties": {
        "depth": {
          "description": "Lock depth (0 or infinity)",
          "example": "infinity",
          "type": "string"
        },
        "owner": {
          "description": "Owner of lock.  This can be any arbitrary string.",
          "example": "user",
          "type": "string"
        },
        "path": {
          "description": "Path",
          "example": "locked_file",
          "type": "string"
        },
        "scope": {
          "description": "Lock scope(shared or exclusive)",
          "example": "shared",
          "type": "string"
        },
        "timeout": {
          "description": "Lock timeout",
          "example": 43200,
          "format": "int32",
          "type": "integer"
        },
        "token": {
          "description": "Lock token.  Use to release lock.",
          "example": "17c54824e9931a4688ca032d03f6663c",
          "type": "string"
        },
        "type": {
          "description": "Lock type",
          "example": "write",
          "type": "string"
        },
        "user_id": {
          "description": "Lock creator user ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "username": {
          "description": "Lock creator username",
          "example": "username",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "Locks are not used by Files.com's web interface, but can be used by your applications to implement locking and concurrency features.\n\nOur lock feature is designed to emulate the locking feature offered by WebDAV.\nYou can read the WebDAV spec and understand how all of the below endpoints work.\n\nFiles.com's WebDAV offering and desktop app does leverage this locking API.\n"
    },
    "MessageCommentEntity": {
      "description": "List Message Comments",
      "properties": {
        "body": {
          "description": "Comment body.",
          "example": "What a great idea, thank you!",
          "type": "string"
        },
        "id": {
          "description": "Message Comment ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "reactions": {
          "description": "Reactions to this comment.",
          "items": {
            "$ref": "#/definitions/MessageCommentReactionEntity"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-docs": "A message comment represents a comment made by a user on a message.\n"
    },
    "MessageCommentReactionEntity": {
      "description": "List Message Comment Reactions",
      "properties": {
        "emoji": {
          "description": "Emoji used in the reaction.",
          "example": "👍",
          "type": "string"
        },
        "id": {
          "description": "Reaction ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-docs": "A message comment reaction represents a reaction emoji made by a user on a message comment.\n"
    },
    "MessageEntity": {
      "description": "List Messages",
      "properties": {
        "body": {
          "description": "Message body.",
          "example": "We should upgrade our Files.com account!",
          "type": "string"
        },
        "comments": {
          "description": "Comments.",
          "items": {
            "$ref": "#/definitions/MessageCommentEntity"
          },
          "type": "array"
        },
        "id": {
          "description": "Message ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "subject": {
          "description": "Message subject.",
          "example": "Files.com Account Upgrade",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "Messages are part of Files.com's project management features and represent a message posted by a user to a project.\n"
    },
    "MessageReactionEntity": {
      "description": "List Message Reactions",
      "properties": {
        "emoji": {
          "description": "Emoji used in the reaction.",
          "example": "👍",
          "type": "string"
        },
        "id": {
          "description": "Reaction ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-docs": "A message reaction represents a reaction emoji made by a user on a message.\n"
    },
    "NotificationEntity": {
      "description": "List Notifications",
      "properties": {
        "group_id": {
          "description": "Notification group id",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "group_name": {
          "description": "Group name if applicable",
          "example": "",
          "type": "string"
        },
        "id": {
          "description": "Notification ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "notify_on_copy": {
          "description": "Triggers notification when moving or copying files to this path",
          "type": "boolean"
        },
        "notify_user_actions": {
          "description": "Trigger notification on notification user actions?",
          "type": "boolean"
        },
        "path": {
          "description": "Folder path to notify on",
          "example": "path",
          "type": "string"
        },
        "send_interval": {
          "description": "The time interval that notifications are aggregated to",
          "enum": [
            "five_minutes",
            "fifteen_minutes",
            "hourly",
            "daily"
          ],
          "example": "fifteen_minutes",
          "type": "string"
        },
        "suppressed_email": {
          "description": "If true, it means that the recipient at this user's email address has manually unsubscribed from all emails, or had their email \"hard bounce\", which means that we are unable to send mail to this user's current email address. Notifications will resume if the user changes their email address.",
          "example": "suppressed_email",
          "type": "boolean"
        },
        "unsubscribed": {
          "description": "Is the user unsubscribed from this notification?",
          "type": "boolean"
        },
        "unsubscribed_reason": {
          "description": "The reason that the user unsubscribed",
          "enum": [
            "none",
            "unsubscribe_link_clicked",
            "mail_bounced",
            "mail_marked_as_spam"
          ],
          "type": "string"
        },
        "user_id": {
          "description": "Notification user ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "username": {
          "description": "Notification username",
          "example": "User",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "Notifications are our feature that send E-Mails when new files are uploaded into a folder.\n"
    },
    "PaymentLineItemEntity": {
      "properties": {
        "amount": {
          "description": "Payment line item amount",
          "format": "double",
          "type": "number"
        },
        "created_at": {
          "description": "Payment line item created at date/time",
          "format": "date-time",
          "type": "string"
        },
        "invoice_id": {
          "description": "Invoice ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "payment_id": {
          "description": "Payment ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "updated_at": {
          "description": "Payment line item updated at date/time",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PermissionEntity": {
      "description": "List Permissions",
      "properties": {
        "group_id": {
          "description": "Group ID",
          "example": 0,
          "format": "int32",
          "type": "integer"
        },
        "group_name": {
          "description": "Group name if applicable",
          "example": "",
          "type": "string"
        },
        "id": {
          "description": "Permission ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "Folder path",
          "example": "",
          "type": "string"
        },
        "permission": {
          "description": "Permission type",
          "enum": [
            "full",
            "readonly",
            "writeonly",
            "previewonly",
            "history",
            "admin"
          ],
          "example": "full",
          "type": "string"
        },
        "recursive": {
          "description": "Does this permission apply to subfolders?",
          "type": "boolean"
        },
        "user_id": {
          "description": "User ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "username": {
          "description": "User's username",
          "example": "Sser",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "Permission objects represent the grant of permissions to a user or group.\n\nThey are specific to a path and can be either recursive or nonrecursive into the subfolders of that path.\n"
    },
    "PreviewEntity": {
      "properties": {
        "download_uri": {
          "description": "Link to download preview",
          "example": "https://mysite.files.com/...",
          "type": "string"
        },
        "id": {
          "description": "Preview ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "size": {
          "description": "Preview size",
          "example": 1024,
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "description": "Preview status.  Can be invalid, not_generated, generating, complete, or file_too_large",
          "example": "complete",
          "type": "string"
        },
        "type": {
          "description": "Preview status.  Can be invalid, not_generated, generating, complete, or file_too_large",
          "example": "complete",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "Previews are image or PDF previews that are meant to be viewed within the web interface.\n"
    },
    "ProjectEntity": {
      "description": "List Projects",
      "properties": {
        "global_access": {
          "description": "Global access settings",
          "enum": [
            "none",
            "anyone_with_read",
            "anyone_with_full"
          ],
          "example": "none",
          "type": "string"
        },
        "id": {
          "description": "Project ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-docs": "Projects are associated with a folder and add project management features to that folder.\n"
    },
    "PublicKeyEntity": {
      "description": "List Public Keys",
      "properties": {
        "created_at": {
          "description": "Public key created at date/time",
          "format": "date-time",
          "type": "string"
        },
        "fingerprint": {
          "description": "Public key fingerprint",
          "example": "43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8",
          "type": "string"
        },
        "id": {
          "description": "Public key ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "description": "Public key title",
          "example": "My public key",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "Public keys are used by Users who want to connect via SFTP/SSH.\n(Note that our SSH support is limited to file operations only, no shell is provided.)\n"
    },
    "RemoteServerEntity": {
      "description": "Create Remote Server",
      "properties": {
        "authentication_method": {
          "description": "Type of authentication method",
          "example": "password",
          "type": "string"
        },
        "backblaze_b2_bucket": {
          "description": "Backblaze B2 Cloud Storage Bucket name",
          "example": "my-bucket",
          "type": "string"
        },
        "backblaze_b2_s3_endpoint": {
          "description": "Backblaze B2 Cloud Storage S3 Endpoint",
          "example": "s3.us-west-001.backblazeb2.com",
          "type": "string"
        },
        "google_cloud_storage_bucket": {
          "description": "Google Cloud Storage bucket name",
          "example": "my-bucket",
          "type": "string"
        },
        "google_cloud_storage_project_id": {
          "description": "Google Cloud Project ID",
          "example": "my-project",
          "type": "string"
        },
        "hostname": {
          "description": "Hostname or IP address",
          "example": "remote-server.com",
          "type": "string"
        },
        "id": {
          "description": "Remote server ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "max_connections": {
          "description": "Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Internal name for your reference",
          "example": "My Remote server",
          "type": "string"
        },
        "port": {
          "description": "Port for remote server.  Not needed for S3.",
          "format": "int32",
          "type": "integer"
        },
        "s3_bucket": {
          "description": "S3 bucket name",
          "example": "my-bucket",
          "type": "string"
        },
        "s3_region": {
          "description": "S3 region",
          "example": "us-east-1",
          "type": "string"
        },
        "server_certificate": {
          "description": "Remote server certificate",
          "enum": [
            "require_match",
            "allow_any"
          ],
          "example": "[certificate]",
          "type": "string"
        },
        "server_host_key": {
          "description": "Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts",
          "example": "[public key]",
          "type": "string"
        },
        "server_type": {
          "description": "Remote server type.",
          "enum": [
            "ftp",
            "sftp",
            "s3",
            "google_cloud_storage",
            "webdav",
            "wasabi",
            "backblaze_b2"
          ],
          "example": "s3",
          "type": "string"
        },
        "ssl": {
          "description": "Should we require SSL?",
          "enum": [
            "if_available",
            "require",
            "require_implicit",
            "never"
          ],
          "example": "always",
          "type": "string"
        },
        "username": {
          "description": "Remote server username.  Not needed for S3 buckets.",
          "example": "user",
          "type": "string"
        },
        "wasabi_bucket": {
          "description": "Wasabi region",
          "example": "us-west-1",
          "type": "string"
        },
        "wasabi_region": {
          "description": "Wasabi Bucket name",
          "example": "my-bucket",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "Remote servers are used with the `remote_server_sync` Behavior.\n\nRemote Servers can be either an FTP server, SFTP server, S3 bucket, Google Cloud Storage, Wasabi, Backblaze B2 Cloud Storage, or WebDAV.\nOther remote server types, such as Box, Dropbox, OneDrive, Google Drive, and Azure Blob Storage, are coming soon.\n\nNot every attribute will apply to every remote server.\n\nFTP Servers require that you specify their `hostname`, `port`, `username`, `password`, and a value for `ssl`.  Optionally, provide `server_certificate`.\n\nSFTP Servers require that you specify their `hostname`, `port`, `username`, `password` or `private_key`, and a value for `ssl`.  Optionally, provide `server_certificate`.\n\nS3 Buckets require that you specify their `s3_bucket` name, and `s3_region`.  Optionally provide a `aws_access_key`, and `aws_secret_key`.  If you don't provide credentials, you will need to use AWS to grant us access to your bucket.\n\nGoogle Cloud Storage requires that you specify `google_cloud_storage_bucket`, `google_cloud_storage_project_id`, and `google_cloud_storage_credentials_json`.\n\nWasabi requires `wasabi_bucket`, `wasabi_region`, `wasabi_access_key`, and `wasabi_secret_key`.\n\nBackblaze B2 Cloud Storage `backblaze_b2_bucket`, `backblaze_b2_s3_endpoint`, `backblaze_b2_application_key`, and `backblaze_b2_key_id`. (Requires S3 Compatible API) See https://help.backblaze.com/hc/en-us/articles/360047425453\n\nWebDAV Servers require that you specify their `hostname`, `username`, and `password`.\n"
    },
    "RequestEntity": {
      "description": "List Requests",
      "properties": {
        "automation_id": {
          "description": "ID of automation that created request",
          "example": "",
          "type": "string"
        },
        "destination": {
          "description": "Destination filename",
          "example": "",
          "type": "string"
        },
        "id": {
          "description": "Request ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "Folder path",
          "example": "",
          "type": "string"
        },
        "source": {
          "description": "Source filename, if applicable",
          "example": "",
          "type": "string"
        },
        "user_display_name": {
          "description": "User making the request (if applicable)",
          "example": "",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "A Request represents a file that *should* be uploaded by a specific user or group.\n\nRequests can either be manually created and managed, or managed automatically by an Automation.\n"
    },
    "SessionEntity": {
      "description": "Create user session (log in)",
      "properties": {
        "allowed_2fa_method_sms": {
          "description": "Sent only if 2FA setup is needed. Is SMS two factor authentication allowed?",
          "type": "boolean"
        },
        "allowed_2fa_method_totp": {
          "description": "Sent only if 2FA setup is needed. Is TOTP two factor authentication allowed?",
          "type": "boolean"
        },
        "allowed_2fa_method_u2f": {
          "description": "Sent only if 2FA setup is needed. Is U2F two factor authentication allowed?",
          "type": "boolean"
        },
        "allowed_2fa_method_yubi": {
          "description": "Sent only if 2FA setup is needed. Is Yubikey two factor authentication allowed?",
          "type": "boolean"
        },
        "id": {
          "description": "Session ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "language": {
          "description": "Session language",
          "example": "en",
          "type": "string"
        },
        "login_token": {
          "description": "Login token. If set, this token will allow your user to log in via browser at the domain in `login_token_domain`.",
          "example": "@tok-randomcode",
          "type": "string"
        },
        "login_token_domain": {
          "description": "Domain to use with `login_token`.",
          "example": "https://mysite.files.com",
          "type": "string"
        },
        "max_dir_listing_size": {
          "description": "Maximum number of files to retrieve per folder for a directory listing.  This is based on the user's plan.",
          "format": "int32",
          "type": "integer"
        },
        "multiple_regions": {
          "description": "Can access multiple regions?",
          "example": true,
          "type": "boolean"
        },
        "read_only": {
          "description": "Is this session read only?",
          "example": "en",
          "type": "boolean"
        },
        "root_path": {
          "description": "Initial root path to start the user's session in.",
          "example": "",
          "type": "string"
        },
        "site_id": {
          "description": "Site ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "ssl_required": {
          "description": "Is SSL required for this user?  (If so, ensure all your communications with this user use SSL.)",
          "type": "boolean"
        },
        "tls_disabled": {
          "description": "Is strong TLS disabled for this user? (If this is set to true, the site administrator has signaled that it is ok to use less secure TLS versions for this user.)",
          "type": "boolean"
        },
        "two_factor_setup_needed": {
          "description": "If true, this user needs to add a Two Factor Authentication method before performing any further actions.",
          "type": "boolean"
        },
        "use_provided_modified_at": {
          "description": "Allow the user to provide file/folder modified at dates?  If false, the server will always use the current date/time.",
          "example": true,
          "type": "boolean"
        },
        "windows_mode_ftp": {
          "description": "Does this user want to use Windows line-ending emulation?  (CR vs CRLF)",
          "type": "boolean"
        }
      },
      "type": "object",
      "x-docs": "You may use a Session to make further API calls using our REST API or SDKs as a specific user.\nThis is the only way to use the API if you know a username/password but not an API key.\n"
    },
    "SiteEntity": {
      "description": "Show site settings",
      "properties": {
        "admin_user_id": {
          "description": "User ID for the main site administrator",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "allow_bundle_names": {
          "description": "Are manual Bundle names allowed?",
          "type": "boolean"
        },
        "allowed_2fa_method_sms": {
          "description": "Is SMS two factor authentication allowed?",
          "type": "boolean"
        },
        "allowed_2fa_method_totp": {
          "description": "Is TOTP two factor authentication allowed?",
          "type": "boolean"
        },
        "allowed_2fa_method_u2f": {
          "description": "Is U2F two factor authentication allowed?",
          "type": "boolean"
        },
        "allowed_2fa_method_yubi": {
          "description": "Is yubikey two factor authentication allowed?",
          "type": "boolean"
        },
        "allowed_ips": {
          "description": "List of allowed IP addresses",
          "example": "",
          "type": "string"
        },
        "ask_about_overwrites": {
          "description": "If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.",
          "type": "boolean"
        },
        "bundle_expiration": {
          "description": "Site-wide Bundle expiration in days",
          "format": "int32",
          "type": "integer"
        },
        "bundle_password_required": {
          "description": "Do Bundles require password protection?",
          "type": "boolean"
        },
        "color2_left": {
          "description": "Page link and button color",
          "example": "#0066a7",
          "type": "string"
        },
        "color2_link": {
          "description": "Top bar link color",
          "example": "#d34f5d",
          "type": "string"
        },
        "color2_text": {
          "description": "Page link and button color",
          "example": "#0066a7",
          "type": "string"
        },
        "color2_top": {
          "description": "Top bar background color",
          "example": "#000000",
          "type": "string"
        },
        "color2_top_text": {
          "description": "Top bar text color",
          "example": "#ffffff",
          "type": "string"
        },
        "created_at": {
          "description": "Time this site was created",
          "format": "date-time",
          "type": "string"
        },
        "currency": {
          "description": "Preferred currency",
          "example": "USD",
          "type": "string"
        },
        "custom_namespace": {
          "description": "Is this site using a custom namespace for users?",
          "type": "boolean"
        },
        "days_to_retain_backups": {
          "description": "Number of days to keep deleted files",
          "example": 30,
          "format": "int32",
          "type": "integer"
        },
        "default_time_zone": {
          "description": "Site default time zone",
          "example": "Pacific Time (US & Canada)",
          "type": "string"
        },
        "desktop_app": {
          "description": "Is the desktop app enabled?",
          "type": "boolean"
        },
        "desktop_app_session_ip_pinning": {
          "description": "Is desktop app session IP pinning enabled?",
          "type": "boolean"
        },
        "desktop_app_session_lifetime": {
          "description": "Desktop app session lifetime (in hours)",
          "format": "int32",
          "type": "integer"
        },
        "disable_notifications": {
          "description": "Are notifications disabled?",
          "type": "boolean"
        },
        "disable_password_reset": {
          "description": "Is password reset disabled?",
          "type": "boolean"
        },
        "disable_users_from_inactivity_period_days": {
          "description": "If greater than zero, users will unable to login if they do not show activity within this number of days.",
          "format": "int32",
          "type": "integer"
        },
        "domain": {
          "description": "Custom domain",
          "example": "my-custom-domain.com",
          "type": "string"
        },
        "email": {
          "description": "Main email for this site",
          "example": "john.doe@files.com",
          "format": "email",
          "type": "string"
        },
        "folder_permissions_groups_only": {
          "description": "If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.",
          "type": "boolean"
        },
        "hipaa": {
          "description": "Is there a signed HIPAA BAA between Files.com and this site?",
          "type": "boolean"
        },
        "icon128": {
          "$ref": "#/definitions/ImageEntity",
          "description": "Branded icon 128x128"
        },
        "icon16": {
          "$ref": "#/definitions/ImageEntity",
          "description": "Branded icon 16x16"
        },
        "icon32": {
          "$ref": "#/definitions/ImageEntity",
          "description": "Branded icon 32x32"
        },
        "icon48": {
          "$ref": "#/definitions/ImageEntity",
          "description": "Branded icon 48x48"
        },
        "immutable_files_set_at": {
          "description": "Can files be modified?",
          "format": "date-time",
          "type": "string"
        },
        "include_password_in_welcome_email": {
          "description": "Include password in emails to new users?",
          "type": "boolean"
        },
        "language": {
          "description": "Site default language",
          "example": "en",
          "type": "string"
        },
        "ldap_base_dn": {
          "description": "Base DN for looking up users in LDAP server",
          "example": "",
          "type": "string"
        },
        "ldap_domain": {
          "description": "Domain name that will be appended to usernames",
          "example": "mysite.com",
          "type": "string"
        },
        "ldap_enabled": {
          "description": "Main LDAP setting: is LDAP enabled?",
          "type": "boolean"
        },
        "ldap_group_action": {
          "description": "Should we sync groups from LDAP server?",
          "example": "disabled",
          "type": "string"
        },
        "ldap_group_exclusion": {
          "description": "Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.",
          "example": "",
          "type": "string"
        },
        "ldap_group_inclusion": {
          "description": "Comma or newline separated list of group names (with optional wildcards) to include when syncing.",
          "example": "",
          "type": "string"
        },
        "ldap_host": {
          "description": "LDAP host",
          "example": "ldap.site.com",
          "type": "string"
        },
        "ldap_host_2": {
          "description": "LDAP backup host",
          "example": "ldap2.site.com",
          "type": "string"
        },
        "ldap_host_3": {
          "description": "LDAP backup host",
          "example": "ldap3.site.com",
          "type": "string"
        },
        "ldap_port": {
          "description": "LDAP port",
          "format": "int32",
          "type": "integer"
        },
        "ldap_secure": {
          "description": "Use secure LDAP?",
          "type": "boolean"
        },
        "ldap_type": {
          "description": "LDAP type",
          "example": "open_ldap",
          "type": "string"
        },
        "ldap_user_action": {
          "description": "Should we sync users from LDAP server?",
          "example": "disabled",
          "type": "string"
        },
        "ldap_user_include_groups": {
          "description": "Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.",
          "example": "",
          "type": "string"
        },
        "ldap_username": {
          "description": "Username for signing in to LDAP server.",
          "example": "[ldap username]",
          "type": "string"
        },
        "ldap_username_field": {
          "description": "LDAP username field",
          "example": "sAMAccountName",
          "type": "string"
        },
        "login_help_text": {
          "description": "Login help text",
          "example": "Login page help text.",
          "type": "string"
        },
        "logo": {
          "$ref": "#/definitions/ImageEntity",
          "description": "Branded logo"
        },
        "max_prior_passwords": {
          "description": "Number of prior passwords to disallow",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Site name",
          "example": "My Site",
          "type": "string"
        },
        "next_billing_amount": {
          "description": "Next billing amount",
          "format": "double",
          "type": "number"
        },
        "next_billing_date": {
          "description": "Next billing date",
          "example": "Apr 20",
          "type": "string"
        },
        "opt_out_global": {
          "description": "Use servers in the USA only?",
          "type": "boolean"
        },
        "overage_notified_at": {
          "description": "Last time the site was notified about an overage",
          "format": "date-time",
          "type": "string"
        },
        "overage_notify": {
          "description": "Notify site email of overages?",
          "type": "boolean"
        },
        "overdue": {
          "description": "Is this site's billing overdue?",
          "type": "boolean"
        },
        "password_min_length": {
          "description": "Shortest password length for users",
          "format": "int32",
          "type": "integer"
        },
        "password_require_letter": {
          "description": "Require a letter in passwords?",
          "type": "boolean"
        },
        "password_require_mixed": {
          "description": "Require lower and upper case letters in passwords?",
          "type": "boolean"
        },
        "password_require_number": {
          "description": "Require a number in passwords?",
          "type": "boolean"
        },
        "password_require_special": {
          "description": "Require special characters in password?",
          "type": "boolean"
        },
        "password_require_unbreached": {
          "description": "Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)",
          "type": "boolean"
        },
        "password_requirements_apply_to_bundles": {
          "description": "Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?",
          "type": "boolean"
        },
        "password_validity_days": {
          "description": "Number of days password is valid",
          "format": "int32",
          "type": "integer"
        },
        "phone": {
          "description": "Site phone number",
          "example": "555-555-5555",
          "type": "string"
        },
        "require_2fa": {
          "description": "Require two-factor authentication for all users?",
          "type": "boolean"
        },
        "require_2fa_stop_time": {
          "description": "If set, requirement for two-factor authentication has been scheduled to end on this date-time.",
          "format": "date-time",
          "type": "string"
        },
        "require_2fa_user_type": {
          "description": "What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?",
          "enum": [
            "all",
            "folder_and_site_admins",
            "site_admins"
          ],
          "example": "`site_admins`",
          "type": "string"
        },
        "session": {
          "$ref": "#/definitions/SessionEntity",
          "description": "Current session"
        },
        "session_expiry": {
          "description": "Session expiry in hours",
          "example": 6,
          "format": "double",
          "type": "number"
        },
        "session_pinned_by_ip": {
          "description": "Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)",
          "type": "boolean"
        },
        "sftp_user_root_enabled": {
          "description": "Use user FTP roots also for SFTP?",
          "type": "boolean"
        },
        "show_request_access_link": {
          "description": "Show request access link for users without access?  Currently unused.",
          "type": "boolean"
        },
        "site_footer": {
          "description": "Custom site footer text",
          "example": "",
          "type": "string"
        },
        "site_header": {
          "description": "Custom site header text",
          "example": "",
          "type": "string"
        },
        "smtp_address": {
          "description": "SMTP server hostname or IP",
          "example": "smtp.my-mail-server.com",
          "type": "string"
        },
        "smtp_authentication": {
          "description": "SMTP server authentication type",
          "example": "plain",
          "type": "string"
        },
        "smtp_from": {
          "description": "From address to use when mailing through custom SMTP",
          "example": "me@my-mail-server.com",
          "type": "string"
        },
        "smtp_port": {
          "description": "SMTP server port",
          "example": 25,
          "format": "int32",
          "type": "integer"
        },
        "smtp_username": {
          "description": "SMTP server username",
          "example": "mail",
          "type": "string"
        },
        "ssl_required": {
          "description": "Is SSL required?  Disabling this is insecure.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "Site subdomain",
          "example": "mysite",
          "type": "string"
        },
        "switch_to_plan_date": {
          "description": "If switching plans, when does the new plan take effect?",
          "format": "date-time",
          "type": "string"
        },
        "tls_disabled": {
          "description": "Is TLS disabled(site setting)?",
          "type": "boolean"
        },
        "trial_days_left": {
          "description": "Number of days left in trial",
          "format": "int32",
          "type": "integer"
        },
        "trial_until": {
          "description": "When does this Site trial expire?",
          "format": "date-time",
          "type": "string"
        },
        "updated_at": {
          "description": "Last time this Site was updated",
          "format": "date-time",
          "type": "string"
        },
        "use_provided_modified_at": {
          "description": "Allow uploaders to set `provided_modified_at` for uploaded files?",
          "type": "boolean"
        },
        "user": {
          "$ref": "#/definitions/UserEntity",
          "description": "User of current session"
        },
        "user_lockout": {
          "description": "Will users be locked out after incorrect login attempts?",
          "type": "boolean"
        },
        "user_lockout_lock_period": {
          "description": "How many hours to lock user out for failed password?",
          "format": "int32",
          "type": "integer"
        },
        "user_lockout_tries": {
          "description": "Number of login tries within `user_lockout_within` hours before users are locked out",
          "format": "int32",
          "type": "integer"
        },
        "user_lockout_within": {
          "description": "Number of hours for user lockout window",
          "example": 6,
          "format": "int32",
          "type": "integer"
        },
        "welcome_custom_text": {
          "description": "Custom text send in user welcome email",
          "example": "Welcome to my site!",
          "type": "string"
        },
        "welcome_email_cc": {
          "description": "Include this email in welcome emails if enabled",
          "format": "email",
          "type": "string"
        },
        "welcome_email_enabled": {
          "description": "Will the welcome email be sent to new users?",
          "type": "boolean"
        },
        "welcome_screen": {
          "description": "Does the welcome screen appear?",
          "enum": [
            "enabled",
            "hidden",
            "disabled"
          ],
          "example": "user_controlled",
          "type": "string"
        },
        "windows_mode_ftp": {
          "description": "Does FTP user Windows emulation mode?",
          "type": "boolean"
        }
      },
      "type": "object",
      "x-docs": "# Site\n\nThe Site resource in the REST API allows you to operate on your Site.\nThis is the place you'll come to update site settings, as well as manage sitewide API keys.\n\nMost site settings can be set via the API.\n"
    },
    "SsoStrategyEntity": {
      "description": "List Sso Strategies",
      "properties": {
        "deprovision_groups": {
          "description": "Auto-deprovision group membership based on group memberships on the SSO side?",
          "type": "boolean"
        },
        "deprovision_users": {
          "description": "Auto-deprovision users?",
          "type": "boolean"
        },
        "enabled": {
          "description": "Is strategy enabled?",
          "type": "boolean"
        },
        "id": {
          "description": "ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "label": {
          "description": "Custom label for the SSO provider on the login page.",
          "example": "My Corporate SSO Provider",
          "type": "string"
        },
        "ldap_base_dn": {
          "description": "Base DN for looking up users in LDAP server",
          "example": "",
          "type": "string"
        },
        "ldap_domain": {
          "description": "Domain name that will be appended to LDAP usernames",
          "example": "mysite.com",
          "type": "string"
        },
        "ldap_host": {
          "description": "LDAP host",
          "example": "ldap.site.com",
          "type": "string"
        },
        "ldap_host_2": {
          "description": "LDAP backup host",
          "example": "ldap2.site.com",
          "type": "string"
        },
        "ldap_host_3": {
          "description": "LDAP backup host",
          "example": "ldap3.site.com",
          "type": "string"
        },
        "ldap_port": {
          "description": "LDAP port",
          "format": "int32",
          "type": "integer"
        },
        "ldap_secure": {
          "description": "Use secure LDAP?",
          "type": "boolean"
        },
        "ldap_user_include_groups": {
          "description": "Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.",
          "example": "",
          "type": "string"
        },
        "ldap_username": {
          "description": "Username for signing in to LDAP server.",
          "example": "[ldap username]",
          "type": "string"
        },
        "ldap_username_field": {
          "description": "LDAP username field",
          "enum": [
            "sAMAccountName",
            "userPrincipalName"
          ],
          "example": "sAMAccountName",
          "type": "string"
        },
        "logo_url": {
          "description": "URL holding a custom logo for the SSO provider on the login page.",
          "example": "https://mysite.files.com/.../logo.png",
          "type": "string"
        },
        "protocol": {
          "description": "SSO Protocol",
          "enum": [
            "oauth2",
            "openid2",
            "saml",
            "active_directory",
            "open_ldap"
          ],
          "example": "okta",
          "type": "string"
        },
        "provider": {
          "description": "Provider name",
          "enum": [
            "google",
            "auth0",
            "okta",
            "atlassian",
            "azure",
            "box",
            "dropbox",
            "slack",
            "ubuntu",
            "onelogin",
            "saml",
            "idaptive",
            "ldap"
          ],
          "example": "okta",
          "type": "string"
        },
        "provision_attachments_permission": {
          "description": "Auto-provisioned users get Sharing permission?",
          "example": true,
          "type": "boolean"
        },
        "provision_dav_permission": {
          "description": "Auto-provisioned users get WebDAV permission?",
          "example": true,
          "type": "boolean"
        },
        "provision_ftp_permission": {
          "description": "Auto-provisioned users get FTP permission?",
          "example": true,
          "type": "boolean"
        },
        "provision_group_default": {
          "description": "Comma-separated list of group names for groups to automatically add all auto-provisioned users to.",
          "example": "Employees",
          "type": "string"
        },
        "provision_group_exclusion": {
          "description": "Comma-separated list of group names for groups (with optional wildcards) that will be excluded from auto-provisioning.",
          "example": "Employees",
          "type": "string"
        },
        "provision_group_inclusion": {
          "description": "Comma-separated list of group names for groups (with optional wildcards) that will be auto-provisioned.",
          "example": "Employees",
          "type": "string"
        },
        "provision_group_required": {
          "description": "Comma or newline separated list of group names (with optional wildcards) to require membership for user provisioning.",
          "example": "",
          "type": "string"
        },
        "provision_groups": {
          "description": "Auto-provision group membership based on group memberships on the SSO side?",
          "type": "boolean"
        },
        "provision_sftp_permission": {
          "description": "Auto-provisioned users get SFTP permission?",
          "example": true,
          "type": "boolean"
        },
        "provision_time_zone": {
          "description": "Default time zone for auto provisioned users.",
          "example": "Eastern Time (US & Canada)",
          "type": "string"
        },
        "provision_users": {
          "description": "Auto-provision users?",
          "type": "boolean"
        },
        "saml_provider_cert_fingerprint": {
          "description": "Identity provider sha256 cert fingerprint if saml_provider_metadata_url is not available.",
          "type": "string"
        },
        "saml_provider_issuer_url": {
          "description": "Identity provider issuer url",
          "type": "string"
        },
        "saml_provider_metadata_url": {
          "description": "Metadata URL for the SAML identity provider",
          "type": "string"
        },
        "saml_provider_slo_target_url": {
          "description": "Identity provider SLO endpoint",
          "type": "string"
        },
        "saml_provider_sso_target_url": {
          "description": "Identity provider SSO endpoint if saml_provider_metadata_url is not available.",
          "type": "string"
        },
        "scim_authentication_method": {
          "description": "SCIM authentication type.",
          "enum": [
            "none",
            "basic",
            "token"
          ],
          "type": "string"
        },
        "scim_username": {
          "description": "SCIM username.",
          "type": "string"
        },
        "subdomain": {
          "description": "Subdomain",
          "example": "my-site",
          "type": "string"
        }
      },
      "type": "object",
      "x-docs": "An SSO Strategy is a method for allowing users to sign in via another identity provider, such as Okta or Auth0.\n\nIt is rare that you will need to use API endpoints for managing these, and we recommend instead managing these via the web interface.\nNevertheless, we share the API documentation here.\n"
    },
    "StatusEntity": {
      "description": "Test webhook.",
      "properties": {
        "code": {
          "description": "Status http code",
          "example": 200,
          "format": "int32",
          "type": "integer"
        },
        "data": {
          "$ref": "#/definitions/AutoEntity"
        },
        "errors": {
          "description": "A list of api errors",
          "items": {
            "$ref": "#/definitions/ErrorsEntity"
          },
          "type": "array"
        },
        "message": {
          "description": "Error message",
          "example": "",
          "type": "string"
        },
        "status": {
          "description": "Status message",
          "example": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StyleEntity": {
      "description": "Show Style",
      "properties": {
        "id": {
          "description": "Style ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "logo": {
          "$ref": "#/definitions/ImageEntity",
          "description": "Logo"
        },
        "path": {
          "description": "Folder path",
          "example": "",
          "type": "string"
        },
        "thumbnail": {
          "$ref": "#/definitions/ImageEntity",
          "description": "Logo thumbnail"
        }
      },
      "type": "object",
      "x-docs": "Styles are custom sets of branding that can be applied on a per-folder basis.\nCurrently these only support Logos per folder, but in the future we may extend these to also support colors.\nIf you want to see that, please let us know so we can add your vote to the list.\n"
    },
    "UsageDailySnapshotEntity": {
      "description": "List Usage Daily Snapshots",
      "properties": {
        "current_storage": {
          "description": "The quantity of storage held for this site",
          "example": "65536",
          "format": "int32",
          "type": "integer"
        },
        "date": {
          "description": "The date of this usage record",
          "example": "2020-11-21",
          "format": "date",
          "type": "string"
        },
        "id": {
          "description": "ID of the usage record",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "usage_by_top_level_dir": {
          "description": "Usage broken down by each top-level folder",
          "items": {},
          "type": "array"
        }
      },
      "type": "object"
    },
    "UsageSnapshotEntity": {
      "description": "List Usage Snapshots",
      "properties": {
        "created_at": {
          "description": "Site usage report created at date/time",
          "format": "date-time",
          "type": "string"
        },
        "current_storage": {
          "description": "Current site usage as of report",
          "format": "double",
          "type": "number"
        },
        "deleted_files_counted_in_minimum": {
          "description": "Usage for files that are deleted but uploaded within last 30 days",
          "format": "double",
          "type": "number"
        },
        "deleted_files_storage": {
          "description": "Usage for files that are deleted but retained as backups",
          "format": "double",
          "type": "number"
        },
        "end_at": {
          "description": "Site usage report end date/time",
          "format": "date-time",
          "type": "string"
        },
        "high_water_storage": {
          "description": "Site usage report highest usage in time period",
          "format": "double",
          "type": "number"
        },
        "id": {
          "description": "Site usage ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "root_storage": {
          "description": "Usage for root folder",
          "format": "double",
          "type": "number"
        },
        "start_at": {
          "description": "Site usage report start date/time",
          "format": "date-time",
          "type": "string"
        },
        "total_downloads": {
          "description": "Number of downloads in report time period",
          "format": "int32",
          "type": "integer"
        },
        "total_uploads": {
          "description": "Number of uploads in time period",
          "format": "int32",
          "type": "integer"
        },
        "updated_at": {
          "description": "The last time this site usage report was updated",
          "format": "date-time",
          "type": "string"
        },
        "usage_by_top_level_dir": {
          "description": "A map of root folders to their total usage",
          "type": "object"
        }
      },
      "type": "object"
    },
    "UserCipherUseEntity": {
      "description": "List User Cipher Uses",
      "properties": {
        "created_at": {
          "description": "The earliest recorded use of this combination of interface and protocol and cipher (for this user)",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "UserCipherUse ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "interface": {
          "description": "The interface accessed",
          "enum": [
            "web",
            "ftp",
            "sftp",
            "dav",
            "desktop",
            "restapi",
            "robot",
            "jsapi"
          ],
          "example": "restapi",
          "type": "string"
        },
        "protocol_cipher": {
          "description": "The protocol and cipher employed",
          "example": "TLSv1.2; ECDHE-RSA-AES256-GCM-SHA384",
          "type": "string"
        },
        "updated_at": {
          "description": "The most recent use of this combination of interface and protocol and cipher (for this user)",
          "format": "date-time",
          "type": "string"
        },
        "user_id": {
          "description": "ID of the user who performed this access",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-docs": "This object allows you to see the exact set of encryption ciphers and protocols used by a given user.\nThis is most often used to support migrations from one TLS version to the next.  You can query each user and determine who is still using legacy ciphers.\n"
    },
    "UserEntity": {
      "description": "Create User",
      "properties": {
        "admin_group_ids": {
          "description": "List of group IDs of which this user is an administrator",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "allowed_ips": {
          "description": "A list of allowed IPs if applicable.  Newline delimited",
          "example": "127.0.0.1",
          "type": "string"
        },
        "api_keys_count": {
          "description": "Number of api keys associated with this user",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "attachments_permission": {
          "description": "Can the user create Bundles (aka Share Links)?  This field will be aliased or renamed in the future to `bundles_permission`.",
          "type": "boolean"
        },
        "authenticate_until": {
          "description": "Scheduled Date/Time at which user will be deactivated",
          "format": "date-time",
          "type": "string"
        },
        "authentication_method": {
          "description": "How is this user authenticated?",
          "enum": [
            "password",
            "ldap",
            "sso",
            "none"
          ],
          "example": "password",
          "type": "string"
        },
        "avatar_url": {
          "description": "URL holding the user's avatar",
          "type": "string"
        },
        "billing_permission": {
          "description": "Allow this user to perform operations on the account, payments, and invoices?",
          "type": "boolean"
        },
        "bypass_inactive_disable": {
          "description": "Exempt this user from being disabled based on inactivity?",
          "type": "boolean"
        },
        "bypass_site_allowed_ips": {
          "description": "Allow this user to skip site-wide IP blacklists?",
          "type": "boolean"
        },
        "created_at": {
          "description": "When this user was created",
          "format": "date-time",
          "type": "string"
        },
        "dav_permission": {
          "description": "Can the user connect with WebDAV?",
          "type": "boolean"
        },
        "disabled": {
          "description": "Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.",
          "type": "boolean"
        },
        "email": {
          "description": "User email address",
          "example": "john.doe@files.com",
          "format": "email",
          "type": "string"
        },
        "externally_managed": {
          "description": "Is this user managed by an external source (such as LDAP)?",
          "type": "boolean"
        },
        "ftp_permission": {
          "description": "Can the user access with FTP/FTPS?",
          "type": "boolean"
        },
        "group_ids": {
          "description": "Comma-separated list of group IDs of which this user is a member",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "User ID",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "language": {
          "description": "Preferred language",
          "example": "en",
          "type": "string"
        },
        "last_login_at": {
          "description": "User's last login time",
          "format": "date-time",
          "type": "string"
        },
        "last_protocol_cipher": {
          "description": "The last protocol and cipher used",
          "example": "",
          "type": "string"
        },
        "lockout_expires": {
          "description": "Time in the future that the user will no longer be locked out if applicable",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "User's full name",
          "example": "John Doe",
          "type": "string"
        },
        "notes": {
          "description": "Any internal notes on the user",
          "example": "Internal notes on this user.",
          "type": "string"
        },
        "notification_daily_send_time": {
          "description": "Hour of the day at which daily notifications should be sent. Can be in range 0 to 23",
          "example": 18,
          "format": "int32",
          "type": "integer"
        },
        "password_set_at": {
          "description": "Last time the user's password was set",
          "format": "date-time",
          "type": "string"
        },
        "password_validity_days": {
          "description": "Number of days to allow user to use the same password",
          "format": "int32",
          "type": "integer"
        },
        "public_keys_count": {
          "description": "Number of public keys associated with this user",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "receive_admin_alerts": {
          "description": "Should the user receive admin alerts such a certificate expiration notifications and overages?",
          "type": "boolean"
        },
        "require_2fa": {
          "description": "Is 2fa required to sign in?",
          "type": "boolean"
        },
        "require_password_change": {
          "description": "Is a password change required upon next user login?",
          "type": "boolean"
        },
        "restapi_permission": {
          "description": "Can this user access the REST API?",
          "type": "boolean"
        },
        "self_managed": {
          "description": "Does this user manage it's own credentials or is it a shared/bot user?",
          "type": "boolean"
        },
        "sftp_permission": {
          "description": "Can the user access with SFTP?",
          "type": "boolean"
        },
        "site_admin": {
          "description": "Is the user an administrator for this site?",
          "type": "boolean"
        },
        "skip_welcome_screen": {
          "description": "Skip Welcome page in the UI?",
          "type": "boolean"
        },
        "ssl_required": {
          "description": "SSL required setting",
          "enum": [
            "use_system_setting",
            "always_require",
            "never_require"
          ],
          "example": "always_require",
          "type": "string"
        },
        "sso_strategy_id": {
          "description": "SSO (Single Sign On) strategy ID for the user, if applicable.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "subscribe_to_newsletter": {
          "description": "Is the user subscribed to the newsletter?",
          "type": "boolean"
        },
        "time_zone": {
          "description": "User time zone",
          "example": "Pacific Time (US & Canada)",
          "type": "string"
        },
        "type_of_2fa": {
          "default": "yubi",
          "description": "Type(s) of 2FA methods in use.  Will be either `sms`, `totp`, `u2f`, `yubi`, or multiple values sorted alphabetically and joined by an underscore.",
          "type": "string"
        },
        "user_root": {
          "description": "Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.",
          "example": "",
          "type": "string"
        },
        "username": {
          "description": "User's username",
          "example": "user",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "x-behaviors": [
    {
      "behavior": "webhook",
      "children_can_add": true,
      "children_can_override": false,
      "docs": "Sends an HTTP(S) request to a remote server whenever certain actions occur on a folder.\nWebhooks are often used to integrate Files.com with other services.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate({\n  'urls' => ['https://mysite.com/url...'],\n  'method' => 'POST',\n  'encoding' => 'RAW',\n  'triggers' => [ 'create', 'read', 'update', 'destroy', 'move', 'copy' ]\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`urls` | Array of URLs to send the webhook to.\n`method` | Default: `GET`.  May also be set to `POST`.\n`triggers` | Leave blank to send webhooks on any action on this folder.  Or, for specific actions, you may specify an array of action types.  Valid values are: `create`, `read`, `update`, `destroy`, `move`, `copy`.\n`encoding` | May be `JSON`, `XML`, or `RAW`.  If set to `RAW` or left blank, we will deliver the webhook using the HTTP GET params or POST body.  If JSON or XML, we will encode the payload accordingly and send a matching `Content-Type` header.\n",
      "requires_attachment": false,
      "unique_per_folder": false,
      "visible_to_non_admins": false
    },
    {
      "behavior": "file_expiration",
      "children_can_add": false,
      "children_can_override": true,
      "docs": "Files in this folder will expire (be deleted) after a certain number of days.  This is most often used for compliance purposes where different types of data may need different retention settings.  It's also great for managing your costs.  You can retain different data for less time than others.\n\nValue is stored as an Integer (not a hash/array) representing the number of days.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate(30)%>\n```\n",
      "requires_attachment": false,
      "unique_per_folder": true,
      "visible_to_non_admins": true
    },
    {
      "behavior": "auto_encrypt",
      "children_can_add": false,
      "children_can_override": true,
      "docs": "Files will be automatically encrypted after uploading using your provided GPG key.\n\nThis Behavior is often used on our HIPAA accounts to convert data into a format unreadable by even us.\nGPG is an asymmetric encryption type (which means it uses public keys and private keys).\nBecause you are only providing us your public key and keeping your private key, we won't be able to read anything once it has been GPG encrypted.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate({\n  'algorithm' => 'PGP/GPG',\n  'suffix' => '.gpg',\n  'key' => '[your GPG public key]'\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`algorithm` | Must be set to `PGP/GPG`.  If we support other options in the future (like OpenSSL), we will amend this option.\n`suffix` | Suffix to apply to filenames once they've been uploaded.\n`key` | Your GPG public key.  Please be sure not to send your private key here. If that happens, we try to detect it and disable the behavior for your security.\n",
      "requires_attachment": false,
      "unique_per_folder": true,
      "visible_to_non_admins": true
    },
    {
      "behavior": "lock_subfolders",
      "children_can_add": false,
      "children_can_override": false,
      "docs": "The subfolder structure of this folder may not be changed.\nThis is useful in conjunction with workflows and automations to ensure your folder structure stays as you expect.\n\nThis behavior does not require that a `value` be set.\n",
      "requires_attachment": false,
      "unique_per_folder": true,
      "visible_to_non_admins": true
    },
    {
      "behavior": "storage_region",
      "children_can_add": false,
      "children_can_override": true,
      "docs": "Files in this folder are stored in a certain geographical region.\nIf you set this Behavior on an existing folder, we will migrate existing files to the new location automatically.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate('us-east-1')%>\n```\n\nValue is stored as a String.  Valid region values:\n\nValue String | Region Description\n--- | ---\n`us-east-1` | USA, Virginia\n`ap-southeast-2` | Australia, Sydney\n`ca-central-1` | Canada, Toronto\n`eu-west-2` | EU - UK, London\n`eu-central-1` | EU - Germany, Frankfurt\n`ap-northeast-1` | Japan, Tokyo\n`ap-southeast-1` | Singapore",
      "requires_attachment": false,
      "unique_per_folder": true,
      "visible_to_non_admins": true
    },
    {
      "behavior": "serve_publicly",
      "children_can_add": true,
      "children_can_override": false,
      "docs": "Files in this folder are served via a public HTTPS URL at `https://SUBDOMAIN.hosted-by-files.com/...`\n\nThis feature works with common static site generators such as Jekyll and Middleman, and allows any static web assets or website to be hosted.\nIt's a great way to get extra mileage out of your Files.com account and avoid having to pay for separate web hosting.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate({\n  'key' => 'public-photos',\n  'show_index' => true\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`key` | URL path for where the stuff is publicly hosted.  It will look like `https://SUBDOMAIN.hosted-by-files.com/{key}/`\n`show_index` | Show an index page listing the folder contents?\n",
      "requires_attachment": false,
      "unique_per_folder": true,
      "visible_to_non_admins": true
    },
    {
      "behavior": "create_user_folders",
      "children_can_add": true,
      "children_can_override": false,
      "docs": "Create a folder here for new users when they are added.\nThis Behavior is typically used to implement home folders for users.\nIt's also a good building block for more advanced automations and workflows.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate({\n  'permission' => 'full',\n  'existing_users' => true,\n  'group_id' => 1\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`permission` | What permission level to give the user on his or her new folder?  Takes the same options as the Permissions endpoint.\n`existing_users` | Apply this behavior to existing users or only newly added users?\n`group_id` | Only apply this behavior to users who are members of this group ID.\n",
      "requires_attachment": false,
      "unique_per_folder": false,
      "visible_to_non_admins": false
    },
    {
      "behavior": "remote_server_sync",
      "children_can_add": true,
      "children_can_override": false,
      "docs": "Sync this folder to a remote FTP, SFTP, or Amazon S3 Bucket.  One-way and two-way sync options are supported.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate({\n  'remote_server_id' => '1',\n  'direction' => 'two_way',\n  'keep_after_copy' => 'keep',\n  'remote_path' => ''\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`direction` | One way or two way sync?  Valid values: `push_to_server`, `pull_from_server`, `two_way`\n`remote_server_id` | ID of the remote server to sync with.  See the Remote Servers API resource for managing these.\n`keep_after_copy` | If one-way syncing, should we delete or keep files after sync?\n`remote_path` | Path on remote server to sync with\n",
      "requires_attachment": false,
      "unique_per_folder": false,
      "visible_to_non_admins": false
    },
    {
      "behavior": "inbox",
      "children_can_add": true,
      "children_can_override": false,
      "docs": "This folder operates as an inbox where anonymous users can upload files without logging in.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate({\n  'key' => 'application-forms',\n  'title' => 'Submit Your Job Applications Here',\n  'description' => 'Thanks for coming to the Files.com Job Application Page',\n  'show_on_login_page' => true,\n  'require_registration' => true,\n  'help_text' => 'If you have trouble here, please contact your recruiter.'\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`key` | URL key used for the inbox.\n`dont_separate_submissions_by_folder` | Do not create subfolders for files uploaded to this inbox. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder.  We strongly discourage use of this option unless absolutely required.\n`show_on_login_page` | Show this inbox on the login page of your website.  Only settable by admins.\n`title` | Title of the Inbox\n`description` | Description of the inbox shown on the actual inbox page.\n`help_text` | Help text shown on the inbox page.\n`require_registration` | Show a registration page that captures the uploader's name and email address?\n`password` | Password to authenticate to inbox.\n",
      "requires_attachment": false,
      "unique_per_folder": false,
      "visible_to_non_admins": true
    },
    {
      "behavior": "append_timestamp",
      "children_can_add": false,
      "children_can_override": false,
      "docs": "Append a timestamp to filenames of all files uploaded to this folder.\nThis is often used in conjunction with Automations and remote server sync to ensure file organization.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate({\n  'format' => '-YYYY-MM-DDThh:mm:ssZ',\n  'time_zone' => 'Eastern Time (US & Canada)'\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`format` | Format for the timestamp.  You may use anything accepted by the standard UNIX date command.\n`time_zone` | Accepts any valid timezone value from the web interface (e.g. \"Eastern Time (US & Canada)\") or a UTC offset (\"-05:00\").  Omit parameter for UTC time.\n",
      "requires_attachment": false,
      "unique_per_folder": true,
      "visible_to_non_admins": true
    },
    {
      "behavior": "limit_file_extensions",
      "children_can_add": false,
      "children_can_override": false,
      "docs": "Limit the allowed extensions of files being uploaded to this folder.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate({\n  'extensions' => [ 'xls', 'csv' ],\n  'mode' => 'whitelist',\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`extensions` | Array of whitelisted/blacklisted file extensions, depending on mode\n`mode` | controls whether the behavior acts as a whitelist or as a blacklist. Default is `whitelist`.\n",
      "requires_attachment": false,
      "unique_per_folder": true,
      "visible_to_non_admins": true
    },
    {
      "behavior": "limit_file_regex",
      "children_can_add": false,
      "children_can_override": false,
      "docs": "Limit the filenames of files in this folder according to a regular expression.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate([ \"/Document-.*/\" ])%>\n```\nValue is stored as a single-element Array (not a hash) containing the regular expression, which must start and end with slashes.\n",
      "requires_attachment": false,
      "unique_per_folder": true,
      "visible_to_non_admins": true
    },
    {
      "behavior": "amazon_sns",
      "children_can_add": true,
      "children_can_override": false,
      "docs": "Sends a notification via Amazon SNS whenever certain actions occur on a folder.\n\n> Example Value\n\n```json\n<%=JSON.pretty_generate({\n  'arns' => ['ARN...'],\n  'triggers' => [ 'create', 'read', 'update', 'destroy', 'move', 'copy' ],\n  'aws_credentials' => {\n    'access_key_id' => 'ACCESS_KEY_ID',\n    'region' => 'us-east-1',\n    'secret_access_key' => 'SECRET_ACCESS_KEY'\n  }\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`arns` | Array of ARNs to send the notifications to.\n`triggers` | Leave blank to send an SNS notification on any action on this folder.  Or, for specific actions, you may specify an array of action types.  Valid values are: `create`, `read`, `update`, `destroy`, `move`, `copy`.\n`aws_credentials` | AWS IAM Credentials to use for sending SNS requests. Must include `access_key_id`, and `secret_access_key`.\n",
      "requires_attachment": false,
      "unique_per_folder": false,
      "visible_to_non_admins": false
    },
    {
      "behavior": "watermark",
      "children_can_add": false,
      "children_can_override": false,
      "docs": "Adds a watermark to any image preview generated for an image in this folder.\n\n```json\n<%=JSON.pretty_generate({\n  'gravity' => 'SouthWest',\n  'max_height_or_width' => 20,\n  'transparency' => 25\n})%>\n```\n\nValue Hash Parameters | &nbsp;\n--- | ---\n`gravity` | Where to locate the watermark?  Valid values: `Center`, `East`, `NorthEast`, `North`, `NorthWest`, `SouthEast`, `South`, `SouthWest`, `West`\n`max_height_or_width` | Max width/height as percent of image preview.\n`transparency` | Percentage applied to the watermark.\n",
      "requires_attachment": true,
      "unique_per_folder": true,
      "visible_to_non_admins": true
    }
  ],
  "x-regions": [
    {
      "description": "USA, Virginia",
      "name": "us-east-1"
    },
    {
      "description": "Australia, Sydney",
      "name": "ap-southeast-2"
    },
    {
      "description": "Canada, Toronto",
      "name": "ca-central-1"
    },
    {
      "description": "EU - UK, London",
      "name": "eu-west-2"
    },
    {
      "description": "EU - Germany, Frankfurt",
      "name": "eu-central-1"
    },
    {
      "description": "Japan, Tokyo",
      "name": "ap-northeast-1"
    },
    {
      "description": "Singapore",
      "name": "ap-southeast-1"
    }
  ]
}