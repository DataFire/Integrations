{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "vocadb.net",
  "info": {
    "contact": {
      "x-twitter": "vocadb"
    },
    "title": "VocaDB",
    "version": "v1",
    "x-apisguru-categories": [
      "media"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_vocadb_profile_image.jpeg"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://vocadb.net/swagger/docs/v1",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "vocadb.net",
    "x-datafire": {
      "name": "vocadb",
      "type": "openapi"
    }
  },
  "paths": {
    "/api/activityEntries": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Entries are always returned sorted from newest to oldest.\r\n            Activity for deleted entries is not returned.",
        "operationId": "ActivityEntryApi_GetList",
        "parameters": [
          {
            "description": "Filter to return activity entries only before this date. Optional, by default no filter.",
            "format": "date-time",
            "in": "query",
            "name": "before",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter to return activity entries only after this date. Optional, by default no filter.",
            "format": "date-time",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by user Id. Optional, by default no filter.",
            "format": "int32",
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by entry edit event (either Created or Updated). Optional, by default no filter.",
            "enum": [
              "Created",
              "Updated",
              "Deleted",
              "Restored"
            ],
            "in": "query",
            "name": "editEvent",
            "required": false,
            "type": "string"
          },
          {
            "description": "Entry type. Optional.",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User",
              "Venue"
            ],
            "in": "query",
            "name": "entryType",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results to return. Default 50. Maximum value 500.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optional fields.",
            "enum": [
              "None",
              "ArchivedVersion",
              "Entry"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional fields for entries.",
            "enum": [
              "None",
              "AdditionalNames",
              "Description",
              "MainPicture",
              "Names",
              "PVs",
              "Tags",
              "WebLinks"
            ],
            "in": "query",
            "name": "entryFields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference. Optional.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort rule. Optional.",
            "enum": [
              "CreateDateDescending",
              "CreateDate"
            ],
            "in": "query",
            "name": "sortRule",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[ActivityEntryForApiContract]"
            }
          }
        },
        "summary": "Gets a list of recent activity entries.",
        "tags": [
          "ActivityEntryApi"
        ]
      }
    },
    "/api/albums": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "AlbumApi_GetList",
        "parameters": [
          {
            "description": "Album name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Disc type. By default nothing. Possible values are Album, Single, EP, SplitAlbum, Compilation, Video, Other. Note: only one type supported for now.",
            "enum": [
              "Unknown",
              "Album",
              "Single",
              "EP",
              "SplitAlbum",
              "Compilation",
              "Video",
              "Artbook",
              "Game",
              "Fanmade",
              "Instrumental",
              "Other"
            ],
            "in": "query",
            "name": "discTypes",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by tag name (optional). This filter can be specified multiple times.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tagName",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by tag Id (optional). This filter can be specified multiple times.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Include child tags, if the tags being filtered by have any.",
            "in": "query",
            "name": "childTags",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by artist Id (optional).",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "artistId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Filter by artist participation status. Only valid if artistId is specified.\r\n            Everything (default): Show all albums by that artist (no filter).\r\n            OnlyMainAlbums: Show only main albums by that artist.\r\n            OnlyCollaborations: Show only collaborations by that artist.",
            "enum": [
              "Everything",
              "OnlyMainAlbums",
              "OnlyCollaborations"
            ],
            "in": "query",
            "name": "artistParticipationStatus",
            "required": false,
            "type": "string"
          },
          {
            "description": "Include child voicebanks, if the artist being filtered by has any.",
            "in": "query",
            "name": "childVoicebanks",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include members of groups. This applies if {artistId} is a group.",
            "in": "query",
            "name": "includeMembers",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Filter by album barcode (optional).",
            "in": "query",
            "name": "barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by entry status (optional).",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by albums whose release date is after this date (inclusive).",
            "format": "date-time",
            "in": "query",
            "name": "releaseDateAfter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by albums whose release date is before this date (exclusive).",
            "format": "date-time",
            "in": "query",
            "name": "releaseDateBefore",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of advanced filters (optional).",
            "in": "query",
            "items": {},
            "name": "advancedFilters",
            "required": false,
            "type": "array"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Sort rule (optional, defaults to Name). \r\n            Possible values are None, Name, ReleaseDate, ReleaseDateWithNulls, AdditionDate, RatingAverage, RatingTotal, NameThenReleaseDate.",
            "enum": [
              "None",
              "Name",
              "ReleaseDate",
              "ReleaseDateWithNulls",
              "AdditionDate",
              "RatingAverage",
              "RatingTotal",
              "NameThenReleaseDate",
              "CollectionCount"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether the search should prefer accurate matches. \r\n            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.\r\n            Requires a text query. Does not support pagination.\r\n            This is mostly useful for autocomplete boxes.",
            "in": "query",
            "name": "preferAccurateMatches",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Whether to search for deleted entries.\r\n            If this is true, only deleted entries will be returned.\r\n            If this is false (default), deleted entries are not returned.",
            "in": "query",
            "name": "deleted",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Match mode for artist name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional fields (optional). Possible values are artists, names, pvs, tags, tracks, webLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[AlbumForApiContract]"
            }
          }
        },
        "summary": "Gets a page of albums.",
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/comments/{commentId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
        "operationId": "AlbumApi_DeleteComment",
        "parameters": [
          {
            "description": "ID of the comment to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a comment.",
        "tags": [
          "AlbumApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
        "operationId": "AlbumApi_PostEditComment",
        "parameters": [
          {
            "description": "ID of the comment to be edited.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "New comment data. Only message can be edited.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Updates a comment.",
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/names": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "AlbumApi_GetNames",
        "parameters": [
          {
            "description": "Text query.",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of album names. Ideal for autocomplete boxes.",
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/new": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Output is cached for 1 hour.",
        "operationId": "AlbumApi_GetNewAlbums",
        "parameters": [
          {
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "languagePreference",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/AlbumForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets list of upcoming or recent albums, same as front page.",
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/top": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Output is cached for 1 hour.",
        "operationId": "AlbumApi_GetTopAlbums",
        "parameters": [
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "ignoreIds",
            "required": false,
            "type": "array"
          },
          {
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "languagePreference",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/AlbumForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets list of top rated albums, same as front page.",
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/{id}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "AlbumApi_Delete",
        "parameters": [
          {
            "description": "ID of the album to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Notes.",
            "in": "query",
            "name": "notes",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes an album.",
        "tags": [
          "AlbumApi"
        ]
      },
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "AlbumApi_GetOne",
        "parameters": [
          {
            "description": "Album Id (required).",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Optional fields (optional). Possible values are artists, names, pvs, tags, tracks, webLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional fields for tracks, if included (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "songFields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AlbumForApiContract"
            }
          }
        },
        "summary": "Gets an album by Id.",
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/{id}/comments": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Pagination and sorting might be added later.",
        "operationId": "AlbumApi_GetComments",
        "parameters": [
          {
            "description": "ID of the album whose comments to load.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/CommentForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of comments for an album.",
        "tags": [
          "AlbumApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "AlbumApi_PostNewComment",
        "parameters": [
          {
            "description": "ID of the album for which to create the comment.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment data. Message and author must be specified. Author must match the logged in user.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        },
        "summary": "Posts a new comment.",
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/{id}/reviews": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "AlbumApi_GetReviews",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "languageCode",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/AlbumReviewContract"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "AlbumApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "AlbumApi_PostReview",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "reviewContract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlbumReviewContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AlbumReviewContract"
            }
          }
        },
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/{id}/reviews/{reviewId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "AlbumApi_DeleteReview",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/{id}/tracks": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "AlbumApi_GetTracks",
        "parameters": [
          {
            "description": "Album ID (required).",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/SongInAlbumForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets tracks for an album.",
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/{id}/tracks/fields": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "AlbumApi_GetTracksFields",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "field",
            "required": false,
            "type": "array"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "discNumber",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/csv",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/albums/{id}/user-collections": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "AlbumApi_GetUserCollections",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "languagePreference",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/AlbumForUserForApiContract"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "AlbumApi"
        ]
      }
    },
    "/api/artists": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ArtistApi_GetList",
        "parameters": [
          {
            "description": "Artist name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filtered artist type (optional).",
            "in": "query",
            "name": "artistTypes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Allow base voicebanks. If false, only root voicebanks will be allowed. Only affects voice synthesizers that can have base voicebanks.",
            "in": "query",
            "name": "allowBaseVoicebanks",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by tag name (optional).",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tagName",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by tag Id (optional). This filter can be specified multiple times.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Include child tags, if the tags being filtered by have any.",
            "in": "query",
            "name": "childTags",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Filter by user following the artists. By default there is no filtering.",
            "format": "int32",
            "in": "query",
            "name": "followedByUserId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by entry status (optional).",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of advanced filters (optional).",
            "in": "query",
            "items": {},
            "name": "advancedFilters",
            "required": false,
            "type": "array"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 100).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, AdditionDateAsc.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "AdditionDateAsc",
              "ReleaseDate",
              "SongCount",
              "SongRating",
              "FollowerCount"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether the search should prefer accurate matches. \r\n            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.\r\n            Requires a text query. Does not support pagination.\r\n            This is mostly useful for autocomplete boxes.",
            "in": "query",
            "name": "preferAccurateMatches",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Match mode for artist name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional). Possible values are Description, Groups, Members, Names, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "ArtistLinks",
              "ArtistLinksReverse",
              "BaseVoicebank",
              "Description",
              "MainPicture",
              "Names",
              "Tags",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[ArtistForApiContract]"
            }
          }
        },
        "summary": "Find artists.",
        "tags": [
          "ArtistApi"
        ]
      }
    },
    "/api/artists/comments/{commentId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
        "operationId": "ArtistApi_DeleteComment",
        "parameters": [
          {
            "description": "ID of the comment to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a comment.",
        "tags": [
          "ArtistApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
        "operationId": "ArtistApi_PostEditComment",
        "parameters": [
          {
            "description": "ID of the comment to be edited.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "New comment data. Only message can be edited.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Updates a comment.",
        "tags": [
          "ArtistApi"
        ]
      }
    },
    "/api/artists/names": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ArtistApi_GetNames",
        "parameters": [
          {
            "description": "Text query.",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of artist names. Ideal for autocomplete boxes.",
        "tags": [
          "ArtistApi"
        ]
      }
    },
    "/api/artists/{id}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ArtistApi_Delete",
        "parameters": [
          {
            "description": "ID of the artist to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Notes.",
            "in": "query",
            "name": "notes",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes an artist.",
        "tags": [
          "ArtistApi"
        ]
      },
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ArtistApi_GetOne",
        "parameters": [
          {
            "description": "Artist ID (required).",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of optional fields (optional). Possible values are Description, Groups, Members, Names, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "ArtistLinks",
              "ArtistLinksReverse",
              "BaseVoicebank",
              "Description",
              "MainPicture",
              "Names",
              "Tags",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of artist relations (optional). Possible values are LatestAlbums, PopularAlbums, LatestSongs, PopularSongs, All",
            "enum": [
              "None",
              "LatestAlbums",
              "LatestEvents",
              "LatestSongs",
              "PopularAlbums",
              "PopularSongs",
              "All"
            ],
            "in": "query",
            "name": "relations",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ArtistForApiContract"
            }
          }
        },
        "summary": "Gets an artist by Id.",
        "tags": [
          "ArtistApi"
        ]
      }
    },
    "/api/artists/{id}/comments": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Pagination and sorting might be added later.",
        "operationId": "ArtistApi_GetComments",
        "parameters": [
          {
            "description": "ID of the artist whose comments to load.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/CommentForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of comments for an artist.",
        "tags": [
          "ArtistApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "ArtistApi_PostNewComment",
        "parameters": [
          {
            "description": "ID of the artist for which to create the comment.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment data. Message and author must be specified. Author must match the logged in user.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        },
        "summary": "Posts a new comment.",
        "tags": [
          "ArtistApi"
        ]
      }
    },
    "/api/comments/{entryType}-comments": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "CommentApi_GetComments",
        "parameters": [
          {
            "description": "Entry type.",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User",
              "Venue"
            ],
            "in": "path",
            "name": "entryType",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the entry whose comments to load.",
            "format": "int32",
            "in": "query",
            "name": "entryId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[CommentForApiContract]"
            }
          }
        },
        "summary": "Gets a list of comments for an entry.",
        "tags": [
          "CommentApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "CommentApi_PostNewComment",
        "parameters": [
          {
            "description": "Entry type.",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User",
              "Venue"
            ],
            "in": "path",
            "name": "entryType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Comment data. Message, entry and author must be specified. Author must match the logged in user.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        },
        "summary": "Posts a new comment.",
        "tags": [
          "CommentApi"
        ]
      }
    },
    "/api/comments/{entryType}-comments/{commentId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
        "operationId": "CommentApi_DeleteComment",
        "parameters": [
          {
            "description": "Entry type.",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User",
              "Venue"
            ],
            "in": "path",
            "name": "entryType",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the comment to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a comment.",
        "tags": [
          "CommentApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
        "operationId": "CommentApi_PostEditComment",
        "parameters": [
          {
            "description": "Entry type.",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User",
              "Venue"
            ],
            "in": "path",
            "name": "entryType",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the comment to be edited.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "New comment data. Only message can be edited.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Updates a comment.",
        "tags": [
          "CommentApi"
        ]
      }
    },
    "/api/discussions/comments/{commentId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "DiscussionApi_DeleteComment",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "DiscussionApi_PostEditComment",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      }
    },
    "/api/discussions/folders": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "DiscussionApi_GetFolders",
        "parameters": [
          {
            "enum": [
              "None",
              "LastTopic",
              "TopicCount"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/DiscussionFolderContract"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "DiscussionApi_PostNewFolder",
        "parameters": [
          {
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscussionFolderContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DiscussionFolderContract"
            }
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      }
    },
    "/api/discussions/folders/{folderId}/topics": {
      "get": {
        "consumes": [],
        "deprecated": true,
        "operationId": "DiscussionApi_GetTopicsForFolder",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "folderId",
            "required": true,
            "type": "integer"
          },
          {
            "enum": [
              "None",
              "Comments",
              "CommentCount",
              "Content",
              "LastComment",
              "All"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/DiscussionTopicContract"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "DiscussionApi_PostNewTopic",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "folderId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscussionTopicContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DiscussionTopicContract"
            }
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      }
    },
    "/api/discussions/topics": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "DiscussionApi_GetTopics",
        "parameters": [
          {
            "format": "int32",
            "in": "query",
            "name": "folderId",
            "required": false,
            "type": "integer"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "None",
              "Name",
              "DateCreated",
              "LastCommentDate"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "None",
              "Comments",
              "CommentCount",
              "Content",
              "LastComment",
              "All"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[DiscussionTopicContract]"
            }
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      }
    },
    "/api/discussions/topics/{topicId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "DiscussionApi_DeleteTopic",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "topicId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      },
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "DiscussionApi_GetTopic",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "topicId",
            "required": true,
            "type": "integer"
          },
          {
            "enum": [
              "None",
              "Comments",
              "CommentCount",
              "Content",
              "LastComment",
              "All"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DiscussionTopicContract"
            }
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "DiscussionApi_PostEditTopic",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "topicId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscussionTopicContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      }
    },
    "/api/discussions/topics/{topicId}/comments": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "DiscussionApi_PostNewComment",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "topicId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        },
        "tags": [
          "DiscussionApi"
        ]
      }
    },
    "/api/entries": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "EntryApi_GetList",
        "parameters": [
          {
            "description": "Entry name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by tag name (optional).",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tagName",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by tag Id (optional).",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Include child tags, if the tags being filtered by have any.",
            "in": "query",
            "name": "childTags",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Included entry types (optional).",
            "enum": [
              "Nothing",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User",
              "Venue"
            ],
            "in": "query",
            "name": "entryTypes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by entry status (optional).",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 30).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "ActivityDate"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Match mode for entry name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional). Possible values are Description, MainPicture, Names, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Description",
              "MainPicture",
              "Names",
              "PVs",
              "Tags",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[EntryForApiContract]"
            }
          }
        },
        "summary": "Find entries.",
        "tags": [
          "EntryApi"
        ]
      }
    },
    "/api/entries/names": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "EntryApi_GetNames",
        "parameters": [
          {
            "description": "Text query.",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of entry names. Ideal for autocomplete boxes.",
        "tags": [
          "EntryApi"
        ]
      }
    },
    "/api/entry-types/{entryType}/{subType}/tag": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "EntryTypesApi_GetMappedTag",
        "parameters": [
          {
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User",
              "Venue"
            ],
            "in": "path",
            "name": "entryType",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subType",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "None",
              "AdditionalNames",
              "AliasedTo",
              "Description",
              "MainPicture",
              "Names",
              "Parent",
              "RelatedTags",
              "TranslatedDescription",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagForApiContract"
            }
          }
        },
        "tags": [
          "EntryTypesApi"
        ]
      }
    },
    "/api/pvs/for-songs": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "PVApi_GetList",
        "parameters": [
          {
            "description": "PV title (optional).",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Uploader name (optional).",
            "in": "query",
            "name": "author",
            "required": false,
            "type": "string"
          },
          {
            "description": "PV service (optional).",
            "enum": [
              "NicoNicoDouga",
              "Youtube",
              "SoundCloud",
              "Vimeo",
              "Piapro",
              "Bilibili",
              "File",
              "LocalFile",
              "Creofuga",
              "Bandcamp"
            ],
            "in": "query",
            "name": "service",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[PVForSongContract]"
            }
          }
        },
        "summary": "Gets a list of PVs for songs.",
        "tags": [
          "PVApi"
        ]
      }
    },
    "/api/releaseEventSeries": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventSeriesApi_GetList",
        "parameters": [
          {
            "description": "Text query.",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional fields to include.",
            "enum": [
              "None",
              "AdditionalNames",
              "Description",
              "Events",
              "MainPicture",
              "Names",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "First item to be retrieved (optional).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Match mode for event name (optional).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[ReleaseEventSeriesForApiContract]"
            }
          }
        },
        "summary": "Gets a page of event series.",
        "tags": [
          "ReleaseEventSeriesApi"
        ]
      }
    },
    "/api/releaseEventSeries/{id}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventSeriesApi_Delete",
        "parameters": [
          {
            "description": "ID of the series to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Notes.",
            "in": "query",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.\r\n            If false, the entry is soft deleted, meaning it can still be restored.",
            "in": "query",
            "name": "hardDelete",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes an event series.",
        "tags": [
          "ReleaseEventSeriesApi"
        ]
      },
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventSeriesApi_GetOne",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "enum": [
              "None",
              "AdditionalNames",
              "Description",
              "Events",
              "MainPicture",
              "Names",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReleaseEventSeriesForApiContract"
            }
          }
        },
        "summary": "Gets single event series by ID.",
        "tags": [
          "ReleaseEventSeriesApi"
        ]
      }
    },
    "/api/releaseEvents": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventApi_GetList",
        "parameters": [
          {
            "description": "Event name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Match mode for event name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by series Id.",
            "format": "int32",
            "in": "query",
            "name": "seriesId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by events after this date (inclusive).",
            "format": "date-time",
            "in": "query",
            "name": "afterDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by events before this date (exclusive).",
            "format": "date-time",
            "in": "query",
            "name": "beforeDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by event category.",
            "enum": [
              "Unspecified",
              "AlbumRelease",
              "Anniversary",
              "Club",
              "Concert",
              "Contest",
              "Convention",
              "Other"
            ],
            "in": "query",
            "name": "category",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter to include only events in user's events (interested or attending).",
            "format": "int32",
            "in": "query",
            "name": "userCollectionId",
            "required": false,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by one or more tag Ids (optional).",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Include child tags, if the tags being filtered by have any.",
            "in": "query",
            "name": "childTags",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by artist Id.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "artistId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Include child voicebanks, if the artist being filtered by has any.",
            "in": "query",
            "name": "childVoicebanks",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include members of groups. This applies if {artistId} is a group.",
            "in": "query",
            "name": "includeMembers",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Filter by entry status.",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Sort rule (optional, defaults to Name). \r\n            Possible values are None, Name, Date, SeriesName.",
            "enum": [
              "None",
              "Name",
              "Date",
              "AdditionDate",
              "SeriesName",
              "VenueName"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional fields (optional). Possible values are Description, Series.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "MainPicture",
              "Names",
              "Series",
              "SongList",
              "Tags",
              "Venue",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[ReleaseEventForApiContract]"
            }
          }
        },
        "summary": "Gets a page of events.",
        "tags": [
          "ReleaseEventApi"
        ]
      }
    },
    "/api/releaseEvents/names": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventApi_GetNames",
        "parameters": [
          {
            "description": "Event name query, for example \"Voc@loid\".",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of search results.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find event names by a part of name.\r\n            \r\n            Matching is done anywhere from the name.",
        "tags": [
          "ReleaseEventApi"
        ]
      }
    },
    "/api/releaseEvents/{eventId}/albums": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventApi_GetAlbums",
        "parameters": [
          {
            "description": "Release event ID.",
            "format": "int32",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of optional album fields.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/AlbumForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of albums for a specific event.",
        "tags": [
          "ReleaseEventApi"
        ]
      }
    },
    "/api/releaseEvents/{eventId}/published-songs": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventApi_GetPublishedSongs",
        "parameters": [
          {
            "description": "Event ID.",
            "format": "int32",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of optional song fields.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/SongForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of songs for a specific event.",
        "tags": [
          "ReleaseEventApi"
        ]
      }
    },
    "/api/releaseEvents/{eventId}/reports": {
      "post": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventApi_PostReport",
        "parameters": [
          {
            "description": "Event to be reported.",
            "format": "int32",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Report type.",
            "enum": [
              "InvalidInfo",
              "Duplicate",
              "Inappropriate",
              "Other"
            ],
            "in": "query",
            "name": "reportType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Notes. Optional.",
            "in": "query",
            "name": "notes",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version to be reported. Optional.",
            "format": "int32",
            "in": "query",
            "name": "versionNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Creates a new report.",
        "tags": [
          "ReleaseEventApi"
        ]
      }
    },
    "/api/releaseEvents/{id}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventApi_Delete",
        "parameters": [
          {
            "description": "ID of the event to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Notes.",
            "in": "query",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.\r\n            If false, the entry is soft deleted, meaning it can still be restored.",
            "in": "query",
            "name": "hardDelete",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes an event.",
        "tags": [
          "ReleaseEventApi"
        ]
      },
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ReleaseEventApi_GetOne",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "MainPicture",
              "Names",
              "Series",
              "SongList",
              "Tags",
              "Venue",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReleaseEventForApiContract"
            }
          }
        },
        "tags": [
          "ReleaseEventApi"
        ]
      }
    },
    "/api/resources/{cultureCode}": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "ResourcesApi_GetList",
        "parameters": [
          {
            "description": "Culture code, for example \"en-US\" or \"fi-FI\".",
            "in": "path",
            "name": "cultureCode",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Names of resource sets to be returned. More than one value can be specified. For example \"artistTypeNames\"",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "setNames",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "type": "object"
            }
          }
        },
        "summary": "Gets a number of resource sets for a specific culture.",
        "tags": [
          "ResourcesApi"
        ]
      }
    },
    "/api/songLists": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "SongListApi_Post",
        "parameters": [
          {
            "description": "Song list properties.",
            "in": "body",
            "name": "list",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SongListForEditContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "summary": "Creates a song list.",
        "tags": [
          "SongListApi"
        ]
      }
    },
    "/api/songLists/comments/{commentId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
        "operationId": "SongListApi_DeleteComment",
        "parameters": [
          {
            "description": "ID of the comment to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a comment.",
        "tags": [
          "SongListApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
        "operationId": "SongListApi_PostEditComment",
        "parameters": [
          {
            "description": "ID of the comment to be edited.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "New comment data. Only message can be edited.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Updates a comment.",
        "tags": [
          "SongListApi"
        ]
      }
    },
    "/api/songLists/featured": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongListApi_GetFeaturedLists",
        "parameters": [
          {
            "description": "Song list name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by one or more tag Ids (optional).",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Include child tags, if the tags being filtered by have any.",
            "in": "query",
            "name": "childTags",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Match mode for list name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by a specific featured category. If empty, all categories are returned.",
            "enum": [
              "Nothing",
              "Concerts",
              "VocaloidRanking",
              "Pools",
              "Other"
            ],
            "in": "query",
            "name": "featuredCategory",
            "required": false,
            "type": "string"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "List sort rule. Possible values are Nothing, Date, CreateDate, Name.",
            "enum": [
              "None",
              "Name",
              "Date",
              "CreateDate"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional).",
            "enum": [
              "None",
              "Description",
              "Events",
              "MainPicture",
              "Tags"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[SongListForApiContract]"
            }
          }
        },
        "summary": "Gets a list of featured song lists.",
        "tags": [
          "SongListApi"
        ]
      }
    },
    "/api/songLists/featured/names": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongListApi_GetFeaturedListNames",
        "parameters": [
          {
            "description": "Text query.",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name match mode. Words is treated the same as Partial.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by a specific featured category. If empty, all categories are returned.",
            "enum": [
              "Nothing",
              "Concerts",
              "VocaloidRanking",
              "Pools",
              "Other"
            ],
            "in": "query",
            "name": "featuredCategory",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of featuedd list names. Ideal for autocomplete boxes.",
        "tags": [
          "SongListApi"
        ]
      }
    },
    "/api/songLists/{id}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongListApi_Delete",
        "parameters": [
          {
            "description": "ID of the list to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Notes.",
            "in": "query",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.\r\n            If false, the entry is soft deleted, meaning it can still be restored.",
            "in": "query",
            "name": "hardDelete",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a song list.",
        "tags": [
          "SongListApi"
        ]
      }
    },
    "/api/songLists/{listId}/comments": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongListApi_GetComments",
        "parameters": [
          {
            "description": "ID of the list whose comments to load.",
            "format": "int32",
            "in": "path",
            "name": "listId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[CommentForApiContract]"
            }
          }
        },
        "summary": "Gets a list of comments for a song list.",
        "tags": [
          "SongListApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "SongListApi_PostNewComment",
        "parameters": [
          {
            "description": "ID of the song list for which to create the comment.",
            "format": "int32",
            "in": "path",
            "name": "listId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment data. Message and author must be specified. Author must match the logged in user.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        },
        "summary": "Posts a new comment.",
        "tags": [
          "SongListApi"
        ]
      }
    },
    "/api/songLists/{listId}/songs": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongListApi_GetSongs",
        "parameters": [
          {
            "description": "ID of the song list.",
            "format": "int32",
            "in": "path",
            "name": "listId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Song name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filtered song types (optional).",
            "in": "query",
            "name": "songTypes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.",
            "enum": [
              "Nothing",
              "NicoNicoDouga",
              "Youtube",
              "SoundCloud",
              "Vimeo",
              "Piapro",
              "Bilibili",
              "File",
              "LocalFile",
              "Creofuga",
              "Bandcamp"
            ],
            "in": "query",
            "name": "pvServices",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by one or more tag Ids (optional).",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by artist Id.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "artistId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Include child voicebanks, if the artist being filtered by has any.",
            "in": "query",
            "name": "childVoicebanks",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "List of advanced filters (optional).",
            "in": "query",
            "items": {},
            "name": "advancedFilters",
            "required": false,
            "type": "array"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Song sort rule (optional, by default songs are sorted by song list order).",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "PublishDate",
              "FavoritedTimes",
              "RatingScore",
              "TagUsageCount"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Match mode for song name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[SongInListForApiContract]"
            }
          }
        },
        "summary": "Gets a list of songs in a song list.",
        "tags": [
          "SongListApi"
        ]
      }
    },
    "/api/songs": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongApi_GetList",
        "parameters": [
          {
            "description": "Song name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filtered song types (optional). \r\n            Possible values are Original, Remaster, Remix, Cover, Instrumental, Mashup, MusicPV, DramaPV, Other.",
            "in": "query",
            "name": "songTypes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by songs published after this date (inclusive).",
            "format": "date-time",
            "in": "query",
            "name": "afterDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by songs published before this date (exclusive).",
            "format": "date-time",
            "in": "query",
            "name": "beforeDate",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by one or more tag names (optional).",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tagName",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by one or more tag Ids (optional).",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Include child tags, if the tags being filtered by have any.",
            "in": "query",
            "name": "childTags",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "When searching by song type, search by associated tag as well, and vice versa.",
            "in": "query",
            "name": "unifyTypesAndTags",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by artist Id.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "artistId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Filter by artist participation status. Only valid if artistId is specified.\r\n            Everything (default): Show all songs by that artist (no filter).\r\n            OnlyMainAlbums: Show only main songs by that artist.\r\n            OnlyCollaborations: Show only collaborations by that artist.",
            "enum": [
              "Everything",
              "OnlyMainAlbums",
              "OnlyCollaborations"
            ],
            "in": "query",
            "name": "artistParticipationStatus",
            "required": false,
            "type": "string"
          },
          {
            "description": "Include child voicebanks, if the artist being filtered by has any.",
            "in": "query",
            "name": "childVoicebanks",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include members of groups. This applies if {artistId} is a group.",
            "in": "query",
            "name": "includeMembers",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Whether to only include songs with at least one PV.",
            "in": "query",
            "name": "onlyWithPvs",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.",
            "enum": [
              "Nothing",
              "NicoNicoDouga",
              "Youtube",
              "SoundCloud",
              "Vimeo",
              "Piapro",
              "Bilibili",
              "File",
              "LocalFile",
              "Creofuga",
              "Bandcamp"
            ],
            "in": "query",
            "name": "pvServices",
            "required": false,
            "type": "string"
          },
          {
            "description": "Allow only entries that have been created at most this many hours ago. By default there is no filtering.",
            "format": "int32",
            "in": "query",
            "name": "since",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Minimum rating score. Optional.",
            "format": "int32",
            "in": "query",
            "name": "minScore",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by user's rated songs. By default there is no filtering.",
            "format": "int32",
            "in": "query",
            "name": "userCollectionId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by release event. By default there is no filtering.",
            "format": "int32",
            "in": "query",
            "name": "releaseEventId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by parent song. By default there is no filtering.",
            "format": "int32",
            "in": "query",
            "name": "parentSongId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by entry status (optional).",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of advanced filters (optional).",
            "in": "query",
            "items": {},
            "name": "advancedFilters",
            "required": false,
            "type": "array"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "PublishDate",
              "FavoritedTimes",
              "RatingScore",
              "TagUsageCount"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether the search should prefer accurate matches. \r\n            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.\r\n            Requires a text query. Does not support pagination.\r\n            This is mostly useful for autocomplete boxes.",
            "in": "query",
            "name": "preferAccurateMatches",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Match mode for song name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[SongForApiContract]"
            }
          }
        },
        "summary": "Find songs.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/byPv": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongApi_GetByPV",
        "parameters": [
          {
            "description": "PV service (required). Possible values are NicoNicoDouga, Youtube, SoundCloud, Vimeo, Piapro, Bilibili.",
            "enum": [
              "NicoNicoDouga",
              "Youtube",
              "SoundCloud",
              "Vimeo",
              "Piapro",
              "Bilibili",
              "File",
              "LocalFile",
              "Creofuga",
              "Bandcamp"
            ],
            "in": "query",
            "name": "pvService",
            "required": true,
            "type": "string"
          },
          {
            "description": "PV Id (required). For example sm123456.",
            "in": "query",
            "name": "pvId",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SongForApiContract"
            }
          }
        },
        "summary": "Gets a song by PV.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/comments/{commentId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
        "operationId": "SongApi_DeleteComment",
        "parameters": [
          {
            "description": "ID of the comment to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a comment.",
        "tags": [
          "SongApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
        "operationId": "SongApi_PostEditComment",
        "parameters": [
          {
            "description": "ID of the comment to be edited.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "New comment data. Only message can be edited.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Updates a comment.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/highlighted": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Output is cached for 1 hour.",
        "operationId": "SongApi_GetHighlightedSongs",
        "parameters": [
          {
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "languagePreference",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/SongForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets list of highlighted songs, same as front page.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/lyrics/{lyricsId}": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Output is cached. Specify song version as parameter to refresh.",
        "operationId": "SongApi_GetLyrics",
        "parameters": [
          {
            "description": "Lyrics ID.",
            "format": "int32",
            "in": "path",
            "name": "lyricsId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LyricsForSongContract"
            }
          }
        },
        "summary": "Gets lyrics by ID.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/names": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongApi_GetNames",
        "parameters": [
          {
            "description": "Text query.",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of song names. Ideal for autocomplete boxes.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/top-rated": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongApi_GetTopSongs",
        "parameters": [
          {
            "description": "Duration in hours from which to get songs.",
            "format": "int32",
            "in": "query",
            "name": "durationHours",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Lower bound of the date. Optional.",
            "format": "date-time",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filtering mode.",
            "enum": [
              "CreateDate",
              "PublishDate",
              "Popularity"
            ],
            "in": "query",
            "name": "filterBy",
            "required": false,
            "type": "string"
          },
          {
            "description": "Vocalist selection.",
            "enum": [
              "Nothing",
              "Vocaloid",
              "UTAU",
              "CeVIO"
            ],
            "in": "query",
            "name": "vocalist",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results to be loaded (optional).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Optional song fields to load.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "languagePreference",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/SongForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets top rated songs.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/{id}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongApi_Delete",
        "parameters": [
          {
            "description": "ID of the song to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Notes.",
            "in": "query",
            "name": "notes",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a song.",
        "tags": [
          "SongApi"
        ]
      },
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongApi_GetById",
        "parameters": [
          {
            "description": "Song Id (required).",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of optional fields (optional). \r\n            Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SongForApiContract"
            }
          }
        },
        "summary": "Gets a song by Id.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/{id}/comments": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Pagination and sorting might be added later.",
        "operationId": "SongApi_GetComments",
        "parameters": [
          {
            "description": "ID of the song whose comments to load.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/CommentForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of comments for a song.",
        "tags": [
          "SongApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "SongApi_PostNewComment",
        "parameters": [
          {
            "description": "ID of the song for which to create the comment.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment data. Message and author must be specified. Author must match the logged in user.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        },
        "summary": "Posts a new comment.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/{id}/derived": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Pagination and sorting might be added later.",
        "operationId": "SongApi_GetDerived",
        "parameters": [
          {
            "description": "Song Id (required).",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of optional fields (optional). \r\n            Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/SongForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets derived (alternate versions) of a song.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/{id}/ratings": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "The result includes ratings and user information.\r\n            For users who have requested not to make their ratings public, the user will be empty.",
        "operationId": "SongApi_GetRatings",
        "parameters": [
          {
            "description": "Song ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Optional fields for the users.",
            "enum": [
              "None",
              "KnownLanguages",
              "MainPicture",
              "OldUsernames"
            ],
            "in": "query",
            "name": "userFields",
            "required": true,
            "type": "string"
          },
          {
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/RatedSongForUserForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get ratings for a song.",
        "tags": [
          "SongApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "description": "If the user has already rated the song, any previous rating is replaced.\r\n            Authorization cookie must be included.\r\n            This API supports CORS.",
        "operationId": "SongApi_PostRating",
        "parameters": [
          {
            "description": "ID of the song to be rated.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Rating to be given. Possible values are Nothing, Like, Favorite.",
            "in": "body",
            "name": "rating",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SongRatingContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Add or update rating for a specific song, for the currently logged in user.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/songs/{id}/related": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "SongApi_GetRelated",
        "parameters": [
          {
            "description": "Song whose related songs are to be queried.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Optional song fields.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RelatedSongsContract"
            }
          }
        },
        "summary": "Gets related songs.",
        "tags": [
          "SongApi"
        ]
      }
    },
    "/api/tags": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_GetList",
        "parameters": [
          {
            "description": "Tag name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether to allow child tags. If this is false, only root tags (that aren't children of any other tag) will be included.",
            "in": "query",
            "name": "allowChildren",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Filter tags by category (optional). If specified, this must be an exact match (case insensitive).",
            "in": "query",
            "name": "categoryName",
            "required": false,
            "type": "string"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 30).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Match mode for song name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort rule (optional, by default tags are sorted by name).Possible values are Name and UsageCount.",
            "enum": [
              "Nothing",
              "Name",
              "AdditionDate",
              "UsageCount"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether the search should prefer accurate matches. \r\n            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.\r\n            Requires a text query. Does not support pagination.\r\n            This is mostly useful for autocomplete boxes.",
            "in": "query",
            "name": "preferAccurateMatches",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "List of optional fields (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "AliasedTo",
              "Description",
              "MainPicture",
              "Names",
              "Parent",
              "RelatedTags",
              "TranslatedDescription",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Nothing",
              "Album",
              "Artist",
              "AlbumArtist",
              "Event",
              "Song",
              "AlbumSong",
              "ArtistSong",
              "All"
            ],
            "in": "query",
            "name": "target",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[TagForApiContract]"
            }
          }
        },
        "summary": "Find tags.",
        "tags": [
          "TagApi"
        ]
      },
      "post": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_PostNewTag",
        "parameters": [
          {
            "description": "Tag English name. Tag names must be unique.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagBaseContract"
            }
          },
          "400": {
            "description": "If tag name is already in use"
          }
        },
        "summary": "Creates a new tag.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/tags/byName/{name}": {
      "get": {
        "consumes": [],
        "deprecated": true,
        "operationId": "TagApi_GetByName",
        "parameters": [
          {
            "description": "Tag name (required).",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "AliasedTo",
              "Description",
              "MainPicture",
              "Names",
              "Parent",
              "RelatedTags",
              "TranslatedDescription",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagForApiContract"
            }
          }
        },
        "summary": "DEPRECATED. Gets a tag by name.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/tags/categoryNames": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_GetCategoryNamesList",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of tag category names.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/tags/comments/{commentId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_DeleteComment",
        "parameters": [
          {
            "description": "ID of the comment to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a comment.\r\n            Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
        "tags": [
          "TagApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "TagApi_PostEditComment",
        "parameters": [
          {
            "description": "ID of the comment to be edited.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "New comment data. Only message can be edited.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Updates a comment.\r\n            Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/tags/names": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_GetNames",
        "parameters": [
          {
            "description": "Tag name query, for example \"rock\".",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether to find tags that are aliases of other tags as well. \r\n            If false, only tags that are not aliases will be listed.",
            "in": "query",
            "name": "allowAliases",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Maximum number of search results.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Find tag names by a part of name.\r\n            \r\n            Matching is done anywhere from the name.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/tags/top": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_GetTopTags",
        "parameters": [
          {
            "description": "Tag category, for example \"Genres\". Optional - if not specified, no filtering is done.",
            "in": "query",
            "name": "categoryName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Tag usage entry type. Optional - if not specified, all entry types are included.",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User",
              "Venue"
            ],
            "in": "query",
            "name": "entryType",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of tags to return.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/TagBaseContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets the most common tags in a category.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/tags/{id}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_Delete",
        "parameters": [
          {
            "description": "ID of the tag to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Notes (optional).",
            "in": "query",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.\r\n            If false, the entry is soft deleted, meaning it can still be restored.",
            "in": "query",
            "name": "hardDelete",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a tag.",
        "tags": [
          "TagApi"
        ]
      },
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_GetById",
        "parameters": [
          {
            "description": "Tag ID (required).",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of optional fields (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "AliasedTo",
              "Description",
              "MainPicture",
              "Names",
              "Parent",
              "RelatedTags",
              "TranslatedDescription",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagForApiContract"
            }
          }
        },
        "summary": "Gets a tag by ID.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/tags/{tagId}/children": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_GetChildTags",
        "parameters": [
          {
            "description": "ID of the tag whose children to load.",
            "format": "int32",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of optional fields (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "AliasedTo",
              "Description",
              "MainPicture",
              "Names",
              "Parent",
              "RelatedTags",
              "TranslatedDescription",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/TagForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of child tags for a tag.\r\n            Only direct children will be included.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/tags/{tagId}/comments": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_GetComments",
        "parameters": [
          {
            "description": "ID of the tag whose comments to load.",
            "format": "int32",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[CommentForApiContract]"
            }
          }
        },
        "summary": "Gets a list of comments for a tag.\r\n            Note: pagination and sorting might be added later.",
        "tags": [
          "TagApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "TagApi_PostNewComment",
        "parameters": [
          {
            "description": "ID of the tag for which to create the comment.",
            "format": "int32",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment data. Message and author must be specified. Author must match the logged in user.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        },
        "summary": "Posts a new comment.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/tags/{tagId}/reports": {
      "post": {
        "consumes": [],
        "deprecated": false,
        "operationId": "TagApi_PostReport",
        "parameters": [
          {
            "description": "Tag to be reported.",
            "format": "int32",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Report type.",
            "enum": [
              "InvalidInfo",
              "Duplicate",
              "Inappropriate",
              "Other"
            ],
            "in": "query",
            "name": "reportType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Notes. Optional.",
            "in": "query",
            "name": "notes",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version to be reported. Optional.",
            "format": "int32",
            "in": "query",
            "name": "versionNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Creates a new report.",
        "tags": [
          "TagApi"
        ]
      }
    },
    "/api/users": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetList",
        "parameters": [
          {
            "description": "User name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by user group. Only one value supported for now. Optional.",
            "enum": [
              "Nothing",
              "Limited",
              "Regular",
              "Trusted",
              "Moderator",
              "Admin"
            ],
            "in": "query",
            "name": "groups",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by users who joined after this date (inclusive).",
            "format": "date-time",
            "in": "query",
            "name": "joinDateAfter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by users who joined before this date (exclusive).",
            "format": "date-time",
            "in": "query",
            "name": "joinDateBefore",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Index of the first entry to be loaded.",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to get total number of results.",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Sort rule.",
            "enum": [
              "RegisterDate",
              "Name",
              "Group"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether to include disabled user accounts.",
            "in": "query",
            "name": "includeDisabled",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Whether to only include verified artists.",
            "in": "query",
            "name": "onlyVerified",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Filter by known language (optional). This is the ISO 639-1 language code, for example \"en\" or \"zh\".",
            "in": "query",
            "name": "knowsLanguage",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional fields. Possible values are None and MainPicture. Optional.",
            "enum": [
              "None",
              "KnownLanguages",
              "MainPicture",
              "OldUsernames"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[UserForApiContract]"
            }
          }
        },
        "summary": "Gets a list of users.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/current": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Requires login information.\r\n            This API supports CORS, and is restricted to specific origins.",
        "operationId": "UserApi_GetCurrent",
        "parameters": [
          {
            "description": "Optional fields.",
            "enum": [
              "None",
              "KnownLanguages",
              "MainPicture",
              "OldUsernames"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserForApiContract"
            }
          }
        },
        "summary": "Gets information about the currently logged in user.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/current/albums/{albumId}": {
      "post": {
        "consumes": [],
        "deprecated": false,
        "description": "If the user has already rated the album, any previous rating is replaced.\r\n            Authorization cookie must be included.",
        "operationId": "UserApi_PostAlbumStatus",
        "parameters": [
          {
            "description": "ID of the album to be rated.",
            "format": "int32",
            "in": "path",
            "name": "albumId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection status. Possible values are Nothing, Wishlisted, Ordered and Owned.",
            "enum": [
              "Nothing",
              "Wishlisted",
              "Ordered",
              "Owned"
            ],
            "in": "query",
            "name": "collectionStatus",
            "required": true,
            "type": "string"
          },
          {
            "description": "Album media type. Possible values are PhysicalDisc, DigitalDownload and Other.",
            "enum": [
              "PhysicalDisc",
              "DigitalDownload",
              "Other"
            ],
            "in": "query",
            "name": "mediaType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Rating to be given. Possible values are between 0 and 5.",
            "format": "int32",
            "in": "query",
            "name": "rating",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "summary": "Add or update collection status, media type and rating for a specific album, for the currently logged in user.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/current/followedTags/{tagId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_DeleteFollowedTag",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "UserApi"
        ]
      },
      "post": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_PostFollowedTag",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/current/ratedSongs/{songId}": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "Requires authentication.",
        "operationId": "UserApi_GetSongRatingForCurrent",
        "parameters": [
          {
            "description": "ID of the song whose rating is to be checked.",
            "format": "int32",
            "in": "path",
            "name": "songId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "enum": [
                "Nothing",
                "Dislike",
                "Like",
                "Favorite"
              ],
              "type": "string"
            }
          }
        },
        "summary": "Gets currently logged in user's rating for a song.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/current/refreshEntryEdit": {
      "post": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_PostRefreshEntryEdit",
        "parameters": [
          {
            "description": "Type of entry.",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User",
              "Venue"
            ],
            "in": "query",
            "name": "entryType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entry ID.",
            "format": "int32",
            "in": "query",
            "name": "entryId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Refresh entry edit status, indicating that the current user is still editing that entry.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/current/songTags/{songId}": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "description": "This can only be used to add tags - existing tags will not be removed. \r\n            Nothing will be done for tags that are already applied by the current user for the song.\r\n            Authorization cookie is required.",
        "operationId": "UserApi_PostSongTags",
        "parameters": [
          {
            "description": "ID of the song to be tagged.",
            "format": "int32",
            "in": "path",
            "name": "songId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of tags to be appended.",
            "in": "body",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/TagBaseContract"
              },
              "type": "array"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Appends tags for a song, by the currently logged in user.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/messages/{messageId}": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "The message will be marked as read.\r\n            User can only load messages from their own inbox.",
        "operationId": "UserApi_GetMessage",
        "parameters": [
          {
            "description": "ID of the message.",
            "format": "int32",
            "in": "path",
            "name": "messageId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserMessageContract"
            }
          }
        },
        "summary": "Gets a user message.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/names": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetNames",
        "parameters": [
          {
            "description": "Text query.",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name match mode. Words is treated the same as Partial.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to include disabled user accounts. If false, disabled accounts are excluded.",
            "in": "query",
            "name": "includeDisabled",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of user names. Ideal for autocomplete boxes.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/profileComments/{commentId}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
        "operationId": "UserApi_DeleteProfileComment",
        "parameters": [
          {
            "description": "ID of the comment to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a comment.",
        "tags": [
          "UserApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
        "operationId": "UserApi_PostEditComment",
        "parameters": [
          {
            "description": "ID of the comment to be edited.",
            "format": "int32",
            "in": "path",
            "name": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "New comment data. Only message can be edited.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Updates a comment.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetOne",
        "parameters": [
          {
            "description": "User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Optional fields.",
            "enum": [
              "None",
              "KnownLanguages",
              "MainPicture",
              "OldUsernames"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserForApiContract"
            }
          }
        },
        "summary": "Gets user by ID.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/albums": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "description": "This includes albums that have been rated by the user as well as albums that the user has bought or wishlisted.\r\n            Note that the user might have set his album ownership status and media type as private, in which case those properties are not included.",
        "operationId": "UserApi_GetAlbumCollection",
        "parameters": [
          {
            "description": "ID of the user whose albums are to be browsed.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Album name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by tag Id (optional).",
            "format": "int32",
            "in": "query",
            "name": "tagId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by tag (optional).",
            "in": "query",
            "name": "tag",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by album artist (optional).",
            "format": "int32",
            "in": "query",
            "name": "artistId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by a comma-separated list of purchase statuses (optional). Possible values are Nothing, Wishlisted, Ordered, Owned, and all combinations of these.",
            "enum": [
              "Nothing",
              "Wishlisted",
              "Ordered",
              "Owned",
              "All"
            ],
            "in": "query",
            "name": "purchaseStatuses",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by release event. Optional.",
            "format": "int32",
            "in": "query",
            "name": "releaseEventId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter by album type (optional).",
            "enum": [
              "Unknown",
              "Album",
              "Single",
              "EP",
              "SplitAlbum",
              "Compilation",
              "Video",
              "Artbook",
              "Game",
              "Fanmade",
              "Instrumental",
              "Other"
            ],
            "in": "query",
            "name": "albumTypes",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of advanced filters (optional).",
            "in": "query",
            "items": {},
            "name": "advancedFilters",
            "required": false,
            "type": "array"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, ReleaseDate, AdditionDate, RatingAverage, RatingTotal, CollectionCount.",
            "enum": [
              "None",
              "Name",
              "ReleaseDate",
              "ReleaseDateWithNulls",
              "AdditionDate",
              "RatingAverage",
              "RatingTotal",
              "NameThenReleaseDate",
              "CollectionCount"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Match mode for album name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional). Possible values are Artists, MainPicture, Names, PVs, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[AlbumForUserForApiContract]"
            }
          }
        },
        "summary": "Gets a list of albums in a user's collection.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/events": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetEvents",
        "parameters": [
          {
            "description": "User ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Type of event subscription.",
            "enum": [
              "Interested",
              "Attending"
            ],
            "in": "query",
            "name": "relationshipType",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ReleaseEventForApiContract"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of events a user has subscribed to.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/followedArtists": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetFollowedArtists",
        "parameters": [
          {
            "description": "ID of the user whose followed artists are to be browsed.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Artist name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by tag Id (optional). This filter can be specified multiple times.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Filter by artist type.",
            "enum": [
              "Unknown",
              "Circle",
              "Label",
              "Producer",
              "Animator",
              "Illustrator",
              "Lyricist",
              "Vocaloid",
              "UTAU",
              "CeVIO",
              "OtherVoiceSynthesizer",
              "OtherVocalist",
              "OtherGroup",
              "OtherIndividual",
              "Utaite",
              "Band",
              "Vocalist",
              "Character"
            ],
            "in": "query",
            "name": "artistType",
            "required": false,
            "type": "string"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, AdditionDateAsc.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "AdditionDateAsc",
              "ReleaseDate",
              "SongCount",
              "SongRating",
              "FollowerCount"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Match mode for artist name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional). Possible values are Description, Groups, Members, Names, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "ArtistLinks",
              "ArtistLinksReverse",
              "BaseVoicebank",
              "Description",
              "MainPicture",
              "Names",
              "Tags",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[ArtistForUserForApiContract]"
            }
          }
        },
        "summary": "Gets a list of artists followed by a user.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/messages": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_DeleteMessages",
        "parameters": [
          {
            "description": "ID of the user whose messages to delete.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "IDs of messages.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "messageId",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a list of user messages.",
        "tags": [
          "UserApi"
        ]
      },
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetMessages",
        "parameters": [
          {
            "description": "User ID. Must be the currently logged in user (loading messages for another user is not allowed).",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Type of inbox. Possible values are Nothing (load all, default), Received, Sent, Notifications.",
            "enum": [
              "Nothing",
              "Received",
              "Sent",
              "Notifications"
            ],
            "in": "query",
            "name": "inbox",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether to only load unread messages. Loading unread messages is only possible for received messages and notifications (not sent messages).",
            "in": "query",
            "name": "unread",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Filter by id of the other user (either sender or receiver).",
            "format": "int32",
            "in": "query",
            "name": "anotherUserId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Index of the first entry to be loaded.",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to get total number of results.",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[UserMessageContract]"
            }
          }
        },
        "summary": "Gets a list of messages.",
        "tags": [
          "UserApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "UserApi_PostNewMessage",
        "parameters": [
          {
            "description": "User ID. Must be logged in user.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Message data.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserMessageContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserMessageContract"
            }
          }
        },
        "summary": "Creates a new message.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/profileComments": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetProfileComments",
        "parameters": [
          {
            "description": "ID of the user whose comments are to be retrieved.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Index of the first comment to be loaded.",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of comments to load.",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load the total number of comments.",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[CommentForApiContract]"
            }
          }
        },
        "summary": "Gets a list of comments posted on user's profile.",
        "tags": [
          "UserApi"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "UserApi_PostNewComment",
        "parameters": [
          {
            "description": "ID of the user for whom to create the comment.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment data. Message and author must be specified. Author must match the logged in user.",
            "in": "body",
            "name": "contract",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentForApiContract"
            }
          }
        },
        "summary": "Posts a new comment.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/ratedSongs": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetRatedSongs",
        "parameters": [
          {
            "description": "ID of the user whose songs are to be browsed.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Song name query (optional).",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by tag name (optional).",
            "in": "query",
            "name": "tagName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by tag Id (optional). This filter can be specified multiple times.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter by song artist (optional).",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "artistId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Include child voicebanks, if the artist being filtered by has any.",
            "in": "query",
            "name": "childVoicebanks",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Logical grouping for artists.",
            "enum": [
              "And",
              "Or"
            ],
            "in": "query",
            "name": "artistGrouping",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter songs by given rating (optional).",
            "enum": [
              "Nothing",
              "Dislike",
              "Like",
              "Favorite"
            ],
            "in": "query",
            "name": "rating",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter songs by song list (optional).",
            "format": "int32",
            "in": "query",
            "name": "songListId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Group results by rating so that highest rated are first.",
            "in": "query",
            "name": "groupByRating",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.",
            "enum": [
              "Nothing",
              "NicoNicoDouga",
              "Youtube",
              "SoundCloud",
              "Vimeo",
              "Piapro",
              "Bilibili",
              "File",
              "LocalFile",
              "Creofuga",
              "Bandcamp"
            ],
            "in": "query",
            "name": "pvServices",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of advanced filters (optional).",
            "in": "query",
            "items": {},
            "name": "advancedFilters",
            "required": false,
            "type": "array"
          },
          {
            "description": "First item to be retrieved (optional, defaults to 0).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional, default to false).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "PublishDate",
              "FavoritedTimes",
              "RatingScore",
              "RatingDate"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Match mode for song name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[RatedSongForUserForApiContract]"
            }
          }
        },
        "summary": "Gets a list of songs rated by a user.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/ratedSongs/{songId}": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetSongRating",
        "parameters": [
          {
            "description": "User whose rating is to be checked.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the song whose rating is to be checked.",
            "format": "int32",
            "in": "path",
            "name": "songId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "enum": [
                "Nothing",
                "Dislike",
                "Like",
                "Favorite"
              ],
              "type": "string"
            }
          }
        },
        "summary": "Gets a specific user's rating for a song.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/reports": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "UserApi_PostReport",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateReportModel"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/settings/{settingName}": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated": false,
        "operationId": "UserApi_PostSetting",
        "parameters": [
          {
            "description": "ID of the user to be updated. This must match the current user OR be unspecified (or 0) if the user is not logged in.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Name of the setting to be updated, for example 'showChatBox'.",
            "in": "path",
            "name": "settingName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Setting value, for example 'false'.",
            "in": "body",
            "name": "settingValue",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Updates user setting.",
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/users/{id}/songLists": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "UserApi_GetSongLists",
        "parameters": [
          {
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "tagId",
            "required": false,
            "type": "array"
          },
          {
            "in": "query",
            "name": "childTags",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "enum": [
              "None",
              "Name",
              "Date",
              "CreateDate"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "None",
              "Description",
              "Events",
              "MainPicture",
              "Tags"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[SongListForApiContract]"
            }
          }
        },
        "tags": [
          "UserApi"
        ]
      }
    },
    "/api/venues": {
      "get": {
        "consumes": [],
        "deprecated": false,
        "operationId": "VenueApi_GetList",
        "parameters": [
          {
            "description": "Text query.",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional fields to include.",
            "enum": [
              "None",
              "AdditionalNames",
              "Description",
              "Events",
              "Names",
              "WebLinks"
            ],
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "First item to be retrieved (optional).",
            "format": "int32",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of results to be loaded (optional).",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether to load total number of items (optional).",
            "in": "query",
            "name": "getTotalCount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Match mode for event name (optional).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ],
            "in": "query",
            "name": "nameMatchMode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ],
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, Distance.",
            "enum": [
              "None",
              "Name",
              "Distance"
            ],
            "in": "query",
            "name": "sortRule",
            "required": false,
            "type": "string"
          },
          {
            "description": "Latitude (optional).",
            "format": "double",
            "in": "query",
            "name": "latitude",
            "required": false,
            "type": "number"
          },
          {
            "description": "Longitude (optional).",
            "format": "double",
            "in": "query",
            "name": "longitude",
            "required": false,
            "type": "number"
          },
          {
            "description": "Radius (optional).",
            "format": "double",
            "in": "query",
            "name": "radius",
            "required": false,
            "type": "number"
          },
          {
            "description": "Unit of length (optional). Possible values are Kilometers, Miles.",
            "enum": [
              "Kilometers",
              "Miles"
            ],
            "in": "query",
            "name": "distanceUnit",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "text/javascript",
          "application/javascript",
          "application/json-p"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartialFindResult[VenueForApiContract]"
            }
          }
        },
        "summary": "Gets a page of event venue.",
        "tags": [
          "VenueApi"
        ]
      }
    },
    "/api/venues/{id}": {
      "delete": {
        "consumes": [],
        "deprecated": false,
        "operationId": "VenueApi_Delete",
        "parameters": [
          {
            "description": "ID of the venue to be deleted.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Notes.",
            "in": "query",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.\r\n            If false, the entry is soft deleted, meaning it can still be restored.",
            "in": "query",
            "name": "hardDelete",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Deletes a venue.",
        "tags": [
          "VenueApi"
        ]
      }
    },
    "/api/venues/{id}/reports": {
      "post": {
        "consumes": [],
        "deprecated": false,
        "operationId": "VenueApi_PostReport",
        "parameters": [
          {
            "description": "Venue to be reported.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Report type.",
            "enum": [
              "InvalidInfo",
              "Duplicate",
              "Inappropriate",
              "Other"
            ],
            "in": "query",
            "name": "reportType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Notes. Optional.",
            "in": "query",
            "name": "notes",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version to be reported. Optional.",
            "format": "int32",
            "in": "query",
            "name": "versionNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Creates a new report.",
        "tags": [
          "VenueApi"
        ]
      }
    }
  },
  "definitions": {
    "ActivityEntryForApiContract": {
      "properties": {
        "archivedVersion": {
          "$ref": "#/definitions/ArchivedObjectVersionForApiContract"
        },
        "author": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "editEvent": {
          "enum": [
            "Created",
            "Updated",
            "Deleted",
            "Restored"
          ],
          "type": "string"
        },
        "entry": {
          "$ref": "#/definitions/EntryForApiContract"
        }
      },
      "type": "object"
    },
    "AdvancedSearchFilter": {
      "properties": {
        "filterType": {
          "enum": [
            "Nothing",
            "ArtistType",
            "WebLink",
            "HasUserAccount",
            "RootVoicebank",
            "VoiceProvider",
            "HasStoreLink",
            "HasTracks",
            "NoCoverPicture",
            "HasAlbum",
            "HasOriginalMedia",
            "HasMedia",
            "HasMultipleVoicebanks",
            "HasPublishDate",
            "Lyrics",
            "LyricsContent"
          ],
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "param": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AlbumContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistString": {
          "type": "string"
        },
        "coverPictureMime": {
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "discType": {
          "enum": [
            "Unknown",
            "Album",
            "Single",
            "EP",
            "SplitAlbum",
            "Compilation",
            "Video",
            "Artbook",
            "Game",
            "Fanmade",
            "Instrumental",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "ratingAverage": {
          "format": "double",
          "type": "number"
        },
        "ratingCount": {
          "format": "int32",
          "type": "integer"
        },
        "releaseDate": {
          "$ref": "#/definitions/OptionalDateTimeContract"
        },
        "releaseEvent": {
          "$ref": "#/definitions/ReleaseEventForApiContract"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AlbumDiscPropertiesContract": {
      "properties": {
        "discNumber": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mediaType": {
          "enum": [
            "Audio",
            "Video"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AlbumForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistString": {
          "type": "string"
        },
        "artists": {
          "items": {
            "$ref": "#/definitions/ArtistForAlbumForApiContract"
          },
          "type": "array"
        },
        "barcode": {
          "type": "string"
        },
        "catalogNumber": {
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultName": {
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "discType": {
          "enum": [
            "Unknown",
            "Album",
            "Single",
            "EP",
            "SplitAlbum",
            "Compilation",
            "Video",
            "Artbook",
            "Game",
            "Fanmade",
            "Instrumental",
            "Other"
          ],
          "type": "string"
        },
        "discs": {
          "items": {
            "$ref": "#/definitions/AlbumDiscPropertiesContract"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "identifiers": {
          "items": {
            "$ref": "#/definitions/AlbumIdentifierContract"
          },
          "type": "array"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "mergedTo": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "pvs": {
          "items": {
            "$ref": "#/definitions/PVContract"
          },
          "type": "array"
        },
        "ratingAverage": {
          "format": "double",
          "type": "number"
        },
        "ratingCount": {
          "format": "int32",
          "type": "integer"
        },
        "releaseDate": {
          "$ref": "#/definitions/OptionalDateTimeContract"
        },
        "releaseEvent": {
          "$ref": "#/definitions/ReleaseEventForApiContract"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        },
        "tracks": {
          "items": {
            "$ref": "#/definitions/SongInAlbumForApiContract"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AlbumForUserForApiContract": {
      "properties": {
        "album": {
          "$ref": "#/definitions/AlbumForApiContract"
        },
        "mediaType": {
          "enum": [
            "PhysicalDisc",
            "DigitalDownload",
            "Other"
          ],
          "type": "string"
        },
        "purchaseStatus": {
          "enum": [
            "Nothing",
            "Wishlisted",
            "Ordered",
            "Owned"
          ],
          "type": "string"
        },
        "rating": {
          "format": "int32",
          "type": "integer"
        },
        "user": {
          "$ref": "#/definitions/UserForApiContract"
        }
      },
      "type": "object"
    },
    "AlbumIdentifierContract": {
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AlbumReviewContract": {
      "properties": {
        "albumId": {
          "format": "int32",
          "type": "integer"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "languageCode": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserForApiContract"
        }
      },
      "type": "object"
    },
    "ArchivedObjectVersionForApiContract": {
      "properties": {
        "changedFields": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "notes": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ArchivedWebLinkContract": {
      "properties": {
        "category": {
          "enum": [
            "Official",
            "Commercial",
            "Reference",
            "Other"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ArtistContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistType": {
          "enum": [
            "Unknown",
            "Circle",
            "Label",
            "Producer",
            "Animator",
            "Illustrator",
            "Lyricist",
            "Vocaloid",
            "UTAU",
            "CeVIO",
            "OtherVoiceSynthesizer",
            "OtherVocalist",
            "OtherGroup",
            "OtherIndividual",
            "Utaite",
            "Band",
            "Vocalist",
            "Character"
          ],
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "pictureMime": {
          "type": "string"
        },
        "releaseDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ArtistForAlbumForApiContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistContract"
        },
        "categories": {
          "enum": [
            "Nothing",
            "Vocalist",
            "Producer",
            "Animator",
            "Label",
            "Circle",
            "Other",
            "Band",
            "Illustrator",
            "Subject"
          ],
          "type": "string"
        },
        "effectiveRoles": {
          "enum": [
            "Default",
            "Animator",
            "Arranger",
            "Composer",
            "Distributor",
            "Illustrator",
            "Instrumentalist",
            "Lyricist",
            "Mastering",
            "Publisher",
            "Vocalist",
            "VoiceManipulator",
            "Other",
            "Mixer",
            "Chorus",
            "Encoder",
            "VocalDataProvider"
          ],
          "type": "string"
        },
        "isSupport": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "enum": [
            "Default",
            "Animator",
            "Arranger",
            "Composer",
            "Distributor",
            "Illustrator",
            "Instrumentalist",
            "Lyricist",
            "Mastering",
            "Publisher",
            "Vocalist",
            "VoiceManipulator",
            "Other",
            "Mixer",
            "Chorus",
            "Encoder",
            "VocalDataProvider"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ArtistForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistLinks": {
          "items": {
            "$ref": "#/definitions/ArtistForArtistForApiContract"
          },
          "type": "array"
        },
        "artistLinksReverse": {
          "items": {
            "$ref": "#/definitions/ArtistForArtistForApiContract"
          },
          "type": "array"
        },
        "artistType": {
          "enum": [
            "Unknown",
            "Circle",
            "Label",
            "Producer",
            "Animator",
            "Illustrator",
            "Lyricist",
            "Vocaloid",
            "UTAU",
            "CeVIO",
            "OtherVoiceSynthesizer",
            "OtherVocalist",
            "OtherGroup",
            "OtherIndividual",
            "Utaite",
            "Band",
            "Vocalist",
            "Character"
          ],
          "type": "string"
        },
        "baseVoicebank": {
          "$ref": "#/definitions/ArtistContract"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultName": {
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "mergedTo": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "pictureMime": {
          "type": "string"
        },
        "relations": {
          "$ref": "#/definitions/ArtistRelationsForApi"
        },
        "releaseDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ArtistForArtistForApiContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistContract"
        },
        "linkType": {
          "enum": [
            "CharacterDesigner",
            "Group",
            "Illustrator",
            "Manager",
            "VoiceProvider"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ArtistForEventContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistContract"
        },
        "effectiveRoles": {
          "enum": [
            "Default",
            "Dancer",
            "DJ",
            "Instrumentalist",
            "Organizer",
            "Promoter",
            "VJ",
            "Vocalist",
            "VoiceManipulator",
            "OtherPerformer",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "enum": [
            "Default",
            "Dancer",
            "DJ",
            "Instrumentalist",
            "Organizer",
            "Promoter",
            "VJ",
            "Vocalist",
            "VoiceManipulator",
            "OtherPerformer",
            "Other"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ArtistForSongContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistContract"
        },
        "categories": {
          "enum": [
            "Nothing",
            "Vocalist",
            "Producer",
            "Animator",
            "Label",
            "Circle",
            "Other",
            "Band",
            "Illustrator",
            "Subject"
          ],
          "type": "string"
        },
        "effectiveRoles": {
          "enum": [
            "Default",
            "Animator",
            "Arranger",
            "Composer",
            "Distributor",
            "Illustrator",
            "Instrumentalist",
            "Lyricist",
            "Mastering",
            "Publisher",
            "Vocalist",
            "VoiceManipulator",
            "Other",
            "Mixer",
            "Chorus",
            "Encoder",
            "VocalDataProvider"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isCustomName": {
          "type": "boolean"
        },
        "isSupport": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "enum": [
            "Default",
            "Animator",
            "Arranger",
            "Composer",
            "Distributor",
            "Illustrator",
            "Instrumentalist",
            "Lyricist",
            "Mastering",
            "Publisher",
            "Vocalist",
            "VoiceManipulator",
            "Other",
            "Mixer",
            "Chorus",
            "Encoder",
            "VocalDataProvider"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ArtistForUserForApiContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistForApiContract"
        }
      },
      "type": "object"
    },
    "ArtistRelationsForApi": {
      "properties": {
        "latestAlbums": {
          "items": {
            "$ref": "#/definitions/AlbumForApiContract"
          },
          "type": "array"
        },
        "latestEvents": {
          "items": {
            "$ref": "#/definitions/ReleaseEventForApiContract"
          },
          "type": "array"
        },
        "latestSongs": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        },
        "popularAlbums": {
          "items": {
            "$ref": "#/definitions/AlbumForApiContract"
          },
          "type": "array"
        },
        "popularSongs": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CommentForApiContract": {
      "properties": {
        "author": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "authorName": {
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "entry": {
          "$ref": "#/definitions/EntryRefContract"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateReportModel": {
      "properties": {
        "reason": {
          "type": "string"
        },
        "reportType": {
          "enum": [
            "MaliciousIP",
            "Spamming",
            "RemovePermissions",
            "Other"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiscussionFolderContract": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastTopicAuthor": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "lastTopicDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "topicCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DiscussionTopicContract": {
      "properties": {
        "author": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "commentCount": {
          "format": "int32",
          "type": "integer"
        },
        "comments": {
          "items": {
            "$ref": "#/definitions/CommentForApiContract"
          },
          "type": "array"
        },
        "content": {
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "folderId": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastComment": {
          "$ref": "#/definitions/CommentForApiContract"
        },
        "locked": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnglishTranslatedStringContract": {
      "properties": {
        "english": {
          "type": "string"
        },
        "original": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntryForApiContract": {
      "properties": {
        "activityDate": {
          "format": "date-time",
          "type": "string"
        },
        "additionalNames": {
          "type": "string"
        },
        "artistString": {
          "type": "string"
        },
        "artistType": {
          "enum": [
            "Unknown",
            "Circle",
            "Label",
            "Producer",
            "Animator",
            "Illustrator",
            "Lyricist",
            "Vocaloid",
            "UTAU",
            "CeVIO",
            "OtherVoiceSynthesizer",
            "OtherVocalist",
            "OtherGroup",
            "OtherIndividual",
            "Utaite",
            "Band",
            "Vocalist",
            "Character"
          ],
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultName": {
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "discType": {
          "enum": [
            "Unknown",
            "Album",
            "Single",
            "EP",
            "SplitAlbum",
            "Compilation",
            "Video",
            "Artbook",
            "Game",
            "Fanmade",
            "Instrumental",
            "Other"
          ],
          "type": "string"
        },
        "entryType": {
          "enum": [
            "Undefined",
            "Album",
            "Artist",
            "DiscussionTopic",
            "PV",
            "ReleaseEvent",
            "ReleaseEventSeries",
            "Song",
            "SongList",
            "Tag",
            "User",
            "Venue"
          ],
          "type": "string"
        },
        "eventCategory": {
          "enum": [
            "Unspecified",
            "AlbumRelease",
            "Anniversary",
            "Club",
            "Concert",
            "Contest",
            "Convention",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "pVs": {
          "items": {
            "$ref": "#/definitions/PVContract"
          },
          "type": "array"
        },
        "releaseEventSeriesName": {
          "type": "string"
        },
        "songListFeaturedCategory": {
          "enum": [
            "Nothing",
            "Concerts",
            "VocaloidRanking",
            "Pools",
            "Other"
          ],
          "type": "string"
        },
        "songType": {
          "enum": [
            "Unspecified",
            "Original",
            "Remaster",
            "Remix",
            "Cover",
            "Arrangement",
            "Instrumental",
            "Mashup",
            "MusicPV",
            "DramaPV",
            "Live",
            "Illustration",
            "Other"
          ],
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tagCategoryName": {
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        },
        "urlSlug": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/ArchivedWebLinkContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EntryRefContract": {
      "properties": {
        "entryType": {
          "enum": [
            "Undefined",
            "Album",
            "Artist",
            "DiscussionTopic",
            "PV",
            "ReleaseEvent",
            "ReleaseEventSeries",
            "Song",
            "SongList",
            "Tag",
            "User",
            "Venue"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EntryThumbContract": {
      "properties": {
        "entryType": {
          "enum": [
            "Undefined",
            "Album",
            "Artist",
            "DiscussionTopic",
            "PV",
            "ReleaseEvent",
            "ReleaseEventSeries",
            "Song",
            "SongList",
            "Tag",
            "User",
            "Venue"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mime": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EntryThumbForApiContract": {
      "properties": {
        "mime": {
          "type": "string"
        },
        "urlOriginal": {
          "type": "string"
        },
        "urlSmallThumb": {
          "type": "string"
        },
        "urlThumb": {
          "type": "string"
        },
        "urlTinyThumb": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LocalizedStringContract": {
      "properties": {
        "language": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LocalizedStringWithIdContract": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "language": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LyricsForSongContract": {
      "properties": {
        "cultureCode": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "type": "string"
        },
        "translationType": {
          "enum": [
            "Original",
            "Romanized",
            "Translation"
          ],
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OldUsernameContract": {
      "properties": {
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "oldName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OptionalDateTimeContract": {
      "properties": {
        "day": {
          "format": "int32",
          "type": "integer"
        },
        "formatted": {
          "type": "string"
        },
        "isEmpty": {
          "type": "boolean"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OptionalGeoPointContract": {
      "properties": {
        "formatted": {
          "type": "string"
        },
        "hasValue": {
          "type": "boolean"
        },
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "PVContract": {
      "properties": {
        "author": {
          "type": "string"
        },
        "createdBy": {
          "format": "int32",
          "type": "integer"
        },
        "disabled": {
          "type": "boolean"
        },
        "extendedMetadata": {
          "$ref": "#/definitions/PVExtendedMetadata"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "length": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "publishDate": {
          "format": "date-time",
          "type": "string"
        },
        "pvId": {
          "type": "string"
        },
        "pvType": {
          "enum": [
            "Original",
            "Reprint",
            "Other"
          ],
          "type": "string"
        },
        "service": {
          "enum": [
            "NicoNicoDouga",
            "Youtube",
            "SoundCloud",
            "Vimeo",
            "Piapro",
            "Bilibili",
            "File",
            "LocalFile",
            "Creofuga",
            "Bandcamp"
          ],
          "type": "string"
        },
        "thumbUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PVExtendedMetadata": {
      "properties": {
        "json": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PVForSongContract": {
      "properties": {
        "author": {
          "type": "string"
        },
        "createdBy": {
          "format": "int32",
          "type": "integer"
        },
        "disabled": {
          "type": "boolean"
        },
        "extendedMetadata": {
          "$ref": "#/definitions/PVExtendedMetadata"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "length": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "publishDate": {
          "format": "date-time",
          "type": "string"
        },
        "pvId": {
          "type": "string"
        },
        "pvType": {
          "enum": [
            "Original",
            "Reprint",
            "Other"
          ],
          "type": "string"
        },
        "service": {
          "enum": [
            "NicoNicoDouga",
            "Youtube",
            "SoundCloud",
            "Vimeo",
            "Piapro",
            "Bilibili",
            "File",
            "LocalFile",
            "Creofuga",
            "Bandcamp"
          ],
          "type": "string"
        },
        "song": {
          "$ref": "#/definitions/SongContract"
        },
        "thumbUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PartialFindResult[ActivityEntryForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ActivityEntryForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[AlbumForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/AlbumForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[AlbumForUserForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/AlbumForUserForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[ArtistForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ArtistForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[ArtistForUserForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ArtistForUserForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[CommentForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/CommentForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[DiscussionTopicContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/DiscussionTopicContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[EntryForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/EntryForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[PVForSongContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/PVForSongContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[RatedSongForUserForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/RatedSongForUserForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[ReleaseEventForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ReleaseEventForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[ReleaseEventSeriesForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ReleaseEventSeriesForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[SongForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[SongInListForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/SongInListForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[SongListForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/SongListForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[TagForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/TagForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[UserForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/UserForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[UserMessageContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/UserMessageContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PartialFindResult[VenueForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/VenueForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RatedSongForUserForApiContract": {
      "properties": {
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "rating": {
          "enum": [
            "Nothing",
            "Dislike",
            "Like",
            "Favorite"
          ],
          "type": "string"
        },
        "song": {
          "$ref": "#/definitions/SongForApiContract"
        },
        "user": {
          "$ref": "#/definitions/UserForApiContract"
        }
      },
      "type": "object"
    },
    "RelatedSongsContract": {
      "properties": {
        "artistMatches": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        },
        "likeMatches": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        },
        "tagMatches": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReleaseEventContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "category": {
          "enum": [
            "Unspecified",
            "AlbumRelease",
            "Anniversary",
            "Club",
            "Concert",
            "Contest",
            "Convention",
            "Other"
          ],
          "type": "string"
        },
        "customName": {
          "type": "boolean"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "hasVenueOrVenueName": {
          "readOnly": true,
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inheritedCategory": {
          "enum": [
            "Unspecified",
            "AlbumRelease",
            "Anniversary",
            "Club",
            "Concert",
            "Contest",
            "Convention",
            "Other"
          ],
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pictureMime": {
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/ReleaseEventSeriesContract"
        },
        "songList": {
          "$ref": "#/definitions/SongListBaseContract"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "urlSlug": {
          "type": "string"
        },
        "venue": {
          "$ref": "#/definitions/VenueContract"
        },
        "venueName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReleaseEventForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artists": {
          "items": {
            "$ref": "#/definitions/ArtistForEventContract"
          },
          "type": "array"
        },
        "category": {
          "enum": [
            "Unspecified",
            "AlbumRelease",
            "Anniversary",
            "Club",
            "Concert",
            "Contest",
            "Convention",
            "Other"
          ],
          "type": "string"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "series": {
          "$ref": "#/definitions/ReleaseEventSeriesContract"
        },
        "seriesId": {
          "format": "int32",
          "type": "integer"
        },
        "seriesNumber": {
          "format": "int32",
          "type": "integer"
        },
        "seriesSuffix": {
          "type": "string"
        },
        "songList": {
          "$ref": "#/definitions/SongListBaseContract"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        },
        "urlSlug": {
          "type": "string"
        },
        "venue": {
          "$ref": "#/definitions/VenueForApiContract"
        },
        "venueName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReleaseEventSeriesContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "category": {
          "enum": [
            "Unspecified",
            "AlbumRelease",
            "Anniversary",
            "Club",
            "Concert",
            "Contest",
            "Convention",
            "Other"
          ],
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "pictureMime": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "urlSlug": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReleaseEventSeriesForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "category": {
          "enum": [
            "Unspecified",
            "AlbumRelease",
            "Anniversary",
            "Club",
            "Concert",
            "Contest",
            "Convention",
            "Other"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/ReleaseEventForApiContract"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "urlSlug": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SongContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistString": {
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "favoritedTimes": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lengthSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nicoId": {
          "type": "string"
        },
        "publishDate": {
          "format": "date-time",
          "type": "string"
        },
        "pvServices": {
          "enum": [
            "Nothing",
            "NicoNicoDouga",
            "Youtube",
            "SoundCloud",
            "Vimeo",
            "Piapro",
            "Bilibili",
            "File",
            "LocalFile",
            "Creofuga",
            "Bandcamp"
          ],
          "type": "string"
        },
        "ratingScore": {
          "format": "int32",
          "type": "integer"
        },
        "songType": {
          "enum": [
            "Unspecified",
            "Original",
            "Remaster",
            "Remix",
            "Cover",
            "Arrangement",
            "Instrumental",
            "Mashup",
            "MusicPV",
            "DramaPV",
            "Live",
            "Illustration",
            "Other"
          ],
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "thumbUrl": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SongForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "albums": {
          "items": {
            "$ref": "#/definitions/AlbumContract"
          },
          "type": "array"
        },
        "artistString": {
          "type": "string"
        },
        "artists": {
          "items": {
            "$ref": "#/definitions/ArtistForSongContract"
          },
          "type": "array"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultName": {
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "favoritedTimes": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lengthSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "lyrics": {
          "items": {
            "$ref": "#/definitions/LyricsForSongContract"
          },
          "type": "array"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "mergedTo": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "originalVersionId": {
          "format": "int32",
          "type": "integer"
        },
        "publishDate": {
          "format": "date-time",
          "type": "string"
        },
        "pvServices": {
          "enum": [
            "Nothing",
            "NicoNicoDouga",
            "Youtube",
            "SoundCloud",
            "Vimeo",
            "Piapro",
            "Bilibili",
            "File",
            "LocalFile",
            "Creofuga",
            "Bandcamp"
          ],
          "type": "string"
        },
        "pvs": {
          "items": {
            "$ref": "#/definitions/PVContract"
          },
          "type": "array"
        },
        "ratingScore": {
          "format": "int32",
          "type": "integer"
        },
        "releaseEvent": {
          "$ref": "#/definitions/ReleaseEventForApiContract"
        },
        "songType": {
          "enum": [
            "Unspecified",
            "Original",
            "Remaster",
            "Remix",
            "Cover",
            "Arrangement",
            "Instrumental",
            "Mashup",
            "MusicPV",
            "DramaPV",
            "Live",
            "Illustration",
            "Other"
          ],
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        },
        "thumbUrl": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SongInAlbumForApiContract": {
      "properties": {
        "discNumber": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "song": {
          "$ref": "#/definitions/SongForApiContract"
        },
        "trackNumber": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SongInListEditContract": {
      "properties": {
        "notes": {
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "song": {
          "$ref": "#/definitions/SongForApiContract"
        },
        "songInListId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SongInListForApiContract": {
      "properties": {
        "notes": {
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "song": {
          "$ref": "#/definitions/SongForApiContract"
        }
      },
      "type": "object"
    },
    "SongListBaseContract": {
      "properties": {
        "featuredCategory": {
          "enum": [
            "Nothing",
            "Concerts",
            "VocaloidRanking",
            "Pools",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SongListForApiContract": {
      "properties": {
        "author": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "eventDate": {
          "format": "date-time",
          "type": "string"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/ReleaseEventForApiContract"
          },
          "type": "array"
        },
        "featuredCategory": {
          "enum": [
            "Nothing",
            "Concerts",
            "VocaloidRanking",
            "Pools",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "latestComments": {
          "items": {
            "$ref": "#/definitions/CommentForApiContract"
          },
          "type": "array"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SongListForEditContract": {
      "properties": {
        "author": {
          "$ref": "#/definitions/UserWithEmailContract"
        },
        "canEdit": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "eventDate": {
          "format": "date-time",
          "type": "string"
        },
        "featuredCategory": {
          "enum": [
            "Nothing",
            "Concerts",
            "VocaloidRanking",
            "Pools",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "songLinks": {
          "items": {
            "$ref": "#/definitions/SongInListEditContract"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "thumb": {
          "$ref": "#/definitions/EntryThumbContract"
        },
        "updateNotes": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SongRatingContract": {
      "properties": {
        "rating": {
          "enum": [
            "Nothing",
            "Dislike",
            "Like",
            "Favorite"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TagBaseContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "categoryName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "urlSlug": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TagForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "aliasedTo": {
          "$ref": "#/definitions/TagBaseContract"
        },
        "categoryName": {
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringWithIdContract"
          },
          "type": "array"
        },
        "parent": {
          "$ref": "#/definitions/TagBaseContract"
        },
        "relatedTags": {
          "items": {
            "$ref": "#/definitions/TagBaseContract"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "targets": {
          "format": "int32",
          "type": "integer"
        },
        "translatedDescription": {
          "$ref": "#/definitions/EnglishTranslatedStringContract"
        },
        "urlSlug": {
          "type": "string"
        },
        "usageCount": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TagUsageForApiContract": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "tag": {
          "$ref": "#/definitions/TagBaseContract"
        }
      },
      "type": "object"
    },
    "UserForApiContract": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "groupId": {
          "enum": [
            "Nothing",
            "Limited",
            "Regular",
            "Trusted",
            "Moderator",
            "Admin"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "knownLanguages": {
          "items": {
            "$ref": "#/definitions/UserKnownLanguageContract"
          },
          "type": "array"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "memberSince": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "oldUsernames": {
          "items": {
            "$ref": "#/definitions/OldUsernameContract"
          },
          "type": "array"
        },
        "verifiedArtist": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserKnownLanguageContract": {
      "properties": {
        "cultureCode": {
          "type": "string"
        },
        "proficiency": {
          "enum": [
            "Nothing",
            "Basics",
            "Intermediate",
            "Advanced",
            "Native"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserMessageContract": {
      "properties": {
        "body": {
          "type": "string"
        },
        "createdFormatted": {
          "type": "string"
        },
        "highPriority": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inbox": {
          "enum": [
            "Nothing",
            "Received",
            "Sent",
            "Notifications"
          ],
          "type": "string"
        },
        "read": {
          "type": "boolean"
        },
        "receiver": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "sender": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "subject": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserWithEmailContract": {
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "VenueContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "addressCountryCode": {
          "type": "string"
        },
        "coordinates": {
          "$ref": "#/definitions/OptionalGeoPointContract"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "VenueForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "addressCountryCode": {
          "type": "string"
        },
        "coordinates": {
          "$ref": "#/definitions/OptionalGeoPointContract"
        },
        "description": {
          "type": "string"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/ReleaseEventContract"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "WebLinkContract": {
      "properties": {
        "category": {
          "enum": [
            "Official",
            "Commercial",
            "Reference",
            "Other"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptionOrUrl": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "WebLinkForApiContract": {
      "properties": {
        "category": {
          "enum": [
            "Official",
            "Commercial",
            "Reference",
            "Other"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptionOrUrl": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    }
  }
}