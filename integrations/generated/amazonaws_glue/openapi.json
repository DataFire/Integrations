{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Glue</fullname> <p>Defines the public endpoint for the AWS Glue service.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Glue",
    "version": "2017-03-31",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/glue-2017-03-31.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "glue",
    "x-datafire": {
      "name": "amazonaws_glue",
      "type": "openapi"
    }
  },
  "host": "glue.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=AWSGlue.BatchCreatePartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchCreatePartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchCreatePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchCreatePartitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "485": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Creates one or more partitions in a batch operation.",
        "operationId": "BatchCreatePartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchDeleteConnection": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchDeleteConnection"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDeleteConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDeleteConnectionResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Deletes a list of connection definitions from the Data Catalog.",
        "operationId": "BatchDeleteConnection"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchDeletePartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchDeletePartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDeletePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDeletePartitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Deletes one or more partitions in a batch operation.",
        "operationId": "BatchDeletePartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchDeleteTable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchDeleteTable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDeleteTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDeleteTableResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "<p>Deletes multiple tables at once.</p> <note> <p>After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. AWS Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>BatchDeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note>",
        "operationId": "BatchDeleteTable"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchDeleteTableVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchDeleteTableVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDeleteTableVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDeleteTableVersionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Deletes a specified batch of versions of a table.",
        "operationId": "BatchDeleteTableVersion"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetCrawlers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchGetCrawlers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetCrawlersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetCrawlersResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Returns a list of resource metadata for a given list of crawler names. After calling the <code>ListCrawlers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.",
        "operationId": "BatchGetCrawlers"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetDevEndpoints": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchGetDevEndpoints"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetDevEndpointsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetDevEndpointsResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        },
        "description": "Returns a list of resource metadata for a given list of development endpoint names. After calling the <code>ListDevEndpoints</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.",
        "operationId": "BatchGetDevEndpoints"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchGetJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetJobsResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        },
        "description": "Returns a list of resource metadata for a given list of job names. After calling the <code>ListJobs</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags. ",
        "operationId": "BatchGetJobs"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetPartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchGetPartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetPartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetPartitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves partitions in a batch request.",
        "operationId": "BatchGetPartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetTriggers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchGetTriggers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetTriggersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetTriggersResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        },
        "description": "Returns a list of resource metadata for a given list of trigger names. After calling the <code>ListTriggers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.",
        "operationId": "BatchGetTriggers"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchGetWorkflows": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchGetWorkflows"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetWorkflowsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetWorkflowsResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        },
        "description": "Returns a list of resource metadata for a given list of workflow names. After calling the <code>ListWorkflows</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.",
        "operationId": "BatchGetWorkflows"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchStopJobRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchStopJobRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchStopJobRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchStopJobRunResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Stops one or more job runs for a specified job definition.",
        "operationId": "BatchStopJobRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.BatchUpdatePartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.BatchUpdatePartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchUpdatePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchUpdatePartitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Updates one or more partitions in a batch operation.",
        "operationId": "BatchUpdatePartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.CancelMLTaskRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CancelMLTaskRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelMLTaskRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelMLTaskRunResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Cancels (stops) a task run. Machine learning task runs are asynchronous tasks that AWS Glue runs on your behalf as part of various machine learning workflows. You can cancel a machine learning task run at any time by calling <code>CancelMLTaskRun</code> with a task run's parent transform's <code>TransformID</code> and the task run's <code>TaskRunId</code>. ",
        "operationId": "CancelMLTaskRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.CheckSchemaVersionValidity": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CheckSchemaVersionValidity"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckSchemaVersionValidityInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CheckSchemaVersionValidityResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Validates the supplied schema. This call has no side effects, it simply validates using the supplied schema using <code>DataFormat</code> as the format. Since it does not take a schema set name, no compatibility checks are performed.",
        "operationId": "CheckSchemaVersionValidity"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateClassifier": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateClassifier"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateClassifierResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Creates a classifier in the user's account. This can be a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on which field of the request is present.",
        "operationId": "CreateClassifier"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateConnection": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateConnection"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateConnectionResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Creates a connection definition in the Data Catalog.",
        "operationId": "CreateConnection"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateCrawler": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateCrawler"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateCrawlerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          }
        },
        "description": "Creates a new crawler with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in the <code>s3Targets</code> field, the <code>jdbcTargets</code> field, or the <code>DynamoDBTargets</code> field.",
        "operationId": "CreateCrawler"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateDatabase": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateDatabase"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDatabaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDatabaseResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "485": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Creates a new database in a Data Catalog.",
        "operationId": "CreateDatabase"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateDevEndpoint": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateDevEndpoint"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDevEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDevEndpointResponse"
            }
          },
          "480": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "IdempotentParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatchException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "485": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "486": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "487": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          }
        },
        "description": "Creates a new development endpoint.",
        "operationId": "CreateDevEndpoint"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "IdempotentParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatchException"
            }
          },
          "482": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Creates a new job definition.",
        "operationId": "CreateJob"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateMLTransform": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateMLTransform"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMLTransformRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateMLTransformResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "486": {
            "description": "IdempotentParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatchException"
            }
          }
        },
        "description": "<p>Creates an AWS Glue machine learning transform. This operation creates the transform and all the necessary parameters to train it.</p> <p>Call this operation as the first step in the process of using a machine learning transform (such as the <code>FindMatches</code> transform) for deduplicating data. You can provide an optional <code>Description</code>, in addition to the parameters that you want to use for your algorithm.</p> <p>You must also specify certain parameters for the tasks that AWS Glue runs on your behalf as part of learning from your data and creating a high-quality machine learning transform. These parameters include <code>Role</code>, and optionally, <code>AllocatedCapacity</code>, <code>Timeout</code>, and <code>MaxRetries</code>. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html\">Jobs</a>.</p>",
        "operationId": "CreateMLTransform"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreatePartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreatePartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePartitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "485": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Creates a new partition.",
        "operationId": "CreatePartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreatePartitionIndex": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreatePartitionIndex"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePartitionIndexRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreatePartitionIndexResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "485": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Creates a specified partition index in an existing table.",
        "operationId": "CreatePartitionIndex"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateRegistry": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateRegistry"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRegistryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateRegistryResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Creates a new registry which may be used to hold a collection of schemas.",
        "operationId": "CreateRegistry"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateSchema": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateSchema"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSchemaInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSchemaResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "485": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "<p>Creates a new schema set and registers the schema definition. Returns an error if the schema set already exists without actually registering the version.</p> <p>When the schema set is created, a version checkpoint will be set to the first version. Compatibility mode \"DISABLED\" restricts any additional schema versions from being added after the first schema version. For all other compatibility modes, validation of compatibility settings will be applied only from the second version onwards when the <code>RegisterSchemaVersion</code> API is used.</p> <p>When this API is called without a <code>RegistryId</code>, this will create an entry for a \"default-registry\" in the registry database tables, if it is not already present.</p>",
        "operationId": "CreateSchema"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateScript": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateScript"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateScriptRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateScriptResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Transforms a directed acyclic graph (DAG) into code.",
        "operationId": "CreateScript"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateSecurityConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateSecurityConfiguration"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSecurityConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSecurityConfigurationResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          }
        },
        "description": "Creates a new security configuration. A security configuration is a set of security properties that can be used by AWS Glue. You can use a security configuration to encrypt data at rest. For information about using security configurations in AWS Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/encryption-security-configuration.html\">Encrypting Data Written by Crawlers, Jobs, and Development Endpoints</a>.",
        "operationId": "CreateSecurityConfiguration"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateTable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateTable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTableResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "485": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Creates a new table definition in the Data Catalog.",
        "operationId": "CreateTable"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateTrigger": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateTrigger"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTriggerResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "483": {
            "description": "IdempotentParameterMismatchException",
            "schema": {
              "$ref": "#/definitions/IdempotentParameterMismatchException"
            }
          },
          "484": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "485": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "486": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "487": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Creates a new trigger.",
        "operationId": "CreateTrigger"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateUserDefinedFunction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateUserDefinedFunction"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserDefinedFunctionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateUserDefinedFunctionResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Creates a new function definition in the Data Catalog.",
        "operationId": "CreateUserDefinedFunction"
      }
    },
    "/#X-Amz-Target=AWSGlue.CreateWorkflow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.CreateWorkflow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWorkflowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateWorkflowResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "485": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Creates a new workflow.",
        "operationId": "CreateWorkflow"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteClassifier": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteClassifier"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteClassifierResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Removes a classifier from the Data Catalog.",
        "operationId": "DeleteClassifier"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteColumnStatisticsForPartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteColumnStatisticsForPartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteColumnStatisticsForPartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteColumnStatisticsForPartitionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "<p>Delete the partition column statistics of a column.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeletePartition</code>.</p>",
        "operationId": "DeleteColumnStatisticsForPartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteColumnStatisticsForTable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteColumnStatisticsForTable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteColumnStatisticsForTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteColumnStatisticsForTableResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "<p>Retrieves table statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeleteTable</code>.</p>",
        "operationId": "DeleteColumnStatisticsForTable"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteConnection": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteConnection"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteConnectionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Deletes a connection from the Data Catalog.",
        "operationId": "DeleteConnection"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteCrawler": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteCrawler"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteCrawlerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "CrawlerRunningException",
            "schema": {
              "$ref": "#/definitions/CrawlerRunningException"
            }
          },
          "482": {
            "description": "SchedulerTransitioningException",
            "schema": {
              "$ref": "#/definitions/SchedulerTransitioningException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Removes a specified crawler from the AWS Glue Data Catalog, unless the crawler state is <code>RUNNING</code>.",
        "operationId": "DeleteCrawler"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteDatabase": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteDatabase"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDatabaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDatabaseResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "<p>Removes a specified database from a Data Catalog.</p> <note> <p>After completing this operation, you no longer have access to the tables (and all table versions and partitions that might belong to the tables) and the user-defined functions in the deleted database. AWS Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>DeleteDatabase</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, <code>DeletePartition</code> or <code>BatchDeletePartition</code>, <code>DeleteUserDefinedFunction</code>, and <code>DeleteTable</code> or <code>BatchDeleteTable</code>, to delete any resources that belong to the database.</p> </note>",
        "operationId": "DeleteDatabase"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteDevEndpoint": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteDevEndpoint"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDevEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDevEndpointResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        },
        "description": "Deletes a specified development endpoint.",
        "operationId": "DeleteDevEndpoint"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Deletes a specified job definition. If the job definition is not found, no exception is thrown.",
        "operationId": "DeleteJob"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteMLTransform": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteMLTransform"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteMLTransformRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteMLTransformResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Deletes an AWS Glue machine learning transform. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by AWS Glue. If you no longer need a transform, you can delete it by calling <code>DeleteMLTransforms</code>. However, any AWS Glue jobs that still reference the deleted transform will no longer succeed.",
        "operationId": "DeleteMLTransform"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeletePartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeletePartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePartitionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Deletes a specified partition.",
        "operationId": "DeletePartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeletePartitionIndex": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeletePartitionIndex"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePartitionIndexRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletePartitionIndexResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          },
          "485": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Deletes a specified partition index from an existing table.",
        "operationId": "DeletePartitionIndex"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteRegistry": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteRegistry"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRegistryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteRegistryResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Delete the entire registry including schema and all of its versions. To get the status of the delete operation, you can call the <code>GetRegistry</code> API after the asynchronous call. Deleting a registry will disable all online operations for the registry such as the <code>UpdateRegistry</code>, <code>CreateSchema</code>, <code>UpdateSchema</code>, and <code>RegisterSchemaVersion</code> APIs. ",
        "operationId": "DeleteRegistry"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteResourcePolicy": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteResourcePolicy"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteResourcePolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteResourcePolicyResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "484": {
            "description": "ConditionCheckFailureException",
            "schema": {
              "$ref": "#/definitions/ConditionCheckFailureException"
            }
          }
        },
        "description": "Deletes a specified policy.",
        "operationId": "DeleteResourcePolicy"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteSchema": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteSchema"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSchemaInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteSchemaResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Deletes the entire schema set, including the schema set and all of its versions. To get the status of the delete operation, you can call <code>GetSchema</code> API after the asynchronous call. Deleting a registry will disable all online operations for the schema, such as the <code>GetSchemaByDefinition</code>, and <code>RegisterSchemaVersion</code> APIs.",
        "operationId": "DeleteSchema"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteSchemaVersions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteSchemaVersions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSchemaVersionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteSchemaVersionsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "<p>Remove versions from the specified schema. A version number or range may be supplied. If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned. Calling the <code>GetSchemaVersions</code> API after this call will list the status of the deleted versions.</p> <p>When the range of version numbers contain check pointed version, the API will return a 409 conflict and will not proceed with the deletion. You have to remove the checkpoint first using the <code>DeleteSchemaCheckpoint</code> API before using this API.</p> <p>You cannot use the <code>DeleteSchemaVersions</code> API to delete the first schema version in the schema set. The first schema version can only be deleted by the <code>DeleteSchema</code> API. This operation will also delete the attached <code>SchemaVersionMetadata</code> under the schema versions. Hard deletes will be enforced on the database.</p> <p>If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.</p>",
        "operationId": "DeleteSchemaVersions"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteSecurityConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteSecurityConfiguration"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSecurityConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteSecurityConfigurationResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Deletes a specified security configuration.",
        "operationId": "DeleteSecurityConfiguration"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteTable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteTable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTableResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "<p>Removes a table definition from the Data Catalog.</p> <note> <p>After completing this operation, you no longer have access to the table versions and partitions that belong to the deleted table. AWS Glue deletes these \"orphaned\" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure the immediate deletion of all related resources, before calling <code>DeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note>",
        "operationId": "DeleteTable"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteTableVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteTableVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTableVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTableVersionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Deletes a specified version of a table.",
        "operationId": "DeleteTableVersion"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteTrigger": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteTrigger"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTriggerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Deletes a specified trigger. If the trigger is not found, no exception is thrown.",
        "operationId": "DeleteTrigger"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteUserDefinedFunction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteUserDefinedFunction"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUserDefinedFunctionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteUserDefinedFunctionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Deletes an existing function definition from the Data Catalog.",
        "operationId": "DeleteUserDefinedFunction"
      }
    },
    "/#X-Amz-Target=AWSGlue.DeleteWorkflow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.DeleteWorkflow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteWorkflowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteWorkflowResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Deletes a workflow.",
        "operationId": "DeleteWorkflow"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetCatalogImportStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetCatalogImportStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCatalogImportStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCatalogImportStatusResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves the status of a migration operation.",
        "operationId": "GetCatalogImportStatus"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetClassifier": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetClassifier"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetClassifierResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieve a classifier by name.",
        "operationId": "GetClassifier"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetClassifiers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetClassifiers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetClassifiersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetClassifiersResponse"
            }
          },
          "480": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Lists all classifier objects in the Data Catalog.",
        "operationId": "GetClassifiers"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetColumnStatisticsForPartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetColumnStatisticsForPartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetColumnStatisticsForPartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetColumnStatisticsForPartitionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "<p>Retrieves partition statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetPartition</code>.</p>",
        "operationId": "GetColumnStatisticsForPartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetColumnStatisticsForTable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetColumnStatisticsForTable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetColumnStatisticsForTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetColumnStatisticsForTableResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "<p>Retrieves table statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetTable</code>.</p>",
        "operationId": "GetColumnStatisticsForTable"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetConnection": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetConnection"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetConnectionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "483": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves a connection definition from the Data Catalog.",
        "operationId": "GetConnection"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetConnections": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetConnections"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetConnectionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetConnectionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "483": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves a list of connection definitions from the Data Catalog.",
        "operationId": "GetConnections"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetCrawler": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetCrawler"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCrawlerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves metadata for a specified crawler.",
        "operationId": "GetCrawler"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetCrawlerMetrics": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetCrawlerMetrics"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCrawlerMetricsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCrawlerMetricsResponse"
            }
          },
          "480": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves metrics about specified crawlers.",
        "operationId": "GetCrawlerMetrics"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetCrawlers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetCrawlers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCrawlersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCrawlersResponse"
            }
          },
          "480": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves metadata for all crawlers defined in the customer account.",
        "operationId": "GetCrawlers"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDataCatalogEncryptionSettings": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetDataCatalogEncryptionSettings"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDataCatalogEncryptionSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDataCatalogEncryptionSettingsResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves the security configuration for a specified catalog.",
        "operationId": "GetDataCatalogEncryptionSettings"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDatabase": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetDatabase"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDatabaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDatabaseResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves the definition of a specified database.",
        "operationId": "GetDatabase"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDatabases": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetDatabases"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDatabasesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDatabasesResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves all databases defined in a given Data Catalog.",
        "operationId": "GetDatabases"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDataflowGraph": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetDataflowGraph"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDataflowGraphRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDataflowGraphResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Transforms a Python script into a directed acyclic graph (DAG). ",
        "operationId": "GetDataflowGraph"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDevEndpoint": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetDevEndpoint"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDevEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDevEndpointResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        },
        "description": "<p>Retrieves information about a specified development endpoint.</p> <note> <p>When you create a development endpoint in a virtual private cloud (VPC), AWS Glue returns only a private IP address, and the public IP address field is not populated. When you create a non-VPC development endpoint, AWS Glue returns only a public IP address.</p> </note>",
        "operationId": "GetDevEndpoint"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetDevEndpoints": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetDevEndpoints"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDevEndpointsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDevEndpointsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        },
        "description": "<p>Retrieves all the development endpoints in this AWS account.</p> <note> <p>When you create a development endpoint in a virtual private cloud (VPC), AWS Glue returns only a private IP address and the public IP address field is not populated. When you create a non-VPC development endpoint, AWS Glue returns only a public IP address.</p> </note>",
        "operationId": "GetDevEndpoints"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves an existing job definition.",
        "operationId": "GetJob"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJobBookmark": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetJobBookmark"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobBookmarkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobBookmarkResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          }
        },
        "description": "Returns information on a job bookmark entry.",
        "operationId": "GetJobBookmark"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJobRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetJobRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobRunResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves the metadata for a given job run.",
        "operationId": "GetJobRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJobRuns": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetJobRuns"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobRunsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobRunsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves metadata for all runs of a given job definition.",
        "operationId": "GetJobRuns"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetJobsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves all current job definitions.",
        "operationId": "GetJobs"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMLTaskRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetMLTaskRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMLTaskRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMLTaskRunResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Gets details for a specific task run on a machine learning transform. Machine learning task runs are asynchronous tasks that AWS Glue runs on your behalf as part of various machine learning workflows. You can check the stats of any task run by calling <code>GetMLTaskRun</code> with the <code>TaskRunID</code> and its parent transform's <code>TransformID</code>.",
        "operationId": "GetMLTaskRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMLTaskRuns": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetMLTaskRuns"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMLTaskRunsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMLTaskRunsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "<p>Gets a list of runs for a machine learning transform. Machine learning task runs are asynchronous tasks that AWS Glue runs on your behalf as part of various machine learning workflows. You can get a sortable, filterable list of machine learning task runs by calling <code>GetMLTaskRuns</code> with their parent transform's <code>TransformID</code> and other optional parameters as documented in this section.</p> <p>This operation returns a list of historic runs and must be paginated.</p>",
        "operationId": "GetMLTaskRuns"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMLTransform": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetMLTransform"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMLTransformRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMLTransformResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Gets an AWS Glue machine learning transform artifact and all its corresponding metadata. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by AWS Glue. You can retrieve their metadata by calling <code>GetMLTransform</code>.",
        "operationId": "GetMLTransform"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMLTransforms": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetMLTransforms"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMLTransformsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMLTransformsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Gets a sortable, filterable list of existing AWS Glue machine learning transforms. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by AWS Glue, and you can retrieve their metadata by calling <code>GetMLTransforms</code>.",
        "operationId": "GetMLTransforms"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetMapping": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetMapping"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetMappingResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "Creates mappings.",
        "operationId": "GetMapping"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetPartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetPartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPartitionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves information about a specified partition.",
        "operationId": "GetPartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetPartitionIndexes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetPartitionIndexes"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPartitionIndexesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPartitionIndexesResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "484": {
            "description": "ConflictException",
            "schema": {
              "$ref": "#/definitions/ConflictException"
            }
          }
        },
        "description": "Retrieves the partition indexes associated with a table.",
        "operationId": "GetPartitionIndexes"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetPartitions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetPartitions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPartitionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPartitionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves information about the partitions in a table.",
        "operationId": "GetPartitions"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetPlan": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetPlan"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPlanRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPlanResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Gets code to perform a specified mapping.",
        "operationId": "GetPlan"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetRegistry": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetRegistry"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRegistryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetRegistryResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Describes the specified registry in detail.",
        "operationId": "GetRegistry"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetResourcePolicies": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetResourcePolicies"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetResourcePoliciesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetResourcePoliciesResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "483": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "<p>Retrieves the security configurations for the resource policies set on individual resources, and also the account-level policy.</p> <p>This operation also returns the Data Catalog resource policy. However, if you enabled metadata encryption in Data Catalog settings, and you do not have permission on the AWS KMS key, the operation can't return the Data Catalog resource policy.</p>",
        "operationId": "GetResourcePolicies"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetResourcePolicy": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetResourcePolicy"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetResourcePolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetResourcePolicyResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        },
        "description": "Retrieves a specified resource policy.",
        "operationId": "GetResourcePolicy"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetSchema": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetSchema"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSchemaInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSchemaResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Describes the specified schema in detail.",
        "operationId": "GetSchema"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetSchemaByDefinition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetSchemaByDefinition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSchemaByDefinitionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSchemaByDefinitionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Retrieves a schema by the <code>SchemaDefinition</code>. The schema definition is sent to the Schema Registry, canonicalized, and hashed. If the hash is matched within the scope of the <code>SchemaName</code> or ARN (or the default registry, if none is supplied), that schema’s metadata is returned. Otherwise, a 404 or NotFound error is returned. Schema versions in <code>Deleted</code> statuses will not be included in the results.",
        "operationId": "GetSchemaByDefinition"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetSchemaVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetSchemaVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSchemaVersionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSchemaVersionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Get the specified schema by its unique ID assigned when a version of the schema is created or registered. Schema versions in Deleted status will not be included in the results.",
        "operationId": "GetSchemaVersion"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetSchemaVersionsDiff": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetSchemaVersionsDiff"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSchemaVersionsDiffInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSchemaVersionsDiffResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "<p>Fetches the schema version difference in the specified difference type between two stored schema versions in the Schema Registry.</p> <p>This API allows you to compare two schema versions between two schema definitions under the same schema.</p>",
        "operationId": "GetSchemaVersionsDiff"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetSecurityConfiguration": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetSecurityConfiguration"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSecurityConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSecurityConfigurationResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves a specified security configuration.",
        "operationId": "GetSecurityConfiguration"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetSecurityConfigurations": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetSecurityConfigurations"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSecurityConfigurationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSecurityConfigurationsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves a list of all security configurations.",
        "operationId": "GetSecurityConfigurations"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetTable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTableResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves the <code>Table</code> definition in a Data Catalog for a specified table.",
        "operationId": "GetTable"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTableVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetTableVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTableVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTableVersionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves a specified version of a table.",
        "operationId": "GetTableVersion"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTableVersions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetTableVersions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTableVersionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTableVersionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves a list of strings that identify available versions of a specified table.",
        "operationId": "GetTableVersions"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTables": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetTables"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTablesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTablesResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves the definitions of some or all of the tables in a given <code>Database</code>.",
        "operationId": "GetTables"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTags": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetTags"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTagsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTagsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "Retrieves a list of tags associated with a resource.",
        "operationId": "GetTags"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTrigger": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetTrigger"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTriggerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves the definition of a trigger.",
        "operationId": "GetTrigger"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetTriggers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetTriggers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTriggersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTriggersResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Gets all the triggers associated with a job.",
        "operationId": "GetTriggers"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetUserDefinedFunction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetUserDefinedFunction"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUserDefinedFunctionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetUserDefinedFunctionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves a specified function definition from the Data Catalog.",
        "operationId": "GetUserDefinedFunction"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetUserDefinedFunctions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetUserDefinedFunctions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUserDefinedFunctionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetUserDefinedFunctionsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Retrieves multiple function definitions from the Data Catalog.",
        "operationId": "GetUserDefinedFunctions"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetWorkflow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetWorkflow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetWorkflowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetWorkflowResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves resource metadata for a workflow.",
        "operationId": "GetWorkflow"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetWorkflowRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetWorkflowRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetWorkflowRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetWorkflowRunResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves the metadata for a given workflow run. ",
        "operationId": "GetWorkflowRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetWorkflowRunProperties": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.GetWorkflowRunProperties"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetWorkflowRunPropertiesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetWorkflowRunPropertiesResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves the workflow run properties which were set during the run.",
        "operationId": "GetWorkflowRunProperties"
      }
    },
    "/#X-Amz-Target=AWSGlue.GetWorkflowRuns": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.GetWorkflowRuns"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetWorkflowRunsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetWorkflowRunsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Retrieves metadata for all runs of a given workflow.",
        "operationId": "GetWorkflowRuns"
      }
    },
    "/#X-Amz-Target=AWSGlue.ImportCatalogToGlue": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.ImportCatalogToGlue"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportCatalogToGlueRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImportCatalogToGlueResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Imports an existing Amazon Athena Data Catalog to AWS Glue",
        "operationId": "ImportCatalogToGlue"
      }
    },
    "/#X-Amz-Target=AWSGlue.ListCrawlers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.ListCrawlers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCrawlersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCrawlersResponse"
            }
          },
          "480": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "<p>Retrieves the names of all crawler resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
        "operationId": "ListCrawlers"
      }
    },
    "/#X-Amz-Target=AWSGlue.ListDevEndpoints": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.ListDevEndpoints"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDevEndpointsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDevEndpointsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "<p>Retrieves the names of all <code>DevEndpoint</code> resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
        "operationId": "ListDevEndpoints"
      }
    },
    "/#X-Amz-Target=AWSGlue.ListJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.ListJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListJobsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "<p>Retrieves the names of all job resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
        "operationId": "ListJobs"
      }
    },
    "/#X-Amz-Target=AWSGlue.ListMLTransforms": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.ListMLTransforms"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListMLTransformsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListMLTransformsResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": " Retrieves a sortable, filterable list of existing AWS Glue machine learning transforms in this AWS account, or the resources with the specified tag. This operation takes the optional <code>Tags</code> field, which you can use as a filter of the responses so that tagged resources can be retrieved as a group. If you choose to use tag filtering, only resources with the tags are retrieved. ",
        "operationId": "ListMLTransforms"
      }
    },
    "/#X-Amz-Target=AWSGlue.ListRegistries": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.ListRegistries"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListRegistriesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListRegistriesResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Returns a list of registries that you have created, with minimal registry information. Registries in the <code>Deleting</code> status will not be included in the results. Empty results will be returned if there are no registries available.",
        "operationId": "ListRegistries"
      }
    },
    "/#X-Amz-Target=AWSGlue.ListSchemaVersions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.ListSchemaVersions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSchemaVersionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSchemaVersionsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Returns a list of schema versions that you have created, with minimal information. Schema versions in Deleted status will not be included in the results. Empty results will be returned if there are no schema versions available.",
        "operationId": "ListSchemaVersions"
      }
    },
    "/#X-Amz-Target=AWSGlue.ListSchemas": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.ListSchemas"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSchemasInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSchemasResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "<p>Returns a list of schemas with minimal details. Schemas in Deleting status will not be included in the results. Empty results will be returned if there are no schemas available.</p> <p>When the <code>RegistryId</code> is not provided, all the schemas across registries will be part of the API response.</p>",
        "operationId": "ListSchemas"
      }
    },
    "/#X-Amz-Target=AWSGlue.ListTriggers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.ListTriggers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTriggersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTriggersResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "<p>Retrieves the names of all trigger resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p> <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.</p>",
        "operationId": "ListTriggers"
      }
    },
    "/#X-Amz-Target=AWSGlue.ListWorkflows": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.ListWorkflows"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListWorkflowsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListWorkflowsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Lists names of workflows created in the account.",
        "operationId": "ListWorkflows"
      }
    },
    "/#X-Amz-Target=AWSGlue.PutDataCatalogEncryptionSettings": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.PutDataCatalogEncryptionSettings"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutDataCatalogEncryptionSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutDataCatalogEncryptionSettingsResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Sets the security configuration for a specified catalog. After the configuration has been set, the specified encryption is applied to every catalog write thereafter.",
        "operationId": "PutDataCatalogEncryptionSettings"
      }
    },
    "/#X-Amz-Target=AWSGlue.PutResourcePolicy": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.PutResourcePolicy"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutResourcePolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutResourcePolicyResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "484": {
            "description": "ConditionCheckFailureException",
            "schema": {
              "$ref": "#/definitions/ConditionCheckFailureException"
            }
          }
        },
        "description": "Sets the Data Catalog resource policy for access control.",
        "operationId": "PutResourcePolicy"
      }
    },
    "/#X-Amz-Target=AWSGlue.PutSchemaVersionMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.PutSchemaVersionMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutSchemaVersionMetadataInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutSchemaVersionMetadataResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          }
        },
        "description": "Puts the metadata key value pair for a specified schema version ID. A maximum of 10 key value pairs will be allowed per schema version. They can be added over one or more calls.",
        "operationId": "PutSchemaVersionMetadata"
      }
    },
    "/#X-Amz-Target=AWSGlue.PutWorkflowRunProperties": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.PutWorkflowRunProperties"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutWorkflowRunPropertiesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutWorkflowRunPropertiesResponse"
            }
          },
          "480": {
            "description": "AlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/AlreadyExistsException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "486": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Puts the specified workflow run properties for the given workflow run. If a property already exists for the specified run, then it overrides the value otherwise adds the property to existing properties.",
        "operationId": "PutWorkflowRunProperties"
      }
    },
    "/#X-Amz-Target=AWSGlue.QuerySchemaVersionMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.QuerySchemaVersionMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuerySchemaVersionMetadataInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QuerySchemaVersionMetadataResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "Queries for the schema version metadata information. ",
        "operationId": "QuerySchemaVersionMetadata"
      }
    },
    "/#X-Amz-Target=AWSGlue.RegisterSchemaVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.RegisterSchemaVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterSchemaVersionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterSchemaVersionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          },
          "485": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "<p>Adds a new version to the existing schema. Returns an error if new version of schema does not meet the compatibility requirements of the schema set. This API will not create a new schema set and will return a 404 error if the schema set is not already present in the Schema Registry.</p> <p>If this is the first schema definition to be registered in the Schema Registry, this API will store the schema version and return immediately. Otherwise, this call has the potential to run longer than other operations due to compatibility modes. You can call the <code>GetSchemaVersion</code> API with the <code>SchemaVersionId</code> to check compatibility modes.</p> <p>If the same schema definition is already stored in Schema Registry as a version, the schema ID of the existing schema is returned to the caller.</p>",
        "operationId": "RegisterSchemaVersion"
      }
    },
    "/#X-Amz-Target=AWSGlue.RemoveSchemaVersionMetadata": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.RemoveSchemaVersionMetadata"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveSchemaVersionMetadataInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RemoveSchemaVersionMetadataResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "Removes a key value pair from the schema version metadata for the specified schema version ID.",
        "operationId": "RemoveSchemaVersionMetadata"
      }
    },
    "/#X-Amz-Target=AWSGlue.ResetJobBookmark": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.ResetJobBookmark"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetJobBookmarkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResetJobBookmarkResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Resets a bookmark entry.",
        "operationId": "ResetJobBookmark"
      }
    },
    "/#X-Amz-Target=AWSGlue.ResumeWorkflowRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.ResumeWorkflowRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResumeWorkflowRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResumeWorkflowRunResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ConcurrentRunsExceededException",
            "schema": {
              "$ref": "#/definitions/ConcurrentRunsExceededException"
            }
          },
          "485": {
            "description": "IllegalWorkflowStateException",
            "schema": {
              "$ref": "#/definitions/IllegalWorkflowStateException"
            }
          }
        },
        "description": "Restarts selected nodes of a previous partially completed workflow run and resumes the workflow run. The selected nodes and all nodes that are downstream from the selected nodes are run.",
        "operationId": "ResumeWorkflowRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.SearchTables": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AWSGlue.SearchTables"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchTablesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SearchTablesResponse"
            }
          },
          "480": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "<p>Searches a set of tables based on properties in the table metadata as well as on the parent database. You can search against text or filter conditions. </p> <p>You can only get tables that you have access to based on the security policies defined in Lake Formation. You need at least a read-only access to the table for it to be returned. If you do not have access to all the columns in the table, these columns will not be searched against when returning the list of tables back to you. If you have access to the columns but not the data in the columns, those columns and the associated metadata for those columns will be included in the search. </p>",
        "operationId": "SearchTables"
      }
    },
    "/#X-Amz-Target=AWSGlue.StartCrawler": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StartCrawler"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartCrawlerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "CrawlerRunningException",
            "schema": {
              "$ref": "#/definitions/CrawlerRunningException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Starts a crawl using the specified crawler, regardless of what is scheduled. If the crawler is already running, returns a <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException\">CrawlerRunningException</a>.",
        "operationId": "StartCrawler"
      }
    },
    "/#X-Amz-Target=AWSGlue.StartCrawlerSchedule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StartCrawlerSchedule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartCrawlerScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartCrawlerScheduleResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "SchedulerRunningException",
            "schema": {
              "$ref": "#/definitions/SchedulerRunningException"
            }
          },
          "482": {
            "description": "SchedulerTransitioningException",
            "schema": {
              "$ref": "#/definitions/SchedulerTransitioningException"
            }
          },
          "483": {
            "description": "NoScheduleException",
            "schema": {
              "$ref": "#/definitions/NoScheduleException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Changes the schedule state of the specified crawler to <code>SCHEDULED</code>, unless the crawler is already running or the schedule state is already <code>SCHEDULED</code>.",
        "operationId": "StartCrawlerSchedule"
      }
    },
    "/#X-Amz-Target=AWSGlue.StartExportLabelsTaskRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StartExportLabelsTaskRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartExportLabelsTaskRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartExportLabelsTaskRunResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Begins an asynchronous task to export all labeled data for a particular transform. This task is the only label-related API call that is not part of the typical active learning workflow. You typically use <code>StartExportLabelsTaskRun</code> when you want to work with all of your existing labels at the same time, such as when you want to remove or change labels that were previously submitted as truth. This API operation accepts the <code>TransformId</code> whose labels you want to export and an Amazon Simple Storage Service (Amazon S3) path to export the labels to. The operation returns a <code>TaskRunId</code>. You can check on the status of your task run by calling the <code>GetMLTaskRun</code> API.",
        "operationId": "StartExportLabelsTaskRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.StartImportLabelsTaskRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StartImportLabelsTaskRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartImportLabelsTaskRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartImportLabelsTaskRunResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "<p>Enables you to provide additional labels (examples of truth) to be used to teach the machine learning transform and improve its quality. This API operation is generally used as part of the active learning workflow that starts with the <code>StartMLLabelingSetGenerationTaskRun</code> call and that ultimately results in improving the quality of your machine learning transform. </p> <p>After the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, AWS Glue machine learning will have generated a series of questions for humans to answer. (Answering these questions is often called 'labeling' in the machine learning workflows). In the case of the <code>FindMatches</code> transform, these questions are of the form, “What is the correct way to group these rows together into groups composed entirely of matching records?” After the labeling process is finished, users upload their answers/labels with a call to <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine learning transform use the new and improved labels and perform a higher-quality transformation.</p> <p>By default, <code>StartMLLabelingSetGenerationTaskRun</code> continually learns from and combines all labels that you upload unless you set <code>Replace</code> to true. If you set <code>Replace</code> to true, <code>StartImportLabelsTaskRun</code> deletes and forgets all previously uploaded labels and learns only from the exact set that you upload. Replacing labels can be helpful if you realize that you previously uploaded incorrect labels, and you believe that they are having a negative effect on your transform quality.</p> <p>You can check on the status of your task run by calling the <code>GetMLTaskRun</code> operation. </p>",
        "operationId": "StartImportLabelsTaskRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.StartJobRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StartJobRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartJobRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartJobRunResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "485": {
            "description": "ConcurrentRunsExceededException",
            "schema": {
              "$ref": "#/definitions/ConcurrentRunsExceededException"
            }
          }
        },
        "description": "Starts a job run using a job definition.",
        "operationId": "StartJobRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.StartMLEvaluationTaskRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StartMLEvaluationTaskRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartMLEvaluationTaskRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartMLEvaluationTaskRunResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "ConcurrentRunsExceededException",
            "schema": {
              "$ref": "#/definitions/ConcurrentRunsExceededException"
            }
          },
          "485": {
            "description": "MLTransformNotReadyException",
            "schema": {
              "$ref": "#/definitions/MLTransformNotReadyException"
            }
          }
        },
        "description": "<p>Starts a task to estimate the quality of the transform. </p> <p>When you provide label sets as examples of truth, AWS Glue machine learning uses some of those examples to learn from them. The rest of the labels are used as a test to estimate quality.</p> <p>Returns a unique identifier for the run. You can call <code>GetMLTaskRun</code> to get more information about the stats of the <code>EvaluationTaskRun</code>.</p>",
        "operationId": "StartMLEvaluationTaskRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.StartMLLabelingSetGenerationTaskRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StartMLLabelingSetGenerationTaskRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartMLLabelingSetGenerationTaskRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartMLLabelingSetGenerationTaskRunResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "ConcurrentRunsExceededException",
            "schema": {
              "$ref": "#/definitions/ConcurrentRunsExceededException"
            }
          }
        },
        "description": "<p>Starts the active learning workflow for your machine learning transform to improve the transform's quality by generating label sets and adding labels.</p> <p>When the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, AWS Glue will have generated a \"labeling set\" or a set of questions for humans to answer.</p> <p>In the case of the <code>FindMatches</code> transform, these questions are of the form, “What is the correct way to group these rows together into groups composed entirely of matching records?” </p> <p>After the labeling process is finished, you can upload your labels with a call to <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine learning transform will use the new and improved labels and perform a higher-quality transformation.</p>",
        "operationId": "StartMLLabelingSetGenerationTaskRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.StartTrigger": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StartTrigger"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartTriggerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "485": {
            "description": "ConcurrentRunsExceededException",
            "schema": {
              "$ref": "#/definitions/ConcurrentRunsExceededException"
            }
          }
        },
        "description": "Starts an existing trigger. See <a href=\"https://docs.aws.amazon.com/glue/latest/dg/trigger-job.html\">Triggering Jobs</a> for information about how different types of trigger are started.",
        "operationId": "StartTrigger"
      }
    },
    "/#X-Amz-Target=AWSGlue.StartWorkflowRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StartWorkflowRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartWorkflowRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartWorkflowRunResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "485": {
            "description": "ConcurrentRunsExceededException",
            "schema": {
              "$ref": "#/definitions/ConcurrentRunsExceededException"
            }
          }
        },
        "description": "Starts a new run of the specified workflow.",
        "operationId": "StartWorkflowRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.StopCrawler": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StopCrawler"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopCrawlerResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "CrawlerNotRunningException",
            "schema": {
              "$ref": "#/definitions/CrawlerNotRunningException"
            }
          },
          "482": {
            "description": "CrawlerStoppingException",
            "schema": {
              "$ref": "#/definitions/CrawlerStoppingException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "If the specified crawler is running, stops the crawl.",
        "operationId": "StopCrawler"
      }
    },
    "/#X-Amz-Target=AWSGlue.StopCrawlerSchedule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StopCrawlerSchedule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopCrawlerScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopCrawlerScheduleResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "SchedulerNotRunningException",
            "schema": {
              "$ref": "#/definitions/SchedulerNotRunningException"
            }
          },
          "482": {
            "description": "SchedulerTransitioningException",
            "schema": {
              "$ref": "#/definitions/SchedulerTransitioningException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Sets the schedule state of the specified crawler to <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is already running.",
        "operationId": "StopCrawlerSchedule"
      }
    },
    "/#X-Amz-Target=AWSGlue.StopTrigger": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StopTrigger"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopTriggerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Stops a specified trigger.",
        "operationId": "StopTrigger"
      }
    },
    "/#X-Amz-Target=AWSGlue.StopWorkflowRun": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.StopWorkflowRun"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopWorkflowRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopWorkflowRunResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "IllegalWorkflowStateException",
            "schema": {
              "$ref": "#/definitions/IllegalWorkflowStateException"
            }
          }
        },
        "description": "Stops the execution of the specified workflow run.",
        "operationId": "StopWorkflowRun"
      }
    },
    "/#X-Amz-Target=AWSGlue.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "Adds tags to a resource. A tag is a label you can assign to an AWS resource. In AWS Glue, you can tag only certain resources. For information about what resources you can tag, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">AWS Tags in AWS Glue</a>.",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=AWSGlue.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          }
        },
        "description": "Removes tags from a resource.",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateClassifier": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateClassifier"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateClassifierResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "VersionMismatchException",
            "schema": {
              "$ref": "#/definitions/VersionMismatchException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Modifies an existing classifier (a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on which field is present).",
        "operationId": "UpdateClassifier"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateColumnStatisticsForPartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateColumnStatisticsForPartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateColumnStatisticsForPartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateColumnStatisticsForPartitionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "<p>Creates or updates partition statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdatePartition</code>.</p>",
        "operationId": "UpdateColumnStatisticsForPartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateColumnStatisticsForTable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateColumnStatisticsForTable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateColumnStatisticsForTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateColumnStatisticsForTableResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "<p>Creates or updates table statistics of columns.</p> <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdateTable</code>.</p>",
        "operationId": "UpdateColumnStatisticsForTable"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateConnection": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateConnection"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateConnectionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Updates a connection definition in the Data Catalog.",
        "operationId": "UpdateConnection"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateCrawler": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateCrawler"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCrawlerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateCrawlerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "VersionMismatchException",
            "schema": {
              "$ref": "#/definitions/VersionMismatchException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "CrawlerRunningException",
            "schema": {
              "$ref": "#/definitions/CrawlerRunningException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Updates a crawler. If a crawler is running, you must stop it using <code>StopCrawler</code> before updating it.",
        "operationId": "UpdateCrawler"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateCrawlerSchedule": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateCrawlerSchedule"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCrawlerScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateCrawlerScheduleResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "VersionMismatchException",
            "schema": {
              "$ref": "#/definitions/VersionMismatchException"
            }
          },
          "483": {
            "description": "SchedulerTransitioningException",
            "schema": {
              "$ref": "#/definitions/SchedulerTransitioningException"
            }
          },
          "484": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          }
        },
        "description": "Updates the schedule of a crawler using a <code>cron</code> expression. ",
        "operationId": "UpdateCrawlerSchedule"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateDatabase": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateDatabase"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDatabaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDatabaseResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Updates an existing database definition in a Data Catalog.",
        "operationId": "UpdateDatabase"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateDevEndpoint": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateDevEndpoint"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDevEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDevEndpointResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "484": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          }
        },
        "description": "Updates a specified development endpoint.",
        "operationId": "UpdateDevEndpoint"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Updates an existing job definition.",
        "operationId": "UpdateJob"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateMLTransform": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateMLTransform"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMLTransformRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateMLTransformResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          }
        },
        "description": "<p>Updates an existing machine learning transform. Call this operation to tune the algorithm parameters to achieve better results.</p> <p>After calling this operation, you can call the <code>StartMLEvaluationTaskRun</code> operation to assess how well your new parameters achieved your goals (such as improving the quality of your machine learning transform, or making it more cost-effective).</p>",
        "operationId": "UpdateMLTransform"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdatePartition": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdatePartition"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePartitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePartitionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Updates a partition.",
        "operationId": "UpdatePartition"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateRegistry": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateRegistry"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRegistryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateRegistryResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          },
          "484": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Updates an existing registry which is used to hold a collection of schemas. The updated properties relate to the registry, and do not modify any of the schemas within the registry. ",
        "operationId": "UpdateRegistry"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateSchema": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateSchema"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSchemaInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateSchemaResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          },
          "484": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "<p>Updates the description, compatibility setting, or version checkpoint for a schema set.</p> <p>For updating the compatibility setting, the call will not validate compatibility for the entire set of schema versions with the new compatibility setting. If the value for <code>Compatibility</code> is provided, the <code>VersionNumber</code> (a checkpoint) is also required. The API will validate the checkpoint version number for consistency.</p> <p>If the value for the <code>VersionNumber</code> (checkpoint) is provided, <code>Compatibility</code> is optional and this can be used to set/reset a checkpoint for the schema.</p> <p>This update will happen only if the schema is in the AVAILABLE state.</p>",
        "operationId": "UpdateSchema"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateTable": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateTable"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateTableResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          },
          "485": {
            "description": "ResourceNumberLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceNumberLimitExceededException"
            }
          },
          "486": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Updates a metadata table in the Data Catalog.",
        "operationId": "UpdateTable"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateTrigger": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateTrigger"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTriggerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateTriggerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "482": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Updates a trigger definition.",
        "operationId": "UpdateTrigger"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateUserDefinedFunction": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateUserDefinedFunction"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserDefinedFunctionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateUserDefinedFunctionResponse"
            }
          },
          "480": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "481": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "GlueEncryptionException",
            "schema": {
              "$ref": "#/definitions/GlueEncryptionException"
            }
          }
        },
        "description": "Updates an existing function definition in the Data Catalog.",
        "operationId": "UpdateUserDefinedFunction"
      }
    },
    "/#X-Amz-Target=AWSGlue.UpdateWorkflow": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AWSGlue.UpdateWorkflow"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWorkflowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateWorkflowResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "EntityNotFoundException",
            "schema": {
              "$ref": "#/definitions/EntityNotFoundException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "OperationTimeoutException",
            "schema": {
              "$ref": "#/definitions/OperationTimeoutException"
            }
          },
          "484": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          }
        },
        "description": "Updates an existing workflow.",
        "operationId": "UpdateWorkflow"
      }
    }
  },
  "definitions": {
    "AccessDeniedException": {},
    "Action": {
      "description": "Defines an action to be initiated by a trigger.",
      "properties": {
        "Arguments": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericMap"
            },
            {
              "description": "<p>The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>"
            }
          ]
        },
        "CrawlerName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the crawler to be used with this action."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of a job to be executed."
            }
          ]
        },
        "NotificationProperty": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationProperty"
            },
            {
              "description": "Specifies configuration properties of a job run notification."
            }
          ]
        },
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used with this action."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job."
            }
          ]
        }
      },
      "type": "object"
    },
    "ActionList": {
      "items": {
        "$ref": "#/definitions/Action"
      },
      "type": "array"
    },
    "AdditionalPlanOptionsMap": {
      "additionalProperties": {
        "$ref": "#/definitions/GenericString"
      },
      "type": "object"
    },
    "AlreadyExistsException": {},
    "AttemptCount": {
      "type": "integer"
    },
    "BackfillError": {
      "description": "<p>A list of errors that can occur when registering partition indexes for an existing table.</p> <p>These errors give the details about why an index registration failed and provide a limited number of partitions in the response, so that you can fix the partitions at fault and try registering the index again. The most common set of errors that can occur are categorized as follows:</p> <ul> <li> <p>EncryptedPartitionError: The partitions are encrypted.</p> </li> <li> <p>InvalidPartitionTypeDataError: The partition value doesn't match the data type for that partition column.</p> </li> <li> <p>MissingPartitionValueError: The partitions are encrypted.</p> </li> <li> <p>UnsupportedPartitionCharacterError: Characters inside the partition value are not supported. For example: U+0000 , U+0001, U+0002.</p> </li> <li> <p>InternalError: Any error which does not belong to other error codes.</p> </li> </ul>",
      "properties": {
        "Code": {
          "allOf": [
            {
              "$ref": "#/definitions/BackfillErrorCode"
            },
            {
              "description": "The error code for an error that occurred when registering partition indexes for an existing table."
            }
          ]
        },
        "Partitions": {
          "allOf": [
            {
              "$ref": "#/definitions/BackfillErroredPartitionsList"
            },
            {
              "description": "A list of a limited number of partitions in the response."
            }
          ]
        }
      },
      "type": "object"
    },
    "BackfillErrorCode": {
      "enum": [
        "ENCRYPTED_PARTITION_ERROR",
        "INTERNAL_ERROR",
        "INVALID_PARTITION_TYPE_DATA_ERROR",
        "MISSING_PARTITION_VALUE_ERROR",
        "UNSUPPORTED_PARTITION_CHARACTER_ERROR"
      ],
      "type": "string"
    },
    "BackfillErroredPartitionsList": {
      "items": {
        "$ref": "#/definitions/PartitionValueList"
      },
      "type": "array"
    },
    "BackfillErrors": {
      "items": {
        "$ref": "#/definitions/BackfillError"
      },
      "type": "array"
    },
    "BatchCreatePartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the catalog in which the partition is to be created. Currently, this should be the AWS account ID."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the metadata database in which the partition is to be created."
            }
          ]
        },
        "PartitionInputList": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionInputList"
            },
            {
              "description": "A list of <code>PartitionInput</code> structures that define the partitions to be created."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the metadata table in which the partition is to be created."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionInputList"
      ],
      "title": "BatchCreatePartitionRequest",
      "type": "object"
    },
    "BatchCreatePartitionResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionErrors"
            },
            {
              "description": "The errors encountered when trying to create the requested partitions."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDeleteConnectionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the connections reside. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "ConnectionNameList": {
          "allOf": [
            {
              "$ref": "#/definitions/DeleteConnectionNameList"
            },
            {
              "description": "A list of names of the connections to delete."
            }
          ]
        }
      },
      "required": [
        "ConnectionNameList"
      ],
      "title": "BatchDeleteConnectionRequest",
      "type": "object"
    },
    "BatchDeleteConnectionResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorByName"
            },
            {
              "description": "A map of the names of connections that were not successfully deleted to error details."
            }
          ]
        },
        "Succeeded": {
          "allOf": [
            {
              "$ref": "#/definitions/NameStringList"
            },
            {
              "description": "A list of names of the connection definitions that were successfully deleted."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDeletePartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partition to be deleted resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database in which the table in question resides."
            }
          ]
        },
        "PartitionsToDelete": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchDeletePartitionValueList"
            },
            {
              "description": "A list of <code>PartitionInput</code> structures that define the partitions to be deleted."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table that contains the partitions to be deleted."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionsToDelete"
      ],
      "title": "BatchDeletePartitionRequest",
      "type": "object"
    },
    "BatchDeletePartitionResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionErrors"
            },
            {
              "description": "The errors encountered when trying to delete the requested partitions."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDeletePartitionValueList": {
      "items": {
        "$ref": "#/definitions/PartitionValueList"
      },
      "maxItems": 25,
      "minItems": 0,
      "type": "array"
    },
    "BatchDeleteTableNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "BatchDeleteTableRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the table resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database in which the tables to delete reside. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "TablesToDelete": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchDeleteTableNameList"
            },
            {
              "description": "A list of the table to delete."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TablesToDelete"
      ],
      "title": "BatchDeleteTableRequest",
      "type": "object"
    },
    "BatchDeleteTableResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/TableErrors"
            },
            {
              "description": "A list of errors encountered in attempting to delete the specified tables."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDeleteTableVersionList": {
      "items": {
        "$ref": "#/definitions/VersionString"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "BatchDeleteTableVersionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the tables reside. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "VersionIds": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchDeleteTableVersionList"
            },
            {
              "description": "A list of the IDs of versions to be deleted. A <code>VersionId</code> is a string representation of an integer. Each version is incremented by 1."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "VersionIds"
      ],
      "title": "BatchDeleteTableVersionRequest",
      "type": "object"
    },
    "BatchDeleteTableVersionResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/TableVersionErrors"
            },
            {
              "description": "A list of errors encountered while trying to delete the specified table versions."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetCrawlersRequest": {
      "properties": {
        "CrawlerNames": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerNameList"
            },
            {
              "description": "A list of crawler names, which might be the names returned from the <code>ListCrawlers</code> operation."
            }
          ]
        }
      },
      "required": [
        "CrawlerNames"
      ],
      "title": "BatchGetCrawlersRequest",
      "type": "object"
    },
    "BatchGetCrawlersResponse": {
      "properties": {
        "Crawlers": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerList"
            },
            {
              "description": "A list of crawler definitions."
            }
          ]
        },
        "CrawlersNotFound": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerNameList"
            },
            {
              "description": "A list of names of crawlers that were not found."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetDevEndpointsRequest": {
      "properties": {
        "DevEndpointNames": {
          "allOf": [
            {
              "$ref": "#/definitions/DevEndpointNames"
            },
            {
              "description": "The list of <code>DevEndpoint</code> names, which might be the names returned from the <code>ListDevEndpoint</code> operation."
            }
          ]
        }
      },
      "required": [
        "DevEndpointNames"
      ],
      "title": "BatchGetDevEndpointsRequest",
      "type": "object"
    },
    "BatchGetDevEndpointsResponse": {
      "properties": {
        "DevEndpoints": {
          "allOf": [
            {
              "$ref": "#/definitions/DevEndpointList"
            },
            {
              "description": "A list of <code>DevEndpoint</code> definitions."
            }
          ]
        },
        "DevEndpointsNotFound": {
          "allOf": [
            {
              "$ref": "#/definitions/DevEndpointNames"
            },
            {
              "description": "A list of <code>DevEndpoints</code> not found."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetJobsRequest": {
      "properties": {
        "JobNames": {
          "allOf": [
            {
              "$ref": "#/definitions/JobNameList"
            },
            {
              "description": "A list of job names, which might be the names returned from the <code>ListJobs</code> operation."
            }
          ]
        }
      },
      "required": [
        "JobNames"
      ],
      "title": "BatchGetJobsRequest",
      "type": "object"
    },
    "BatchGetJobsResponse": {
      "properties": {
        "Jobs": {
          "allOf": [
            {
              "$ref": "#/definitions/JobList"
            },
            {
              "description": "A list of job definitions."
            }
          ]
        },
        "JobsNotFound": {
          "allOf": [
            {
              "$ref": "#/definitions/JobNameList"
            },
            {
              "description": "A list of names of jobs not found."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetPartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the partitions reside."
            }
          ]
        },
        "PartitionsToGet": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchGetPartitionValueList"
            },
            {
              "description": "A list of partition values identifying the partitions to retrieve."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partitions' table."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionsToGet"
      ],
      "title": "BatchGetPartitionRequest",
      "type": "object"
    },
    "BatchGetPartitionResponse": {
      "properties": {
        "Partitions": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionList"
            },
            {
              "description": "A list of the requested partitions."
            }
          ]
        },
        "UnprocessedKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchGetPartitionValueList"
            },
            {
              "description": "A list of the partition values in the request for which partitions were not returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetPartitionValueList": {
      "items": {
        "$ref": "#/definitions/PartitionValueList"
      },
      "maxItems": 1000,
      "minItems": 0,
      "type": "array"
    },
    "BatchGetTriggersRequest": {
      "properties": {
        "TriggerNames": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerNameList"
            },
            {
              "description": "A list of trigger names, which may be the names returned from the <code>ListTriggers</code> operation."
            }
          ]
        }
      },
      "required": [
        "TriggerNames"
      ],
      "title": "BatchGetTriggersRequest",
      "type": "object"
    },
    "BatchGetTriggersResponse": {
      "properties": {
        "Triggers": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerList"
            },
            {
              "description": "A list of trigger definitions."
            }
          ]
        },
        "TriggersNotFound": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerNameList"
            },
            {
              "description": "A list of names of triggers not found."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetWorkflowsRequest": {
      "properties": {
        "IncludeGraph": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Specifies whether to include a graph when returning the workflow resource metadata."
            }
          ]
        },
        "Names": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowNames"
            },
            {
              "description": "A list of workflow names, which may be the names returned from the <code>ListWorkflows</code> operation."
            }
          ]
        }
      },
      "required": [
        "Names"
      ],
      "title": "BatchGetWorkflowsRequest",
      "type": "object"
    },
    "BatchGetWorkflowsResponse": {
      "properties": {
        "MissingWorkflows": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowNames"
            },
            {
              "description": "A list of names of workflows not found."
            }
          ]
        },
        "Workflows": {
          "allOf": [
            {
              "$ref": "#/definitions/Workflows"
            },
            {
              "description": "A list of workflow resource metadata."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchStopJobRunError": {
      "description": "Records an error that occurred when attempting to stop a specified job run.",
      "properties": {
        "ErrorDetail": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorDetail"
            },
            {
              "description": "Specifies details about the error that was encountered."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition that is used in the job run in question."
            }
          ]
        },
        "JobRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The <code>JobRunId</code> of the job run in question."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchStopJobRunErrorList": {
      "items": {
        "$ref": "#/definitions/BatchStopJobRunError"
      },
      "type": "array"
    },
    "BatchStopJobRunJobRunIdList": {
      "items": {
        "$ref": "#/definitions/IdString"
      },
      "maxItems": 25,
      "minItems": 1,
      "type": "array"
    },
    "BatchStopJobRunRequest": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition for which to stop job runs."
            }
          ]
        },
        "JobRunIds": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchStopJobRunJobRunIdList"
            },
            {
              "description": "A list of the <code>JobRunIds</code> that should be stopped for that job definition."
            }
          ]
        }
      },
      "required": [
        "JobName",
        "JobRunIds"
      ],
      "title": "BatchStopJobRunRequest",
      "type": "object"
    },
    "BatchStopJobRunResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchStopJobRunErrorList"
            },
            {
              "description": "A list of the errors that were encountered in trying to stop <code>JobRuns</code>, including the <code>JobRunId</code> for which each error was encountered and details about the error."
            }
          ]
        },
        "SuccessfulSubmissions": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchStopJobRunSuccessfulSubmissionList"
            },
            {
              "description": "A list of the JobRuns that were successfully submitted for stopping."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchStopJobRunSuccessfulSubmission": {
      "description": "Records a successful request to stop a specified <code>JobRun</code>.",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition used in the job run that was stopped."
            }
          ]
        },
        "JobRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The <code>JobRunId</code> of the job run that was stopped."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchStopJobRunSuccessfulSubmissionList": {
      "items": {
        "$ref": "#/definitions/BatchStopJobRunSuccessfulSubmission"
      },
      "type": "array"
    },
    "BatchUpdatePartitionFailureEntry": {
      "description": "Contains information about a batch update partition error.",
      "properties": {
        "ErrorDetail": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorDetail"
            },
            {
              "description": "The details about the batch update partition error."
            }
          ]
        },
        "PartitionValueList": {
          "allOf": [
            {
              "$ref": "#/definitions/BoundedPartitionValueList"
            },
            {
              "description": "A list of values defining the partitions."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchUpdatePartitionFailureList": {
      "items": {
        "$ref": "#/definitions/BatchUpdatePartitionFailureEntry"
      },
      "type": "array"
    },
    "BatchUpdatePartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the catalog in which the partition is to be updated. Currently, this should be the AWS account ID."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the metadata database in which the partition is to be updated."
            }
          ]
        },
        "Entries": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchUpdatePartitionRequestEntryList"
            },
            {
              "description": "A list of up to 100 <code>BatchUpdatePartitionRequestEntry</code> objects to update."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the metadata table in which the partition is to be updated."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "Entries"
      ],
      "title": "BatchUpdatePartitionRequest",
      "type": "object"
    },
    "BatchUpdatePartitionRequestEntry": {
      "description": "A structure that contains the values and structure used to update a partition.",
      "properties": {
        "PartitionInput": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionInput"
            },
            {
              "description": "The structure used to update a partition."
            }
          ]
        },
        "PartitionValueList": {
          "allOf": [
            {
              "$ref": "#/definitions/BoundedPartitionValueList"
            },
            {
              "description": "A list of values defining the partitions."
            }
          ]
        }
      },
      "required": [
        "PartitionValueList",
        "PartitionInput"
      ],
      "type": "object"
    },
    "BatchUpdatePartitionRequestEntryList": {
      "items": {
        "$ref": "#/definitions/BatchUpdatePartitionRequestEntry"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array"
    },
    "BatchUpdatePartitionResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchUpdatePartitionFailureList"
            },
            {
              "description": "The errors encountered when trying to update the requested partitions. A list of <code>BatchUpdatePartitionFailureEntry</code> objects."
            }
          ]
        }
      },
      "type": "object"
    },
    "BinaryColumnStatisticsData": {
      "description": "Defines column statistics supported for bit sequence data values.",
      "properties": {
        "AverageLength": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeDouble"
            },
            {
              "description": "The average bit sequence length in the column."
            }
          ]
        },
        "MaximumLength": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The size of the longest bit sequence in the column."
            }
          ]
        },
        "NumberOfNulls": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of null values in the column."
            }
          ]
        }
      },
      "required": [
        "MaximumLength",
        "AverageLength",
        "NumberOfNulls"
      ],
      "type": "object"
    },
    "Blob": {
      "type": "string"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BooleanColumnStatisticsData": {
      "description": "Defines column statistics supported for Boolean data columns.",
      "properties": {
        "NumberOfFalses": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of false values in the column."
            }
          ]
        },
        "NumberOfNulls": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of null values in the column."
            }
          ]
        },
        "NumberOfTrues": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of true values in the column."
            }
          ]
        }
      },
      "required": [
        "NumberOfTrues",
        "NumberOfFalses",
        "NumberOfNulls"
      ],
      "type": "object"
    },
    "BooleanNullable": {
      "type": "boolean"
    },
    "BooleanValue": {
      "type": "boolean"
    },
    "BoundedPartitionValueList": {
      "items": {
        "$ref": "#/definitions/ValueString"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "CancelMLTaskRunRequest": {
      "properties": {
        "TaskRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "A unique identifier for the task run."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the machine learning transform."
            }
          ]
        }
      },
      "required": [
        "TransformId",
        "TaskRunId"
      ],
      "title": "CancelMLTaskRunRequest",
      "type": "object"
    },
    "CancelMLTaskRunResponse": {
      "properties": {
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskStatusType"
            },
            {
              "description": "The status for this run."
            }
          ]
        },
        "TaskRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier for the task run."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the machine learning transform."
            }
          ]
        }
      },
      "type": "object"
    },
    "CatalogEncryptionMode": {
      "enum": [
        "DISABLED",
        "SSE-KMS"
      ],
      "type": "string"
    },
    "CatalogEntries": {
      "items": {
        "$ref": "#/definitions/CatalogEntry"
      },
      "type": "array"
    },
    "CatalogEntry": {
      "description": "Specifies a table definition in the AWS Glue Data Catalog.",
      "properties": {
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The database in which the table metadata resides."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table in question."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "object"
    },
    "CatalogIdString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "CatalogImportStatus": {
      "description": "A structure containing migration status information.",
      "properties": {
        "ImportCompleted": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": " <code>True</code> if the migration has completed, or <code>False</code> otherwise."
            }
          ]
        },
        "ImportTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the migration was started."
            }
          ]
        },
        "ImportedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the person who initiated the migration."
            }
          ]
        }
      },
      "type": "object"
    },
    "CatalogTablesList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "minItems": 1,
      "type": "array"
    },
    "CatalogTarget": {
      "description": "Specifies an AWS Glue Data Catalog target.",
      "properties": {
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database to be synchronized."
            }
          ]
        },
        "Tables": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogTablesList"
            },
            {
              "description": "A list of the tables to be synchronized."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "Tables"
      ],
      "type": "object"
    },
    "CatalogTargetList": {
      "items": {
        "$ref": "#/definitions/CatalogTarget"
      },
      "type": "array"
    },
    "CheckSchemaVersionValidityInput": {
      "properties": {
        "DataFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DataFormat"
            },
            {
              "description": "The data format of the schema definition. Currently only <code>AVRO</code> is supported."
            }
          ]
        },
        "SchemaDefinition": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaDefinitionString"
            },
            {
              "description": "The definition of the schema that has to be validated."
            }
          ]
        }
      },
      "required": [
        "DataFormat",
        "SchemaDefinition"
      ],
      "title": "CheckSchemaVersionValidityInput",
      "type": "object"
    },
    "CheckSchemaVersionValidityResponse": {
      "properties": {
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaValidationError"
            },
            {
              "description": "A validation failure error message."
            }
          ]
        },
        "Valid": {
          "allOf": [
            {
              "$ref": "#/definitions/IsVersionValid"
            },
            {
              "description": "Return true, if the schema is valid and false otherwise."
            }
          ]
        }
      },
      "type": "object"
    },
    "Classification": {
      "type": "string"
    },
    "Classifier": {
      "description": "<p>Classifiers are triggered during a crawl task. A classifier checks whether a given file is in a format it can handle. If it is, the classifier creates a schema in the form of a <code>StructType</code> object that matches that data format.</p> <p>You can use the standard classifiers that AWS Glue provides, or you can write your own classifiers to best categorize your data sources and specify the appropriate schemas to use for them. A classifier can be a <code>grok</code> classifier, an <code>XML</code> classifier, a <code>JSON</code> classifier, or a custom <code>CSV</code> classifier, as specified in one of the fields in the <code>Classifier</code> object.</p>",
      "properties": {
        "CsvClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvClassifier"
            },
            {
              "description": "A classifier for comma-separated values (CSV)."
            }
          ]
        },
        "GrokClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/GrokClassifier"
            },
            {
              "description": "A classifier that uses <code>grok</code>."
            }
          ]
        },
        "JsonClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/JsonClassifier"
            },
            {
              "description": "A classifier for JSON content."
            }
          ]
        },
        "XMLClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/XMLClassifier"
            },
            {
              "description": "A classifier for XML content."
            }
          ]
        }
      },
      "type": "object"
    },
    "ClassifierList": {
      "items": {
        "$ref": "#/definitions/Classifier"
      },
      "type": "array"
    },
    "ClassifierNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "type": "array"
    },
    "CloudWatchEncryption": {
      "description": "Specifies how Amazon CloudWatch data should be encrypted.",
      "properties": {
        "CloudWatchEncryptionMode": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudWatchEncryptionMode"
            },
            {
              "description": "The encryption mode to use for CloudWatch data."
            }
          ]
        },
        "KmsKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data."
            }
          ]
        }
      },
      "type": "object"
    },
    "CloudWatchEncryptionMode": {
      "enum": [
        "DISABLED",
        "SSE-KMS"
      ],
      "type": "string"
    },
    "CodeGenArgName": {
      "type": "string"
    },
    "CodeGenArgValue": {
      "type": "string"
    },
    "CodeGenEdge": {
      "description": "Represents a directional edge in a directed acyclic graph (DAG).",
      "properties": {
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenIdentifier"
            },
            {
              "description": "The ID of the node at which the edge starts."
            }
          ]
        },
        "Target": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenIdentifier"
            },
            {
              "description": "The ID of the node at which the edge ends."
            }
          ]
        },
        "TargetParameter": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenArgName"
            },
            {
              "description": "The target of the edge."
            }
          ]
        }
      },
      "required": [
        "Source",
        "Target"
      ],
      "type": "object"
    },
    "CodeGenIdentifier": {
      "maxLength": 255,
      "minLength": 1,
      "pattern": "[A-Za-z_][A-Za-z0-9_]*",
      "type": "string"
    },
    "CodeGenNode": {
      "description": "Represents a node in a directed acyclic graph (DAG)",
      "properties": {
        "Args": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenNodeArgs"
            },
            {
              "description": "Properties of the node, in the form of name-value pairs."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenIdentifier"
            },
            {
              "description": "A node identifier that is unique within the node's graph."
            }
          ]
        },
        "LineNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The line number of the node."
            }
          ]
        },
        "NodeType": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenNodeType"
            },
            {
              "description": "The type of node that this is."
            }
          ]
        }
      },
      "required": [
        "Id",
        "NodeType",
        "Args"
      ],
      "type": "object"
    },
    "CodeGenNodeArg": {
      "description": "An argument or property of a node.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenArgName"
            },
            {
              "description": "The name of the argument or property."
            }
          ]
        },
        "Param": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "True if the value is used as a parameter."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenArgValue"
            },
            {
              "description": "The value of the argument or property."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Value"
      ],
      "type": "object"
    },
    "CodeGenNodeArgs": {
      "items": {
        "$ref": "#/definitions/CodeGenNodeArg"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "CodeGenNodeType": {
      "type": "string"
    },
    "Column": {
      "description": "A column in a <code>Table</code>.",
      "properties": {
        "Comment": {
          "allOf": [
            {
              "$ref": "#/definitions/CommentString"
            },
            {
              "description": "A free-form text comment."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>Column</code>."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "These key-value pairs define properties associated with the column."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnTypeString"
            },
            {
              "description": "The data type of the <code>Column</code>."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "ColumnError": {
      "description": "Encapsulates a column name that failed and the reason for failure.",
      "properties": {
        "ColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the column that failed."
            }
          ]
        },
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorDetail"
            },
            {
              "description": "An error message with the reason for the failure of an operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "ColumnErrors": {
      "items": {
        "$ref": "#/definitions/ColumnError"
      },
      "type": "array"
    },
    "ColumnList": {
      "items": {
        "$ref": "#/definitions/Column"
      },
      "type": "array"
    },
    "ColumnNameString": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "ColumnStatistics": {
      "description": "Represents the generated column-level statistics for a table or partition.",
      "properties": {
        "AnalyzedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The timestamp of when column statistics were generated."
            }
          ]
        },
        "ColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of column which statistics belong to."
            }
          ]
        },
        "ColumnType": {
          "allOf": [
            {
              "$ref": "#/definitions/TypeString"
            },
            {
              "description": "The data type of the column."
            }
          ]
        },
        "StatisticsData": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnStatisticsData"
            },
            {
              "description": "A <code>ColumnStatisticData</code> object that contains the statistics data values."
            }
          ]
        }
      },
      "required": [
        "ColumnName",
        "ColumnType",
        "AnalyzedTime",
        "StatisticsData"
      ],
      "type": "object"
    },
    "ColumnStatisticsData": {
      "description": "Contains the individual types of column statistics data. Only one data object should be set and indicated by the <code>Type</code> attribute.",
      "properties": {
        "BinaryColumnStatisticsData": {
          "allOf": [
            {
              "$ref": "#/definitions/BinaryColumnStatisticsData"
            },
            {
              "description": "Binary column statistics data."
            }
          ]
        },
        "BooleanColumnStatisticsData": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanColumnStatisticsData"
            },
            {
              "description": "Boolean column statistics data."
            }
          ]
        },
        "DateColumnStatisticsData": {
          "allOf": [
            {
              "$ref": "#/definitions/DateColumnStatisticsData"
            },
            {
              "description": "Date column statistics data."
            }
          ]
        },
        "DecimalColumnStatisticsData": {
          "allOf": [
            {
              "$ref": "#/definitions/DecimalColumnStatisticsData"
            },
            {
              "description": "Decimal column statistics data."
            }
          ]
        },
        "DoubleColumnStatisticsData": {
          "allOf": [
            {
              "$ref": "#/definitions/DoubleColumnStatisticsData"
            },
            {
              "description": "Double column statistics data."
            }
          ]
        },
        "LongColumnStatisticsData": {
          "allOf": [
            {
              "$ref": "#/definitions/LongColumnStatisticsData"
            },
            {
              "description": "Long column statistics data."
            }
          ]
        },
        "StringColumnStatisticsData": {
          "allOf": [
            {
              "$ref": "#/definitions/StringColumnStatisticsData"
            },
            {
              "description": "String column statistics data."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnStatisticsType"
            },
            {
              "description": "The type of column statistics data."
            }
          ]
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "ColumnStatisticsError": {
      "description": "Encapsulates a <code>ColumnStatistics</code> object that failed and the reason for failure.",
      "properties": {
        "ColumnStatistics": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnStatistics"
            },
            {
              "description": "The <code>ColumnStatistics</code> of the column."
            }
          ]
        },
        "Error": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorDetail"
            },
            {
              "description": "An error message with the reason for the failure of an operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "ColumnStatisticsErrors": {
      "items": {
        "$ref": "#/definitions/ColumnStatisticsError"
      },
      "type": "array"
    },
    "ColumnStatisticsList": {
      "items": {
        "$ref": "#/definitions/ColumnStatistics"
      },
      "type": "array"
    },
    "ColumnStatisticsType": {
      "enum": [
        "BOOLEAN",
        "DATE",
        "DECIMAL",
        "DOUBLE",
        "LONG",
        "STRING",
        "BINARY"
      ],
      "type": "string"
    },
    "ColumnTypeString": {
      "maxLength": 131072,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "ColumnValueStringList": {
      "items": {
        "$ref": "#/definitions/ColumnValuesString"
      },
      "type": "array"
    },
    "ColumnValuesString": {
      "type": "string"
    },
    "CommentString": {
      "maxLength": 255,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "Comparator": {
      "enum": [
        "EQUALS",
        "GREATER_THAN",
        "LESS_THAN",
        "GREATER_THAN_EQUALS",
        "LESS_THAN_EQUALS"
      ],
      "type": "string"
    },
    "Compatibility": {
      "enum": [
        "NONE",
        "DISABLED",
        "BACKWARD",
        "BACKWARD_ALL",
        "FORWARD",
        "FORWARD_ALL",
        "FULL",
        "FULL_ALL"
      ],
      "type": "string"
    },
    "ConcurrentModificationException": {},
    "ConcurrentRunsExceededException": {},
    "Condition": {
      "description": "Defines a condition under which a trigger fires.",
      "properties": {
        "CrawlState": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlState"
            },
            {
              "description": "The state of the crawler to which this condition applies."
            }
          ]
        },
        "CrawlerName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the crawler to which this condition applies."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job whose <code>JobRuns</code> this condition applies to, and on which this trigger waits."
            }
          ]
        },
        "LogicalOperator": {
          "allOf": [
            {
              "$ref": "#/definitions/LogicalOperator"
            },
            {
              "description": "A logical operator."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/JobRunState"
            },
            {
              "description": "The condition state. Currently, the only job states that a trigger can listen for are <code>SUCCEEDED</code>, <code>STOPPED</code>, <code>FAILED</code>, and <code>TIMEOUT</code>. The only crawler states that a trigger can listen for are <code>SUCCEEDED</code>, <code>FAILED</code>, and <code>CANCELLED</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "ConditionCheckFailureException": {},
    "ConditionList": {
      "items": {
        "$ref": "#/definitions/Condition"
      },
      "type": "array"
    },
    "ConflictException": {},
    "ConfusionMatrix": {
      "description": "<p>The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Confusion_matrix\">Confusion matrix</a> in Wikipedia.</p>",
      "properties": {
        "NumFalseNegatives": {
          "allOf": [
            {
              "$ref": "#/definitions/RecordsCount"
            },
            {
              "description": "The number of matches in the data that the transform didn't find, in the confusion matrix for your transform."
            }
          ]
        },
        "NumFalsePositives": {
          "allOf": [
            {
              "$ref": "#/definitions/RecordsCount"
            },
            {
              "description": "The number of nonmatches in the data that the transform incorrectly classified as a match, in the confusion matrix for your transform."
            }
          ]
        },
        "NumTrueNegatives": {
          "allOf": [
            {
              "$ref": "#/definitions/RecordsCount"
            },
            {
              "description": "The number of nonmatches in the data that the transform correctly rejected, in the confusion matrix for your transform."
            }
          ]
        },
        "NumTruePositives": {
          "allOf": [
            {
              "$ref": "#/definitions/RecordsCount"
            },
            {
              "description": "The number of matches in the data that the transform correctly found, in the confusion matrix for your transform."
            }
          ]
        }
      },
      "type": "object"
    },
    "Connection": {
      "description": "Defines a connection to a data source.",
      "properties": {
        "ConnectionProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionProperties"
            },
            {
              "description": "<p>These key-value pairs define parameters for the connection:</p> <ul> <li> <p> <code>HOST</code> - The host URI: either the fully qualified domain name (FQDN) or the IPv4 address of the database host.</p> </li> <li> <p> <code>PORT</code> - The port number, between 1024 and 65535, of the port on which the database host is listening for database connections.</p> </li> <li> <p> <code>USER_NAME</code> - The name under which to log in to the database. The value string for <code>USER_NAME</code> is \"<code>USERNAME</code>\".</p> </li> <li> <p> <code>PASSWORD</code> - A password, if one is used, for the user name.</p> </li> <li> <p> <code>ENCRYPTED_PASSWORD</code> - When you enable connection password protection by setting <code>ConnectionPasswordEncryption</code> in the Data Catalog encryption settings, this field stores the encrypted password.</p> </li> <li> <p> <code>JDBC_DRIVER_JAR_URI</code> - The Amazon Simple Storage Service (Amazon S3) path of the JAR file that contains the JDBC driver to use.</p> </li> <li> <p> <code>JDBC_DRIVER_CLASS_NAME</code> - The class name of the JDBC driver to use.</p> </li> <li> <p> <code>JDBC_ENGINE</code> - The name of the JDBC engine to use.</p> </li> <li> <p> <code>JDBC_ENGINE_VERSION</code> - The version of the JDBC engine to use.</p> </li> <li> <p> <code>CONFIG_FILES</code> - (Reserved for future use.)</p> </li> <li> <p> <code>INSTANCE_ID</code> - The instance ID to use.</p> </li> <li> <p> <code>JDBC_CONNECTION_URL</code> - The URL for connecting to a JDBC data source.</p> </li> <li> <p> <code>JDBC_ENFORCE_SSL</code> - A Boolean string (true, false) specifying whether Secure Sockets Layer (SSL) with hostname matching is enforced for the JDBC connection on the client. The default is false.</p> </li> <li> <p> <code>CUSTOM_JDBC_CERT</code> - An Amazon S3 location specifying the customer's root certificate. AWS Glue uses this root certificate to validate the customer’s certificate when connecting to the customer database. AWS Glue only handles X.509 certificates. The certificate provided must be DER-encoded and supplied in Base64 encoding PEM format.</p> </li> <li> <p> <code>SKIP_CUSTOM_JDBC_CERT_VALIDATION</code> - By default, this is <code>false</code>. AWS Glue validates the Signature algorithm and Subject Public Key Algorithm for the customer certificate. The only permitted algorithms for the Signature algorithm are SHA256withRSA, SHA384withRSA or SHA512withRSA. For the Subject Public Key Algorithm, the key length must be at least 2048. You can set the value of this property to <code>true</code> to skip AWS Glue’s validation of the customer certificate.</p> </li> <li> <p> <code>CUSTOM_JDBC_CERT_STRING</code> - A custom JDBC certificate string which is used for domain match or distinguished name match to prevent a man-in-the-middle attack. In Oracle database, this is used as the <code>SSL_SERVER_CERT_DN</code>; in Microsoft SQL Server, this is used as the <code>hostNameInCertificate</code>.</p> </li> <li> <p> <code>CONNECTION_URL</code> - The URL for connecting to a general (non-JDBC) data source.</p> </li> <li> <p> <code>KAFKA_BOOTSTRAP_SERVERS</code> - A comma-separated list of host and port pairs that are the addresses of the Apache Kafka brokers in a Kafka cluster to which a Kafka client will connect to and bootstrap itself.</p> </li> <li> <p> <code>KAFKA_SSL_ENABLED</code> - Whether to enable or disable SSL on an Apache Kafka connection. Default value is \"true\".</p> </li> <li> <p> <code>KAFKA_CUSTOM_CERT</code> - The Amazon S3 URL for the private CA cert file (.pem format). The default is an empty string.</p> </li> <li> <p> <code>KAFKA_SKIP_CUSTOM_CERT_VALIDATION</code> - Whether to skip the validation of the CA cert file or not. AWS Glue validates for three algorithms: SHA256withRSA, SHA384withRSA and SHA512withRSA. Default value is \"false\".</p> </li> </ul>"
            }
          ]
        },
        "ConnectionType": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionType"
            },
            {
              "description": "The type of the connection. Currently, SFTP is not supported."
            }
          ]
        },
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this connection definition was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "The description of the connection."
            }
          ]
        },
        "LastUpdatedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The user, group, or role that last updated this connection definition."
            }
          ]
        },
        "LastUpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that this connection definition was updated."
            }
          ]
        },
        "MatchCriteria": {
          "allOf": [
            {
              "$ref": "#/definitions/MatchCriteria"
            },
            {
              "description": "A list of criteria that can be used in selecting this connection."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the connection definition."
            }
          ]
        },
        "PhysicalConnectionRequirements": {
          "allOf": [
            {
              "$ref": "#/definitions/PhysicalConnectionRequirements"
            },
            {
              "description": "A map of physical connection requirements, such as virtual private cloud (VPC) and <code>SecurityGroup</code>, that are needed to make this connection successfully."
            }
          ]
        }
      },
      "type": "object"
    },
    "ConnectionInput": {
      "description": "A structure that is used to specify a connection to create or update.",
      "properties": {
        "ConnectionProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionProperties"
            },
            {
              "description": "These key-value pairs define parameters for the connection."
            }
          ]
        },
        "ConnectionType": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionType"
            },
            {
              "description": "<p>The type of the connection. Currently, these types are supported:</p> <ul> <li> <p> <code>JDBC</code> - Designates a connection to a database through Java Database Connectivity (JDBC).</p> </li> <li> <p> <code>KAFKA</code> - Designates a connection to an Apache Kafka streaming platform.</p> </li> <li> <p> <code>MONGODB</code> - Designates a connection to a MongoDB document database.</p> </li> <li> <p> <code>NETWORK</code> - Designates a network connection to a data source within an Amazon Virtual Private Cloud environment (Amazon VPC).</p> </li> </ul> <p>SFTP is not supported.</p>"
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "The description of the connection."
            }
          ]
        },
        "MatchCriteria": {
          "allOf": [
            {
              "$ref": "#/definitions/MatchCriteria"
            },
            {
              "description": "A list of criteria that can be used in selecting this connection."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the connection."
            }
          ]
        },
        "PhysicalConnectionRequirements": {
          "allOf": [
            {
              "$ref": "#/definitions/PhysicalConnectionRequirements"
            },
            {
              "description": "A map of physical connection requirements, such as virtual private cloud (VPC) and <code>SecurityGroup</code>, that are needed to successfully make this connection."
            }
          ]
        }
      },
      "required": [
        "Name",
        "ConnectionType",
        "ConnectionProperties"
      ],
      "type": "object"
    },
    "ConnectionList": {
      "items": {
        "$ref": "#/definitions/Connection"
      },
      "type": "array"
    },
    "ConnectionName": {
      "type": "string"
    },
    "ConnectionPasswordEncryption": {
      "description": "<p>The data structure used by the Data Catalog to encrypt the password as part of <code>CreateConnection</code> or <code>UpdateConnection</code> and store it in the <code>ENCRYPTED_PASSWORD</code> field in the connection properties. You can enable catalog encryption or only password encryption.</p> <p>When a <code>CreationConnection</code> request arrives containing a password, the Data Catalog first encrypts the password using your AWS KMS key. It then encrypts the whole connection object again if catalog encryption is also enabled.</p> <p>This encryption requires that you set AWS KMS key permissions to enable or restrict access on the password key according to your security requirements. For example, you might want only administrators to have decrypt permission on the password key.</p>",
      "properties": {
        "AwsKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "<p>An AWS KMS key that is used to encrypt the connection password. </p> <p>If connection password protection is enabled, the caller of <code>CreateConnection</code> and <code>UpdateConnection</code> needs at least <code>kms:Encrypt</code> permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog. </p> <p>You can set the decrypt permission to enable or restrict access on the password key according to your security requirements.</p>"
            }
          ]
        },
        "ReturnConnectionPasswordEncrypted": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "When the <code>ReturnConnectionPasswordEncrypted</code> flag is set to \"true\", passwords remain encrypted in the responses of <code>GetConnection</code> and <code>GetConnections</code>. This encryption takes effect independently from catalog encryption. "
            }
          ]
        }
      },
      "required": [
        "ReturnConnectionPasswordEncrypted"
      ],
      "type": "object"
    },
    "ConnectionProperties": {
      "additionalProperties": {
        "$ref": "#/definitions/ValueString"
      },
      "maxProperties": 100,
      "minProperties": 0,
      "type": "object"
    },
    "ConnectionPropertyKey": {
      "enum": [
        "HOST",
        "PORT",
        "USERNAME",
        "PASSWORD",
        "ENCRYPTED_PASSWORD",
        "JDBC_DRIVER_JAR_URI",
        "JDBC_DRIVER_CLASS_NAME",
        "JDBC_ENGINE",
        "JDBC_ENGINE_VERSION",
        "CONFIG_FILES",
        "INSTANCE_ID",
        "JDBC_CONNECTION_URL",
        "JDBC_ENFORCE_SSL",
        "CUSTOM_JDBC_CERT",
        "SKIP_CUSTOM_JDBC_CERT_VALIDATION",
        "CUSTOM_JDBC_CERT_STRING",
        "CONNECTION_URL",
        "KAFKA_BOOTSTRAP_SERVERS",
        "KAFKA_SSL_ENABLED",
        "KAFKA_CUSTOM_CERT",
        "KAFKA_SKIP_CUSTOM_CERT_VALIDATION"
      ],
      "type": "string"
    },
    "ConnectionType": {
      "enum": [
        "JDBC",
        "SFTP",
        "MONGODB",
        "KAFKA",
        "NETWORK"
      ],
      "type": "string"
    },
    "ConnectionsList": {
      "description": "Specifies the connections used by a job.",
      "properties": {
        "Connections": {
          "allOf": [
            {
              "$ref": "#/definitions/OrchestrationStringList"
            },
            {
              "description": "A list of connections used by the job."
            }
          ]
        }
      },
      "type": "object"
    },
    "Crawl": {
      "description": "The details of a crawl in the workflow.",
      "properties": {
        "CompletedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The date and time on which the crawl completed."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "The error message associated with the crawl."
            }
          ]
        },
        "LogGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/LogGroup"
            },
            {
              "description": "The log group associated with the crawl."
            }
          ]
        },
        "LogStream": {
          "allOf": [
            {
              "$ref": "#/definitions/LogStream"
            },
            {
              "description": "The log stream associated with the crawl."
            }
          ]
        },
        "StartedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The date and time on which the crawl started."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlState"
            },
            {
              "description": "The state of the crawler."
            }
          ]
        }
      },
      "type": "object"
    },
    "CrawlList": {
      "items": {
        "$ref": "#/definitions/Crawl"
      },
      "type": "array"
    },
    "CrawlState": {
      "enum": [
        "RUNNING",
        "CANCELLING",
        "CANCELLED",
        "SUCCEEDED",
        "FAILED"
      ],
      "type": "string"
    },
    "Crawler": {
      "description": "Specifies a crawler program that examines a data source and uses classifiers to try to determine its schema. If successful, the crawler records metadata concerning the data source in the AWS Glue Data Catalog.",
      "properties": {
        "Classifiers": {
          "allOf": [
            {
              "$ref": "#/definitions/ClassifierNameList"
            },
            {
              "description": "A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler."
            }
          ]
        },
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerConfiguration"
            },
            {
              "description": "Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</a>."
            }
          ]
        },
        "CrawlElapsedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/MillisecondsCount"
            },
            {
              "description": "If the crawler is running, contains the total time elapsed since the last crawl began."
            }
          ]
        },
        "CrawlerSecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerSecurityConfiguration"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used by this crawler."
            }
          ]
        },
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the crawler was created."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseName"
            },
            {
              "description": "The name of the database in which the crawler's output is stored."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the crawler."
            }
          ]
        },
        "LastCrawl": {
          "allOf": [
            {
              "$ref": "#/definitions/LastCrawlInfo"
            },
            {
              "description": "The status of the last crawl, and potentially error information if an error occurred."
            }
          ]
        },
        "LastUpdated": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the crawler was last updated."
            }
          ]
        },
        "LineageConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/LineageConfiguration"
            },
            {
              "description": "A configuration that specifies whether data lineage is enabled for the crawler."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the crawler."
            }
          ]
        },
        "RecrawlPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/RecrawlPolicy"
            },
            {
              "description": "A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/Role"
            },
            {
              "description": "The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/Schedule"
            },
            {
              "description": "For scheduled crawlers, the schedule when the crawler runs."
            }
          ]
        },
        "SchemaChangePolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaChangePolicy"
            },
            {
              "description": "The policy that specifies update and delete behaviors for the crawler."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerState"
            },
            {
              "description": "Indicates whether the crawler is running, or whether a run is pending."
            }
          ]
        },
        "TablePrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/TablePrefix"
            },
            {
              "description": "The prefix added to the names of tables that are created."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerTargets"
            },
            {
              "description": "A collection of targets to crawl."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionId"
            },
            {
              "description": "The version of the crawler."
            }
          ]
        }
      },
      "type": "object"
    },
    "CrawlerConfiguration": {
      "type": "string"
    },
    "CrawlerLineageSettings": {
      "enum": [
        "ENABLE",
        "DISABLE"
      ],
      "type": "string"
    },
    "CrawlerList": {
      "items": {
        "$ref": "#/definitions/Crawler"
      },
      "type": "array"
    },
    "CrawlerMetrics": {
      "description": "Metrics for a specified crawler.",
      "properties": {
        "CrawlerName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the crawler."
            }
          ]
        },
        "LastRuntimeSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeDouble"
            },
            {
              "description": "The duration of the crawler's most recent run, in seconds."
            }
          ]
        },
        "MedianRuntimeSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeDouble"
            },
            {
              "description": "The median duration of this crawler's runs, in seconds."
            }
          ]
        },
        "StillEstimating": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "True if the crawler is still estimating how long it will take to complete this run."
            }
          ]
        },
        "TablesCreated": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The number of tables created by this crawler."
            }
          ]
        },
        "TablesDeleted": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The number of tables deleted by this crawler."
            }
          ]
        },
        "TablesUpdated": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The number of tables updated by this crawler."
            }
          ]
        },
        "TimeLeftSeconds": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeDouble"
            },
            {
              "description": "The estimated time left to complete a running crawl."
            }
          ]
        }
      },
      "type": "object"
    },
    "CrawlerMetricsList": {
      "items": {
        "$ref": "#/definitions/CrawlerMetrics"
      },
      "type": "array"
    },
    "CrawlerNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "CrawlerNodeDetails": {
      "description": "The details of a Crawler node present in the workflow.",
      "properties": {
        "Crawls": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlList"
            },
            {
              "description": "A list of crawls represented by the crawl node."
            }
          ]
        }
      },
      "type": "object"
    },
    "CrawlerNotRunningException": {},
    "CrawlerRunningException": {},
    "CrawlerSecurityConfiguration": {
      "maxLength": 128,
      "minLength": 0,
      "type": "string"
    },
    "CrawlerState": {
      "enum": [
        "READY",
        "RUNNING",
        "STOPPING"
      ],
      "type": "string"
    },
    "CrawlerStoppingException": {},
    "CrawlerTargets": {
      "description": "Specifies data stores to crawl.",
      "properties": {
        "CatalogTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogTargetList"
            },
            {
              "description": "Specifies AWS Glue Data Catalog targets."
            }
          ]
        },
        "DynamoDBTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/DynamoDBTargetList"
            },
            {
              "description": "Specifies Amazon DynamoDB targets."
            }
          ]
        },
        "JdbcTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/JdbcTargetList"
            },
            {
              "description": "Specifies JDBC targets."
            }
          ]
        },
        "MongoDBTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/MongoDBTargetList"
            },
            {
              "description": "Specifies Amazon DocumentDB or MongoDB targets."
            }
          ]
        },
        "S3Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/S3TargetList"
            },
            {
              "description": "Specifies Amazon Simple Storage Service (Amazon S3) targets."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateClassifierRequest": {
      "properties": {
        "CsvClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CreateCsvClassifierRequest"
            },
            {
              "description": "A <code>CsvClassifier</code> object specifying the classifier to create."
            }
          ]
        },
        "GrokClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CreateGrokClassifierRequest"
            },
            {
              "description": "A <code>GrokClassifier</code> object specifying the classifier to create."
            }
          ]
        },
        "JsonClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CreateJsonClassifierRequest"
            },
            {
              "description": "A <code>JsonClassifier</code> object specifying the classifier to create."
            }
          ]
        },
        "XMLClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/CreateXMLClassifierRequest"
            },
            {
              "description": "An <code>XMLClassifier</code> object specifying the classifier to create."
            }
          ]
        }
      },
      "title": "CreateClassifierRequest",
      "type": "object"
    },
    "CreateClassifierResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateConnectionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which to create the connection. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "ConnectionInput": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionInput"
            },
            {
              "description": "A <code>ConnectionInput</code> object defining the connection to create."
            }
          ]
        }
      },
      "required": [
        "ConnectionInput"
      ],
      "title": "CreateConnectionRequest",
      "type": "object"
    },
    "CreateConnectionResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateCrawlerRequest": {
      "properties": {
        "Classifiers": {
          "allOf": [
            {
              "$ref": "#/definitions/ClassifierNameList"
            },
            {
              "description": "A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification."
            }
          ]
        },
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerConfiguration"
            },
            {
              "description": "Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</a>."
            }
          ]
        },
        "CrawlerSecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerSecurityConfiguration"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used by this crawler."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseName"
            },
            {
              "description": "The AWS Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the new crawler."
            }
          ]
        },
        "LineageConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/LineageConfiguration"
            },
            {
              "description": "Specifies data lineage configuration settings for the crawler."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the new crawler."
            }
          ]
        },
        "RecrawlPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/RecrawlPolicy"
            },
            {
              "description": "A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/Role"
            },
            {
              "description": "The IAM role or Amazon Resource Name (ARN) of an IAM role used by the new crawler to access customer resources."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/CronExpression"
            },
            {
              "description": "A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>."
            }
          ]
        },
        "SchemaChangePolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaChangePolicy"
            },
            {
              "description": "The policy for the crawler's update and deletion behavior."
            }
          ]
        },
        "TablePrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/TablePrefix"
            },
            {
              "description": "The table prefix used for catalog tables that are created."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The tags to use with this crawler request. You may use tags to limit access to the crawler. For more information about tags in AWS Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">AWS Tags in AWS Glue</a> in the developer guide."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerTargets"
            },
            {
              "description": "A list of collection of targets to crawl."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Role",
        "Targets"
      ],
      "title": "CreateCrawlerRequest",
      "type": "object"
    },
    "CreateCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateCsvClassifierRequest": {
      "description": "Specifies a custom CSV classifier for <code>CreateClassifier</code> to create.",
      "properties": {
        "AllowSingleColumn": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Enables the processing of files that contain only one column."
            }
          ]
        },
        "ContainsHeader": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvHeaderOption"
            },
            {
              "description": "Indicates whether the CSV file contains a header."
            }
          ]
        },
        "Delimiter": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvColumnDelimiter"
            },
            {
              "description": "A custom symbol to denote what separates each column entry in the row."
            }
          ]
        },
        "DisableValueTrimming": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Specifies not to trim values before identifying the type of column values. The default value is true."
            }
          ]
        },
        "Header": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvHeader"
            },
            {
              "description": "A list of strings representing column names."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        },
        "QuoteSymbol": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvQuoteSymbol"
            },
            {
              "description": "A custom symbol to denote what combines content into a single column value. Must be different from the column delimiter."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "CreateDatabaseRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which to create the database. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseInput": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseInput"
            },
            {
              "description": "The metadata for the database."
            }
          ]
        }
      },
      "required": [
        "DatabaseInput"
      ],
      "title": "CreateDatabaseRequest",
      "type": "object"
    },
    "CreateDatabaseResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateDevEndpointRequest": {
      "properties": {
        "Arguments": {
          "allOf": [
            {
              "$ref": "#/definitions/MapValue"
            },
            {
              "description": "A map of arguments used to configure the <code>DevEndpoint</code>."
            }
          ]
        },
        "EndpointName": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The name to be assigned to the new <code>DevEndpoint</code>."
            }
          ]
        },
        "ExtraJarsS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded in your <code>DevEndpoint</code>."
            }
          ]
        },
        "ExtraPythonLibsS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "<p>The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in your <code>DevEndpoint</code>. Multiple values must be complete paths separated by a comma.</p> <note> <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not yet supported.</p> </note>"
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "<p>Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p> <p>For more information about the available AWS Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Development endpoints that are created without specifying a Glue version default to Glue 0.9.</p> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>"
            }
          ]
        },
        "NumberOfNodes": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "The number of AWS Glue Data Processing Units (DPUs) to allocate to this <code>DevEndpoint</code>."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p> <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>"
            }
          ]
        },
        "PublicKey": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The public key to be used by this <code>DevEndpoint</code> for authentication. This attribute is provided for backward compatibility because the recommended attribute to use is public keys."
            }
          ]
        },
        "PublicKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/PublicKeysList"
            },
            {
              "description": "<p>A list of public keys to be used by the development endpoints for authentication. The use of this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.</p> <note> <p>If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys. Call the <code>UpdateDevEndpoint</code> API with the public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the <code>addPublicKeys</code> attribute.</p> </note>"
            }
          ]
        },
        "RoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The IAM role for the <code>DevEndpoint</code>."
            }
          ]
        },
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used with this <code>DevEndpoint</code>."
            }
          ]
        },
        "SecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "Security group IDs for the security groups to be used by the new <code>DevEndpoint</code>."
            }
          ]
        },
        "SubnetId": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The subnet ID for the new <code>DevEndpoint</code> to use."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The tags to use with this DevEndpoint. You may use tags to limit access to the DevEndpoint. For more information about tags in AWS Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">AWS Tags in AWS Glue</a> in the developer guide."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> </ul> <p>Known issue: when a development endpoint is created with the <code>G.2X</code> <code>WorkerType</code> configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk. </p>"
            }
          ]
        }
      },
      "required": [
        "EndpointName",
        "RoleArn"
      ],
      "title": "CreateDevEndpointRequest",
      "type": "object"
    },
    "CreateDevEndpointResponse": {
      "properties": {
        "Arguments": {
          "allOf": [
            {
              "$ref": "#/definitions/MapValue"
            },
            {
              "description": "<p>The map of arguments used to configure this <code>DevEndpoint</code>.</p> <p>Valid arguments are:</p> <ul> <li> <p> <code>\"--enable-glue-datacatalog\": \"\"</code> </p> </li> <li> <p> <code>\"GLUE_PYTHON_VERSION\": \"3\"</code> </p> </li> <li> <p> <code>\"GLUE_PYTHON_VERSION\": \"2\"</code> </p> </li> </ul> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>"
            }
          ]
        },
        "AvailabilityZone": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The AWS Availability Zone where this <code>DevEndpoint</code> is located."
            }
          ]
        },
        "CreatedTimestamp": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The point in time at which this <code>DevEndpoint</code> was created."
            }
          ]
        },
        "EndpointName": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The name assigned to the new <code>DevEndpoint</code>."
            }
          ]
        },
        "ExtraJarsS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "Path to one or more Java <code>.jar</code> files in an S3 bucket that will be loaded in your <code>DevEndpoint</code>."
            }
          ]
        },
        "ExtraPythonLibsS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The paths to one or more Python libraries in an S3 bucket that will be loaded in your <code>DevEndpoint</code>."
            }
          ]
        },
        "FailureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The reason for a current failure in this <code>DevEndpoint</code>."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. "
            }
          ]
        },
        "NumberOfNodes": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint."
            }
          ]
        },
        "RoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the role assigned to the new <code>DevEndpoint</code>."
            }
          ]
        },
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure being used with this <code>DevEndpoint</code>."
            }
          ]
        },
        "SecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "The security groups assigned to the new <code>DevEndpoint</code>."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The current status of the new <code>DevEndpoint</code>."
            }
          ]
        },
        "SubnetId": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The subnet ID assigned to the new <code>DevEndpoint</code>."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X."
            }
          ]
        },
        "YarnEndpointAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The address of the YARN endpoint used by this <code>DevEndpoint</code>."
            }
          ]
        },
        "ZeppelinRemoteSparkInterpreterPort": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "The Apache Zeppelin port for the remote Apache Spark interpreter."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateGrokClassifierRequest": {
      "description": "Specifies a <code>grok</code> classifier for <code>CreateClassifier</code> to create.",
      "properties": {
        "Classification": {
          "allOf": [
            {
              "$ref": "#/definitions/Classification"
            },
            {
              "description": "An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on."
            }
          ]
        },
        "CustomPatterns": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomPatterns"
            },
            {
              "description": "Optional custom grok patterns used by this classifier."
            }
          ]
        },
        "GrokPattern": {
          "allOf": [
            {
              "$ref": "#/definitions/GrokPattern"
            },
            {
              "description": "The grok pattern used by this classifier."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the new classifier."
            }
          ]
        }
      },
      "required": [
        "Classification",
        "Name",
        "GrokPattern"
      ],
      "type": "object"
    },
    "CreateJobRequest": {
      "properties": {
        "AllocatedCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "<p>This parameter is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of AWS Glue data processing units (DPUs) to allocate to this Job. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p>This property is deprecated, use MaxCapacity instead.",
              "x-deprecated": true
            }
          ]
        },
        "Command": {
          "allOf": [
            {
              "$ref": "#/definitions/JobCommand"
            },
            {
              "description": "The <code>JobCommand</code> that executes this job."
            }
          ]
        },
        "Connections": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionsList"
            },
            {
              "description": "The connections used for this job."
            }
          ]
        },
        "DefaultArguments": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericMap"
            },
            {
              "description": "<p>The default arguments for this job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>"
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "Description of the job being defined."
            }
          ]
        },
        "ExecutionProperty": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionProperty"
            },
            {
              "description": "An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed for this job."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "<p>Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for jobs of type Spark. </p> <p>For more information about the available AWS Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>"
            }
          ]
        },
        "LogUri": {
          "allOf": [
            {
              "$ref": "#/definitions/UriString"
            },
            {
              "description": "This field is reserved for future use."
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job or an Apache Spark ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\") or Apache Spark streaming ETL job (<code>JobCommand.Name</code>=\"gluestreaming\"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul>"
            }
          ]
        },
        "MaxRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxRetries"
            },
            {
              "description": "The maximum number of times to retry this job if it fails."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name you assign to this job definition. It must be unique in your account."
            }
          ]
        },
        "NonOverridableArguments": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericMap"
            },
            {
              "description": "Non-overridable arguments for this job, specified as name-value pairs."
            }
          ]
        },
        "NotificationProperty": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationProperty"
            },
            {
              "description": "Specifies configuration properties of a job notification."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p> <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>"
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleString"
            },
            {
              "description": "The name or Amazon Resource Name (ARN) of the IAM role associated with this job."
            }
          ]
        },
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used with this job."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The tags to use with this job. You may use tags to limit access to the job. For more information about tags in AWS Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">AWS Tags in AWS Glue</a> in the developer guide."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours)."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "Name",
        "Role",
        "Command"
      ],
      "title": "CreateJobRequest",
      "type": "object"
    },
    "CreateJobResponse": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The unique name that was provided for this job definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateJsonClassifierRequest": {
      "description": "Specifies a JSON classifier for <code>CreateClassifier</code> to create.",
      "properties": {
        "JsonPath": {
          "allOf": [
            {
              "$ref": "#/definitions/JsonPath"
            },
            {
              "description": "A <code>JsonPath</code> string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        }
      },
      "required": [
        "Name",
        "JsonPath"
      ],
      "type": "object"
    },
    "CreateMLTransformRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the machine learning transform that is being defined. The default is an empty string."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">AWS Glue Versions</a> in the developer guide."
            }
          ]
        },
        "InputRecordTables": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueTables"
            },
            {
              "description": "A list of AWS Glue table definitions used by the transform."
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>. </p> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>"
            }
          ]
        },
        "MaxRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "The maximum number of times to retry a task for this transform after a task run fails."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The unique name that you give the transform when you create it."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated when this task runs.</p> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>"
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformParameters"
            },
            {
              "description": "The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleString"
            },
            {
              "description": "<p>The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both AWS Glue service role permissions to AWS Glue resources, and Amazon S3 permissions required by the transform. </p> <ul> <li> <p>This role needs AWS Glue service role permissions to allow access to resources in AWS Glue. See <a href=\"https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html\">Attach a Policy to IAM Users That Access AWS Glue</a>.</p> </li> <li> <p>This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.</p> </li> </ul>"
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The tags to use with this machine learning transform. You may use tags to limit access to the machine learning transform. For more information about tags in AWS Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">AWS Tags in AWS Glue</a> in the developer guide."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The timeout of the task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours)."
            }
          ]
        },
        "TransformEncryption": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformEncryption"
            },
            {
              "description": "The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "Name",
        "InputRecordTables",
        "Parameters",
        "Role"
      ],
      "title": "CreateMLTransformRequest",
      "type": "object"
    },
    "CreateMLTransformResponse": {
      "properties": {
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "A unique identifier that is generated for the transform."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreatePartitionIndexRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The catalog ID where the table resides."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Specifies the name of a database in which you want to create a partition index."
            }
          ]
        },
        "PartitionIndex": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionIndex"
            },
            {
              "description": "Specifies a <code>PartitionIndex</code> structure to create a partition index in an existing table."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Specifies the name of a table in which you want to create a partition index."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionIndex"
      ],
      "title": "CreatePartitionIndexRequest",
      "type": "object"
    },
    "CreatePartitionIndexResponse": {
      "properties": {},
      "type": "object"
    },
    "CreatePartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The AWS account ID of the catalog in which the partition is to be created."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the metadata database in which the partition is to be created."
            }
          ]
        },
        "PartitionInput": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionInput"
            },
            {
              "description": "A <code>PartitionInput</code> structure defining the partition to be created."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the metadata table in which the partition is to be created."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionInput"
      ],
      "title": "CreatePartitionRequest",
      "type": "object"
    },
    "CreatePartitionResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateRegistryInput": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the registry. If description is not provided, there will not be any default value for this."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "Name of the registry to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark. No whitespace."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "AWS tags that contain a key value pair and may be searched by console, command line, or API."
            }
          ]
        }
      },
      "required": [
        "RegistryName"
      ],
      "title": "CreateRegistryInput",
      "type": "object"
    },
    "CreateRegistryResponse": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the registry."
            }
          ]
        },
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the newly created registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The tags for the registry."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateSchemaInput": {
      "properties": {
        "Compatibility": {
          "allOf": [
            {
              "$ref": "#/definitions/Compatibility"
            },
            {
              "description": "<p>The compatibility mode of the schema. The possible values are:</p> <ul> <li> <p> <i>NONE</i>: No compatibility mode applies. You can use this choice in development scenarios or if you do not know the compatibility mode that you want to apply to schemas. Any new version added will be accepted without undergoing a compatibility check.</p> </li> <li> <p> <i>DISABLED</i>: This compatibility choice prevents versioning for a particular schema. You can use this choice to prevent future versioning of a schema.</p> </li> <li> <p> <i>BACKWARD</i>: This compatibility choice is recommended as it allows data receivers to read both the current and one previous schema version. This means that for instance, a new schema version cannot drop data fields or change the type of these fields, so they can't be read by readers using the previous version.</p> </li> <li> <p> <i>BACKWARD_ALL</i>: This compatibility choice allows data receivers to read both the current and all previous schema versions. You can use this choice when you need to delete fields or add optional fields, and check compatibility against all previous schema versions. </p> </li> <li> <p> <i>FORWARD</i>: This compatibility choice allows data receivers to read both the current and one next schema version, but not necessarily later versions. You can use this choice when you need to add fields or delete optional fields, but only check compatibility against the last schema version.</p> </li> <li> <p> <i>FORWARD_ALL</i>: This compatibility choice allows data receivers to read written by producers of any new registered schema. You can use this choice when you need to add fields or delete optional fields, and check compatibility against all previous schema versions.</p> </li> <li> <p> <i>FULL</i>: This compatibility choice allows data receivers to read data written by producers using the previous or next version of the schema, but not necessarily earlier or later versions. You can use this choice when you need to add or remove optional fields, but only check compatibility against the last schema version.</p> </li> <li> <p> <i>FULL_ALL</i>: This compatibility choice allows data receivers to read data written by producers using all previous schema versions. You can use this choice when you need to add or remove optional fields, and check compatibility against all previous schema versions.</p> </li> </ul>"
            }
          ]
        },
        "DataFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DataFormat"
            },
            {
              "description": "The data format of the schema definition. Currently only <code>AVRO</code> is supported."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "An optional description of the schema. If description is not provided, there will not be any automatic default value for this."
            }
          ]
        },
        "RegistryId": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryId"
            },
            {
              "description": " This is a wrapper shape to contain the registry identity fields. If this is not provided, the default registry will be used. The ARN format for the same will be: <code>arn:aws:glue:us-east-2:&lt;customer id&gt;:registry/default-registry:random-5-letter-id</code>."
            }
          ]
        },
        "SchemaDefinition": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaDefinitionString"
            },
            {
              "description": "The schema definition using the <code>DataFormat</code> setting for <code>SchemaName</code>."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "Name of the schema to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark. No whitespace."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "AWS tags that contain a key value pair and may be searched by console, command line, or API. If specified, follows the AWS tags-on-create pattern."
            }
          ]
        }
      },
      "required": [
        "SchemaName",
        "DataFormat"
      ],
      "title": "CreateSchemaInput",
      "type": "object"
    },
    "CreateSchemaResponse": {
      "properties": {
        "Compatibility": {
          "allOf": [
            {
              "$ref": "#/definitions/Compatibility"
            },
            {
              "description": "The schema compatibility mode."
            }
          ]
        },
        "DataFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DataFormat"
            },
            {
              "description": "The data format of the schema definition. Currently only <code>AVRO</code> is supported."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the schema if specified when created."
            }
          ]
        },
        "LatestSchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The latest version of the schema associated with the returned schema definition."
            }
          ]
        },
        "NextSchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The next version of the schema associated with the returned schema definition."
            }
          ]
        },
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema."
            }
          ]
        },
        "SchemaCheckpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaCheckpointNumber"
            },
            {
              "description": "The version number of the checkpoint (the last time the compatibility mode was changed)."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "SchemaStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaStatus"
            },
            {
              "description": "The status of the schema. "
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The unique identifier of the first schema version."
            }
          ]
        },
        "SchemaVersionStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionStatus"
            },
            {
              "description": "The status of the first schema version created."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The tags for the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateScriptRequest": {
      "properties": {
        "DagEdges": {
          "allOf": [
            {
              "$ref": "#/definitions/DagEdges"
            },
            {
              "description": "A list of the edges in the DAG."
            }
          ]
        },
        "DagNodes": {
          "allOf": [
            {
              "$ref": "#/definitions/DagNodes"
            },
            {
              "description": "A list of the nodes in the DAG."
            }
          ]
        },
        "Language": {
          "allOf": [
            {
              "$ref": "#/definitions/Language"
            },
            {
              "description": "The programming language of the resulting code from the DAG."
            }
          ]
        }
      },
      "title": "CreateScriptRequest",
      "type": "object"
    },
    "CreateScriptResponse": {
      "properties": {
        "PythonScript": {
          "allOf": [
            {
              "$ref": "#/definitions/PythonScript"
            },
            {
              "description": "The Python script generated from the DAG."
            }
          ]
        },
        "ScalaCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalaCode"
            },
            {
              "description": "The Scala code generated from the DAG."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateSecurityConfigurationRequest": {
      "properties": {
        "EncryptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/EncryptionConfiguration"
            },
            {
              "description": "The encryption configuration for the new security configuration."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name for the new security configuration."
            }
          ]
        }
      },
      "required": [
        "Name",
        "EncryptionConfiguration"
      ],
      "title": "CreateSecurityConfigurationRequest",
      "type": "object"
    },
    "CreateSecurityConfigurationResponse": {
      "properties": {
        "CreatedTimestamp": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The time at which the new security configuration was created."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name assigned to the new security configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateTableRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "PartitionIndexes": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionIndexList"
            },
            {
              "description": "A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table."
            }
          ]
        },
        "TableInput": {
          "allOf": [
            {
              "$ref": "#/definitions/TableInput"
            },
            {
              "description": "The <code>TableInput</code> object that defines the metadata table to create in the catalog."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableInput"
      ],
      "title": "CreateTableRequest",
      "type": "object"
    },
    "CreateTableResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateTriggerRequest": {
      "properties": {
        "Actions": {
          "allOf": [
            {
              "$ref": "#/definitions/ActionList"
            },
            {
              "description": "The actions initiated by this trigger when it fires."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the new trigger."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger."
            }
          ]
        },
        "Predicate": {
          "allOf": [
            {
              "$ref": "#/definitions/Predicate"
            },
            {
              "description": "<p>A predicate to specify when the new trigger should fire.</p> <p>This field is required when the trigger type is <code>CONDITIONAL</code>.</p>"
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "<p>A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p> <p>This field is required when the trigger type is SCHEDULED.</p>"
            }
          ]
        },
        "StartOnCreation": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanValue"
            },
            {
              "description": "Set to <code>true</code> to start <code>SCHEDULED</code> and <code>CONDITIONAL</code> triggers when created. True is not supported for <code>ON_DEMAND</code> triggers."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The tags to use with this trigger. You may use tags to limit access to the trigger. For more information about tags in AWS Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">AWS Tags in AWS Glue</a> in the developer guide. "
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerType"
            },
            {
              "description": "The type of the new trigger."
            }
          ]
        },
        "WorkflowName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the workflow associated with the trigger."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Type",
        "Actions"
      ],
      "title": "CreateTriggerRequest",
      "type": "object"
    },
    "CreateTriggerResponse": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateUserDefinedFunctionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which to create the function. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database in which to create the function."
            }
          ]
        },
        "FunctionInput": {
          "allOf": [
            {
              "$ref": "#/definitions/UserDefinedFunctionInput"
            },
            {
              "description": "A <code>FunctionInput</code> object that defines the function to create in the Data Catalog."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "FunctionInput"
      ],
      "title": "CreateUserDefinedFunctionRequest",
      "type": "object"
    },
    "CreateUserDefinedFunctionResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateWorkflowRequest": {
      "properties": {
        "DefaultRunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRunProperties"
            },
            {
              "description": "A collection of properties to be used as part of each execution of the workflow."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A description of the workflow."
            }
          ]
        },
        "MaxConcurrentRuns": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name to be assigned to the workflow. It should be unique within your account."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The tags to be used with this workflow."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "CreateWorkflowRequest",
      "type": "object"
    },
    "CreateWorkflowResponse": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the workflow which was provided as part of the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateXMLClassifierRequest": {
      "description": "Specifies an XML classifier for <code>CreateClassifier</code> to create.",
      "properties": {
        "Classification": {
          "allOf": [
            {
              "$ref": "#/definitions/Classification"
            },
            {
              "description": "An identifier of the data format that the classifier matches."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        },
        "RowTag": {
          "allOf": [
            {
              "$ref": "#/definitions/RowTag"
            },
            {
              "description": "The XML tag designating the element that contains each record in an XML document being parsed. This can't identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not)."
            }
          ]
        }
      },
      "required": [
        "Classification",
        "Name"
      ],
      "type": "object"
    },
    "CreatedTimestamp": {
      "type": "string"
    },
    "CronExpression": {
      "type": "string"
    },
    "CsvClassifier": {
      "description": "A classifier for custom <code>CSV</code> content.",
      "properties": {
        "AllowSingleColumn": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Enables the processing of files that contain only one column."
            }
          ]
        },
        "ContainsHeader": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvHeaderOption"
            },
            {
              "description": "Indicates whether the CSV file contains a header."
            }
          ]
        },
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this classifier was registered."
            }
          ]
        },
        "Delimiter": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvColumnDelimiter"
            },
            {
              "description": "A custom symbol to denote what separates each column entry in the row."
            }
          ]
        },
        "DisableValueTrimming": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Specifies not to trim values before identifying the type of column values. The default value is <code>true</code>."
            }
          ]
        },
        "Header": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvHeader"
            },
            {
              "description": "A list of strings representing column names."
            }
          ]
        },
        "LastUpdated": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this classifier was last updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        },
        "QuoteSymbol": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvQuoteSymbol"
            },
            {
              "description": "A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionId"
            },
            {
              "description": "The version of this classifier."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "CsvColumnDelimiter": {
      "maxLength": 1,
      "minLength": 1,
      "pattern": "[^\\r\\n]",
      "type": "string"
    },
    "CsvHeader": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "type": "array"
    },
    "CsvHeaderOption": {
      "enum": [
        "UNKNOWN",
        "PRESENT",
        "ABSENT"
      ],
      "type": "string"
    },
    "CsvQuoteSymbol": {
      "maxLength": 1,
      "minLength": 1,
      "pattern": "[^\\r\\n]",
      "type": "string"
    },
    "CustomPatterns": {
      "maxLength": 16000,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "DagEdges": {
      "items": {
        "$ref": "#/definitions/CodeGenEdge"
      },
      "type": "array"
    },
    "DagNodes": {
      "items": {
        "$ref": "#/definitions/CodeGenNode"
      },
      "type": "array"
    },
    "DataCatalogEncryptionSettings": {
      "description": "Contains configuration information for maintaining Data Catalog security.",
      "properties": {
        "ConnectionPasswordEncryption": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionPasswordEncryption"
            },
            {
              "description": "When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of <code>CreateConnection</code> or <code>UpdateConnection</code> and store it in the <code>ENCRYPTED_PASSWORD</code> field in the connection properties. You can enable catalog encryption or only password encryption."
            }
          ]
        },
        "EncryptionAtRest": {
          "allOf": [
            {
              "$ref": "#/definitions/EncryptionAtRest"
            },
            {
              "description": "Specifies the encryption-at-rest configuration for the Data Catalog."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataFormat": {
      "enum": [
        "AVRO"
      ],
      "type": "string"
    },
    "DataLakePrincipal": {
      "description": "The AWS Lake Formation principal.",
      "properties": {
        "DataLakePrincipalIdentifier": {
          "allOf": [
            {
              "$ref": "#/definitions/DataLakePrincipalString"
            },
            {
              "description": "An identifier for the AWS Lake Formation principal."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataLakePrincipalString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string"
    },
    "Database": {
      "description": "The <code>Database</code> object represents a logical grouping of tables that might reside in a Hive metastore or an RDBMS.",
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the database resides."
            }
          ]
        },
        "CreateTableDefaultPermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PrincipalPermissionsList"
            },
            {
              "description": "Creates a set of default permissions on the table for principals. "
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time at which the metadata database was created in the catalog."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the database."
            }
          ]
        },
        "LocationUri": {
          "allOf": [
            {
              "$ref": "#/definitions/URI"
            },
            {
              "description": "The location of the database (for example, an HDFS path)."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database. For Hive compatibility, this is folded to lowercase when it is stored."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "These key-value pairs define parameters and properties of the database."
            }
          ]
        },
        "TargetDatabase": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseIdentifier"
            },
            {
              "description": "A <code>DatabaseIdentifier</code> structure that describes a target database for resource linking."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DatabaseIdentifier": {
      "description": "A structure that describes a target database for resource linking.",
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the database resides."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database."
            }
          ]
        }
      },
      "type": "object"
    },
    "DatabaseInput": {
      "description": "The structure used to create or update a database.",
      "properties": {
        "CreateTableDefaultPermissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PrincipalPermissionsList"
            },
            {
              "description": "Creates a set of default permissions on the table for principals. "
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the database."
            }
          ]
        },
        "LocationUri": {
          "allOf": [
            {
              "$ref": "#/definitions/URI"
            },
            {
              "description": "The location of the database (for example, an HDFS path). "
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database. For Hive compatibility, this is folded to lowercase when it is stored."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "<p>These key-value pairs define parameters and properties of the database.</p> <p>These key-value pairs define parameters and properties of the database.</p>"
            }
          ]
        },
        "TargetDatabase": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseIdentifier"
            },
            {
              "description": "A <code>DatabaseIdentifier</code> structure that describes a target database for resource linking."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DatabaseList": {
      "items": {
        "$ref": "#/definitions/Database"
      },
      "type": "array"
    },
    "DatabaseName": {
      "type": "string"
    },
    "DateColumnStatisticsData": {
      "description": "Defines column statistics supported for timestamp data columns.",
      "properties": {
        "MaximumValue": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The highest value in the column."
            }
          ]
        },
        "MinimumValue": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The lowest value in the column."
            }
          ]
        },
        "NumberOfDistinctValues": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of distinct values in a column."
            }
          ]
        },
        "NumberOfNulls": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of null values in the column."
            }
          ]
        }
      },
      "required": [
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "object"
    },
    "DecimalColumnStatisticsData": {
      "description": "Defines column statistics supported for fixed-point number data columns.",
      "properties": {
        "MaximumValue": {
          "allOf": [
            {
              "$ref": "#/definitions/DecimalNumber"
            },
            {
              "description": "The highest value in the column."
            }
          ]
        },
        "MinimumValue": {
          "allOf": [
            {
              "$ref": "#/definitions/DecimalNumber"
            },
            {
              "description": "The lowest value in the column."
            }
          ]
        },
        "NumberOfDistinctValues": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of distinct values in a column."
            }
          ]
        },
        "NumberOfNulls": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of null values in the column."
            }
          ]
        }
      },
      "required": [
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "object"
    },
    "DecimalNumber": {
      "description": "Contains a numeric value in decimal format.",
      "properties": {
        "Scale": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The scale that determines where the decimal point falls in the unscaled value."
            }
          ]
        },
        "UnscaledValue": {
          "allOf": [
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "description": "The unscaled numeric value."
            }
          ]
        }
      },
      "required": [
        "UnscaledValue",
        "Scale"
      ],
      "type": "object"
    },
    "DeleteBehavior": {
      "enum": [
        "LOG",
        "DELETE_FROM_DATABASE",
        "DEPRECATE_IN_DATABASE"
      ],
      "type": "string"
    },
    "DeleteClassifierRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the classifier to remove."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DeleteClassifierRequest",
      "type": "object"
    },
    "DeleteClassifierResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteColumnStatisticsForPartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default."
            }
          ]
        },
        "ColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the column."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the partitions reside."
            }
          ]
        },
        "PartitionValues": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueStringList"
            },
            {
              "description": "A list of partition values identifying the partition."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partitions' table."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues",
        "ColumnName"
      ],
      "title": "DeleteColumnStatisticsForPartitionRequest",
      "type": "object"
    },
    "DeleteColumnStatisticsForPartitionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteColumnStatisticsForTableRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default."
            }
          ]
        },
        "ColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the column."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the partitions reside."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partitions' table."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "ColumnName"
      ],
      "title": "DeleteColumnStatisticsForTableRequest",
      "type": "object"
    },
    "DeleteColumnStatisticsForTableResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteConnectionNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 25,
      "minItems": 0,
      "type": "array"
    },
    "DeleteConnectionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the connection resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "ConnectionName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the connection to delete."
            }
          ]
        }
      },
      "required": [
        "ConnectionName"
      ],
      "title": "DeleteConnectionRequest",
      "type": "object"
    },
    "DeleteConnectionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteCrawlerRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the crawler to remove."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DeleteCrawlerRequest",
      "type": "object"
    },
    "DeleteCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteDatabaseRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the database resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database to delete. For Hive compatibility, this must be all lowercase."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DeleteDatabaseRequest",
      "type": "object"
    },
    "DeleteDatabaseResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteDevEndpointRequest": {
      "properties": {
        "EndpointName": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The name of the <code>DevEndpoint</code>."
            }
          ]
        }
      },
      "required": [
        "EndpointName"
      ],
      "title": "DeleteDevEndpointRequest",
      "type": "object"
    },
    "DeleteDevEndpointResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteJobRequest": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition to delete."
            }
          ]
        }
      },
      "required": [
        "JobName"
      ],
      "title": "DeleteJobRequest",
      "type": "object"
    },
    "DeleteJobResponse": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition that was deleted."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteMLTransformRequest": {
      "properties": {
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the transform to delete."
            }
          ]
        }
      },
      "required": [
        "TransformId"
      ],
      "title": "DeleteMLTransformRequest",
      "type": "object"
    },
    "DeleteMLTransformResponse": {
      "properties": {
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the transform that was deleted."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeletePartitionIndexRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The catalog ID where the table resides."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Specifies the name of a database from which you want to delete a partition index."
            }
          ]
        },
        "IndexName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partition index to be deleted."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Specifies the name of a table from which you want to delete a partition index."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "IndexName"
      ],
      "title": "DeletePartitionIndexRequest",
      "type": "object"
    },
    "DeletePartitionIndexResponse": {
      "properties": {},
      "type": "object"
    },
    "DeletePartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partition to be deleted resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database in which the table in question resides."
            }
          ]
        },
        "PartitionValues": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueStringList"
            },
            {
              "description": "The values that define the partition."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table that contains the partition to be deleted."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues"
      ],
      "title": "DeletePartitionRequest",
      "type": "object"
    },
    "DeletePartitionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteRegistryInput": {
      "properties": {
        "RegistryId": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryId"
            },
            {
              "description": "This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN)."
            }
          ]
        }
      },
      "required": [
        "RegistryId"
      ],
      "title": "DeleteRegistryInput",
      "type": "object"
    },
    "DeleteRegistryResponse": {
      "properties": {
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the registry being deleted."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the registry being deleted."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryStatus"
            },
            {
              "description": "The status of the registry. A successful operation will return the <code>Deleting</code> status."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteResourcePolicyRequest": {
      "properties": {
        "PolicyHashCondition": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The hash value returned when this policy was set."
            }
          ]
        },
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The ARN of the AWS Glue resource for the resource policy to be deleted."
            }
          ]
        }
      },
      "title": "DeleteResourcePolicyRequest",
      "type": "object"
    },
    "DeleteResourcePolicyResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteSchemaInput": {
      "properties": {
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN)."
            }
          ]
        }
      },
      "required": [
        "SchemaId"
      ],
      "title": "DeleteSchemaInput",
      "type": "object"
    },
    "DeleteSchemaResponse": {
      "properties": {
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema being deleted."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the schema being deleted."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaStatus"
            },
            {
              "description": "The status of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteSchemaVersionsInput": {
      "properties": {
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN)."
            }
          ]
        },
        "Versions": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionsString"
            },
            {
              "description": "<p>A version range may be supplied which may be of the format:</p> <ul> <li> <p>a single version number, 5</p> </li> <li> <p>a range, 5-8 : deletes versions 5, 6, 7, 8</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "SchemaId",
        "Versions"
      ],
      "title": "DeleteSchemaVersionsInput",
      "type": "object"
    },
    "DeleteSchemaVersionsResponse": {
      "properties": {
        "SchemaVersionErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionErrorList"
            },
            {
              "description": "A list of <code>SchemaVersionErrorItem</code> objects, each containing an error and schema version."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteSecurityConfigurationRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the security configuration to delete."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DeleteSecurityConfigurationRequest",
      "type": "object"
    },
    "DeleteSecurityConfigurationResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteTableRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the table resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table to be deleted. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "Name"
      ],
      "title": "DeleteTableRequest",
      "type": "object"
    },
    "DeleteTableResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteTableVersionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the tables reside. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "VersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionString"
            },
            {
              "description": "The ID of the table version to be deleted. A <code>VersionID</code> is a string representation of an integer. Each version is incremented by 1."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "VersionId"
      ],
      "title": "DeleteTableVersionRequest",
      "type": "object"
    },
    "DeleteTableVersionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteTriggerRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger to delete."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DeleteTriggerRequest",
      "type": "object"
    },
    "DeleteTriggerResponse": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger that was deleted."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteUserDefinedFunctionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the function to be deleted is located. If none is supplied, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the function is located."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the function definition to be deleted."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "FunctionName"
      ],
      "title": "DeleteUserDefinedFunctionRequest",
      "type": "object"
    },
    "DeleteUserDefinedFunctionResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteWorkflowRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the workflow to be deleted."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "DeleteWorkflowRequest",
      "type": "object"
    },
    "DeleteWorkflowResponse": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the workflow specified in input."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescriptionString": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "DescriptionStringRemovable": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "DevEndpoint": {
      "description": "A development endpoint where a developer can remotely debug extract, transform, and load (ETL) scripts.",
      "properties": {
        "Arguments": {
          "allOf": [
            {
              "$ref": "#/definitions/MapValue"
            },
            {
              "description": "<p>A map of arguments used to configure the <code>DevEndpoint</code>.</p> <p>Valid arguments are:</p> <ul> <li> <p> <code>\"--enable-glue-datacatalog\": \"\"</code> </p> </li> <li> <p> <code>\"GLUE_PYTHON_VERSION\": \"3\"</code> </p> </li> <li> <p> <code>\"GLUE_PYTHON_VERSION\": \"2\"</code> </p> </li> </ul> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>"
            }
          ]
        },
        "AvailabilityZone": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The AWS Availability Zone where this <code>DevEndpoint</code> is located."
            }
          ]
        },
        "CreatedTimestamp": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The point in time at which this DevEndpoint was created."
            }
          ]
        },
        "EndpointName": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The name of the <code>DevEndpoint</code>."
            }
          ]
        },
        "ExtraJarsS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "<p>The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded in your <code>DevEndpoint</code>.</p> <note> <p>You can only use pure Java/Scala libraries with a <code>DevEndpoint</code>.</p> </note>"
            }
          ]
        },
        "ExtraPythonLibsS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "<p>The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in your <code>DevEndpoint</code>. Multiple values must be complete paths separated by a comma.</p> <note> <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not currently supported.</p> </note>"
            }
          ]
        },
        "FailureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The reason for a current failure in this <code>DevEndpoint</code>."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "<p>Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p> <p>For more information about the available AWS Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Development endpoints that are created without specifying a Glue version default to Glue 0.9.</p> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>"
            }
          ]
        },
        "LastModifiedTimestamp": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The point in time at which this <code>DevEndpoint</code> was last modified."
            }
          ]
        },
        "LastUpdateStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The status of the last update."
            }
          ]
        },
        "NumberOfNodes": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "The number of AWS Glue Data Processing Units (DPUs) allocated to this <code>DevEndpoint</code>."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p> <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>"
            }
          ]
        },
        "PrivateAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A private IP address to access the <code>DevEndpoint</code> within a VPC if the <code>DevEndpoint</code> is created within one. The <code>PrivateAddress</code> field is present only when you create the <code>DevEndpoint</code> within your VPC."
            }
          ]
        },
        "PublicAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The public IP address used by this <code>DevEndpoint</code>. The <code>PublicAddress</code> field is present only when you create a non-virtual private cloud (VPC) <code>DevEndpoint</code>."
            }
          ]
        },
        "PublicKey": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The public key to be used by this <code>DevEndpoint</code> for authentication. This attribute is provided for backward compatibility because the recommended attribute to use is public keys."
            }
          ]
        },
        "PublicKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/PublicKeysList"
            },
            {
              "description": "<p>A list of public keys to be used by the <code>DevEndpoints</code> for authentication. Using this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.</p> <note> <p>If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys. Call the <code>UpdateDevEndpoint</code> API operation with the public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the <code>addPublicKeys</code> attribute.</p> </note>"
            }
          ]
        },
        "RoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the IAM role used in this <code>DevEndpoint</code>."
            }
          ]
        },
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used with this <code>DevEndpoint</code>."
            }
          ]
        },
        "SecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "A list of security group identifiers used in this <code>DevEndpoint</code>."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The current status of this <code>DevEndpoint</code>."
            }
          ]
        },
        "SubnetId": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The subnet ID for this <code>DevEndpoint</code>."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> </ul> <p>Known issue: when a development endpoint is created with the <code>G.2X</code> <code>WorkerType</code> configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk. </p>"
            }
          ]
        },
        "YarnEndpointAddress": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The YARN endpoint address used by this <code>DevEndpoint</code>."
            }
          ]
        },
        "ZeppelinRemoteSparkInterpreterPort": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "The Apache Zeppelin port for the remote Apache Spark interpreter."
            }
          ]
        }
      },
      "type": "object"
    },
    "DevEndpointCustomLibraries": {
      "description": "Custom libraries to be loaded into a development endpoint.",
      "properties": {
        "ExtraJarsS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "<p>The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded in your <code>DevEndpoint</code>.</p> <note> <p>You can only use pure Java/Scala libraries with a <code>DevEndpoint</code>.</p> </note>"
            }
          ]
        },
        "ExtraPythonLibsS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "<p>The paths to one or more Python libraries in an Amazon Simple Storage Service (Amazon S3) bucket that should be loaded in your <code>DevEndpoint</code>. Multiple values must be complete paths separated by a comma.</p> <note> <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on C extensions, such as the <a href=\"http://pandas.pydata.org/\">pandas</a> Python data analysis library, are not currently supported.</p> </note>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DevEndpointList": {
      "items": {
        "$ref": "#/definitions/DevEndpoint"
      },
      "type": "array"
    },
    "DevEndpointNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "type": "array"
    },
    "DevEndpointNames": {
      "items": {
        "$ref": "#/definitions/GenericString"
      },
      "maxItems": 25,
      "minItems": 1,
      "type": "array"
    },
    "Double": {
      "format": "double",
      "type": "number"
    },
    "DoubleColumnStatisticsData": {
      "description": "Defines column statistics supported for floating-point number data columns.",
      "properties": {
        "MaximumValue": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "The highest value in the column."
            }
          ]
        },
        "MinimumValue": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "The lowest value in the column."
            }
          ]
        },
        "NumberOfDistinctValues": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of distinct values in a column."
            }
          ]
        },
        "NumberOfNulls": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of null values in the column."
            }
          ]
        }
      },
      "required": [
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "object"
    },
    "DynamoDBTarget": {
      "description": "Specifies an Amazon DynamoDB table to crawl.",
      "properties": {
        "Path": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The name of the DynamoDB table to crawl."
            }
          ]
        },
        "scanAll": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "<p>Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.</p> <p>A value of <code>true</code> means to scan all records, while a value of <code>false</code> means to sample the records. If no value is specified, the value defaults to <code>true</code>.</p>"
            }
          ]
        },
        "scanRate": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The percentage of the configured read capacity units to use by the AWS Glue crawler. Read capacity units is a term defined by DynamoDB, and is a numeric value that acts as rate limiter for the number of reads that can be performed on that table per second.</p> <p>The valid values are null or a value between 0.1 to 1.5. A null value is used when user does not provide a value, and defaults to 0.5 of the configured Read Capacity Unit (for provisioned tables), or 0.25 of the max configured Read Capacity Unit (for tables using on-demand mode).</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DynamoDBTargetList": {
      "items": {
        "$ref": "#/definitions/DynamoDBTarget"
      },
      "type": "array"
    },
    "Edge": {
      "description": "An edge represents a directed connection between two AWS Glue components that are part of the workflow the edge belongs to.",
      "properties": {
        "DestinationId": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The unique of the node within the workflow where the edge ends."
            }
          ]
        },
        "SourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The unique of the node within the workflow where the edge starts."
            }
          ]
        }
      },
      "type": "object"
    },
    "EdgeList": {
      "items": {
        "$ref": "#/definitions/Edge"
      },
      "type": "array"
    },
    "EnableHybridValues": {
      "enum": [
        "TRUE",
        "FALSE"
      ],
      "type": "string"
    },
    "EncryptionAtRest": {
      "description": "Specifies the encryption-at-rest configuration for the Data Catalog.",
      "properties": {
        "CatalogEncryptionMode": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogEncryptionMode"
            },
            {
              "description": "The encryption-at-rest mode for encrypting Data Catalog data."
            }
          ]
        },
        "SseAwsKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The ID of the AWS KMS key to use for encryption at rest."
            }
          ]
        }
      },
      "required": [
        "CatalogEncryptionMode"
      ],
      "type": "object"
    },
    "EncryptionConfiguration": {
      "description": "Specifies an encryption configuration.",
      "properties": {
        "CloudWatchEncryption": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudWatchEncryption"
            },
            {
              "description": "The encryption configuration for Amazon CloudWatch."
            }
          ]
        },
        "JobBookmarksEncryption": {
          "allOf": [
            {
              "$ref": "#/definitions/JobBookmarksEncryption"
            },
            {
              "description": "The encryption configuration for job bookmarks."
            }
          ]
        },
        "S3Encryption": {
          "allOf": [
            {
              "$ref": "#/definitions/S3EncryptionList"
            },
            {
              "description": "The encryption configuration for Amazon Simple Storage Service (Amazon S3) data."
            }
          ]
        }
      },
      "type": "object"
    },
    "EntityNotFoundException": {},
    "ErrorByName": {
      "additionalProperties": {
        "$ref": "#/definitions/ErrorDetail"
      },
      "type": "object"
    },
    "ErrorCodeString": {
      "type": "string"
    },
    "ErrorDetail": {
      "description": "Contains details about an error.",
      "properties": {
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The code associated with this error."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A message describing the error."
            }
          ]
        }
      },
      "type": "object"
    },
    "ErrorDetails": {
      "description": "An object containing error details.",
      "properties": {
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorCodeString"
            },
            {
              "description": "The error code for an error."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessageString"
            },
            {
              "description": "The error message for an error."
            }
          ]
        }
      },
      "type": "object"
    },
    "ErrorMessageString": {
      "type": "string"
    },
    "ErrorString": {
      "type": "string"
    },
    "EvaluationMetrics": {
      "description": "Evaluation metrics provide an estimate of the quality of your machine learning transform.",
      "properties": {
        "FindMatchesMetrics": {
          "allOf": [
            {
              "$ref": "#/definitions/FindMatchesMetrics"
            },
            {
              "description": "The evaluation metrics for the find matches algorithm."
            }
          ]
        },
        "TransformType": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformType"
            },
            {
              "description": "The type of machine learning transform."
            }
          ]
        }
      },
      "required": [
        "TransformType"
      ],
      "type": "object"
    },
    "ExecutionProperty": {
      "description": "An execution property of a job.",
      "properties": {
        "MaxConcurrentRuns": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxConcurrentRuns"
            },
            {
              "description": "The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit."
            }
          ]
        }
      },
      "type": "object"
    },
    "ExecutionTime": {
      "type": "integer"
    },
    "ExistCondition": {
      "enum": [
        "MUST_EXIST",
        "NOT_EXIST",
        "NONE"
      ],
      "type": "string"
    },
    "ExportLabelsTaskRunProperties": {
      "description": "Specifies configuration properties for an exporting labels task run.",
      "properties": {
        "OutputS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/UriString"
            },
            {
              "description": "The Amazon Simple Storage Service (Amazon S3) path where you will export the labels."
            }
          ]
        }
      },
      "type": "object"
    },
    "FieldType": {
      "type": "string"
    },
    "FilterString": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "FindMatchesMetrics": {
      "description": "The evaluation metrics for the find matches algorithm. The quality of your machine learning transform is measured by getting your transform to predict some matches and comparing the results to known matches from the same dataset. The quality metrics are based on a subset of your data, so they are not precise.",
      "properties": {
        "AreaUnderPRCurve": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericBoundedDouble"
            },
            {
              "description": "<p>The area under the precision/recall curve (AUPRC) is a single number measuring the overall quality of the transform, that is independent of the choice made for precision vs. recall. Higher values indicate that you have a more attractive precision vs. recall tradeoff.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Precision_and_recall\">Precision and recall</a> in Wikipedia.</p>"
            }
          ]
        },
        "ConfusionMatrix": {
          "allOf": [
            {
              "$ref": "#/definitions/ConfusionMatrix"
            },
            {
              "description": "<p>The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Confusion_matrix\">Confusion matrix</a> in Wikipedia.</p>"
            }
          ]
        },
        "F1": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericBoundedDouble"
            },
            {
              "description": "<p>The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is the best accuracy.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/F1_score\">F1 score</a> in Wikipedia.</p>"
            }
          ]
        },
        "Precision": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericBoundedDouble"
            },
            {
              "description": "<p>The precision metric indicates when often your transform is correct when it predicts a match. Specifically, it measures how well the transform finds true positives from the total true positives possible.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Precision_and_recall\">Precision and recall</a> in Wikipedia.</p>"
            }
          ]
        },
        "Recall": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericBoundedDouble"
            },
            {
              "description": "<p>The recall metric indicates that for an actual match, how often your transform predicts the match. Specifically, it measures how well the transform finds true positives from the total records in the source data.</p> <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Precision_and_recall\">Precision and recall</a> in Wikipedia.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "FindMatchesParameters": {
      "description": "The parameters to configure the find matches transform.",
      "properties": {
        "AccuracyCostTradeoff": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericBoundedDouble"
            },
            {
              "description": "<p>The value that is selected when tuning your transform for a balance between accuracy and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of 1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost, which results in a less accurate <code>FindMatches</code> transform, sometimes with unacceptable accuracy.</p> <p>Accuracy measures how well the transform finds true positives and true negatives. Increasing accuracy requires more machine resources and cost. But it also results in increased recall. </p> <p>Cost measures how many compute resources, and thus money, are consumed to run the transform.</p>"
            }
          ]
        },
        "EnforceProvidedLabels": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "<p>The value to switch on or off to force the output to match the provided labels from users. If the value is <code>True</code>, the <code>find matches</code> transform forces the output to match the provided labels. The results override the normal conflation results. If the value is <code>False</code>, the <code>find matches</code> transform does not ensure all the labels provided are respected, and the results rely on the trained model.</p> <p>Note that setting this value to true may increase the conflation execution time.</p>"
            }
          ]
        },
        "PrecisionRecallTradeoff": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericBoundedDouble"
            },
            {
              "description": "<p>The value selected when tuning your transform for a balance between precision and recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to 1.0 means very low recall, and choosing values close to 0.0 results in very low precision.</p> <p>The precision metric indicates how often your model is correct when it predicts a match. </p> <p>The recall metric indicates that for an actual match, how often your model predicts the match.</p>"
            }
          ]
        },
        "PrimaryKeyColumnName": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnNameString"
            },
            {
              "description": "The name of a column that uniquely identifies rows in the source table. Used to help identify matching records."
            }
          ]
        }
      },
      "type": "object"
    },
    "FindMatchesTaskRunProperties": {
      "description": "Specifies configuration properties for a Find Matches task run.",
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The job ID for the Find Matches task run."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name assigned to the job for the Find Matches task run."
            }
          ]
        },
        "JobRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The job run ID for the Find Matches task run."
            }
          ]
        }
      },
      "type": "object"
    },
    "FormatString": {
      "maxLength": 128,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "GenericBoundedDouble": {
      "format": "double",
      "maximum": 1,
      "minimum": 0,
      "type": "number"
    },
    "GenericMap": {
      "additionalProperties": {
        "$ref": "#/definitions/GenericString"
      },
      "type": "object"
    },
    "GenericString": {
      "type": "string"
    },
    "GetCatalogImportStatusRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the catalog to migrate. Currently, this should be the AWS account ID."
            }
          ]
        }
      },
      "title": "GetCatalogImportStatusRequest",
      "type": "object"
    },
    "GetCatalogImportStatusResponse": {
      "properties": {
        "ImportStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogImportStatus"
            },
            {
              "description": "The status of the specified catalog migration."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetClassifierRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the classifier to retrieve."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetClassifierRequest",
      "type": "object"
    },
    "GetClassifierResponse": {
      "properties": {
        "Classifier": {
          "allOf": [
            {
              "$ref": "#/definitions/Classifier"
            },
            {
              "description": "The requested classifier."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetClassifiersRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The size of the list to return (optional)."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "An optional continuation token."
            }
          ]
        }
      },
      "title": "GetClassifiersRequest",
      "type": "object"
    },
    "GetClassifiersResponse": {
      "properties": {
        "Classifiers": {
          "allOf": [
            {
              "$ref": "#/definitions/ClassifierList"
            },
            {
              "description": "The requested list of classifier objects."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetColumnNamesList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "GetColumnStatisticsForPartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default."
            }
          ]
        },
        "ColumnNames": {
          "allOf": [
            {
              "$ref": "#/definitions/GetColumnNamesList"
            },
            {
              "description": "A list of the column names."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the partitions reside."
            }
          ]
        },
        "PartitionValues": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueStringList"
            },
            {
              "description": "A list of partition values identifying the partition."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partitions' table."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues",
        "ColumnNames"
      ],
      "title": "GetColumnStatisticsForPartitionRequest",
      "type": "object"
    },
    "GetColumnStatisticsForPartitionResponse": {
      "properties": {
        "ColumnStatisticsList": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnStatisticsList"
            },
            {
              "description": "List of ColumnStatistics that failed to be retrieved."
            }
          ]
        },
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnErrors"
            },
            {
              "description": "Error occurred during retrieving column statistics data."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetColumnStatisticsForTableRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default."
            }
          ]
        },
        "ColumnNames": {
          "allOf": [
            {
              "$ref": "#/definitions/GetColumnNamesList"
            },
            {
              "description": "A list of the column names."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the partitions reside."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partitions' table."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "ColumnNames"
      ],
      "title": "GetColumnStatisticsForTableRequest",
      "type": "object"
    },
    "GetColumnStatisticsForTableResponse": {
      "properties": {
        "ColumnStatisticsList": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnStatisticsList"
            },
            {
              "description": "List of ColumnStatistics that failed to be retrieved."
            }
          ]
        },
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnErrors"
            },
            {
              "description": "List of ColumnStatistics that failed to be retrieved."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetConnectionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the connection resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "HidePassword": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Allows you to retrieve the connection metadata without returning the password. For instance, the AWS Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the AWS KMS key to decrypt the password, but it does have permission to access the rest of the connection properties."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the connection definition to retrieve."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetConnectionRequest",
      "type": "object"
    },
    "GetConnectionResponse": {
      "properties": {
        "Connection": {
          "allOf": [
            {
              "$ref": "#/definitions/Connection"
            },
            {
              "description": "The requested connection definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetConnectionsFilter": {
      "description": "Filters the connection definitions that are returned by the <code>GetConnections</code> API operation.",
      "properties": {
        "ConnectionType": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionType"
            },
            {
              "description": "The type of connections to return. Currently, SFTP is not supported."
            }
          ]
        },
        "MatchCriteria": {
          "allOf": [
            {
              "$ref": "#/definitions/MatchCriteria"
            },
            {
              "description": "A criteria string that must match the criteria recorded in the connection definition for that connection definition to be returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetConnectionsRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the connections reside. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/GetConnectionsFilter"
            },
            {
              "description": "A filter that controls which connections are returned."
            }
          ]
        },
        "HidePassword": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Allows you to retrieve the connection metadata without returning the password. For instance, the AWS Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the AWS KMS key to decrypt the password, but it does have permission to access the rest of the connection properties."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of connections to return in one response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        }
      },
      "title": "GetConnectionsRequest",
      "type": "object"
    },
    "GetConnectionsResponse": {
      "properties": {
        "ConnectionList": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionList"
            },
            {
              "description": "A list of requested connection definitions."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if the list of connections returned does not include the last of the filtered connections."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetCrawlerMetricsRequest": {
      "properties": {
        "CrawlerNameList": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerNameList"
            },
            {
              "description": "A list of the names of crawlers about which to retrieve metrics."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of a list to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        }
      },
      "title": "GetCrawlerMetricsRequest",
      "type": "object"
    },
    "GetCrawlerMetricsResponse": {
      "properties": {
        "CrawlerMetricsList": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerMetricsList"
            },
            {
              "description": "A list of metrics for the specified crawler."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if the returned list does not contain the last metric available."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetCrawlerRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the crawler to retrieve metadata for."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetCrawlerRequest",
      "type": "object"
    },
    "GetCrawlerResponse": {
      "properties": {
        "Crawler": {
          "allOf": [
            {
              "$ref": "#/definitions/Crawler"
            },
            {
              "description": "The metadata for the specified crawler."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetCrawlersRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The number of crawlers to return on each call."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if this is a continuation request."
            }
          ]
        }
      },
      "title": "GetCrawlersRequest",
      "type": "object"
    },
    "GetCrawlersResponse": {
      "properties": {
        "Crawlers": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerList"
            },
            {
              "description": "A list of crawler metadata."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if the returned list has not reached the end of those defined in this customer account."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDataCatalogEncryptionSettingsRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog to retrieve the security configuration for. If none is provided, the AWS account ID is used by default."
            }
          ]
        }
      },
      "title": "GetDataCatalogEncryptionSettingsRequest",
      "type": "object"
    },
    "GetDataCatalogEncryptionSettingsResponse": {
      "properties": {
        "DataCatalogEncryptionSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/DataCatalogEncryptionSettings"
            },
            {
              "description": "The requested security configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDatabaseRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the database resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database to retrieve. For Hive compatibility, this should be all lowercase."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetDatabaseRequest",
      "type": "object"
    },
    "GetDatabaseResponse": {
      "properties": {
        "Database": {
          "allOf": [
            {
              "$ref": "#/definitions/Database"
            },
            {
              "description": "The definition of the specified database in the Data Catalog."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDatabasesRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of databases to return in one response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        },
        "ResourceShareType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceShareType"
            },
            {
              "description": "<p>Allows you to specify that you want to list the databases shared with your account. The allowable values are <code>FOREIGN</code> or <code>ALL</code>. </p> <ul> <li> <p>If set to <code>FOREIGN</code>, will list the databases shared with your account. </p> </li> <li> <p>If set to <code>ALL</code>, will list the databases shared with your account, as well as the databases in yor local account. </p> </li> </ul>"
            }
          ]
        }
      },
      "title": "GetDatabasesRequest",
      "type": "object"
    },
    "GetDatabasesResponse": {
      "properties": {
        "DatabaseList": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseList"
            },
            {
              "description": "A list of <code>Database</code> objects from the specified catalog."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last."
            }
          ]
        }
      },
      "required": [
        "DatabaseList"
      ],
      "type": "object"
    },
    "GetDataflowGraphRequest": {
      "properties": {
        "PythonScript": {
          "allOf": [
            {
              "$ref": "#/definitions/PythonScript"
            },
            {
              "description": "The Python script to transform."
            }
          ]
        }
      },
      "title": "GetDataflowGraphRequest",
      "type": "object"
    },
    "GetDataflowGraphResponse": {
      "properties": {
        "DagEdges": {
          "allOf": [
            {
              "$ref": "#/definitions/DagEdges"
            },
            {
              "description": "A list of the edges in the resulting DAG."
            }
          ]
        },
        "DagNodes": {
          "allOf": [
            {
              "$ref": "#/definitions/DagNodes"
            },
            {
              "description": "A list of the nodes in the resulting DAG."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDevEndpointRequest": {
      "properties": {
        "EndpointName": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "Name of the <code>DevEndpoint</code> to retrieve information for."
            }
          ]
        }
      },
      "required": [
        "EndpointName"
      ],
      "title": "GetDevEndpointRequest",
      "type": "object"
    },
    "GetDevEndpointResponse": {
      "properties": {
        "DevEndpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/DevEndpoint"
            },
            {
              "description": "A <code>DevEndpoint</code> definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDevEndpointsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of information to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        }
      },
      "title": "GetDevEndpointsRequest",
      "type": "object"
    },
    "GetDevEndpointsResponse": {
      "properties": {
        "DevEndpoints": {
          "allOf": [
            {
              "$ref": "#/definitions/DevEndpointList"
            },
            {
              "description": "A list of <code>DevEndpoint</code> definitions."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if not all <code>DevEndpoint</code> definitions have yet been returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetJobBookmarkRequest": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name of the job in question."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/RunId"
            },
            {
              "description": "The unique run identifier associated with this job run."
            }
          ]
        }
      },
      "required": [
        "JobName"
      ],
      "title": "GetJobBookmarkRequest",
      "type": "object"
    },
    "GetJobBookmarkResponse": {
      "properties": {
        "JobBookmarkEntry": {
          "allOf": [
            {
              "$ref": "#/definitions/JobBookmarkEntry"
            },
            {
              "description": "A structure that defines a point that a job can resume processing."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetJobRequest": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition to retrieve."
            }
          ]
        }
      },
      "required": [
        "JobName"
      ],
      "title": "GetJobRequest",
      "type": "object"
    },
    "GetJobResponse": {
      "properties": {
        "Job": {
          "allOf": [
            {
              "$ref": "#/definitions/Job"
            },
            {
              "description": "The requested job definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetJobRunRequest": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the job definition being run."
            }
          ]
        },
        "PredecessorsIncluded": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanValue"
            },
            {
              "description": "True if a list of predecessor runs should be returned."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of the job run."
            }
          ]
        }
      },
      "required": [
        "JobName",
        "RunId"
      ],
      "title": "GetJobRunRequest",
      "type": "object"
    },
    "GetJobRunResponse": {
      "properties": {
        "JobRun": {
          "allOf": [
            {
              "$ref": "#/definitions/JobRun"
            },
            {
              "description": "The requested job-run metadata."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetJobRunsRequest": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition for which to retrieve all job runs."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of the response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        }
      },
      "required": [
        "JobName"
      ],
      "title": "GetJobRunsRequest",
      "type": "object"
    },
    "GetJobRunsResponse": {
      "properties": {
        "JobRuns": {
          "allOf": [
            {
              "$ref": "#/definitions/JobRunList"
            },
            {
              "description": "A list of job-run metadata objects."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if not all requested job runs have been returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetJobsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of the response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        }
      },
      "title": "GetJobsRequest",
      "type": "object"
    },
    "GetJobsResponse": {
      "properties": {
        "Jobs": {
          "allOf": [
            {
              "$ref": "#/definitions/JobList"
            },
            {
              "description": "A list of job definitions."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if not all job definitions have yet been returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMLTaskRunRequest": {
      "properties": {
        "TaskRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the task run."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the machine learning transform."
            }
          ]
        }
      },
      "required": [
        "TransformId",
        "TaskRunId"
      ],
      "title": "GetMLTaskRunRequest",
      "type": "object"
    },
    "GetMLTaskRunResponse": {
      "properties": {
        "CompletedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time when this task run was completed."
            }
          ]
        },
        "ErrorString": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The error strings that are associated with the task run."
            }
          ]
        },
        "ExecutionTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionTime"
            },
            {
              "description": "The amount of time (in seconds) that the task run consumed resources."
            }
          ]
        },
        "LastModifiedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time when this task run was last modified."
            }
          ]
        },
        "LogGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The names of the log groups that are associated with the task run."
            }
          ]
        },
        "Properties": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskRunProperties"
            },
            {
              "description": "The list of properties that are associated with the task run."
            }
          ]
        },
        "StartedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time when this task run started."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskStatusType"
            },
            {
              "description": "The status for this task run."
            }
          ]
        },
        "TaskRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique run identifier associated with this run."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the task run."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMLTaskRunsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskRunFilterCriteria"
            },
            {
              "description": "The filter criteria, in the <code>TaskRunFilterCriteria</code> structure, for the task run."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of results to return. "
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "A token for pagination of the results. The default is empty."
            }
          ]
        },
        "Sort": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskRunSortCriteria"
            },
            {
              "description": "The sorting criteria, in the <code>TaskRunSortCriteria</code> structure, for the task run."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the machine learning transform."
            }
          ]
        }
      },
      "required": [
        "TransformId"
      ],
      "title": "GetMLTaskRunsRequest",
      "type": "object"
    },
    "GetMLTaskRunsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "A pagination token, if more results are available."
            }
          ]
        },
        "TaskRuns": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskRunList"
            },
            {
              "description": "A list of task runs that are associated with the transform."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMLTransformRequest": {
      "properties": {
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the transform, generated at the time that the transform was created."
            }
          ]
        }
      },
      "required": [
        "TransformId"
      ],
      "title": "GetMLTransformRequest",
      "type": "object"
    },
    "GetMLTransformResponse": {
      "properties": {
        "CreatedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time when the transform was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the transform."
            }
          ]
        },
        "EvaluationMetrics": {
          "allOf": [
            {
              "$ref": "#/definitions/EvaluationMetrics"
            },
            {
              "description": "The latest evaluation metrics."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">AWS Glue Versions</a> in the developer guide."
            }
          ]
        },
        "InputRecordTables": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueTables"
            },
            {
              "description": "A list of AWS Glue table definitions used by the transform."
            }
          ]
        },
        "LabelCount": {
          "allOf": [
            {
              "$ref": "#/definitions/LabelCount"
            },
            {
              "description": "The number of labels available for this transform."
            }
          ]
        },
        "LastModifiedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time when the transform was last modified."
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>. </p> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>"
            }
          ]
        },
        "MaxRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "The maximum number of times to retry a task for this transform after a task run fails."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The unique name given to the transform when it was created."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "The number of workers of a defined <code>workerType</code> that are allocated when this task runs."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformParameters"
            },
            {
              "description": "The configuration parameters that are specific to the algorithm used."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleString"
            },
            {
              "description": "The name or Amazon Resource Name (ARN) of the IAM role with the required permissions."
            }
          ]
        },
        "Schema": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformSchema"
            },
            {
              "description": "The <code>Map&lt;Column, Type&gt;</code> object that represents the schema that this transform accepts. Has an upper bound of 100 columns."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformStatusType"
            },
            {
              "description": "The last known status of the transform (to indicate whether it can be used or not). One of \"NOT_READY\", \"READY\", or \"DELETING\"."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours)."
            }
          ]
        },
        "TransformEncryption": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformEncryption"
            },
            {
              "description": "The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the transform, generated at the time that the transform was created."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "GetMLTransformsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformFilterCriteria"
            },
            {
              "description": "The filter transformation criteria."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of results to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "A paginated token to offset the results."
            }
          ]
        },
        "Sort": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformSortCriteria"
            },
            {
              "description": "The sorting criteria."
            }
          ]
        }
      },
      "title": "GetMLTransformsRequest",
      "type": "object"
    },
    "GetMLTransformsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "A pagination token, if more results are available."
            }
          ]
        },
        "Transforms": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformList"
            },
            {
              "description": "A list of machine learning transforms."
            }
          ]
        }
      },
      "required": [
        "Transforms"
      ],
      "type": "object"
    },
    "GetMappingRequest": {
      "properties": {
        "Location": {
          "allOf": [
            {
              "$ref": "#/definitions/Location"
            },
            {
              "description": "Parameters for the mapping."
            }
          ]
        },
        "Sinks": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogEntries"
            },
            {
              "description": "A list of target tables."
            }
          ]
        },
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogEntry"
            },
            {
              "description": "Specifies the source table."
            }
          ]
        }
      },
      "required": [
        "Source"
      ],
      "title": "GetMappingRequest",
      "type": "object"
    },
    "GetMappingResponse": {
      "properties": {
        "Mapping": {
          "allOf": [
            {
              "$ref": "#/definitions/MappingList"
            },
            {
              "description": "A list of mappings to the specified targets."
            }
          ]
        }
      },
      "required": [
        "Mapping"
      ],
      "type": "object"
    },
    "GetPartitionIndexesRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The catalog ID where the table resides."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Specifies the name of a database from which you want to retrieve partition indexes."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, included if this is a continuation call."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Specifies the name of a table for which you want to retrieve the partition indexes."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "title": "GetPartitionIndexesRequest",
      "type": "object"
    },
    "GetPartitionIndexesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, present if the current list segment is not the last."
            }
          ]
        },
        "PartitionIndexDescriptorList": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionIndexDescriptorList"
            },
            {
              "description": "A list of index descriptors."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetPartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partition in question resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the partition resides."
            }
          ]
        },
        "PartitionValues": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueStringList"
            },
            {
              "description": "The values that define the partition."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partition's table."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues"
      ],
      "title": "GetPartitionRequest",
      "type": "object"
    },
    "GetPartitionResponse": {
      "properties": {
        "Partition": {
          "allOf": [
            {
              "$ref": "#/definitions/Partition"
            },
            {
              "description": "The requested information, in the form of a <code>Partition</code> object."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetPartitionsRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partitions in question reside. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the partitions reside."
            }
          ]
        },
        "Expression": {
          "allOf": [
            {
              "$ref": "#/definitions/PredicateString"
            },
            {
              "description": "<p>An expression that filters the partitions to be returned.</p> <p>The expression uses SQL syntax similar to the SQL <code>WHERE</code> filter clause. The SQL statement parser <a href=\"http://jsqlparser.sourceforge.net/home.php\">JSQLParser</a> parses the expression. </p> <p> <i>Operators</i>: The following are the operators that you can use in the <code>Expression</code> API call:</p> <dl> <dt>=</dt> <dd> <p>Checks whether the values of the two operands are equal; if yes, then the condition becomes true.</p> <p>Example: Assume 'variable a' holds 10 and 'variable b' holds 20. </p> <p>(a = b) is not true.</p> </dd> <dt>&lt; &gt;</dt> <dd> <p>Checks whether the values of two operands are equal; if the values are not equal, then the condition becomes true.</p> <p>Example: (a &lt; &gt; b) is true.</p> </dd> <dt>&gt;</dt> <dd> <p>Checks whether the value of the left operand is greater than the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &gt; b) is not true.</p> </dd> <dt>&lt;</dt> <dd> <p>Checks whether the value of the left operand is less than the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &lt; b) is true.</p> </dd> <dt>&gt;=</dt> <dd> <p>Checks whether the value of the left operand is greater than or equal to the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &gt;= b) is not true.</p> </dd> <dt>&lt;=</dt> <dd> <p>Checks whether the value of the left operand is less than or equal to the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &lt;= b) is true.</p> </dd> <dt>AND, OR, IN, BETWEEN, LIKE, NOT, IS NULL</dt> <dd> <p>Logical operators.</p> </dd> </dl> <p> <i>Supported Partition Key Types</i>: The following are the supported partition keys.</p> <ul> <li> <p> <code>string</code> </p> </li> <li> <p> <code>date</code> </p> </li> <li> <p> <code>timestamp</code> </p> </li> <li> <p> <code>int</code> </p> </li> <li> <p> <code>bigint</code> </p> </li> <li> <p> <code>long</code> </p> </li> <li> <p> <code>tinyint</code> </p> </li> <li> <p> <code>smallint</code> </p> </li> <li> <p> <code>decimal</code> </p> </li> </ul> <p>If an invalid type is encountered, an exception is thrown. </p> <p>The following list shows the valid operators on each type. When you define a crawler, the <code>partitionKey</code> type is created as a <code>STRING</code>, to be compatible with the catalog partitions. </p> <p> <i>Sample API Call</i>: </p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of partitions to return in a single response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if this is not the first call to retrieve these partitions."
            }
          ]
        },
        "Segment": {
          "allOf": [
            {
              "$ref": "#/definitions/Segment"
            },
            {
              "description": "The segment of the table's partitions to scan in this request."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partitions' table."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "title": "GetPartitionsRequest",
      "type": "object"
    },
    "GetPartitionsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if the returned list of partitions does not include the last one."
            }
          ]
        },
        "Partitions": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionList"
            },
            {
              "description": "A list of requested partitions."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetPlanRequest": {
      "properties": {
        "AdditionalPlanOptionsMap": {
          "allOf": [
            {
              "$ref": "#/definitions/AdditionalPlanOptionsMap"
            },
            {
              "description": "<p>A map to hold additional optional key-value parameters.</p> <p>Currently, these key-value pairs are supported:</p> <ul> <li> <p> <code>inferSchema</code>  —  Specifies whether to set <code>inferSchema</code> to true or false for the default script generated by an AWS Glue job. For example, to set <code>inferSchema</code> to true, pass the following key value pair:</p> <p> <code>--additional-plan-options-map '{\"inferSchema\":\"true\"}'</code> </p> </li> </ul>"
            }
          ]
        },
        "Language": {
          "allOf": [
            {
              "$ref": "#/definitions/Language"
            },
            {
              "description": "The programming language of the code to perform the mapping."
            }
          ]
        },
        "Location": {
          "allOf": [
            {
              "$ref": "#/definitions/Location"
            },
            {
              "description": "The parameters for the mapping."
            }
          ]
        },
        "Mapping": {
          "allOf": [
            {
              "$ref": "#/definitions/MappingList"
            },
            {
              "description": "The list of mappings from a source table to target tables."
            }
          ]
        },
        "Sinks": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogEntries"
            },
            {
              "description": "The target tables."
            }
          ]
        },
        "Source": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogEntry"
            },
            {
              "description": "The source table."
            }
          ]
        }
      },
      "required": [
        "Mapping",
        "Source"
      ],
      "title": "GetPlanRequest",
      "type": "object"
    },
    "GetPlanResponse": {
      "properties": {
        "PythonScript": {
          "allOf": [
            {
              "$ref": "#/definitions/PythonScript"
            },
            {
              "description": "A Python script to perform the mapping."
            }
          ]
        },
        "ScalaCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalaCode"
            },
            {
              "description": "The Scala code to perform the mapping."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetRegistryInput": {
      "properties": {
        "RegistryId": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryId"
            },
            {
              "description": "This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN)."
            }
          ]
        }
      },
      "required": [
        "RegistryId"
      ],
      "title": "GetRegistryInput",
      "type": "object"
    },
    "GetRegistryResponse": {
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedTimestamp"
            },
            {
              "description": "The date and time the registry was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the registry."
            }
          ]
        },
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryStatus"
            },
            {
              "description": "The status of the registry."
            }
          ]
        },
        "UpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdatedTimestamp"
            },
            {
              "description": "The date and time the registry was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetResourcePoliciesRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of a list to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if this is a continuation request."
            }
          ]
        }
      },
      "title": "GetResourcePoliciesRequest",
      "type": "object"
    },
    "GetResourcePoliciesResponse": {
      "properties": {
        "GetResourcePoliciesResponseList": {
          "allOf": [
            {
              "$ref": "#/definitions/GetResourcePoliciesResponseList"
            },
            {
              "description": "A list of the individual resource policies and the account-level resource policy."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if the returned list does not contain the last resource policy available."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetResourcePoliciesResponseList": {
      "items": {
        "$ref": "#/definitions/GluePolicy"
      },
      "type": "array"
    },
    "GetResourcePolicyRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The ARN of the AWS Glue resource for the resource policy to be retrieved. For more information about AWS Glue resource ARNs, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html#aws-glue-api-regex-aws-glue-arn-id\">AWS Glue ARN string pattern</a> "
            }
          ]
        }
      },
      "title": "GetResourcePolicyRequest",
      "type": "object"
    },
    "GetResourcePolicyResponse": {
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time at which the policy was created."
            }
          ]
        },
        "PolicyHash": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "Contains the hash value associated with this policy."
            }
          ]
        },
        "PolicyInJson": {
          "allOf": [
            {
              "$ref": "#/definitions/PolicyJsonString"
            },
            {
              "description": "Contains the requested policy document, in JSON format."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time at which the policy was last updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetSchemaByDefinitionInput": {
      "properties": {
        "SchemaDefinition": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaDefinitionString"
            },
            {
              "description": "The definition of the schema for which schema details are required."
            }
          ]
        },
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "SchemaId",
        "SchemaDefinition"
      ],
      "title": "GetSchemaByDefinitionInput",
      "type": "object"
    },
    "GetSchemaByDefinitionResponse": {
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedTimestamp"
            },
            {
              "description": "The date and time the schema was created."
            }
          ]
        },
        "DataFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DataFormat"
            },
            {
              "description": "The data format of the schema definition. Currently only <code>AVRO</code> is supported."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The schema ID of the schema version."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionStatus"
            },
            {
              "description": "The status of the schema version."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetSchemaInput": {
      "properties": {
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "SchemaId"
      ],
      "title": "GetSchemaInput",
      "type": "object"
    },
    "GetSchemaResponse": {
      "properties": {
        "Compatibility": {
          "allOf": [
            {
              "$ref": "#/definitions/Compatibility"
            },
            {
              "description": "The compatibility mode of the schema."
            }
          ]
        },
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedTimestamp"
            },
            {
              "description": "The date and time the schema was created."
            }
          ]
        },
        "DataFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DataFormat"
            },
            {
              "description": "The data format of the schema definition. Currently only <code>AVRO</code> is supported."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of schema if specified when created"
            }
          ]
        },
        "LatestSchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The latest version of the schema associated with the returned schema definition."
            }
          ]
        },
        "NextSchemaVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The next version of the schema associated with the returned schema definition."
            }
          ]
        },
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema."
            }
          ]
        },
        "SchemaCheckpoint": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaCheckpointNumber"
            },
            {
              "description": "The version number of the checkpoint (the last time the compatibility mode was changed)."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "SchemaStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaStatus"
            },
            {
              "description": "The status of the schema."
            }
          ]
        },
        "UpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdatedTimestamp"
            },
            {
              "description": "The date and time the schema was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetSchemaVersionInput": {
      "properties": {
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> </ul>"
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The <code>SchemaVersionId</code> of the schema version. This field is required for fetching by schema ID. Either this or the <code>SchemaId</code> wrapper has to be provided."
            }
          ]
        },
        "SchemaVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "title": "GetSchemaVersionInput",
      "type": "object"
    },
    "GetSchemaVersionResponse": {
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedTimestamp"
            },
            {
              "description": "The date and time the schema version was created."
            }
          ]
        },
        "DataFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DataFormat"
            },
            {
              "description": "The data format of the schema definition. Currently only <code>AVRO</code> is supported."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema."
            }
          ]
        },
        "SchemaDefinition": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaDefinitionString"
            },
            {
              "description": "The schema definition for the schema ID."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The <code>SchemaVersionId</code> of the schema version."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionStatus"
            },
            {
              "description": "The status of the schema version. "
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetSchemaVersionsDiffInput": {
      "properties": {
        "FirstSchemaVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionNumber"
            },
            {
              "description": "The first of the two schema versions to be compared."
            }
          ]
        },
        "SchemaDiffType": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaDiffType"
            },
            {
              "description": "Refers to <code>SYNTAX_DIFF</code>, which is the currently supported diff type."
            }
          ]
        },
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> </ul>"
            }
          ]
        },
        "SecondSchemaVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionNumber"
            },
            {
              "description": "The second of the two schema versions to be compared."
            }
          ]
        }
      },
      "required": [
        "SchemaId",
        "FirstSchemaVersionNumber",
        "SecondSchemaVersionNumber",
        "SchemaDiffType"
      ],
      "title": "GetSchemaVersionsDiffInput",
      "type": "object"
    },
    "GetSchemaVersionsDiffResponse": {
      "properties": {
        "Diff": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaDefinitionDiff"
            },
            {
              "description": "The difference between schemas as a string in JsonPatch format."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetSecurityConfigurationRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the security configuration to retrieve."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetSecurityConfigurationRequest",
      "type": "object"
    },
    "GetSecurityConfigurationResponse": {
      "properties": {
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityConfiguration"
            },
            {
              "description": "The requested security configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetSecurityConfigurationsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of results to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        }
      },
      "title": "GetSecurityConfigurationsRequest",
      "type": "object"
    },
    "GetSecurityConfigurationsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if there are more security configurations to return."
            }
          ]
        },
        "SecurityConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityConfigurationList"
            },
            {
              "description": "A list of security configurations."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetTableRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the table resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table for which to retrieve the definition. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "Name"
      ],
      "title": "GetTableRequest",
      "type": "object"
    },
    "GetTableResponse": {
      "properties": {
        "Table": {
          "allOf": [
            {
              "$ref": "#/definitions/Table"
            },
            {
              "description": "The <code>Table</code> object that defines the specified table."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetTableVersionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the tables reside. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "VersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionString"
            },
            {
              "description": "The ID value of the table version to be retrieved. A <code>VersionID</code> is a string representation of an integer. Each version is incremented by 1. "
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "title": "GetTableVersionRequest",
      "type": "object"
    },
    "GetTableVersionResponse": {
      "properties": {
        "TableVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/TableVersion"
            },
            {
              "description": "The requested table version."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetTableVersionsList": {
      "items": {
        "$ref": "#/definitions/TableVersion"
      },
      "type": "array"
    },
    "GetTableVersionsRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the tables reside. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of table versions to return in one response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if this is not the first call."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "title": "GetTableVersionsRequest",
      "type": "object"
    },
    "GetTableVersionsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if the list of available versions does not include the last one."
            }
          ]
        },
        "TableVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/GetTableVersionsList"
            },
            {
              "description": "A list of strings identifying available versions of the specified table."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetTablesRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the tables reside. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "Expression": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterString"
            },
            {
              "description": "A regular expression pattern. If present, only those tables whose names match the pattern are returned."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of tables to return in a single response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, included if this is a continuation call."
            }
          ]
        }
      },
      "required": [
        "DatabaseName"
      ],
      "title": "GetTablesRequest",
      "type": "object"
    },
    "GetTablesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, present if the current list segment is not the last."
            }
          ]
        },
        "TableList": {
          "allOf": [
            {
              "$ref": "#/definitions/TableList"
            },
            {
              "description": "A list of the requested <code>Table</code> objects."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetTagsRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource for which to retrieve tags."
            }
          ]
        }
      },
      "required": [
        "ResourceArn"
      ],
      "title": "GetTagsRequest",
      "type": "object"
    },
    "GetTagsResponse": {
      "properties": {
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "The requested tags."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetTriggerRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger to retrieve."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetTriggerRequest",
      "type": "object"
    },
    "GetTriggerResponse": {
      "properties": {
        "Trigger": {
          "allOf": [
            {
              "$ref": "#/definitions/Trigger"
            },
            {
              "description": "The requested trigger definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetTriggersRequest": {
      "properties": {
        "DependentJobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job to retrieve triggers for. The trigger that can start this job is returned, and if there is no such trigger, all triggers are returned."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of the response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        }
      },
      "title": "GetTriggersRequest",
      "type": "object"
    },
    "GetTriggersResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if not all the requested triggers have yet been returned."
            }
          ]
        },
        "Triggers": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerList"
            },
            {
              "description": "A list of triggers for the specified job."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetUserDefinedFunctionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the function to be retrieved is located. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the function is located."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the function."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "FunctionName"
      ],
      "title": "GetUserDefinedFunctionRequest",
      "type": "object"
    },
    "GetUserDefinedFunctionResponse": {
      "properties": {
        "UserDefinedFunction": {
          "allOf": [
            {
              "$ref": "#/definitions/UserDefinedFunction"
            },
            {
              "description": "The requested function definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetUserDefinedFunctionsRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the functions to be retrieved are located. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the functions are located. If none is provided, functions from all the databases across the catalog will be returned."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of functions to return in one response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        },
        "Pattern": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "An optional function-name pattern string that filters the function definitions returned."
            }
          ]
        }
      },
      "required": [
        "Pattern"
      ],
      "title": "GetUserDefinedFunctionsRequest",
      "type": "object"
    },
    "GetUserDefinedFunctionsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if the list of functions returned does not include the last requested function."
            }
          ]
        },
        "UserDefinedFunctions": {
          "allOf": [
            {
              "$ref": "#/definitions/UserDefinedFunctionList"
            },
            {
              "description": "A list of requested function definitions."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetWorkflowRequest": {
      "properties": {
        "IncludeGraph": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Specifies whether to include a graph when returning the workflow resource metadata."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the workflow to retrieve."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetWorkflowRequest",
      "type": "object"
    },
    "GetWorkflowResponse": {
      "properties": {
        "Workflow": {
          "allOf": [
            {
              "$ref": "#/definitions/Workflow"
            },
            {
              "description": "The resource metadata for the workflow."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetWorkflowRunPropertiesRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the workflow which was run."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of the workflow run whose run properties should be returned."
            }
          ]
        }
      },
      "required": [
        "Name",
        "RunId"
      ],
      "title": "GetWorkflowRunPropertiesRequest",
      "type": "object"
    },
    "GetWorkflowRunPropertiesResponse": {
      "properties": {
        "RunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRunProperties"
            },
            {
              "description": "The workflow run properties which were set during the specified run."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetWorkflowRunRequest": {
      "properties": {
        "IncludeGraph": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Specifies whether to include the workflow graph in response or not."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the workflow being run."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of the workflow run."
            }
          ]
        }
      },
      "required": [
        "Name",
        "RunId"
      ],
      "title": "GetWorkflowRunRequest",
      "type": "object"
    },
    "GetWorkflowRunResponse": {
      "properties": {
        "Run": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRun"
            },
            {
              "description": "The requested workflow run metadata."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetWorkflowRunsRequest": {
      "properties": {
        "IncludeGraph": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Specifies whether to include the workflow graph in response or not."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of workflow runs to be included in the response."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the workflow whose metadata of runs should be returned."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The maximum size of the response."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "GetWorkflowRunsRequest",
      "type": "object"
    },
    "GetWorkflowRunsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if not all requested workflow runs have been returned."
            }
          ]
        },
        "Runs": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRuns"
            },
            {
              "description": "A list of workflow run metadata objects."
            }
          ]
        }
      },
      "type": "object"
    },
    "GlueEncryptionException": {},
    "GluePolicy": {
      "description": "A structure for returning a resource policy.",
      "properties": {
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time at which the policy was created."
            }
          ]
        },
        "PolicyHash": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "Contains the hash value associated with this policy."
            }
          ]
        },
        "PolicyInJson": {
          "allOf": [
            {
              "$ref": "#/definitions/PolicyJsonString"
            },
            {
              "description": "Contains the requested policy document, in JSON format."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time at which the policy was last updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "GlueResourceArn": {
      "maxLength": 10240,
      "minLength": 1,
      "pattern": "arn:aws:glue:.*",
      "type": "string"
    },
    "GlueTable": {
      "description": "The database and table in the AWS Glue Data Catalog that is used for input or output data.",
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "A unique identifier for the AWS Glue Data Catalog."
            }
          ]
        },
        "ConnectionName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the connection to the AWS Glue Data Catalog."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "A database name in the AWS Glue Data Catalog."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "A table name in the AWS Glue Data Catalog."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName"
      ],
      "type": "object"
    },
    "GlueTables": {
      "items": {
        "$ref": "#/definitions/GlueTable"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "GlueVersionString": {
      "maxLength": 255,
      "minLength": 1,
      "pattern": "^\\w+\\.\\w+$",
      "type": "string"
    },
    "GrokClassifier": {
      "description": "A classifier that uses <code>grok</code> patterns.",
      "properties": {
        "Classification": {
          "allOf": [
            {
              "$ref": "#/definitions/Classification"
            },
            {
              "description": "An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and so on."
            }
          ]
        },
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this classifier was registered."
            }
          ]
        },
        "CustomPatterns": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomPatterns"
            },
            {
              "description": "Optional custom grok patterns defined by this classifier. For more information, see custom patterns in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifiers</a>."
            }
          ]
        },
        "GrokPattern": {
          "allOf": [
            {
              "$ref": "#/definitions/GrokPattern"
            },
            {
              "description": "The grok pattern applied to a data store by this classifier. For more information, see built-in patterns in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html\">Writing Custom Classifiers</a>."
            }
          ]
        },
        "LastUpdated": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this classifier was last updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionId"
            },
            {
              "description": "The version of this classifier."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Classification",
        "GrokPattern"
      ],
      "type": "object"
    },
    "GrokPattern": {
      "maxLength": 2048,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\t]*"
    },
    "HashString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "IdString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "IdempotentParameterMismatchException": {},
    "IllegalWorkflowStateException": {},
    "ImportCatalogToGlueRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the catalog to import. Currently, this should be the AWS account ID."
            }
          ]
        }
      },
      "title": "ImportCatalogToGlueRequest",
      "type": "object"
    },
    "ImportCatalogToGlueResponse": {
      "properties": {},
      "type": "object"
    },
    "ImportLabelsTaskRunProperties": {
      "description": "Specifies configuration properties for an importing labels task run.",
      "properties": {
        "InputS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/UriString"
            },
            {
              "description": "The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels."
            }
          ]
        },
        "Replace": {
          "allOf": [
            {
              "$ref": "#/definitions/ReplaceBoolean"
            },
            {
              "description": "Indicates whether to overwrite your existing labels."
            }
          ]
        }
      },
      "type": "object"
    },
    "Integer": {
      "type": "integer"
    },
    "IntegerFlag": {
      "maximum": 1,
      "minimum": 0,
      "type": "integer"
    },
    "IntegerValue": {
      "type": "integer"
    },
    "InternalServiceException": {},
    "InvalidInputException": {},
    "IsVersionValid": {
      "type": "boolean"
    },
    "JdbcTarget": {
      "description": "Specifies a JDBC data store to crawl.",
      "properties": {
        "ConnectionName": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionName"
            },
            {
              "description": "The name of the connection to use to connect to the JDBC target."
            }
          ]
        },
        "Exclusions": {
          "allOf": [
            {
              "$ref": "#/definitions/PathList"
            },
            {
              "description": "A list of glob patterns used to exclude from the crawl. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>."
            }
          ]
        },
        "Path": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The path of the JDBC target."
            }
          ]
        }
      },
      "type": "object"
    },
    "JdbcTargetList": {
      "items": {
        "$ref": "#/definitions/JdbcTarget"
      },
      "type": "array"
    },
    "Job": {
      "description": "Specifies a job definition.",
      "properties": {
        "AllocatedCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "<p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of AWS Glue data processing units (DPUs) allocated to runs of this job. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p> <p/>This property is deprecated, use MaxCapacity instead.",
              "x-deprecated": true
            }
          ]
        },
        "Command": {
          "allOf": [
            {
              "$ref": "#/definitions/JobCommand"
            },
            {
              "description": "The <code>JobCommand</code> that executes this job."
            }
          ]
        },
        "Connections": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionsList"
            },
            {
              "description": "The connections used for this job."
            }
          ]
        },
        "CreatedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The time and date that this job definition was created."
            }
          ]
        },
        "DefaultArguments": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericMap"
            },
            {
              "description": "<p>The default arguments for this job, specified as name-value pairs.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>"
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the job."
            }
          ]
        },
        "ExecutionProperty": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionProperty"
            },
            {
              "description": "An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed for this job."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "<p>Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for jobs of type Spark. </p> <p>For more information about the available AWS Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>"
            }
          ]
        },
        "LastModifiedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The last point in time when this job definition was modified."
            }
          ]
        },
        "LogUri": {
          "allOf": [
            {
              "$ref": "#/definitions/UriString"
            },
            {
              "description": "This field is reserved for future use."
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job, an Apache Spark ETL job, or an Apache Spark streaming ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\") or Apache Spark streaming ETL job (<code>JobCommand.Name</code>=\"gluestreaming\"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul>"
            }
          ]
        },
        "MaxRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxRetries"
            },
            {
              "description": "The maximum number of times to retry this job after a JobRun fails."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name you assign to this job definition."
            }
          ]
        },
        "NonOverridableArguments": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericMap"
            },
            {
              "description": "Non-overridable arguments for this job, specified as name-value pairs."
            }
          ]
        },
        "NotificationProperty": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationProperty"
            },
            {
              "description": "Specifies configuration properties of a job notification."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p> <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>"
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleString"
            },
            {
              "description": "The name or Amazon Resource Name (ARN) of the IAM role associated with this job."
            }
          ]
        },
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used with this job."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours)."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "JobBookmarkEntry": {
      "description": "Defines a point that a job can resume processing.",
      "properties": {
        "Attempt": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "The attempt ID number."
            }
          ]
        },
        "JobBookmark": {
          "allOf": [
            {
              "$ref": "#/definitions/JsonValue"
            },
            {
              "description": "The bookmark itself."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name of the job in question."
            }
          ]
        },
        "PreviousRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/RunId"
            },
            {
              "description": "The unique run identifier associated with the previous job run."
            }
          ]
        },
        "Run": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "The run ID number."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/RunId"
            },
            {
              "description": "The run ID number."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "The version of the job."
            }
          ]
        }
      },
      "type": "object"
    },
    "JobBookmarksEncryption": {
      "description": "Specifies how job bookmark data should be encrypted.",
      "properties": {
        "JobBookmarksEncryptionMode": {
          "allOf": [
            {
              "$ref": "#/definitions/JobBookmarksEncryptionMode"
            },
            {
              "description": "The encryption mode to use for job bookmarks data."
            }
          ]
        },
        "KmsKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data."
            }
          ]
        }
      },
      "type": "object"
    },
    "JobBookmarksEncryptionMode": {
      "enum": [
        "DISABLED",
        "CSE-KMS"
      ],
      "type": "string"
    },
    "JobCommand": {
      "description": "Specifies code executed when a job is run.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The name of the job command. For an Apache Spark ETL job, this must be <code>glueetl</code>. For a Python shell job, it must be <code>pythonshell</code>. For an Apache Spark streaming ETL job, this must be <code>gluestreaming</code>."
            }
          ]
        },
        "PythonVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/PythonVersionString"
            },
            {
              "description": "The Python version being used to execute a Python shell job. Allowed values are 2 or 3."
            }
          ]
        },
        "ScriptLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/ScriptLocationString"
            },
            {
              "description": "Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job."
            }
          ]
        }
      },
      "type": "object"
    },
    "JobList": {
      "items": {
        "$ref": "#/definitions/Job"
      },
      "type": "array"
    },
    "JobName": {
      "type": "string"
    },
    "JobNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "type": "array"
    },
    "JobNodeDetails": {
      "description": "The details of a Job node present in the workflow.",
      "properties": {
        "JobRuns": {
          "allOf": [
            {
              "$ref": "#/definitions/JobRunList"
            },
            {
              "description": "The information for the job runs represented by the job node."
            }
          ]
        }
      },
      "type": "object"
    },
    "JobRun": {
      "description": "Contains information about a job run.",
      "properties": {
        "AllocatedCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "<p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p>This property is deprecated, use MaxCapacity instead.",
              "x-deprecated": true
            }
          ]
        },
        "Arguments": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericMap"
            },
            {
              "description": "<p>The job arguments associated with this run. For this job run, they replace the default arguments set in the job definition itself.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>"
            }
          ]
        },
        "Attempt": {
          "allOf": [
            {
              "$ref": "#/definitions/AttemptCount"
            },
            {
              "description": "The number of the attempt to run this job."
            }
          ]
        },
        "CompletedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The date and time that this job run completed."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorString"
            },
            {
              "description": "An error message associated with this job run."
            }
          ]
        },
        "ExecutionTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionTime"
            },
            {
              "description": "The amount of time (in seconds) that the job run consumed resources."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "<p>Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for jobs of type Spark. </p> <p>For more information about the available AWS Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p> <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>"
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of this job run."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition being used in this run."
            }
          ]
        },
        "JobRunState": {
          "allOf": [
            {
              "$ref": "#/definitions/JobRunState"
            },
            {
              "description": "The current state of the job run. For more information about the statuses of jobs that have terminated abnormally, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/job-run-statuses.html\">AWS Glue Job Run Statuses</a>."
            }
          ]
        },
        "LastModifiedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The last time that this job run was modified."
            }
          ]
        },
        "LogGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The name of the log group for secure logging that can be server-side encrypted in Amazon CloudWatch using AWS KMS. This name can be <code>/aws-glue/jobs/</code>, in which case the default encryption is <code>NONE</code>. If you add a role name and <code>SecurityConfiguration</code> name (in other words, <code>/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/</code>), then that security configuration is used to encrypt the log group."
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job or an Apache Spark ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul>"
            }
          ]
        },
        "NotificationProperty": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationProperty"
            },
            {
              "description": "Specifies configuration properties of a job run notification."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p> <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>"
            }
          ]
        },
        "PredecessorRuns": {
          "allOf": [
            {
              "$ref": "#/definitions/PredecessorList"
            },
            {
              "description": "A list of predecessors to this job run."
            }
          ]
        },
        "PreviousRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of the previous run of this job. For example, the <code>JobRunId</code> specified in the <code>StartJobRun</code> action."
            }
          ]
        },
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used with this job run."
            }
          ]
        },
        "StartedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The date and time at which this job run was started."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job."
            }
          ]
        },
        "TriggerName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger that started this job run."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "JobRunList": {
      "items": {
        "$ref": "#/definitions/JobRun"
      },
      "type": "array"
    },
    "JobRunState": {
      "enum": [
        "STARTING",
        "RUNNING",
        "STOPPING",
        "STOPPED",
        "SUCCEEDED",
        "FAILED",
        "TIMEOUT"
      ],
      "type": "string"
    },
    "JobUpdate": {
      "description": "Specifies information used to update an existing job definition. The previous job definition is completely overwritten by this information.",
      "properties": {
        "AllocatedCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "<p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of AWS Glue data processing units (DPUs) to allocate to this job. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p>This property is deprecated, use MaxCapacity instead.",
              "x-deprecated": true
            }
          ]
        },
        "Command": {
          "allOf": [
            {
              "$ref": "#/definitions/JobCommand"
            },
            {
              "description": "The <code>JobCommand</code> that executes this job (required)."
            }
          ]
        },
        "Connections": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionsList"
            },
            {
              "description": "The connections used for this job."
            }
          ]
        },
        "DefaultArguments": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericMap"
            },
            {
              "description": "<p>The default arguments for this job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>"
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "Description of the job being defined."
            }
          ]
        },
        "ExecutionProperty": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionProperty"
            },
            {
              "description": "An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed for this job."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "<p>Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for jobs of type Spark. </p> <p>For more information about the available AWS Glue versions and corresponding Spark and Python versions, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job.html\">Glue version</a> in the developer guide.</p>"
            }
          ]
        },
        "LogUri": {
          "allOf": [
            {
              "$ref": "#/definitions/UriString"
            },
            {
              "description": "This field is reserved for future use."
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job or an Apache Spark ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\") or Apache Spark streaming ETL job (<code>JobCommand.Name</code>=\"gluestreaming\"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul>"
            }
          ]
        },
        "MaxRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxRetries"
            },
            {
              "description": "The maximum number of times to retry this job if it fails."
            }
          ]
        },
        "NonOverridableArguments": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericMap"
            },
            {
              "description": "Non-overridable arguments for this job, specified as name-value pairs."
            }
          ]
        },
        "NotificationProperty": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationProperty"
            },
            {
              "description": "Specifies the configuration properties of a job notification."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p> <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>"
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleString"
            },
            {
              "description": "The name or Amazon Resource Name (ARN) of the IAM role associated with this job (required)."
            }
          ]
        },
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used with this job."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours)."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "JsonClassifier": {
      "description": "A classifier for <code>JSON</code> content.",
      "properties": {
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this classifier was registered."
            }
          ]
        },
        "JsonPath": {
          "allOf": [
            {
              "$ref": "#/definitions/JsonPath"
            },
            {
              "description": "A <code>JsonPath</code> string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>."
            }
          ]
        },
        "LastUpdated": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this classifier was last updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionId"
            },
            {
              "description": "The version of this classifier."
            }
          ]
        }
      },
      "required": [
        "Name",
        "JsonPath"
      ],
      "type": "object"
    },
    "JsonPath": {
      "type": "string"
    },
    "JsonValue": {
      "type": "string"
    },
    "KeyList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "minItems": 1,
      "type": "array"
    },
    "KeySchemaElement": {
      "description": "A partition key pair consisting of a name and a type.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of a partition key."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnTypeString"
            },
            {
              "description": "The type of a partition key."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Type"
      ],
      "type": "object"
    },
    "KeySchemaElementList": {
      "items": {
        "$ref": "#/definitions/KeySchemaElement"
      },
      "minItems": 1,
      "type": "array"
    },
    "KeyString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "KmsKeyArn": {
      "pattern": "arn:aws:kms:.*",
      "type": "string"
    },
    "LabelCount": {
      "type": "integer"
    },
    "LabelingSetGenerationTaskRunProperties": {
      "description": "Specifies configuration properties for a labeling set generation task run.",
      "properties": {
        "OutputS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/UriString"
            },
            {
              "description": "The Amazon Simple Storage Service (Amazon S3) path where you will generate the labeling set."
            }
          ]
        }
      },
      "type": "object"
    },
    "Language": {
      "enum": [
        "PYTHON",
        "SCALA"
      ],
      "type": "string"
    },
    "LastCrawlInfo": {
      "description": "Status and error information about the most recent crawl.",
      "properties": {
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "If an error occurred, the error information about the last crawl."
            }
          ]
        },
        "LogGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/LogGroup"
            },
            {
              "description": "The log group for the last crawl."
            }
          ]
        },
        "LogStream": {
          "allOf": [
            {
              "$ref": "#/definitions/LogStream"
            },
            {
              "description": "The log stream for the last crawl."
            }
          ]
        },
        "MessagePrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/MessagePrefix"
            },
            {
              "description": "The prefix for a message about this crawl."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time at which the crawl started."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/LastCrawlStatus"
            },
            {
              "description": "Status of the last crawl."
            }
          ]
        }
      },
      "type": "object"
    },
    "LastCrawlStatus": {
      "enum": [
        "SUCCEEDED",
        "CANCELLED",
        "FAILED"
      ],
      "type": "string"
    },
    "LatestSchemaVersionBoolean": {
      "type": "boolean"
    },
    "LineageConfiguration": {
      "description": "Specifies data lineage configuration settings for the crawler.",
      "properties": {
        "CrawlerLineageSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerLineageSettings"
            },
            {
              "description": "<p>Specifies whether data lineage is enabled for the crawler. Valid values are:</p> <ul> <li> <p>ENABLE: enables data lineage for the crawler</p> </li> <li> <p>DISABLE: disables data lineage for the crawler</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "ListCrawlersRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of a list to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if this is a continuation request."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "Specifies to return only these tagged resources."
            }
          ]
        }
      },
      "title": "ListCrawlersRequest",
      "type": "object"
    },
    "ListCrawlersResponse": {
      "properties": {
        "CrawlerNames": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerNameList"
            },
            {
              "description": "The names of all crawlers in the account, or the crawlers with the specified tags."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, if the returned list does not contain the last metric available."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDevEndpointsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of a list to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if this is a continuation request."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "Specifies to return only these tagged resources."
            }
          ]
        }
      },
      "title": "ListDevEndpointsRequest",
      "type": "object"
    },
    "ListDevEndpointsResponse": {
      "properties": {
        "DevEndpointNames": {
          "allOf": [
            {
              "$ref": "#/definitions/DevEndpointNameList"
            },
            {
              "description": "The names of all the <code>DevEndpoint</code>s in the account, or the <code>DevEndpoint</code>s with the specified tags."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if the returned list does not contain the last metric available."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListJobsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of a list to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if this is a continuation request."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "Specifies to return only these tagged resources."
            }
          ]
        }
      },
      "title": "ListJobsRequest",
      "type": "object"
    },
    "ListJobsResponse": {
      "properties": {
        "JobNames": {
          "allOf": [
            {
              "$ref": "#/definitions/JobNameList"
            },
            {
              "description": "The names of all jobs in the account, or the jobs with the specified tags."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if the returned list does not contain the last metric available."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListMLTransformsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformFilterCriteria"
            },
            {
              "description": "A <code>TransformFilterCriteria</code> used to filter the machine learning transforms."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of a list to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "A continuation token, if this is a continuation request."
            }
          ]
        },
        "Sort": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformSortCriteria"
            },
            {
              "description": "A <code>TransformSortCriteria</code> used to sort the machine learning transforms."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "Specifies to return only these tagged resources."
            }
          ]
        }
      },
      "title": "ListMLTransformsRequest",
      "type": "object"
    },
    "ListMLTransformsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/PaginationToken"
            },
            {
              "description": "A continuation token, if the returned list does not contain the last metric available."
            }
          ]
        },
        "TransformIds": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformIdList"
            },
            {
              "description": "The identifiers of all the machine learning transforms in the account, or the machine learning transforms with the specified tags."
            }
          ]
        }
      },
      "required": [
        "TransformIds"
      ],
      "type": "object"
    },
    "ListRegistriesInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsNumber"
            },
            {
              "description": "Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryTokenString"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        }
      },
      "title": "ListRegistriesInput",
      "type": "object"
    },
    "ListRegistriesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryTokenString"
            },
            {
              "description": "A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last."
            }
          ]
        },
        "Registries": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryListDefinition"
            },
            {
              "description": "An array of <code>RegistryDetailedListItem</code> objects containing minimal details of each registry."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListSchemaVersionsInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsNumber"
            },
            {
              "description": "Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryTokenString"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        },
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "SchemaId"
      ],
      "title": "ListSchemaVersionsInput",
      "type": "object"
    },
    "ListSchemaVersionsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryTokenString"
            },
            {
              "description": "A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last."
            }
          ]
        },
        "Schemas": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionList"
            },
            {
              "description": "An array of <code>SchemaVersionList</code> objects containing details of each schema version."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListSchemasInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsNumber"
            },
            {
              "description": "Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryTokenString"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        },
        "RegistryId": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryId"
            },
            {
              "description": "A wrapper structure that may contain the registry name and Amazon Resource Name (ARN)."
            }
          ]
        }
      },
      "title": "ListSchemasInput",
      "type": "object"
    },
    "ListSchemasResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryTokenString"
            },
            {
              "description": "A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last."
            }
          ]
        },
        "Schemas": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaListDefinition"
            },
            {
              "description": "An array of <code>SchemaListItem</code> objects containing details of each schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTriggersRequest": {
      "properties": {
        "DependentJobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": " The name of the job for which to retrieve triggers. The trigger that can start this job is returned. If there is no such trigger, all triggers are returned."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of a list to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if this is a continuation request."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "Specifies to return only these tagged resources."
            }
          ]
        }
      },
      "title": "ListTriggersRequest",
      "type": "object"
    },
    "ListTriggersResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if the returned list does not contain the last metric available."
            }
          ]
        },
        "TriggerNames": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerNameList"
            },
            {
              "description": "The names of all triggers in the account, or the triggers with the specified tags."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListWorkflowsRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum size of a list to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if this is a continuation request."
            }
          ]
        }
      },
      "title": "ListWorkflowsRequest",
      "type": "object"
    },
    "ListWorkflowsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A continuation token, if not all workflow names have been returned."
            }
          ]
        },
        "Workflows": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowNames"
            },
            {
              "description": "List of names of workflows in the account."
            }
          ]
        }
      },
      "type": "object"
    },
    "Location": {
      "description": "The location of resources.",
      "properties": {
        "DynamoDB": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenNodeArgs"
            },
            {
              "description": "An Amazon DynamoDB table location."
            }
          ]
        },
        "Jdbc": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenNodeArgs"
            },
            {
              "description": "A JDBC location."
            }
          ]
        },
        "S3": {
          "allOf": [
            {
              "$ref": "#/definitions/CodeGenNodeArgs"
            },
            {
              "description": "An Amazon Simple Storage Service (Amazon S3) location."
            }
          ]
        }
      },
      "type": "object"
    },
    "LocationMap": {
      "additionalProperties": {
        "$ref": "#/definitions/ColumnValuesString"
      },
      "type": "object"
    },
    "LocationString": {
      "maxLength": 2056,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "LogGroup": {
      "maxLength": 512,
      "minLength": 1,
      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
      "type": "string"
    },
    "LogStream": {
      "maxLength": 512,
      "minLength": 1,
      "pattern": "[^:*]*",
      "type": "string"
    },
    "Logical": {
      "enum": [
        "AND",
        "ANY"
      ],
      "type": "string"
    },
    "LogicalOperator": {
      "enum": [
        "EQUALS"
      ],
      "type": "string"
    },
    "Long": {
      "type": "integer"
    },
    "LongColumnStatisticsData": {
      "description": "Defines column statistics supported for integer data columns.",
      "properties": {
        "MaximumValue": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The highest value in the column."
            }
          ]
        },
        "MinimumValue": {
          "allOf": [
            {
              "$ref": "#/definitions/Long"
            },
            {
              "description": "The lowest value in the column."
            }
          ]
        },
        "NumberOfDistinctValues": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of distinct values in a column."
            }
          ]
        },
        "NumberOfNulls": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of null values in the column."
            }
          ]
        }
      },
      "required": [
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "object"
    },
    "MLTransform": {
      "description": "A structure for a machine learning transform.",
      "properties": {
        "CreatedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "A timestamp. The time and date that this machine learning transform was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A user-defined, long-form description text for the machine learning transform. Descriptions are not guaranteed to be unique and can be changed at any time."
            }
          ]
        },
        "EvaluationMetrics": {
          "allOf": [
            {
              "$ref": "#/definitions/EvaluationMetrics"
            },
            {
              "description": "An <code>EvaluationMetrics</code> object. Evaluation metrics provide an estimate of the quality of your machine learning transform."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">AWS Glue Versions</a> in the developer guide."
            }
          ]
        },
        "InputRecordTables": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueTables"
            },
            {
              "description": "A list of AWS Glue table definitions used by the transform."
            }
          ]
        },
        "LabelCount": {
          "allOf": [
            {
              "$ref": "#/definitions/LabelCount"
            },
            {
              "description": "A count identifier for the labeling files generated by AWS Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file."
            }
          ]
        },
        "LastModifiedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "A timestamp. The last point in time when this machine learning transform was modified."
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"http://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>. </p> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>"
            }
          ]
        },
        "MaxRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "The maximum number of times to retry after an <code>MLTaskRun</code> of the machine learning transform fails."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "A user-defined name for the machine learning transform. Names are not guaranteed unique and can be changed at any time."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a task of the transform runs.</p> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>"
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformParameters"
            },
            {
              "description": "A <code>TransformParameters</code> object. You can use parameters to tune (customize) the behavior of the machine learning transform by specifying what data it learns from and your preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost)."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleString"
            },
            {
              "description": "<p>The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both AWS Glue service role permissions to AWS Glue resources, and Amazon S3 permissions required by the transform. </p> <ul> <li> <p>This role needs AWS Glue service role permissions to allow access to resources in AWS Glue. See <a href=\"https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html\">Attach a Policy to IAM Users That Access AWS Glue</a>.</p> </li> <li> <p>This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.</p> </li> </ul>"
            }
          ]
        },
        "Schema": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformSchema"
            },
            {
              "description": "A map of key-value pairs representing the columns and data types that this transform can run against. Has an upper bound of 100 columns."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformStatusType"
            },
            {
              "description": "The current status of the machine learning transform."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The timeout in minutes of the machine learning transform."
            }
          ]
        },
        "TransformEncryption": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformEncryption"
            },
            {
              "description": "The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique transform ID that is generated for the machine learning transform. The ID is guaranteed to be unique and does not change."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "MLTransformNotReadyException": {},
    "MLUserDataEncryption": {
      "description": "The encryption-at-rest settings of the transform that apply to accessing user data.",
      "properties": {
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The ID for the customer-provided KMS key."
            }
          ]
        },
        "MlUserDataEncryptionMode": {
          "allOf": [
            {
              "$ref": "#/definitions/MLUserDataEncryptionModeString"
            },
            {
              "description": "<p>The encryption mode applied to user data. Valid values are:</p> <ul> <li> <p>DISABLED: encryption is disabled</p> </li> <li> <p>SSEKMS: use of server-side encryption with AWS Key Management Service (SSE-KMS) for user data stored in Amazon S3.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "MlUserDataEncryptionMode"
      ],
      "type": "object"
    },
    "MLUserDataEncryptionModeString": {
      "enum": [
        "DISABLED",
        "SSE-KMS"
      ],
      "type": "string"
    },
    "MapValue": {
      "additionalProperties": {
        "$ref": "#/definitions/GenericString"
      },
      "maxProperties": 100,
      "minProperties": 0,
      "type": "object"
    },
    "MappingEntry": {
      "description": "Defines a mapping.",
      "properties": {
        "SourcePath": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaPathString"
            },
            {
              "description": "The source path."
            }
          ]
        },
        "SourceTable": {
          "allOf": [
            {
              "$ref": "#/definitions/TableName"
            },
            {
              "description": "The name of the source table."
            }
          ]
        },
        "SourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/FieldType"
            },
            {
              "description": "The source type."
            }
          ]
        },
        "TargetPath": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaPathString"
            },
            {
              "description": "The target path."
            }
          ]
        },
        "TargetTable": {
          "allOf": [
            {
              "$ref": "#/definitions/TableName"
            },
            {
              "description": "The target table."
            }
          ]
        },
        "TargetType": {
          "allOf": [
            {
              "$ref": "#/definitions/FieldType"
            },
            {
              "description": "The target type."
            }
          ]
        }
      },
      "type": "object"
    },
    "MappingList": {
      "items": {
        "$ref": "#/definitions/MappingEntry"
      },
      "type": "array"
    },
    "MatchCriteria": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 10,
      "minItems": 0,
      "type": "array"
    },
    "MaxConcurrentRuns": {
      "type": "integer"
    },
    "MaxResultsNumber": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "MaxRetries": {
      "type": "integer"
    },
    "MessagePrefix": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "MetadataInfo": {
      "description": "A structure containing metadata information for a schema version.",
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedTimestamp"
            },
            {
              "description": "The time at which the entry was created."
            }
          ]
        },
        "MetadataValue": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataValueString"
            },
            {
              "description": "The metadata key’s corresponding value."
            }
          ]
        }
      },
      "type": "object"
    },
    "MetadataInfoMap": {
      "additionalProperties": {
        "$ref": "#/definitions/MetadataInfo"
      },
      "type": "object"
    },
    "MetadataKeyString": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9+-=._./@]+",
      "type": "string"
    },
    "MetadataKeyValuePair": {
      "description": "A structure containing a key value pair for metadata.",
      "properties": {
        "MetadataKey": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataKeyString"
            },
            {
              "description": "A metadata key."
            }
          ]
        },
        "MetadataValue": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataValueString"
            },
            {
              "description": "A metadata key’s corresponding value."
            }
          ]
        }
      },
      "type": "object"
    },
    "MetadataList": {
      "items": {
        "$ref": "#/definitions/MetadataKeyValuePair"
      },
      "type": "array"
    },
    "MetadataValueString": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9+-=._./@]+",
      "type": "string"
    },
    "MillisecondsCount": {
      "type": "integer"
    },
    "MongoDBTarget": {
      "description": "Specifies an Amazon DocumentDB or MongoDB data store to crawl.",
      "properties": {
        "ConnectionName": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionName"
            },
            {
              "description": "The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target."
            }
          ]
        },
        "Path": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The path of the Amazon DocumentDB or MongoDB target (database/collection)."
            }
          ]
        },
        "ScanAll": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "<p>Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.</p> <p>A value of <code>true</code> means to scan all records, while a value of <code>false</code> means to sample the records. If no value is specified, the value defaults to <code>true</code>.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "MongoDBTargetList": {
      "items": {
        "$ref": "#/definitions/MongoDBTarget"
      },
      "type": "array"
    },
    "NameString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "NameStringList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "type": "array"
    },
    "NoScheduleException": {},
    "Node": {
      "description": "A node represents an AWS Glue component such as a trigger, or job, etc., that is part of a workflow.",
      "properties": {
        "CrawlerDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerNodeDetails"
            },
            {
              "description": "Details of the crawler when the node represents a crawler."
            }
          ]
        },
        "JobDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/JobNodeDetails"
            },
            {
              "description": "Details of the Job when the node represents a Job."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the AWS Glue component represented by the node."
            }
          ]
        },
        "TriggerDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerNodeDetails"
            },
            {
              "description": "Details of the Trigger when the node represents a Trigger."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/NodeType"
            },
            {
              "description": "The type of AWS Glue component represented by the node."
            }
          ]
        },
        "UniqueId": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The unique Id assigned to the node within the workflow."
            }
          ]
        }
      },
      "type": "object"
    },
    "NodeIdList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "type": "array"
    },
    "NodeList": {
      "items": {
        "$ref": "#/definitions/Node"
      },
      "type": "array"
    },
    "NodeType": {
      "enum": [
        "CRAWLER",
        "JOB",
        "TRIGGER"
      ],
      "type": "string"
    },
    "NonNegativeDouble": {
      "format": "double",
      "minimum": 0,
      "type": "number"
    },
    "NonNegativeInteger": {
      "minimum": 0,
      "type": "integer"
    },
    "NonNegativeLong": {
      "minimum": 0,
      "type": "integer"
    },
    "NotificationProperty": {
      "description": "Specifies configuration properties of a notification.",
      "properties": {
        "NotifyDelayAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/NotifyDelayAfter"
            },
            {
              "description": "After a job run starts, the number of minutes to wait before sending a job run delay notification."
            }
          ]
        }
      },
      "type": "object"
    },
    "NotifyDelayAfter": {
      "minimum": 1,
      "type": "integer"
    },
    "NullableBoolean": {
      "type": "boolean"
    },
    "NullableDouble": {
      "format": "double",
      "type": "number"
    },
    "NullableInteger": {
      "type": "integer"
    },
    "OperationTimeoutException": {},
    "OrchestrationStringList": {
      "items": {
        "$ref": "#/definitions/GenericString"
      },
      "type": "array"
    },
    "Order": {
      "description": "Specifies the sort order of a sorted column.",
      "properties": {
        "Column": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the column."
            }
          ]
        },
        "SortOrder": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerFlag"
            },
            {
              "description": "Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>)."
            }
          ]
        }
      },
      "required": [
        "Column",
        "SortOrder"
      ],
      "type": "object"
    },
    "OrderList": {
      "items": {
        "$ref": "#/definitions/Order"
      },
      "type": "array"
    },
    "PageSize": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    },
    "PaginationToken": {
      "type": "string"
    },
    "ParametersMap": {
      "additionalProperties": {
        "$ref": "#/definitions/ParametersMapValue"
      },
      "type": "object"
    },
    "ParametersMapValue": {
      "maxLength": 512000,
      "type": "string"
    },
    "Partition": {
      "description": "Represents a slice of table data.",
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the partition resides."
            }
          ]
        },
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time at which the partition was created."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database in which to create the partition."
            }
          ]
        },
        "LastAccessTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time at which the partition was accessed."
            }
          ]
        },
        "LastAnalyzedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time at which column statistics were computed for this partition."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "These key-value pairs define partition parameters."
            }
          ]
        },
        "StorageDescriptor": {
          "allOf": [
            {
              "$ref": "#/definitions/StorageDescriptor"
            },
            {
              "description": "Provides information about the physical location where the partition is stored."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database table in which to create the partition."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueStringList"
            },
            {
              "description": "The values of the partition."
            }
          ]
        }
      },
      "type": "object"
    },
    "PartitionError": {
      "description": "Contains information about a partition error.",
      "properties": {
        "ErrorDetail": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorDetail"
            },
            {
              "description": "The details about the partition error."
            }
          ]
        },
        "PartitionValues": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueStringList"
            },
            {
              "description": "The values that define the partition."
            }
          ]
        }
      },
      "type": "object"
    },
    "PartitionErrors": {
      "items": {
        "$ref": "#/definitions/PartitionError"
      },
      "type": "array"
    },
    "PartitionIndex": {
      "description": "A structure for a partition index.",
      "properties": {
        "IndexName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partition index."
            }
          ]
        },
        "Keys": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyList"
            },
            {
              "description": "The keys for the partition index."
            }
          ]
        }
      },
      "required": [
        "Keys",
        "IndexName"
      ],
      "type": "object"
    },
    "PartitionIndexDescriptor": {
      "description": "A descriptor for a partition index in a table.",
      "properties": {
        "BackfillErrors": {
          "allOf": [
            {
              "$ref": "#/definitions/BackfillErrors"
            },
            {
              "description": "A list of errors that can occur when registering partition indexes for an existing table."
            }
          ]
        },
        "IndexName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partition index."
            }
          ]
        },
        "IndexStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionIndexStatus"
            },
            {
              "description": "<p>The status of the partition index. </p> <p>The possible statuses are:</p> <ul> <li> <p>CREATING: The index is being created. When an index is in a CREATING state, the index or its table cannot be deleted.</p> </li> <li> <p>ACTIVE: The index creation succeeds.</p> </li> <li> <p>FAILED: The index creation fails. </p> </li> <li> <p>DELETING: The index is deleted from the list of indexes.</p> </li> </ul>"
            }
          ]
        },
        "Keys": {
          "allOf": [
            {
              "$ref": "#/definitions/KeySchemaElementList"
            },
            {
              "description": "A list of one or more keys, as <code>KeySchemaElement</code> structures, for the partition index."
            }
          ]
        }
      },
      "required": [
        "IndexName",
        "Keys",
        "IndexStatus"
      ],
      "type": "object"
    },
    "PartitionIndexDescriptorList": {
      "items": {
        "$ref": "#/definitions/PartitionIndexDescriptor"
      },
      "type": "array"
    },
    "PartitionIndexList": {
      "items": {
        "$ref": "#/definitions/PartitionIndex"
      },
      "maxItems": 3,
      "type": "array"
    },
    "PartitionIndexStatus": {
      "enum": [
        "CREATING",
        "ACTIVE",
        "DELETING",
        "FAILED"
      ],
      "type": "string"
    },
    "PartitionInput": {
      "description": "The structure used to create and update a partition.",
      "properties": {
        "LastAccessTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time at which the partition was accessed."
            }
          ]
        },
        "LastAnalyzedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time at which column statistics were computed for this partition."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "These key-value pairs define partition parameters."
            }
          ]
        },
        "StorageDescriptor": {
          "allOf": [
            {
              "$ref": "#/definitions/StorageDescriptor"
            },
            {
              "description": "Provides information about the physical location where the partition is stored."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueStringList"
            },
            {
              "description": "<p>The values of the partition. Although this parameter is not required by the SDK, you must specify this parameter for a valid input.</p> <p>The values for the keys for the new partition must be passed as an array of String objects that must be ordered in the same order as the partition keys appearing in the Amazon S3 prefix. Otherwise AWS Glue will add the values to the wrong keys.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "PartitionInputList": {
      "items": {
        "$ref": "#/definitions/PartitionInput"
      },
      "maxItems": 100,
      "minItems": 0,
      "type": "array"
    },
    "PartitionList": {
      "items": {
        "$ref": "#/definitions/Partition"
      },
      "type": "array"
    },
    "PartitionValueList": {
      "description": "Contains a list of values defining partitions.",
      "properties": {
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueStringList"
            },
            {
              "description": "The list of values."
            }
          ]
        }
      },
      "required": [
        "Values"
      ],
      "type": "object"
    },
    "Path": {
      "type": "string"
    },
    "PathList": {
      "items": {
        "$ref": "#/definitions/Path"
      },
      "type": "array"
    },
    "Permission": {
      "enum": [
        "ALL",
        "SELECT",
        "ALTER",
        "DROP",
        "DELETE",
        "INSERT",
        "CREATE_DATABASE",
        "CREATE_TABLE",
        "DATA_LOCATION_ACCESS"
      ],
      "type": "string"
    },
    "PermissionList": {
      "items": {
        "$ref": "#/definitions/Permission"
      },
      "type": "array"
    },
    "PhysicalConnectionRequirements": {
      "description": "Specifies the physical requirements for a connection.",
      "properties": {
        "AvailabilityZone": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The connection's Availability Zone. This field is redundant because the specified subnet implies the Availability Zone to be used. Currently the field must be populated, but it will be deprecated in the future."
            }
          ]
        },
        "SecurityGroupIdList": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityGroupIdList"
            },
            {
              "description": "The security group ID list used by the connection."
            }
          ]
        },
        "SubnetId": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The subnet ID used by the connection."
            }
          ]
        }
      },
      "type": "object"
    },
    "PolicyJsonString": {
      "maxLength": 10240,
      "minLength": 2,
      "type": "string"
    },
    "Predecessor": {
      "description": "A job run that was used in the predicate of a conditional trigger that triggered this job run.",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition used by the predecessor job run."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The job-run ID of the predecessor job run."
            }
          ]
        }
      },
      "type": "object"
    },
    "PredecessorList": {
      "items": {
        "$ref": "#/definitions/Predecessor"
      },
      "type": "array"
    },
    "Predicate": {
      "description": "Defines the predicate of the trigger, which determines when it fires.",
      "properties": {
        "Conditions": {
          "allOf": [
            {
              "$ref": "#/definitions/ConditionList"
            },
            {
              "description": "A list of the conditions that determine when the trigger will fire."
            }
          ]
        },
        "Logical": {
          "allOf": [
            {
              "$ref": "#/definitions/Logical"
            },
            {
              "description": "An optional field if only one condition is listed. If multiple conditions are listed, then this field is required."
            }
          ]
        }
      },
      "type": "object"
    },
    "PredicateString": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "PrincipalPermissions": {
      "description": "Permissions granted to a principal.",
      "properties": {
        "Permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionList"
            },
            {
              "description": "The permissions that are granted to the principal."
            }
          ]
        },
        "Principal": {
          "allOf": [
            {
              "$ref": "#/definitions/DataLakePrincipal"
            },
            {
              "description": "The principal who is granted permissions."
            }
          ]
        }
      },
      "type": "object"
    },
    "PrincipalPermissionsList": {
      "items": {
        "$ref": "#/definitions/PrincipalPermissions"
      },
      "type": "array"
    },
    "PrincipalType": {
      "enum": [
        "USER",
        "ROLE",
        "GROUP"
      ],
      "type": "string"
    },
    "PropertyPredicate": {
      "description": "Defines a property predicate.",
      "properties": {
        "Comparator": {
          "allOf": [
            {
              "$ref": "#/definitions/Comparator"
            },
            {
              "description": "The comparator used to compare this property to others."
            }
          ]
        },
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueString"
            },
            {
              "description": "The key of the property."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueString"
            },
            {
              "description": "The value of the property."
            }
          ]
        }
      },
      "type": "object"
    },
    "PublicKeysList": {
      "items": {
        "$ref": "#/definitions/GenericString"
      },
      "maxItems": 5,
      "type": "array"
    },
    "PutDataCatalogEncryptionSettingsRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog to set the security configuration for. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DataCatalogEncryptionSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/DataCatalogEncryptionSettings"
            },
            {
              "description": "The security configuration to set."
            }
          ]
        }
      },
      "required": [
        "DataCatalogEncryptionSettings"
      ],
      "title": "PutDataCatalogEncryptionSettingsRequest",
      "type": "object"
    },
    "PutDataCatalogEncryptionSettingsResponse": {
      "properties": {},
      "type": "object"
    },
    "PutResourcePolicyRequest": {
      "properties": {
        "EnableHybrid": {
          "allOf": [
            {
              "$ref": "#/definitions/EnableHybridValues"
            },
            {
              "description": "<p>Allows you to specify if you want to use both resource-level and account/catalog-level resource policies. A resource-level policy is a policy attached to an individual resource such as a database or a table.</p> <p>The default value of <code>NO</code> indicates that resource-level policies cannot co-exist with an account-level policy. A value of <code>YES</code> means the use of both resource-level and account/catalog-level resource policies is allowed.</p>"
            }
          ]
        },
        "PolicyExistsCondition": {
          "allOf": [
            {
              "$ref": "#/definitions/ExistCondition"
            },
            {
              "description": "A value of <code>MUST_EXIST</code> is used to update a policy. A value of <code>NOT_EXIST</code> is used to create a new policy. If a value of <code>NONE</code> or a null value is used, the call will not depend on the existence of a policy."
            }
          ]
        },
        "PolicyHashCondition": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The hash value returned when the previous policy was set using <code>PutResourcePolicy</code>. Its purpose is to prevent concurrent modifications of a policy. Do not use this parameter if no previous policy has been set."
            }
          ]
        },
        "PolicyInJson": {
          "allOf": [
            {
              "$ref": "#/definitions/PolicyJsonString"
            },
            {
              "description": "Contains the policy document to set, in JSON format."
            }
          ]
        },
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The ARN of the AWS Glue resource for the resource policy to be set. For more information about AWS Glue resource ARNs, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html#aws-glue-api-regex-aws-glue-arn-id\">AWS Glue ARN string pattern</a> "
            }
          ]
        }
      },
      "required": [
        "PolicyInJson"
      ],
      "title": "PutResourcePolicyRequest",
      "type": "object"
    },
    "PutResourcePolicyResponse": {
      "properties": {
        "PolicyHash": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "A hash of the policy that has just been set. This must be included in a subsequent call that overwrites or updates this policy."
            }
          ]
        }
      },
      "type": "object"
    },
    "PutSchemaVersionMetadataInput": {
      "properties": {
        "MetadataKeyValue": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataKeyValuePair"
            },
            {
              "description": "The metadata key's corresponding value."
            }
          ]
        },
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "The unique ID for the schema."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The unique version ID of the schema version."
            }
          ]
        },
        "SchemaVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "required": [
        "MetadataKeyValue"
      ],
      "title": "PutSchemaVersionMetadataInput",
      "type": "object"
    },
    "PutSchemaVersionMetadataResponse": {
      "properties": {
        "LatestVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/LatestSchemaVersionBoolean"
            },
            {
              "description": "The latest version of the schema."
            }
          ]
        },
        "MetadataKey": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataKeyString"
            },
            {
              "description": "The metadata key."
            }
          ]
        },
        "MetadataValue": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataValueString"
            },
            {
              "description": "The value of the metadata key."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name for the registry."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the schema."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name for the schema."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The unique version ID of the schema version."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "PutWorkflowRunPropertiesRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the workflow which was run."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of the workflow run for which the run properties should be updated."
            }
          ]
        },
        "RunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRunProperties"
            },
            {
              "description": "The properties to put for the specified run."
            }
          ]
        }
      },
      "required": [
        "Name",
        "RunId",
        "RunProperties"
      ],
      "title": "PutWorkflowRunPropertiesRequest",
      "type": "object"
    },
    "PutWorkflowRunPropertiesResponse": {
      "properties": {},
      "type": "object"
    },
    "PythonScript": {
      "type": "string"
    },
    "PythonVersionString": {
      "pattern": "^[2-3]$",
      "type": "string"
    },
    "QuerySchemaVersionMetadataInput": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/QuerySchemaVersionMetadataMaxResults"
            },
            {
              "description": "Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page."
            }
          ]
        },
        "MetadataList": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataList"
            },
            {
              "description": "Search key-value pairs for metadata, if they are not provided all the metadata information will be fetched."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryTokenString"
            },
            {
              "description": "A continuation token, if this is a continuation call."
            }
          ]
        },
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "A wrapper structure that may contain the schema name and Amazon Resource Name (ARN)."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The unique version ID of the schema version."
            }
          ]
        },
        "SchemaVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "title": "QuerySchemaVersionMetadataInput",
      "type": "object"
    },
    "QuerySchemaVersionMetadataMaxResults": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "QuerySchemaVersionMetadataResponse": {
      "properties": {
        "MetadataInfoMap": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataInfoMap"
            },
            {
              "description": "A map of a metadata key and associated values."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryTokenString"
            },
            {
              "description": "A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The unique version ID of the schema version."
            }
          ]
        }
      },
      "type": "object"
    },
    "RecordsCount": {
      "type": "integer"
    },
    "RecrawlBehavior": {
      "enum": [
        "CRAWL_EVERYTHING",
        "CRAWL_NEW_FOLDERS_ONLY"
      ],
      "type": "string"
    },
    "RecrawlPolicy": {
      "description": "When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/incremental-crawls.html\">Incremental Crawls in AWS Glue</a> in the developer guide.",
      "properties": {
        "RecrawlBehavior": {
          "allOf": [
            {
              "$ref": "#/definitions/RecrawlBehavior"
            },
            {
              "description": "<p>Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run.</p> <p>A value of <code>CRAWL_EVERYTHING</code> specifies crawling the entire dataset again.</p> <p>A value of <code>CRAWL_NEW_FOLDERS_ONLY</code> specifies crawling only folders that were added since the last crawler run.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "RegisterSchemaVersionInput": {
      "properties": {
        "SchemaDefinition": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaDefinitionString"
            },
            {
              "description": "The schema definition using the <code>DataFormat</code> setting for the <code>SchemaName</code>."
            }
          ]
        },
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "SchemaId",
        "SchemaDefinition"
      ],
      "title": "RegisterSchemaVersionInput",
      "type": "object"
    },
    "RegisterSchemaVersionResponse": {
      "properties": {
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The unique ID that represents the version of this schema."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionStatus"
            },
            {
              "description": "The status of the schema version."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The version of this schema (for sync flow only, in case this is the first version)."
            }
          ]
        }
      },
      "type": "object"
    },
    "RegistryId": {
      "description": "A wrapper structure that may contain the registry name and Amazon Resource Name (ARN).",
      "properties": {
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "Arn of the registry to be updated. One of <code>RegistryArn</code> or <code>RegistryName</code> has to be provided."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "Name of the registry. Used only for lookup. One of <code>RegistryArn</code> or <code>RegistryName</code> has to be provided. "
            }
          ]
        }
      },
      "type": "object"
    },
    "RegistryListDefinition": {
      "items": {
        "$ref": "#/definitions/RegistryListItem"
      },
      "type": "array"
    },
    "RegistryListItem": {
      "description": "A structure containing the details for a registry.",
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedTimestamp"
            },
            {
              "description": "The data the registry was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the registry."
            }
          ]
        },
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryStatus"
            },
            {
              "description": "The status of the registry."
            }
          ]
        },
        "UpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdatedTimestamp"
            },
            {
              "description": "The date the registry was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "RegistryStatus": {
      "enum": [
        "AVAILABLE",
        "DELETING"
      ],
      "type": "string"
    },
    "RemoveSchemaVersionMetadataInput": {
      "properties": {
        "MetadataKeyValue": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataKeyValuePair"
            },
            {
              "description": "The value of the metadata key."
            }
          ]
        },
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "A wrapper structure that may contain the schema name and Amazon Resource Name (ARN)."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The unique version ID of the schema version."
            }
          ]
        },
        "SchemaVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "required": [
        "MetadataKeyValue"
      ],
      "title": "RemoveSchemaVersionMetadataInput",
      "type": "object"
    },
    "RemoveSchemaVersionMetadataResponse": {
      "properties": {
        "LatestVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/LatestSchemaVersionBoolean"
            },
            {
              "description": "The latest version of the schema."
            }
          ]
        },
        "MetadataKey": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataKeyString"
            },
            {
              "description": "The metadata key."
            }
          ]
        },
        "MetadataValue": {
          "allOf": [
            {
              "$ref": "#/definitions/MetadataValueString"
            },
            {
              "description": "The value of the metadata key."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the registry."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The version ID for the schema version."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "ReplaceBoolean": {
      "type": "boolean"
    },
    "ResetJobBookmarkRequest": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name of the job in question."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/RunId"
            },
            {
              "description": "The unique run identifier associated with this job run."
            }
          ]
        }
      },
      "required": [
        "JobName"
      ],
      "title": "ResetJobBookmarkRequest",
      "type": "object"
    },
    "ResetJobBookmarkResponse": {
      "properties": {
        "JobBookmarkEntry": {
          "allOf": [
            {
              "$ref": "#/definitions/JobBookmarkEntry"
            },
            {
              "description": "The reset bookmark entry."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceNumberLimitExceededException": {},
    "ResourceShareType": {
      "enum": [
        "FOREIGN",
        "ALL"
      ],
      "type": "string"
    },
    "ResourceType": {
      "enum": [
        "JAR",
        "FILE",
        "ARCHIVE"
      ],
      "type": "string"
    },
    "ResourceUri": {
      "description": "The URIs for function resources.",
      "properties": {
        "ResourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceType"
            },
            {
              "description": "The type of the resource."
            }
          ]
        },
        "Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/URI"
            },
            {
              "description": "The URI for accessing the resource."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceUriList": {
      "items": {
        "$ref": "#/definitions/ResourceUri"
      },
      "maxItems": 1000,
      "minItems": 0,
      "type": "array"
    },
    "ResumeWorkflowRunRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the workflow to resume."
            }
          ]
        },
        "NodeIds": {
          "allOf": [
            {
              "$ref": "#/definitions/NodeIdList"
            },
            {
              "description": "A list of the node IDs for the nodes you want to restart. The nodes that are to be restarted must have a run attempt in the original run."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of the workflow run to resume."
            }
          ]
        }
      },
      "required": [
        "Name",
        "RunId",
        "NodeIds"
      ],
      "title": "ResumeWorkflowRunRequest",
      "type": "object"
    },
    "ResumeWorkflowRunResponse": {
      "properties": {
        "NodeIds": {
          "allOf": [
            {
              "$ref": "#/definitions/NodeIdList"
            },
            {
              "description": "A list of the node IDs for the nodes that were actually restarted."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The new ID assigned to the resumed workflow run. Each resume of a workflow run will have a new run ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "Role": {
      "type": "string"
    },
    "RoleArn": {
      "pattern": "arn:aws:iam::\\d{12}:role/.*",
      "type": "string"
    },
    "RoleString": {
      "type": "string"
    },
    "RowTag": {
      "type": "string"
    },
    "RunId": {
      "type": "string"
    },
    "S3Encryption": {
      "description": "Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.",
      "properties": {
        "KmsKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data."
            }
          ]
        },
        "S3EncryptionMode": {
          "allOf": [
            {
              "$ref": "#/definitions/S3EncryptionMode"
            },
            {
              "description": "The encryption mode to use for Amazon S3 data."
            }
          ]
        }
      },
      "type": "object"
    },
    "S3EncryptionList": {
      "items": {
        "$ref": "#/definitions/S3Encryption"
      },
      "type": "array"
    },
    "S3EncryptionMode": {
      "enum": [
        "DISABLED",
        "SSE-KMS",
        "SSE-S3"
      ],
      "type": "string"
    },
    "S3Target": {
      "description": "Specifies a data store in Amazon Simple Storage Service (Amazon S3).",
      "properties": {
        "ConnectionName": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionName"
            },
            {
              "description": "The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC)."
            }
          ]
        },
        "Exclusions": {
          "allOf": [
            {
              "$ref": "#/definitions/PathList"
            },
            {
              "description": "A list of glob patterns used to exclude from the crawl. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>."
            }
          ]
        },
        "Path": {
          "allOf": [
            {
              "$ref": "#/definitions/Path"
            },
            {
              "description": "The path to the Amazon S3 target."
            }
          ]
        }
      },
      "type": "object"
    },
    "S3TargetList": {
      "items": {
        "$ref": "#/definitions/S3Target"
      },
      "type": "array"
    },
    "ScalaCode": {
      "type": "string"
    },
    "Schedule": {
      "description": "A scheduling object using a <code>cron</code> statement to schedule an event.",
      "properties": {
        "ScheduleExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/CronExpression"
            },
            {
              "description": "A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/ScheduleState"
            },
            {
              "description": "The state of the schedule."
            }
          ]
        }
      },
      "type": "object"
    },
    "ScheduleState": {
      "enum": [
        "SCHEDULED",
        "NOT_SCHEDULED",
        "TRANSITIONING"
      ],
      "type": "string"
    },
    "SchedulerNotRunningException": {},
    "SchedulerRunningException": {},
    "SchedulerTransitioningException": {},
    "SchemaChangePolicy": {
      "description": "A policy that specifies update and deletion behaviors for the crawler.",
      "properties": {
        "DeleteBehavior": {
          "allOf": [
            {
              "$ref": "#/definitions/DeleteBehavior"
            },
            {
              "description": "The deletion behavior when the crawler finds a deleted object."
            }
          ]
        },
        "UpdateBehavior": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateBehavior"
            },
            {
              "description": "The update behavior when the crawler finds a changed schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaCheckpointNumber": {
      "maximum": 100000,
      "minimum": 1,
      "type": "integer"
    },
    "SchemaColumn": {
      "description": "A key-value pair representing a column and data type that this transform can run against. The <code>Schema</code> parameter of the <code>MLTransform</code> may contain up to 100 of these structures.",
      "properties": {
        "DataType": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnTypeString"
            },
            {
              "description": "The type of data in the column."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnNameString"
            },
            {
              "description": "The name of the column."
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaDefinitionDiff": {
      "maxLength": 340000,
      "minLength": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "SchemaDefinitionString": {
      "maxLength": 170000,
      "minLength": 1,
      "pattern": ".*\\S.*",
      "type": "string"
    },
    "SchemaDiffType": {
      "enum": [
        "SYNTAX_DIFF"
      ],
      "type": "string"
    },
    "SchemaId": {
      "properties": {
        "RegistryName": {
          "$ref": "#/definitions/SchemaRegistryNameString"
        },
        "SchemaArn": {
          "$ref": "#/definitions/GlueResourceArn"
        },
        "SchemaName": {
          "$ref": "#/definitions/SchemaRegistryNameString"
        }
      },
      "type": "object"
    },
    "SchemaListDefinition": {
      "items": {
        "$ref": "#/definitions/SchemaListItem"
      },
      "type": "array"
    },
    "SchemaListItem": {
      "description": "An object that contains minimal details for a schema.",
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedTimestamp"
            },
            {
              "description": "The date and time that a schema was created."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description for the schema."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "the name of the registry where the schema resides."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) for the schema."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "SchemaStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaStatus"
            },
            {
              "description": "The status of the schema."
            }
          ]
        },
        "UpdatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdatedTimestamp"
            },
            {
              "description": "The date and time that a schema was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaPathString": {
      "type": "string"
    },
    "SchemaReference": {
      "description": "An object that references a schema stored in the AWS Glue Schema Registry.",
      "properties": {
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "A structure that contains schema identity fields. Either this or the <code>SchemaVersionId</code> has to be provided."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The unique ID assigned to a version of the schema. Either this or the <code>SchemaId</code> has to be provided."
            }
          ]
        },
        "SchemaVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaRegistryNameString": {
      "maxLength": 255,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9-_$#]+",
      "type": "string"
    },
    "SchemaRegistryTokenString": {
      "type": "string"
    },
    "SchemaStatus": {
      "enum": [
        "AVAILABLE",
        "PENDING",
        "DELETING"
      ],
      "type": "string"
    },
    "SchemaValidationError": {
      "maxLength": 5000,
      "minLength": 1,
      "type": "string"
    },
    "SchemaVersionErrorItem": {
      "description": "An object that contains the error details for an operation on a schema version.",
      "properties": {
        "ErrorDetails": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorDetails"
            },
            {
              "description": "The details of the error for the schema version."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaVersionErrorList": {
      "items": {
        "$ref": "#/definitions/SchemaVersionErrorItem"
      },
      "type": "array"
    },
    "SchemaVersionIdString": {
      "maxLength": 36,
      "minLength": 36,
      "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
      "type": "string"
    },
    "SchemaVersionList": {
      "items": {
        "$ref": "#/definitions/SchemaVersionListItem"
      },
      "type": "array"
    },
    "SchemaVersionListItem": {
      "description": "An object containing the details about a schema version.",
      "properties": {
        "CreatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedTimestamp"
            },
            {
              "description": "The date and time the schema version was created."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema."
            }
          ]
        },
        "SchemaVersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionIdString"
            },
            {
              "description": "The unique identifier of the schema version."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionStatus"
            },
            {
              "description": "The status of the schema version."
            }
          ]
        },
        "VersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionLongNumber"
            },
            {
              "description": "The version number of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaVersionNumber": {
      "properties": {
        "LatestVersion": {
          "$ref": "#/definitions/LatestSchemaVersionBoolean"
        },
        "VersionNumber": {
          "$ref": "#/definitions/VersionLongNumber"
        }
      },
      "type": "object"
    },
    "SchemaVersionStatus": {
      "enum": [
        "AVAILABLE",
        "PENDING",
        "FAILURE",
        "DELETING"
      ],
      "type": "string"
    },
    "ScriptLocationString": {
      "type": "string"
    },
    "SearchPropertyPredicates": {
      "items": {
        "$ref": "#/definitions/PropertyPredicate"
      },
      "type": "array"
    },
    "SearchTablesRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "A unique identifier, consisting of <code> <i>account_id</i> </code>."
            }
          ]
        },
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/SearchPropertyPredicates"
            },
            {
              "description": "<p>A list of key-value pairs, and a comparator used to filter the search results. Returns all entities matching the predicate.</p> <p>The <code>Comparator</code> member of the <code>PropertyPredicate</code> struct is used only for time fields, and can be omitted for other field types. Also, when comparing string values, such as when <code>Key=Name</code>, a fuzzy match algorithm is used. The <code>Key</code> field (for example, the value of the <code>Name</code> field) is split on certain punctuation characters, for example, -, :, #, etc. into tokens. Then each token is exact-match compared with the <code>Value</code> member of <code>PropertyPredicate</code>. For example, if <code>Key=Name</code> and <code>Value=link</code>, tables named <code>customer-link</code> and <code>xx-link-yy</code> are returned, but <code>xxlinkyy</code> is not returned.</p>"
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/PageSize"
            },
            {
              "description": "The maximum number of tables to return in a single response."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, included if this is a continuation call."
            }
          ]
        },
        "ResourceShareType": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceShareType"
            },
            {
              "description": "<p>Allows you to specify that you want to search the tables shared with your account. The allowable values are <code>FOREIGN</code> or <code>ALL</code>. </p> <ul> <li> <p>If set to <code>FOREIGN</code>, will search the tables shared with your account. </p> </li> <li> <p>If set to <code>ALL</code>, will search the tables shared with your account, as well as the tables in yor local account. </p> </li> </ul>"
            }
          ]
        },
        "SearchText": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueString"
            },
            {
              "description": "<p>A string used for a text search.</p> <p>Specifying a value in quotes filters based on an exact match to the value.</p>"
            }
          ]
        },
        "SortCriteria": {
          "allOf": [
            {
              "$ref": "#/definitions/SortCriteria"
            },
            {
              "description": "A list of criteria for sorting the results by a field name, in an ascending or descending order."
            }
          ]
        }
      },
      "title": "SearchTablesRequest",
      "type": "object"
    },
    "SearchTablesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            },
            {
              "description": "A continuation token, present if the current list segment is not the last."
            }
          ]
        },
        "TableList": {
          "allOf": [
            {
              "$ref": "#/definitions/TableList"
            },
            {
              "description": "A list of the requested <code>Table</code> objects. The <code>SearchTables</code> response returns only the tables that you have access to."
            }
          ]
        }
      },
      "type": "object"
    },
    "SecurityConfiguration": {
      "description": "Specifies a security configuration.",
      "properties": {
        "CreatedTimeStamp": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The time at which this security configuration was created."
            }
          ]
        },
        "EncryptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/EncryptionConfiguration"
            },
            {
              "description": "The encryption configuration associated with this security configuration."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the security configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "SecurityConfigurationList": {
      "items": {
        "$ref": "#/definitions/SecurityConfiguration"
      },
      "type": "array"
    },
    "SecurityGroupIdList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "Segment": {
      "description": "Defines a non-overlapping region of a table's partitions, allowing multiple requests to be executed in parallel.",
      "properties": {
        "SegmentNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The zero-based index number of the segment. For example, if the total number of segments is 4, <code>SegmentNumber</code> values range from 0 through 3."
            }
          ]
        },
        "TotalSegments": {
          "allOf": [
            {
              "$ref": "#/definitions/TotalSegmentsInteger"
            },
            {
              "description": "The total number of segments."
            }
          ]
        }
      },
      "required": [
        "SegmentNumber",
        "TotalSegments"
      ],
      "type": "object"
    },
    "SerDeInfo": {
      "description": "Information about a serialization/deserialization program (SerDe) that serves as an extractor and loader.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the SerDe."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "These key-value pairs define initialization parameters for the SerDe."
            }
          ]
        },
        "SerializationLibrary": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Usually the class that implements the SerDe. An example is <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "SkewedInfo": {
      "description": "Specifies skewed values in a table. Skewed values are those that occur with very high frequency.",
      "properties": {
        "SkewedColumnNames": {
          "allOf": [
            {
              "$ref": "#/definitions/NameStringList"
            },
            {
              "description": "A list of names of columns that contain skewed values."
            }
          ]
        },
        "SkewedColumnValueLocationMaps": {
          "allOf": [
            {
              "$ref": "#/definitions/LocationMap"
            },
            {
              "description": "A mapping of skewed values to the columns that contain them."
            }
          ]
        },
        "SkewedColumnValues": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnValueStringList"
            },
            {
              "description": "A list of values that appear so frequently as to be considered skewed."
            }
          ]
        }
      },
      "type": "object"
    },
    "Sort": {
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string"
    },
    "SortCriteria": {
      "items": {
        "$ref": "#/definitions/SortCriterion"
      },
      "maxItems": 1,
      "minItems": 0,
      "type": "array"
    },
    "SortCriterion": {
      "description": "Specifies a field to sort by and a sort order.",
      "properties": {
        "FieldName": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueString"
            },
            {
              "description": "The name of the field on which to sort."
            }
          ]
        },
        "Sort": {
          "allOf": [
            {
              "$ref": "#/definitions/Sort"
            },
            {
              "description": "An ascending or descending sort."
            }
          ]
        }
      },
      "type": "object"
    },
    "SortDirectionType": {
      "enum": [
        "DESCENDING",
        "ASCENDING"
      ],
      "type": "string"
    },
    "StartCrawlerRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the crawler to start."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "StartCrawlerRequest",
      "type": "object"
    },
    "StartCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "StartCrawlerScheduleRequest": {
      "properties": {
        "CrawlerName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the crawler to schedule."
            }
          ]
        }
      },
      "required": [
        "CrawlerName"
      ],
      "title": "StartCrawlerScheduleRequest",
      "type": "object"
    },
    "StartCrawlerScheduleResponse": {
      "properties": {},
      "type": "object"
    },
    "StartExportLabelsTaskRunRequest": {
      "properties": {
        "OutputS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/UriString"
            },
            {
              "description": "The Amazon S3 path where you export the labels."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the machine learning transform."
            }
          ]
        }
      },
      "required": [
        "TransformId",
        "OutputS3Path"
      ],
      "title": "StartExportLabelsTaskRunRequest",
      "type": "object"
    },
    "StartExportLabelsTaskRunResponse": {
      "properties": {
        "TaskRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier for the task run."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartImportLabelsTaskRunRequest": {
      "properties": {
        "InputS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/UriString"
            },
            {
              "description": "The Amazon Simple Storage Service (Amazon S3) path from where you import the labels."
            }
          ]
        },
        "ReplaceAllLabels": {
          "allOf": [
            {
              "$ref": "#/definitions/ReplaceBoolean"
            },
            {
              "description": "Indicates whether to overwrite your existing labels."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the machine learning transform."
            }
          ]
        }
      },
      "required": [
        "TransformId",
        "InputS3Path"
      ],
      "title": "StartImportLabelsTaskRunRequest",
      "type": "object"
    },
    "StartImportLabelsTaskRunResponse": {
      "properties": {
        "TaskRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier for the task run."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartJobRunRequest": {
      "properties": {
        "AllocatedCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "<p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p> <p>The number of AWS Glue data processing units (DPUs) to allocate to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p>This property is deprecated, use MaxCapacity instead.",
              "x-deprecated": true
            }
          ]
        },
        "Arguments": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericMap"
            },
            {
              "description": "<p>The job arguments specifically for this run. For this job run, they replace the default arguments set in the job definition itself.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>"
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition to use."
            }
          ]
        },
        "JobRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of a previous <code>JobRun</code> to retry."
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://docs.aws.amazon.com/https:/aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>.</p> <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are running a Python shell job, or an Apache Spark ETL job:</p> <ul> <li> <p>When you specify a Python shell job (<code>JobCommand.Name</code>=\"pythonshell\"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>=\"glueetl\"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p> </li> </ul>"
            }
          ]
        },
        "NotificationProperty": {
          "allOf": [
            {
              "$ref": "#/definitions/NotificationProperty"
            },
            {
              "description": "Specifies configuration properties of a job run notification."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p> <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>"
            }
          ]
        },
        "SecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used with this job run."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "JobName"
      ],
      "title": "StartJobRunRequest",
      "type": "object"
    },
    "StartJobRunResponse": {
      "properties": {
        "JobRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID assigned to this job run."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartMLEvaluationTaskRunRequest": {
      "properties": {
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the machine learning transform."
            }
          ]
        }
      },
      "required": [
        "TransformId"
      ],
      "title": "StartMLEvaluationTaskRunRequest",
      "type": "object"
    },
    "StartMLEvaluationTaskRunResponse": {
      "properties": {
        "TaskRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier associated with this run."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartMLLabelingSetGenerationTaskRunRequest": {
      "properties": {
        "OutputS3Path": {
          "allOf": [
            {
              "$ref": "#/definitions/UriString"
            },
            {
              "description": "The Amazon Simple Storage Service (Amazon S3) path where you generate the labeling set."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier of the machine learning transform."
            }
          ]
        }
      },
      "required": [
        "TransformId",
        "OutputS3Path"
      ],
      "title": "StartMLLabelingSetGenerationTaskRunRequest",
      "type": "object"
    },
    "StartMLLabelingSetGenerationTaskRunResponse": {
      "properties": {
        "TaskRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique run identifier that is associated with this task run."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartTriggerRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger to start."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "StartTriggerRequest",
      "type": "object"
    },
    "StartTriggerResponse": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger that was started."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartWorkflowRunRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the workflow to start."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "StartWorkflowRunRequest",
      "type": "object"
    },
    "StartWorkflowRunResponse": {
      "properties": {
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "An Id for the new run."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopCrawlerRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the crawler to stop."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "StopCrawlerRequest",
      "type": "object"
    },
    "StopCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "StopCrawlerScheduleRequest": {
      "properties": {
        "CrawlerName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the crawler whose schedule state to set."
            }
          ]
        }
      },
      "required": [
        "CrawlerName"
      ],
      "title": "StopCrawlerScheduleRequest",
      "type": "object"
    },
    "StopCrawlerScheduleResponse": {
      "properties": {},
      "type": "object"
    },
    "StopTriggerRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger to stop."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "StopTriggerRequest",
      "type": "object"
    },
    "StopTriggerResponse": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger that was stopped."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopWorkflowRunRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the workflow to stop."
            }
          ]
        },
        "RunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of the workflow run to stop."
            }
          ]
        }
      },
      "required": [
        "Name",
        "RunId"
      ],
      "title": "StopWorkflowRunRequest",
      "type": "object"
    },
    "StopWorkflowRunResponse": {
      "properties": {},
      "type": "object"
    },
    "StorageDescriptor": {
      "description": "Describes the physical storage of table data.",
      "properties": {
        "BucketColumns": {
          "allOf": [
            {
              "$ref": "#/definitions/NameStringList"
            },
            {
              "description": "A list of reducer grouping columns, clustering columns, and bucketing columns in the table."
            }
          ]
        },
        "Columns": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnList"
            },
            {
              "description": "A list of the <code>Columns</code> in the table."
            }
          ]
        },
        "Compressed": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": " <code>True</code> if the data in the table is compressed, or <code>False</code> if not."
            }
          ]
        },
        "InputFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/FormatString"
            },
            {
              "description": "The input format: <code>SequenceFileInputFormat</code> (binary), or <code>TextInputFormat</code>, or a custom format."
            }
          ]
        },
        "Location": {
          "allOf": [
            {
              "$ref": "#/definitions/LocationString"
            },
            {
              "description": "The physical location of the table. By default, this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name."
            }
          ]
        },
        "NumberOfBuckets": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "Must be specified if the table contains any dimension columns."
            }
          ]
        },
        "OutputFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/FormatString"
            },
            {
              "description": "The output format: <code>SequenceFileOutputFormat</code> (binary), or <code>IgnoreKeyTextOutputFormat</code>, or a custom format."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "The user-supplied properties in key-value form."
            }
          ]
        },
        "SchemaReference": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaReference"
            },
            {
              "description": "<p>An object that references a schema stored in the AWS Glue Schema Registry.</p> <p>When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference.</p>"
            }
          ]
        },
        "SerdeInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/SerDeInfo"
            },
            {
              "description": "The serialization/deserialization (SerDe) information."
            }
          ]
        },
        "SkewedInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/SkewedInfo"
            },
            {
              "description": "The information about values that appear frequently in a column (skewed values)."
            }
          ]
        },
        "SortColumns": {
          "allOf": [
            {
              "$ref": "#/definitions/OrderList"
            },
            {
              "description": "A list specifying the sort order of each bucket in the table."
            }
          ]
        },
        "StoredAsSubDirectories": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": " <code>True</code> if the table data is stored in subdirectories, or <code>False</code> if not."
            }
          ]
        }
      },
      "type": "object"
    },
    "StringColumnStatisticsData": {
      "description": "Defines column statistics supported for character sequence data values.",
      "properties": {
        "AverageLength": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeDouble"
            },
            {
              "description": "The average string length in the column."
            }
          ]
        },
        "MaximumLength": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The size of the longest string in the column."
            }
          ]
        },
        "NumberOfDistinctValues": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of distinct values in a column."
            }
          ]
        },
        "NumberOfNulls": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeLong"
            },
            {
              "description": "The number of null values in the column."
            }
          ]
        }
      },
      "required": [
        "MaximumLength",
        "AverageLength",
        "NumberOfNulls",
        "NumberOfDistinctValues"
      ],
      "type": "object"
    },
    "StringList": {
      "items": {
        "$ref": "#/definitions/GenericString"
      },
      "type": "array"
    },
    "Table": {
      "description": "Represents a collection of related data organized in columns and rows.",
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the table resides."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time when the table definition was created in the Data Catalog."
            }
          ]
        },
        "CreatedBy": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The person or entity who created the table."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database where the table metadata resides. For Hive compatibility, this must be all lowercase."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the table."
            }
          ]
        },
        "IsRegisteredWithLakeFormation": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether the table has been registered with AWS Lake Formation."
            }
          ]
        },
        "LastAccessTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that the table was accessed. This is usually taken from HDFS, and might not be reliable."
            }
          ]
        },
        "LastAnalyzedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that column statistics were computed for this table."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The table name. For Hive compatibility, this must be entirely lowercase."
            }
          ]
        },
        "Owner": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The owner of the table."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "These key-value pairs define properties associated with the table."
            }
          ]
        },
        "PartitionKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnList"
            },
            {
              "description": "<p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p> <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p> <p> <code>\"PartitionKeys\": []</code> </p>"
            }
          ]
        },
        "Retention": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The retention time for this table."
            }
          ]
        },
        "StorageDescriptor": {
          "allOf": [
            {
              "$ref": "#/definitions/StorageDescriptor"
            },
            {
              "description": "A storage descriptor containing information about the physical storage of this table."
            }
          ]
        },
        "TableType": {
          "allOf": [
            {
              "$ref": "#/definitions/TableTypeString"
            },
            {
              "description": "The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.)."
            }
          ]
        },
        "TargetTable": {
          "allOf": [
            {
              "$ref": "#/definitions/TableIdentifier"
            },
            {
              "description": "A <code>TableIdentifier</code> structure that describes a target table for resource linking."
            }
          ]
        },
        "UpdateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that the table was updated."
            }
          ]
        },
        "ViewExpandedText": {
          "allOf": [
            {
              "$ref": "#/definitions/ViewTextString"
            },
            {
              "description": "If the table is a view, the expanded text of the view; otherwise <code>null</code>."
            }
          ]
        },
        "ViewOriginalText": {
          "allOf": [
            {
              "$ref": "#/definitions/ViewTextString"
            },
            {
              "description": "If the table is a view, the original text of the view; otherwise <code>null</code>."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "TableError": {
      "description": "An error record for table operations.",
      "properties": {
        "ErrorDetail": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorDetail"
            },
            {
              "description": "The details about the error."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table. For Hive compatibility, this must be entirely lowercase."
            }
          ]
        }
      },
      "type": "object"
    },
    "TableErrors": {
      "items": {
        "$ref": "#/definitions/TableError"
      },
      "type": "array"
    },
    "TableIdentifier": {
      "description": "A structure that describes a target table for resource linking.",
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the table resides."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database that contains the target table."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the target table."
            }
          ]
        }
      },
      "type": "object"
    },
    "TableInput": {
      "description": "A structure used to define a table.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the table."
            }
          ]
        },
        "LastAccessTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that the table was accessed."
            }
          ]
        },
        "LastAnalyzedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last time that column statistics were computed for this table."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The table name. For Hive compatibility, this is folded to lowercase when it is stored."
            }
          ]
        },
        "Owner": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The table owner."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/ParametersMap"
            },
            {
              "description": "These key-value pairs define properties associated with the table."
            }
          ]
        },
        "PartitionKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnList"
            },
            {
              "description": "<p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p> <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p> <p> <code>\"PartitionKeys\": []</code> </p>"
            }
          ]
        },
        "Retention": {
          "allOf": [
            {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            {
              "description": "The retention time for this table."
            }
          ]
        },
        "StorageDescriptor": {
          "allOf": [
            {
              "$ref": "#/definitions/StorageDescriptor"
            },
            {
              "description": "A storage descriptor containing information about the physical storage of this table."
            }
          ]
        },
        "TableType": {
          "allOf": [
            {
              "$ref": "#/definitions/TableTypeString"
            },
            {
              "description": "The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.)."
            }
          ]
        },
        "TargetTable": {
          "allOf": [
            {
              "$ref": "#/definitions/TableIdentifier"
            },
            {
              "description": "A <code>TableIdentifier</code> structure that describes a target table for resource linking."
            }
          ]
        },
        "ViewExpandedText": {
          "allOf": [
            {
              "$ref": "#/definitions/ViewTextString"
            },
            {
              "description": "If the table is a view, the expanded text of the view; otherwise <code>null</code>."
            }
          ]
        },
        "ViewOriginalText": {
          "allOf": [
            {
              "$ref": "#/definitions/ViewTextString"
            },
            {
              "description": "If the table is a view, the original text of the view; otherwise <code>null</code>."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "TableList": {
      "items": {
        "$ref": "#/definitions/Table"
      },
      "type": "array"
    },
    "TableName": {
      "type": "string"
    },
    "TablePrefix": {
      "maxLength": 128,
      "minLength": 0,
      "type": "string"
    },
    "TableTypeString": {
      "maxLength": 255,
      "type": "string"
    },
    "TableVersion": {
      "description": "Specifies a version of a table.",
      "properties": {
        "Table": {
          "allOf": [
            {
              "$ref": "#/definitions/Table"
            },
            {
              "description": "The table in question."
            }
          ]
        },
        "VersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionString"
            },
            {
              "description": "The ID value that identifies this table version. A <code>VersionId</code> is a string representation of an integer. Each version is incremented by 1."
            }
          ]
        }
      },
      "type": "object"
    },
    "TableVersionError": {
      "description": "An error record for table-version operations.",
      "properties": {
        "ErrorDetail": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorDetail"
            },
            {
              "description": "The details about the error."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table in question."
            }
          ]
        },
        "VersionId": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionString"
            },
            {
              "description": "The ID value of the version in question. A <code>VersionID</code> is a string representation of an integer. Each version is incremented by 1."
            }
          ]
        }
      },
      "type": "object"
    },
    "TableVersionErrors": {
      "items": {
        "$ref": "#/definitions/TableVersionError"
      },
      "type": "array"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagKeysList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "maxItems": 50,
      "minItems": 0,
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The ARN of the AWS Glue resource to which to add the tags. For more information about AWS Glue resource ARNs, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html#aws-glue-api-regex-aws-glue-arn-id\">AWS Glue ARN string pattern</a>."
            }
          ]
        },
        "TagsToAdd": {
          "allOf": [
            {
              "$ref": "#/definitions/TagsMap"
            },
            {
              "description": "Tags to add to this resource."
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "TagsToAdd"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "TagsMap": {
      "additionalProperties": {
        "$ref": "#/definitions/TagValue"
      },
      "maxProperties": 50,
      "minProperties": 0,
      "type": "object"
    },
    "TaskRun": {
      "description": "The sampling parameters that are associated with the machine learning transform.",
      "properties": {
        "CompletedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last point in time that the requested task run was completed."
            }
          ]
        },
        "ErrorString": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The list of error strings associated with this task run."
            }
          ]
        },
        "ExecutionTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ExecutionTime"
            },
            {
              "description": "The amount of time (in seconds) that the task run consumed resources."
            }
          ]
        },
        "LastModifiedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The last point in time that the requested task run was updated."
            }
          ]
        },
        "LogGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The names of the log group for secure logging, associated with this task run."
            }
          ]
        },
        "Properties": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskRunProperties"
            },
            {
              "description": "Specifies configuration properties associated with this task run."
            }
          ]
        },
        "StartedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that this task run started."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskStatusType"
            },
            {
              "description": "The current status of the requested task run."
            }
          ]
        },
        "TaskRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier for this task run."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier for the transform."
            }
          ]
        }
      },
      "type": "object"
    },
    "TaskRunFilterCriteria": {
      "description": "The criteria that are used to filter the task runs for the machine learning transform.",
      "properties": {
        "StartedAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filter on task runs started after this date."
            }
          ]
        },
        "StartedBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filter on task runs started before this date."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskStatusType"
            },
            {
              "description": "The current status of the task run."
            }
          ]
        },
        "TaskRunType": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskType"
            },
            {
              "description": "The type of task run."
            }
          ]
        }
      },
      "type": "object"
    },
    "TaskRunList": {
      "items": {
        "$ref": "#/definitions/TaskRun"
      },
      "type": "array"
    },
    "TaskRunProperties": {
      "description": "The configuration properties for the task run.",
      "properties": {
        "ExportLabelsTaskRunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/ExportLabelsTaskRunProperties"
            },
            {
              "description": "The configuration properties for an exporting labels task run."
            }
          ]
        },
        "FindMatchesTaskRunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/FindMatchesTaskRunProperties"
            },
            {
              "description": "The configuration properties for a find matches task run."
            }
          ]
        },
        "ImportLabelsTaskRunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/ImportLabelsTaskRunProperties"
            },
            {
              "description": "The configuration properties for an importing labels task run."
            }
          ]
        },
        "LabelingSetGenerationTaskRunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/LabelingSetGenerationTaskRunProperties"
            },
            {
              "description": "The configuration properties for a labeling set generation task run."
            }
          ]
        },
        "TaskType": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskType"
            },
            {
              "description": "The type of task run."
            }
          ]
        }
      },
      "type": "object"
    },
    "TaskRunSortColumnType": {
      "enum": [
        "TASK_RUN_TYPE",
        "STATUS",
        "STARTED"
      ],
      "type": "string"
    },
    "TaskRunSortCriteria": {
      "description": "The sorting criteria that are used to sort the list of task runs for the machine learning transform.",
      "properties": {
        "Column": {
          "allOf": [
            {
              "$ref": "#/definitions/TaskRunSortColumnType"
            },
            {
              "description": "The column to be used to sort the list of task runs for the machine learning transform."
            }
          ]
        },
        "SortDirection": {
          "allOf": [
            {
              "$ref": "#/definitions/SortDirectionType"
            },
            {
              "description": "The sort direction to be used to sort the list of task runs for the machine learning transform."
            }
          ]
        }
      },
      "required": [
        "Column",
        "SortDirection"
      ],
      "type": "object"
    },
    "TaskStatusType": {
      "enum": [
        "STARTING",
        "RUNNING",
        "STOPPING",
        "STOPPED",
        "SUCCEEDED",
        "FAILED",
        "TIMEOUT"
      ],
      "type": "string"
    },
    "TaskType": {
      "enum": [
        "EVALUATION",
        "LABELING_SET_GENERATION",
        "IMPORT_LABELS",
        "EXPORT_LABELS",
        "FIND_MATCHES"
      ],
      "type": "string"
    },
    "Timeout": {
      "minimum": 1,
      "type": "integer"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "TimestampValue": {
      "format": "date-time",
      "type": "string"
    },
    "Token": {
      "type": "string"
    },
    "TotalSegmentsInteger": {
      "maximum": 10,
      "minimum": 1,
      "type": "integer"
    },
    "TransformEncryption": {
      "description": "<p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p> <p>Additionally, imported labels and trained transforms can now be encrypted using a customer provided KMS key.</p>",
      "properties": {
        "MlUserDataEncryption": {
          "allOf": [
            {
              "$ref": "#/definitions/MLUserDataEncryption"
            },
            {
              "description": "An <code>MLUserDataEncryption</code> object containing the encryption mode and customer-provided KMS key ID."
            }
          ]
        },
        "TaskRunSecurityConfigurationName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the security configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "TransformFilterCriteria": {
      "description": "The criteria used to filter the machine learning transforms.",
      "properties": {
        "CreatedAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time and date after which the transforms were created."
            }
          ]
        },
        "CreatedBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time and date before which the transforms were created."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">AWS Glue Versions</a> in the developer guide."
            }
          ]
        },
        "LastModifiedAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filter on transforms last modified after this date."
            }
          ]
        },
        "LastModifiedBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filter on transforms last modified before this date."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "A unique transform name that is used to filter the machine learning transforms."
            }
          ]
        },
        "Schema": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformSchema"
            },
            {
              "description": "Filters on datasets with a specific schema. The <code>Map&lt;Column, Type&gt;</code> object is an array of key-value pairs representing the schema this transform accepts, where <code>Column</code> is the name of a column, and <code>Type</code> is the type of the data such as an integer or string. Has an upper bound of 100 columns."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformStatusType"
            },
            {
              "description": "Filters the list of machine learning transforms by the last known status of the transforms (to indicate whether a transform can be used or not). One of \"NOT_READY\", \"READY\", or \"DELETING\"."
            }
          ]
        },
        "TransformType": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformType"
            },
            {
              "description": "The type of machine learning transform that is used to filter the machine learning transforms."
            }
          ]
        }
      },
      "type": "object"
    },
    "TransformIdList": {
      "items": {
        "$ref": "#/definitions/HashString"
      },
      "type": "array"
    },
    "TransformList": {
      "items": {
        "$ref": "#/definitions/MLTransform"
      },
      "type": "array"
    },
    "TransformParameters": {
      "description": "The algorithm-specific parameters that are associated with the machine learning transform.",
      "properties": {
        "FindMatchesParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/FindMatchesParameters"
            },
            {
              "description": "The parameters for the find matches algorithm."
            }
          ]
        },
        "TransformType": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformType"
            },
            {
              "description": "<p>The type of machine learning transform.</p> <p>For information about the types of machine learning transforms, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html\">Creating Machine Learning Transforms</a>.</p>"
            }
          ]
        }
      },
      "required": [
        "TransformType"
      ],
      "type": "object"
    },
    "TransformSchema": {
      "items": {
        "$ref": "#/definitions/SchemaColumn"
      },
      "maxItems": 100,
      "type": "array"
    },
    "TransformSortColumnType": {
      "enum": [
        "NAME",
        "TRANSFORM_TYPE",
        "STATUS",
        "CREATED",
        "LAST_MODIFIED"
      ],
      "type": "string"
    },
    "TransformSortCriteria": {
      "description": "The sorting criteria that are associated with the machine learning transform.",
      "properties": {
        "Column": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformSortColumnType"
            },
            {
              "description": "The column to be used in the sorting criteria that are associated with the machine learning transform."
            }
          ]
        },
        "SortDirection": {
          "allOf": [
            {
              "$ref": "#/definitions/SortDirectionType"
            },
            {
              "description": "The sort direction to be used in the sorting criteria that are associated with the machine learning transform."
            }
          ]
        }
      },
      "required": [
        "Column",
        "SortDirection"
      ],
      "type": "object"
    },
    "TransformStatusType": {
      "enum": [
        "NOT_READY",
        "READY",
        "DELETING"
      ],
      "type": "string"
    },
    "TransformType": {
      "enum": [
        "FIND_MATCHES"
      ],
      "type": "string"
    },
    "Trigger": {
      "description": "Information about a specific trigger.",
      "properties": {
        "Actions": {
          "allOf": [
            {
              "$ref": "#/definitions/ActionList"
            },
            {
              "description": "The actions initiated by this trigger."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of this trigger."
            }
          ]
        },
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger."
            }
          ]
        },
        "Predicate": {
          "allOf": [
            {
              "$ref": "#/definitions/Predicate"
            },
            {
              "description": "The predicate of this trigger, which defines when it will fire."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerState"
            },
            {
              "description": "The current state of the trigger."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerType"
            },
            {
              "description": "The type of trigger that this is."
            }
          ]
        },
        "WorkflowName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the workflow associated with the trigger."
            }
          ]
        }
      },
      "type": "object"
    },
    "TriggerList": {
      "items": {
        "$ref": "#/definitions/Trigger"
      },
      "type": "array"
    },
    "TriggerNameList": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "type": "array"
    },
    "TriggerNodeDetails": {
      "description": "The details of a Trigger node present in the workflow.",
      "properties": {
        "Trigger": {
          "allOf": [
            {
              "$ref": "#/definitions/Trigger"
            },
            {
              "description": "The information of the trigger represented by the trigger node."
            }
          ]
        }
      },
      "type": "object"
    },
    "TriggerState": {
      "enum": [
        "CREATING",
        "CREATED",
        "ACTIVATING",
        "ACTIVATED",
        "DEACTIVATING",
        "DEACTIVATED",
        "DELETING",
        "UPDATING"
      ],
      "type": "string"
    },
    "TriggerType": {
      "enum": [
        "SCHEDULED",
        "CONDITIONAL",
        "ON_DEMAND"
      ],
      "type": "string"
    },
    "TriggerUpdate": {
      "description": "A structure used to provide information used to update a trigger. This object updates the previous trigger definition by overwriting it completely.",
      "properties": {
        "Actions": {
          "allOf": [
            {
              "$ref": "#/definitions/ActionList"
            },
            {
              "description": "The actions initiated by this trigger."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of this trigger."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        },
        "Predicate": {
          "allOf": [
            {
              "$ref": "#/definitions/Predicate"
            },
            {
              "description": "The predicate of this trigger, which defines when it will fire."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "TypeString": {
      "maxLength": 20000,
      "minLength": 0,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "URI": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "UntagResourceRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the resource from which to remove the tags."
            }
          ]
        },
        "TagsToRemove": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeysList"
            },
            {
              "description": "Tags to remove from this resource."
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "TagsToRemove"
      ],
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateBehavior": {
      "enum": [
        "LOG",
        "UPDATE_IN_DATABASE"
      ],
      "type": "string"
    },
    "UpdateClassifierRequest": {
      "properties": {
        "CsvClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateCsvClassifierRequest"
            },
            {
              "description": "A <code>CsvClassifier</code> object with updated fields."
            }
          ]
        },
        "GrokClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateGrokClassifierRequest"
            },
            {
              "description": "A <code>GrokClassifier</code> object with updated fields."
            }
          ]
        },
        "JsonClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateJsonClassifierRequest"
            },
            {
              "description": "A <code>JsonClassifier</code> object with updated fields."
            }
          ]
        },
        "XMLClassifier": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateXMLClassifierRequest"
            },
            {
              "description": "An <code>XMLClassifier</code> object with updated fields."
            }
          ]
        }
      },
      "title": "UpdateClassifierRequest",
      "type": "object"
    },
    "UpdateClassifierResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateColumnStatisticsForPartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default."
            }
          ]
        },
        "ColumnStatisticsList": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateColumnStatisticsList"
            },
            {
              "description": "A list of the column statistics."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the partitions reside."
            }
          ]
        },
        "PartitionValues": {
          "allOf": [
            {
              "$ref": "#/definitions/ValueStringList"
            },
            {
              "description": "A list of partition values identifying the partition."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partitions' table."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValues",
        "ColumnStatisticsList"
      ],
      "title": "UpdateColumnStatisticsForPartitionRequest",
      "type": "object"
    },
    "UpdateColumnStatisticsForPartitionResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnStatisticsErrors"
            },
            {
              "description": "Error occurred during updating column statistics data."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateColumnStatisticsForTableRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default."
            }
          ]
        },
        "ColumnStatisticsList": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateColumnStatisticsList"
            },
            {
              "description": "A list of the column statistics."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the partitions reside."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the partitions' table."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "ColumnStatisticsList"
      ],
      "title": "UpdateColumnStatisticsForTableRequest",
      "type": "object"
    },
    "UpdateColumnStatisticsForTableResponse": {
      "properties": {
        "Errors": {
          "allOf": [
            {
              "$ref": "#/definitions/ColumnStatisticsErrors"
            },
            {
              "description": "List of ColumnStatisticsErrors."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateColumnStatisticsList": {
      "items": {
        "$ref": "#/definitions/ColumnStatistics"
      },
      "maxItems": 25,
      "minItems": 0,
      "type": "array"
    },
    "UpdateConnectionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the connection resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "ConnectionInput": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectionInput"
            },
            {
              "description": "A <code>ConnectionInput</code> object that redefines the connection in question."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the connection definition to update."
            }
          ]
        }
      },
      "required": [
        "Name",
        "ConnectionInput"
      ],
      "title": "UpdateConnectionRequest",
      "type": "object"
    },
    "UpdateConnectionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateCrawlerRequest": {
      "properties": {
        "Classifiers": {
          "allOf": [
            {
              "$ref": "#/definitions/ClassifierNameList"
            },
            {
              "description": "A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification."
            }
          ]
        },
        "Configuration": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerConfiguration"
            },
            {
              "description": "Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Configuring a Crawler</a>."
            }
          ]
        },
        "CrawlerSecurityConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerSecurityConfiguration"
            },
            {
              "description": "The name of the <code>SecurityConfiguration</code> structure to be used by this crawler."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseName"
            },
            {
              "description": "The AWS Glue database where results are stored, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionStringRemovable"
            },
            {
              "description": "A description of the new crawler."
            }
          ]
        },
        "LineageConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/LineageConfiguration"
            },
            {
              "description": "Specifies data lineage configuration settings for the crawler."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the new crawler."
            }
          ]
        },
        "RecrawlPolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/RecrawlPolicy"
            },
            {
              "description": "A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/Role"
            },
            {
              "description": "The IAM role or Amazon Resource Name (ARN) of an IAM role that is used by the new crawler to access customer resources."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/CronExpression"
            },
            {
              "description": "A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>."
            }
          ]
        },
        "SchemaChangePolicy": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaChangePolicy"
            },
            {
              "description": "The policy for the crawler's update and deletion behavior."
            }
          ]
        },
        "TablePrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/TablePrefix"
            },
            {
              "description": "The table prefix used for catalog tables that are created."
            }
          ]
        },
        "Targets": {
          "allOf": [
            {
              "$ref": "#/definitions/CrawlerTargets"
            },
            {
              "description": "A list of targets to crawl."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "UpdateCrawlerRequest",
      "type": "object"
    },
    "UpdateCrawlerResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateCrawlerScheduleRequest": {
      "properties": {
        "CrawlerName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the crawler whose schedule to update."
            }
          ]
        },
        "Schedule": {
          "allOf": [
            {
              "$ref": "#/definitions/CronExpression"
            },
            {
              "description": "The updated <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>."
            }
          ]
        }
      },
      "required": [
        "CrawlerName"
      ],
      "title": "UpdateCrawlerScheduleRequest",
      "type": "object"
    },
    "UpdateCrawlerScheduleResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateCsvClassifierRequest": {
      "description": "Specifies a custom CSV classifier to be updated.",
      "properties": {
        "AllowSingleColumn": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Enables the processing of files that contain only one column."
            }
          ]
        },
        "ContainsHeader": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvHeaderOption"
            },
            {
              "description": "Indicates whether the CSV file contains a header."
            }
          ]
        },
        "Delimiter": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvColumnDelimiter"
            },
            {
              "description": "A custom symbol to denote what separates each column entry in the row."
            }
          ]
        },
        "DisableValueTrimming": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": "Specifies not to trim values before identifying the type of column values. The default value is true."
            }
          ]
        },
        "Header": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvHeader"
            },
            {
              "description": "A list of strings representing column names."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        },
        "QuoteSymbol": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvQuoteSymbol"
            },
            {
              "description": "A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "UpdateDatabaseRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the metadata database resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseInput": {
          "allOf": [
            {
              "$ref": "#/definitions/DatabaseInput"
            },
            {
              "description": "A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase."
            }
          ]
        }
      },
      "required": [
        "Name",
        "DatabaseInput"
      ],
      "title": "UpdateDatabaseRequest",
      "type": "object"
    },
    "UpdateDatabaseResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateDevEndpointRequest": {
      "properties": {
        "AddArguments": {
          "allOf": [
            {
              "$ref": "#/definitions/MapValue"
            },
            {
              "description": "<p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p> <p>Valid arguments are:</p> <ul> <li> <p> <code>\"--enable-glue-datacatalog\": \"\"</code> </p> </li> <li> <p> <code>\"GLUE_PYTHON_VERSION\": \"3\"</code> </p> </li> <li> <p> <code>\"GLUE_PYTHON_VERSION\": \"2\"</code> </p> </li> </ul> <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>"
            }
          ]
        },
        "AddPublicKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/PublicKeysList"
            },
            {
              "description": "The list of public keys for the <code>DevEndpoint</code> to use."
            }
          ]
        },
        "CustomLibraries": {
          "allOf": [
            {
              "$ref": "#/definitions/DevEndpointCustomLibraries"
            },
            {
              "description": "Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>."
            }
          ]
        },
        "DeleteArguments": {
          "allOf": [
            {
              "$ref": "#/definitions/StringList"
            },
            {
              "description": "The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>."
            }
          ]
        },
        "DeletePublicKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/PublicKeysList"
            },
            {
              "description": "The list of public keys to be deleted from the <code>DevEndpoint</code>."
            }
          ]
        },
        "EndpointName": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The name of the <code>DevEndpoint</code> to be updated."
            }
          ]
        },
        "PublicKey": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The public key for the <code>DevEndpoint</code> to use."
            }
          ]
        },
        "UpdateEtlLibraries": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanValue"
            },
            {
              "description": " <code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise."
            }
          ]
        }
      },
      "required": [
        "EndpointName"
      ],
      "title": "UpdateDevEndpointRequest",
      "type": "object"
    },
    "UpdateDevEndpointResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateGrokClassifierRequest": {
      "description": "Specifies a grok classifier to update when passed to <code>UpdateClassifier</code>.",
      "properties": {
        "Classification": {
          "allOf": [
            {
              "$ref": "#/definitions/Classification"
            },
            {
              "description": "An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on."
            }
          ]
        },
        "CustomPatterns": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomPatterns"
            },
            {
              "description": "Optional custom grok patterns used by this classifier."
            }
          ]
        },
        "GrokPattern": {
          "allOf": [
            {
              "$ref": "#/definitions/GrokPattern"
            },
            {
              "description": "The grok pattern used by this classifier."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the <code>GrokClassifier</code>."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "UpdateJobRequest": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the job definition to update."
            }
          ]
        },
        "JobUpdate": {
          "allOf": [
            {
              "$ref": "#/definitions/JobUpdate"
            },
            {
              "description": "Specifies the values with which to update the job definition."
            }
          ]
        }
      },
      "required": [
        "JobName",
        "JobUpdate"
      ],
      "title": "UpdateJobRequest",
      "type": "object"
    },
    "UpdateJobResponse": {
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Returns the name of the updated job definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateJsonClassifierRequest": {
      "description": "Specifies a JSON classifier to be updated.",
      "properties": {
        "JsonPath": {
          "allOf": [
            {
              "$ref": "#/definitions/JsonPath"
            },
            {
              "description": "A <code>JsonPath</code> string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in <a href=\"https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json\">Writing JsonPath Custom Classifiers</a>."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "UpdateMLTransformRequest": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the transform. The default is an empty string."
            }
          ]
        },
        "GlueVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueVersionString"
            },
            {
              "description": "This value determines which version of AWS Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">AWS Glue Versions</a> in the developer guide."
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableDouble"
            },
            {
              "description": "<p>The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">AWS Glue pricing page</a>. </p> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>"
            }
          ]
        },
        "MaxRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "The maximum number of times to retry a task for this transform after a task run fails."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The unique name that you gave the transform when you created it."
            }
          ]
        },
        "NumberOfWorkers": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "The number of workers of a defined <code>workerType</code> that are allocated when this task runs."
            }
          ]
        },
        "Parameters": {
          "allOf": [
            {
              "$ref": "#/definitions/TransformParameters"
            },
            {
              "description": "The configuration parameters that are specific to the transform type (algorithm) used. Conditionally dependent on the transform type."
            }
          ]
        },
        "Role": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleString"
            },
            {
              "description": "The name or Amazon Resource Name (ARN) of the IAM role with the required permissions."
            }
          ]
        },
        "Timeout": {
          "allOf": [
            {
              "$ref": "#/definitions/Timeout"
            },
            {
              "description": "The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours)."
            }
          ]
        },
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "A unique identifier that was generated when the transform was created."
            }
          ]
        },
        "WorkerType": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkerType"
            },
            {
              "description": "<p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "TransformId"
      ],
      "title": "UpdateMLTransformRequest",
      "type": "object"
    },
    "UpdateMLTransformResponse": {
      "properties": {
        "TransformId": {
          "allOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "description": "The unique identifier for the transform that was updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdatePartitionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the partition to be updated resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database in which the table in question resides."
            }
          ]
        },
        "PartitionInput": {
          "allOf": [
            {
              "$ref": "#/definitions/PartitionInput"
            },
            {
              "description": "<p>The new partition object to update the partition to.</p> <p>The <code>Values</code> property can't be changed. If you want to change the partition key values for a partition, delete and recreate the partition.</p>"
            }
          ]
        },
        "PartitionValueList": {
          "allOf": [
            {
              "$ref": "#/definitions/BoundedPartitionValueList"
            },
            {
              "description": "List of partition key values that define the partition to update."
            }
          ]
        },
        "TableName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the table in which the partition to be updated is located."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableName",
        "PartitionValueList",
        "PartitionInput"
      ],
      "title": "UpdatePartitionRequest",
      "type": "object"
    },
    "UpdatePartitionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateRegistryInput": {
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "A description of the registry. If description is not provided, this field will not be updated."
            }
          ]
        },
        "RegistryId": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistryId"
            },
            {
              "description": "This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN)."
            }
          ]
        }
      },
      "required": [
        "RegistryId",
        "Description"
      ],
      "title": "UpdateRegistryInput",
      "type": "object"
    },
    "UpdateRegistryResponse": {
      "properties": {
        "RegistryArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource name (ARN) of the updated registry."
            }
          ]
        },
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the updated registry."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateSchemaInput": {
      "properties": {
        "Compatibility": {
          "allOf": [
            {
              "$ref": "#/definitions/Compatibility"
            },
            {
              "description": "The new compatibility setting for the schema."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/DescriptionString"
            },
            {
              "description": "The new description for the schema."
            }
          ]
        },
        "SchemaId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaId"
            },
            {
              "description": "<p>This is a wrapper structure to contain schema identity fields. The structure contains:</p> <ul> <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li> </ul>"
            }
          ]
        },
        "SchemaVersionNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaVersionNumber"
            },
            {
              "description": "Version number required for check pointing. One of <code>VersionNumber</code> or <code>Compatibility</code> has to be provided."
            }
          ]
        }
      },
      "required": [
        "SchemaId"
      ],
      "title": "UpdateSchemaInput",
      "type": "object"
    },
    "UpdateSchemaResponse": {
      "properties": {
        "RegistryName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the registry that contains the schema."
            }
          ]
        },
        "SchemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/GlueResourceArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema."
            }
          ]
        },
        "SchemaName": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaRegistryNameString"
            },
            {
              "description": "The name of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateTableRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the table resides. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase."
            }
          ]
        },
        "SkipArchive": {
          "allOf": [
            {
              "$ref": "#/definitions/BooleanNullable"
            },
            {
              "description": "By default, <code>UpdateTable</code> always creates an archived version of the table before updating it. However, if <code>skipArchive</code> is set to true, <code>UpdateTable</code> does not create the archived version."
            }
          ]
        },
        "TableInput": {
          "allOf": [
            {
              "$ref": "#/definitions/TableInput"
            },
            {
              "description": "An updated <code>TableInput</code> object to define the metadata table in the catalog."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "TableInput"
      ],
      "title": "UpdateTableRequest",
      "type": "object"
    },
    "UpdateTableResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateTriggerRequest": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the trigger to update."
            }
          ]
        },
        "TriggerUpdate": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerUpdate"
            },
            {
              "description": "The new values with which to update the trigger."
            }
          ]
        }
      },
      "required": [
        "Name",
        "TriggerUpdate"
      ],
      "title": "UpdateTriggerRequest",
      "type": "object"
    },
    "UpdateTriggerResponse": {
      "properties": {
        "Trigger": {
          "allOf": [
            {
              "$ref": "#/definitions/Trigger"
            },
            {
              "description": "The resulting trigger definition."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateUserDefinedFunctionRequest": {
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog where the function to be updated is located. If none is provided, the AWS account ID is used by default."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database where the function to be updated is located."
            }
          ]
        },
        "FunctionInput": {
          "allOf": [
            {
              "$ref": "#/definitions/UserDefinedFunctionInput"
            },
            {
              "description": "A <code>FunctionInput</code> object that redefines the function in the Data Catalog."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the function."
            }
          ]
        }
      },
      "required": [
        "DatabaseName",
        "FunctionName",
        "FunctionInput"
      ],
      "title": "UpdateUserDefinedFunctionRequest",
      "type": "object"
    },
    "UpdateUserDefinedFunctionResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateWorkflowRequest": {
      "properties": {
        "DefaultRunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRunProperties"
            },
            {
              "description": "A collection of properties to be used as part of each execution of the workflow."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "The description of the workflow."
            }
          ]
        },
        "MaxConcurrentRuns": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the workflow to be updated."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "title": "UpdateWorkflowRequest",
      "type": "object"
    },
    "UpdateWorkflowResponse": {
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the workflow which was specified in input."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateXMLClassifierRequest": {
      "description": "Specifies an XML classifier to be updated.",
      "properties": {
        "Classification": {
          "allOf": [
            {
              "$ref": "#/definitions/Classification"
            },
            {
              "description": "An identifier of the data format that the classifier matches."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        },
        "RowTag": {
          "allOf": [
            {
              "$ref": "#/definitions/RowTag"
            },
            {
              "description": "The XML tag designating the element that contains each record in an XML document being parsed. This cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not)."
            }
          ]
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "UpdatedTimestamp": {
      "type": "string"
    },
    "UriString": {
      "type": "string"
    },
    "UserDefinedFunction": {
      "description": "Represents the equivalent of a Hive user-defined function (<code>UDF</code>) definition.",
      "properties": {
        "CatalogId": {
          "allOf": [
            {
              "$ref": "#/definitions/CatalogIdString"
            },
            {
              "description": "The ID of the Data Catalog in which the function resides."
            }
          ]
        },
        "ClassName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The Java class that contains the function code."
            }
          ]
        },
        "CreateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time at which the function was created."
            }
          ]
        },
        "DatabaseName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the catalog database that contains the function."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the function."
            }
          ]
        },
        "OwnerName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The owner of the function."
            }
          ]
        },
        "OwnerType": {
          "allOf": [
            {
              "$ref": "#/definitions/PrincipalType"
            },
            {
              "description": "The owner type."
            }
          ]
        },
        "ResourceUris": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceUriList"
            },
            {
              "description": "The resource URIs for the function."
            }
          ]
        }
      },
      "type": "object"
    },
    "UserDefinedFunctionInput": {
      "description": "A structure used to create or update a user-defined function.",
      "properties": {
        "ClassName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The Java class that contains the function code."
            }
          ]
        },
        "FunctionName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the function."
            }
          ]
        },
        "OwnerName": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The owner of the function."
            }
          ]
        },
        "OwnerType": {
          "allOf": [
            {
              "$ref": "#/definitions/PrincipalType"
            },
            {
              "description": "The owner type."
            }
          ]
        },
        "ResourceUris": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceUriList"
            },
            {
              "description": "The resource URIs for the function."
            }
          ]
        }
      },
      "type": "object"
    },
    "UserDefinedFunctionList": {
      "items": {
        "$ref": "#/definitions/UserDefinedFunction"
      },
      "type": "array"
    },
    "ValidationException": {},
    "ValueString": {
      "maxLength": 1024,
      "type": "string"
    },
    "ValueStringList": {
      "items": {
        "$ref": "#/definitions/ValueString"
      },
      "type": "array"
    },
    "VersionId": {
      "type": "integer"
    },
    "VersionLongNumber": {
      "maximum": 100000,
      "minimum": 1,
      "type": "integer"
    },
    "VersionMismatchException": {},
    "VersionString": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    },
    "VersionsString": {
      "maxLength": 100000,
      "minLength": 1,
      "pattern": "[1-9][0-9]*|[1-9][0-9]*-[1-9][0-9]*",
      "type": "string"
    },
    "ViewTextString": {
      "maxLength": 409600,
      "type": "string"
    },
    "WorkerType": {
      "enum": [
        "Standard",
        "G.1X",
        "G.2X"
      ],
      "type": "string"
    },
    "Workflow": {
      "description": "A workflow represents a flow in which AWS Glue components should be executed to complete a logical task.",
      "properties": {
        "CreatedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The date and time when the workflow was created."
            }
          ]
        },
        "DefaultRunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRunProperties"
            },
            {
              "description": "A collection of properties to be used as part of each execution of the workflow."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericString"
            },
            {
              "description": "A description of the workflow."
            }
          ]
        },
        "Graph": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowGraph"
            },
            {
              "description": "The graph representing all the AWS Glue components that belong to the workflow as nodes and directed connections between them as edges."
            }
          ]
        },
        "LastModifiedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The date and time when the workflow was last modified."
            }
          ]
        },
        "LastRun": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRun"
            },
            {
              "description": "The information about the last execution of the workflow."
            }
          ]
        },
        "MaxConcurrentRuns": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableInteger"
            },
            {
              "description": "You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the workflow representing the flow."
            }
          ]
        }
      },
      "type": "object"
    },
    "WorkflowGraph": {
      "description": "A workflow graph represents the complete workflow containing all the AWS Glue components present in the workflow and all the directed connections between them.",
      "properties": {
        "Edges": {
          "allOf": [
            {
              "$ref": "#/definitions/EdgeList"
            },
            {
              "description": "A list of all the directed connections between the nodes belonging to the workflow."
            }
          ]
        },
        "Nodes": {
          "allOf": [
            {
              "$ref": "#/definitions/NodeList"
            },
            {
              "description": "A list of the the AWS Glue components belong to the workflow represented as nodes."
            }
          ]
        }
      },
      "type": "object"
    },
    "WorkflowNames": {
      "items": {
        "$ref": "#/definitions/NameString"
      },
      "maxItems": 25,
      "minItems": 1,
      "type": "array"
    },
    "WorkflowRun": {
      "description": "A workflow run is an execution of a workflow providing all the runtime information.",
      "properties": {
        "CompletedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The date and time when the workflow run completed."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorString"
            },
            {
              "description": "This error message describes any error that may have occurred in starting the workflow run. Currently the only error message is \"Concurrent runs exceeded for workflow: <code>foo</code>.\""
            }
          ]
        },
        "Graph": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowGraph"
            },
            {
              "description": "The graph representing all the AWS Glue components that belong to the workflow as nodes and directed connections between them as edges."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "Name of the workflow that was executed."
            }
          ]
        },
        "PreviousRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of the previous workflow run."
            }
          ]
        },
        "StartedOn": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampValue"
            },
            {
              "description": "The date and time when the workflow run was started."
            }
          ]
        },
        "Statistics": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRunStatistics"
            },
            {
              "description": "The statistics of the run."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRunStatus"
            },
            {
              "description": "The status of the workflow run."
            }
          ]
        },
        "WorkflowRunId": {
          "allOf": [
            {
              "$ref": "#/definitions/IdString"
            },
            {
              "description": "The ID of this workflow run."
            }
          ]
        },
        "WorkflowRunProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/WorkflowRunProperties"
            },
            {
              "description": "The workflow run properties which were set during the run."
            }
          ]
        }
      },
      "type": "object"
    },
    "WorkflowRunProperties": {
      "additionalProperties": {
        "$ref": "#/definitions/GenericString"
      },
      "type": "object"
    },
    "WorkflowRunStatistics": {
      "description": "Workflow run statistics provides statistics about the workflow run.",
      "properties": {
        "FailedActions": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "Total number of Actions that have failed."
            }
          ]
        },
        "RunningActions": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "Total number Actions in running state."
            }
          ]
        },
        "StoppedActions": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "Total number of Actions that have stopped."
            }
          ]
        },
        "SucceededActions": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "Total number of Actions that have succeeded."
            }
          ]
        },
        "TimeoutActions": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "Total number of Actions that timed out."
            }
          ]
        },
        "TotalActions": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerValue"
            },
            {
              "description": "Total number of Actions in the workflow run."
            }
          ]
        }
      },
      "type": "object"
    },
    "WorkflowRunStatus": {
      "enum": [
        "RUNNING",
        "COMPLETED",
        "STOPPING",
        "STOPPED",
        "ERROR"
      ],
      "type": "string"
    },
    "WorkflowRuns": {
      "items": {
        "$ref": "#/definitions/WorkflowRun"
      },
      "maxItems": 1000,
      "minItems": 1,
      "type": "array"
    },
    "Workflows": {
      "items": {
        "$ref": "#/definitions/Workflow"
      },
      "maxItems": 25,
      "minItems": 1,
      "type": "array"
    },
    "XMLClassifier": {
      "description": "A classifier for <code>XML</code> content.",
      "properties": {
        "Classification": {
          "allOf": [
            {
              "$ref": "#/definitions/Classification"
            },
            {
              "description": "An identifier of the data format that the classifier matches."
            }
          ]
        },
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this classifier was registered."
            }
          ]
        },
        "LastUpdated": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that this classifier was last updated."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/NameString"
            },
            {
              "description": "The name of the classifier."
            }
          ]
        },
        "RowTag": {
          "allOf": [
            {
              "$ref": "#/definitions/RowTag"
            },
            {
              "description": "The XML tag designating the element that contains each record in an XML document being parsed. This can't identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a=\"A\" item_b=\"B\"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a=\"A\" item_b=\"B\" /&gt;</code> is not)."
            }
          ]
        },
        "Version": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionId"
            },
            {
              "description": "The version of this classifier."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Classification"
      ],
      "type": "object"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/glue/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}