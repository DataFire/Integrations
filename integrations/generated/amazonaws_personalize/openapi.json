{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "Amazon Personalize is a machine learning service that makes it easy to add individualized recommendations to customers.",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Personalize",
    "version": "2018-05-22",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/personalize-2018-05-22.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "personalize",
    "x-datafire": {
      "name": "amazonaws_personalize",
      "type": "openapi"
    }
  },
  "host": "personalize.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=AmazonPersonalize.CreateBatchInferenceJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateBatchInferenceJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBatchInferenceJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateBatchInferenceJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "Creates a batch inference job. The operation can handle up to 50 million records and the input file must be in JSON format. For more information, see <a>recommendations-batch</a>.",
        "operationId": "CreateBatchInferenceJob"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.CreateCampaign": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateCampaign"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCampaignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateCampaignResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Creates a campaign by deploying a solution version. When a client calls the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html\">GetRecommendations</a> and <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetPersonalizedRanking.html\">GetPersonalizedRanking</a> APIs, a campaign is specified in the request.</p> <p> <b>Minimum Provisioned TPS and Auto-Scaling</b> </p> <p>A transaction is a single <code>GetRecommendations</code> or <code>GetPersonalizedRanking</code> call. Transactions per second (TPS) is the throughput and unit of billing for Amazon Personalize. The minimum provisioned TPS (<code>minProvisionedTPS</code>) specifies the baseline throughput provisioned by Amazon Personalize, and thus, the minimum billing charge. If your TPS increases beyond <code>minProvisionedTPS</code>, Amazon Personalize auto-scales the provisioned capacity up and down, but never below <code>minProvisionedTPS</code>, to maintain a 70% utilization. There's a short time delay while the capacity is increased that might cause loss of transactions. It's recommended to start with a low <code>minProvisionedTPS</code>, track your usage using Amazon CloudWatch metrics, and then increase the <code>minProvisionedTPS</code> as necessary.</p> <p> <b>Status</b> </p> <p>A campaign can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul> <p>To get the campaign status, call <a>DescribeCampaign</a>.</p> <note> <p>Wait until the <code>status</code> of the campaign is <code>ACTIVE</code> before asking the campaign for recommendations.</p> </note> <p class=\"title\"> <b>Related APIs</b> </p> <ul> <li> <p> <a>ListCampaigns</a> </p> </li> <li> <p> <a>DescribeCampaign</a> </p> </li> <li> <p> <a>UpdateCampaign</a> </p> </li> <li> <p> <a>DeleteCampaign</a> </p> </li> </ul>",
        "operationId": "CreateCampaign"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.CreateDataset": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateDataset"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDatasetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDatasetResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Creates an empty dataset and adds it to the specified dataset group. Use <a>CreateDatasetImportJob</a> to import your training data to a dataset.</p> <p>There are three types of datasets:</p> <ul> <li> <p>Interactions</p> </li> <li> <p>Items</p> </li> <li> <p>Users</p> </li> </ul> <p>Each dataset type has an associated schema with required field types. Only the <code>Interactions</code> dataset is required in order to train a model (also referred to as creating a solution).</p> <p>A dataset can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul> <p>To get the status of the dataset, call <a>DescribeDataset</a>.</p> <p class=\"title\"> <b>Related APIs</b> </p> <ul> <li> <p> <a>CreateDatasetGroup</a> </p> </li> <li> <p> <a>ListDatasets</a> </p> </li> <li> <p> <a>DescribeDataset</a> </p> </li> <li> <p> <a>DeleteDataset</a> </p> </li> </ul>",
        "operationId": "CreateDataset"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.CreateDatasetGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateDatasetGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDatasetGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDatasetGroupResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates an empty dataset group. A dataset group contains related datasets that supply data for training a model. A dataset group can contain at most three datasets, one for each type of dataset:</p> <ul> <li> <p>Interactions</p> </li> <li> <p>Items</p> </li> <li> <p>Users</p> </li> </ul> <p>To train a model (create a solution), a dataset group that contains an <code>Interactions</code> dataset is required. Call <a>CreateDataset</a> to add a dataset to the group.</p> <p>A dataset group can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING</p> </li> </ul> <p>To get the status of the dataset group, call <a>DescribeDatasetGroup</a>. If the status shows as CREATE FAILED, the response includes a <code>failureReason</code> key, which describes why the creation failed.</p> <note> <p>You must wait until the <code>status</code> of the dataset group is <code>ACTIVE</code> before adding a dataset to the group.</p> </note> <p>You can specify an AWS Key Management Service (KMS) key to encrypt the datasets in the group. If you specify a KMS key, you must also include an AWS Identity and Access Management (IAM) role that has permission to access the key.</p> <p class=\"title\"> <b>APIs that require a dataset group ARN in the request</b> </p> <ul> <li> <p> <a>CreateDataset</a> </p> </li> <li> <p> <a>CreateEventTracker</a> </p> </li> <li> <p> <a>CreateSolution</a> </p> </li> </ul> <p class=\"title\"> <b>Related APIs</b> </p> <ul> <li> <p> <a>ListDatasetGroups</a> </p> </li> <li> <p> <a>DescribeDatasetGroup</a> </p> </li> <li> <p> <a>DeleteDatasetGroup</a> </p> </li> </ul>",
        "operationId": "CreateDatasetGroup"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.CreateDatasetImportJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateDatasetImportJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDatasetImportJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDatasetImportJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Creates a job that imports training data from your data source (an Amazon S3 bucket) to an Amazon Personalize dataset. To allow Amazon Personalize to import the training data, you must specify an AWS Identity and Access Management (IAM) role that has permission to read from the data source, as Amazon Personalize makes a copy of your data and processes it in an internal AWS system.</p> <important> <p>The dataset import job replaces any previous data in the dataset.</p> </important> <p> <b>Status</b> </p> <p>A dataset import job can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> </ul> <p>To get the status of the import job, call <a>DescribeDatasetImportJob</a>, providing the Amazon Resource Name (ARN) of the dataset import job. The dataset import is complete when the status shows as ACTIVE. If the status shows as CREATE FAILED, the response includes a <code>failureReason</code> key, which describes why the job failed.</p> <note> <p>Importing takes time. You must wait until the status shows as ACTIVE before training a model using the dataset.</p> </note> <p class=\"title\"> <b>Related APIs</b> </p> <ul> <li> <p> <a>ListDatasetImportJobs</a> </p> </li> <li> <p> <a>DescribeDatasetImportJob</a> </p> </li> </ul>",
        "operationId": "CreateDatasetImportJob"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.CreateEventTracker": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateEventTracker"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEventTrackerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateEventTrackerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Creates an event tracker that you use when sending event data to the specified dataset group using the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_UBS_PutEvents.html\">PutEvents</a> API.</p> <p>When Amazon Personalize creates an event tracker, it also creates an <i>event-interactions</i> dataset in the dataset group associated with the event tracker. The event-interactions dataset stores the event data from the <code>PutEvents</code> call. The contents of this dataset are not available to the user.</p> <note> <p>Only one event tracker can be associated with a dataset group. You will get an error if you call <code>CreateEventTracker</code> using the same dataset group as an existing event tracker.</p> </note> <p>When you send event data you include your tracking ID. The tracking ID identifies the customer and authorizes the customer to send the data.</p> <p>The event tracker can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul> <p>To get the status of the event tracker, call <a>DescribeEventTracker</a>.</p> <note> <p>The event tracker must be in the ACTIVE state before using the tracking ID.</p> </note> <p class=\"title\"> <b>Related APIs</b> </p> <ul> <li> <p> <a>ListEventTrackers</a> </p> </li> <li> <p> <a>DescribeEventTracker</a> </p> </li> <li> <p> <a>DeleteEventTracker</a> </p> </li> </ul>",
        "operationId": "CreateEventTracker"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.CreateFilter": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateFilter"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFilterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateFilterResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "Creates a recommendation filter. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filters.html\">Using Filters with Amazon Personalize</a>.",
        "operationId": "CreateFilter"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.CreateSchema": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateSchema"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSchemaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSchemaResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          }
        },
        "description": "<p>Creates an Amazon Personalize schema from the specified schema string. The schema you create must be in Avro JSON format.</p> <p>Amazon Personalize recognizes three schema variants. Each schema is associated with a dataset type and has a set of required field and keywords. You specify a schema when you call <a>CreateDataset</a>.</p> <p class=\"title\"> <b>Related APIs</b> </p> <ul> <li> <p> <a>ListSchemas</a> </p> </li> <li> <p> <a>DescribeSchema</a> </p> </li> <li> <p> <a>DeleteSchema</a> </p> </li> </ul>",
        "operationId": "CreateSchema"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.CreateSolution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateSolution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSolutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSolutionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ResourceAlreadyExistsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Creates the configuration for training a model. A trained model is known as a solution. After the configuration is created, you train the model (create a solution) by calling the <a>CreateSolutionVersion</a> operation. Every time you call <code>CreateSolutionVersion</code>, a new version of the solution is created.</p> <p>After creating a solution version, you check its accuracy by calling <a>GetSolutionMetrics</a>. When you are satisfied with the version, you deploy it using <a>CreateCampaign</a>. The campaign provides recommendations to a client through the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html\">GetRecommendations</a> API.</p> <p>To train a model, Amazon Personalize requires training data and a recipe. The training data comes from the dataset group that you provide in the request. A recipe specifies the training algorithm and a feature transformation. You can specify one of the predefined recipes provided by Amazon Personalize. Alternatively, you can specify <code>performAutoML</code> and Amazon Personalize will analyze your data and select the optimum USER_PERSONALIZATION recipe for you.</p> <p> <b>Status</b> </p> <p>A solution can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul> <p>To get the status of the solution, call <a>DescribeSolution</a>. Wait until the status shows as ACTIVE before calling <code>CreateSolutionVersion</code>.</p> <p class=\"title\"> <b>Related APIs</b> </p> <ul> <li> <p> <a>ListSolutions</a> </p> </li> <li> <p> <a>CreateSolutionVersion</a> </p> </li> <li> <p> <a>DescribeSolution</a> </p> </li> <li> <p> <a>DeleteSolution</a> </p> </li> </ul> <ul> <li> <p> <a>ListSolutionVersions</a> </p> </li> <li> <p> <a>DescribeSolutionVersion</a> </p> </li> </ul>",
        "operationId": "CreateSolution"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.CreateSolutionVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.CreateSolutionVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSolutionVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSolutionVersionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Trains or retrains an active solution. A solution is created using the <a>CreateSolution</a> operation and must be in the ACTIVE state before calling <code>CreateSolutionVersion</code>. A new version of the solution is created every time you call this operation.</p> <p> <b>Status</b> </p> <p>A solution version can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> </ul> <p>To get the status of the version, call <a>DescribeSolutionVersion</a>. Wait until the status shows as ACTIVE before calling <code>CreateCampaign</code>.</p> <p>If the status shows as CREATE FAILED, the response includes a <code>failureReason</code> key, which describes why the job failed.</p> <p class=\"title\"> <b>Related APIs</b> </p> <ul> <li> <p> <a>ListSolutionVersions</a> </p> </li> <li> <p> <a>DescribeSolutionVersion</a> </p> </li> </ul> <ul> <li> <p> <a>ListSolutions</a> </p> </li> <li> <p> <a>CreateSolution</a> </p> </li> <li> <p> <a>DescribeSolution</a> </p> </li> <li> <p> <a>DeleteSolution</a> </p> </li> </ul>",
        "operationId": "CreateSolutionVersion"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DeleteCampaign": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DeleteCampaign"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteCampaignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "Removes a campaign by deleting the solution deployment. The solution that the campaign is based on is not deleted and can be redeployed when needed. A deleted campaign can no longer be specified in a <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html\">GetRecommendations</a> request. For more information on campaigns, see <a>CreateCampaign</a>.",
        "operationId": "DeleteCampaign"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DeleteDataset": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DeleteDataset"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDatasetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "Deletes a dataset. You can't delete a dataset if an associated <code>DatasetImportJob</code> or <code>SolutionVersion</code> is in the CREATE PENDING or IN PROGRESS state. For more information on datasets, see <a>CreateDataset</a>.",
        "operationId": "DeleteDataset"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DeleteDatasetGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DeleteDatasetGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDatasetGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Deletes a dataset group. Before you delete a dataset group, you must delete the following:</p> <ul> <li> <p>All associated event trackers.</p> </li> <li> <p>All associated solutions.</p> </li> <li> <p>All datasets in the dataset group.</p> </li> </ul>",
        "operationId": "DeleteDatasetGroup"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DeleteEventTracker": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DeleteEventTracker"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEventTrackerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "Deletes the event tracker. Does not delete the event-interactions dataset from the associated dataset group. For more information on event trackers, see <a>CreateEventTracker</a>.",
        "operationId": "DeleteEventTracker"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DeleteFilter": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DeleteFilter"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteFilterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "Deletes a filter.",
        "operationId": "DeleteFilter"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DeleteSchema": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DeleteSchema"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSchemaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "Deletes a schema. Before deleting a schema, you must delete all datasets referencing the schema. For more information on schemas, see <a>CreateSchema</a>.",
        "operationId": "DeleteSchema"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DeleteSolution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DeleteSolution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSolutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "Deletes all versions of a solution and the <code>Solution</code> object itself. Before deleting a solution, you must delete all campaigns based on the solution. To determine what campaigns are using the solution, call <a>ListCampaigns</a> and supply the Amazon Resource Name (ARN) of the solution. You can't delete a solution if an associated <code>SolutionVersion</code> is in the CREATE PENDING or IN PROGRESS state. For more information on solutions, see <a>CreateSolution</a>.",
        "operationId": "DeleteSolution"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeAlgorithm": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeAlgorithm"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeAlgorithmRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeAlgorithmResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes the given algorithm.",
        "operationId": "DescribeAlgorithm"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeBatchInferenceJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeBatchInferenceJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeBatchInferenceJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeBatchInferenceJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Gets the properties of a batch inference job including name, Amazon Resource Name (ARN), status, input and output configurations, and the ARN of the solution version used to generate the recommendations.",
        "operationId": "DescribeBatchInferenceJob"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeCampaign": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeCampaign"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeCampaignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeCampaignResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "<p>Describes the given campaign, including its status.</p> <p>A campaign can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul> <p>When the <code>status</code> is <code>CREATE FAILED</code>, the response includes the <code>failureReason</code> key, which describes why.</p> <p>For more information on campaigns, see <a>CreateCampaign</a>.</p>",
        "operationId": "DescribeCampaign"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeDataset": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeDataset"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDatasetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDatasetResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes the given dataset. For more information on datasets, see <a>CreateDataset</a>.",
        "operationId": "DescribeDataset"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeDatasetGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeDatasetGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDatasetGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDatasetGroupResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes the given dataset group. For more information on dataset groups, see <a>CreateDatasetGroup</a>.",
        "operationId": "DescribeDatasetGroup"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeDatasetImportJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeDatasetImportJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDatasetImportJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDatasetImportJobResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes the dataset import job created by <a>CreateDatasetImportJob</a>, including the import job status.",
        "operationId": "DescribeDatasetImportJob"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeEventTracker": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeEventTracker"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEventTrackerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEventTrackerResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes an event tracker. The response includes the <code>trackingId</code> and <code>status</code> of the event tracker. For more information on event trackers, see <a>CreateEventTracker</a>.",
        "operationId": "DescribeEventTracker"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeFeatureTransformation": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeFeatureTransformation"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeFeatureTransformationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeFeatureTransformationResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes the given feature transformation.",
        "operationId": "DescribeFeatureTransformation"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeFilter": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeFilter"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeFilterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeFilterResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes a filter's properties.",
        "operationId": "DescribeFilter"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeRecipe": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeRecipe"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeRecipeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeRecipeResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "<p>Describes a recipe.</p> <p>A recipe contains three items:</p> <ul> <li> <p>An algorithm that trains a model.</p> </li> <li> <p>Hyperparameters that govern the training.</p> </li> <li> <p>Feature transformation information for modifying the input data before training.</p> </li> </ul> <p>Amazon Personalize provides a set of predefined recipes. You specify a recipe when you create a solution with the <a>CreateSolution</a> API. <code>CreateSolution</code> trains a model by using the algorithm in the specified recipe and a training dataset. The solution, when deployed as a campaign, can provide recommendations using the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_RS_GetRecommendations.html\">GetRecommendations</a> API.</p>",
        "operationId": "DescribeRecipe"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeSchema": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeSchema"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeSchemaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeSchemaResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes a schema. For more information on schemas, see <a>CreateSchema</a>.",
        "operationId": "DescribeSchema"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeSolution": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeSolution"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeSolutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeSolutionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes a solution. For more information on solutions, see <a>CreateSolution</a>.",
        "operationId": "DescribeSolution"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.DescribeSolutionVersion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.DescribeSolutionVersion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeSolutionVersionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeSolutionVersionResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          }
        },
        "description": "Describes a specific version of a solution. For more information on solutions, see <a>CreateSolution</a>.",
        "operationId": "DescribeSolutionVersion"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.GetSolutionMetrics": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.GetSolutionMetrics"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSolutionMetricsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSolutionMetricsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "Gets the metrics for the specified solution version.",
        "operationId": "GetSolutionMetrics"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListBatchInferenceJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListBatchInferenceJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListBatchInferenceJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListBatchInferenceJobsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Gets a list of the batch inference jobs that have been performed off of a solution version.",
        "operationId": "ListBatchInferenceJobs"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListCampaigns": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListCampaigns"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCampaignsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCampaignsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Returns a list of campaigns that use the given solution. When a solution is not specified, all the campaigns associated with the account are listed. The response provides the properties for each campaign, including the Amazon Resource Name (ARN). For more information on campaigns, see <a>CreateCampaign</a>.",
        "operationId": "ListCampaigns"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListDatasetGroups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListDatasetGroups"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDatasetGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDatasetGroupsResponse"
            }
          },
          "480": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Returns a list of dataset groups. The response provides the properties for each dataset group, including the Amazon Resource Name (ARN). For more information on dataset groups, see <a>CreateDatasetGroup</a>.",
        "operationId": "ListDatasetGroups"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListDatasetImportJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListDatasetImportJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDatasetImportJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDatasetImportJobsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Returns a list of dataset import jobs that use the given dataset. When a dataset is not specified, all the dataset import jobs associated with the account are listed. The response provides the properties for each dataset import job, including the Amazon Resource Name (ARN). For more information on dataset import jobs, see <a>CreateDatasetImportJob</a>. For more information on datasets, see <a>CreateDataset</a>.",
        "operationId": "ListDatasetImportJobs"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListDatasets": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListDatasets"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDatasetsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDatasetsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Returns the list of datasets contained in the given dataset group. The response provides the properties for each dataset, including the Amazon Resource Name (ARN). For more information on datasets, see <a>CreateDataset</a>.",
        "operationId": "ListDatasets"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListEventTrackers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListEventTrackers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListEventTrackersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListEventTrackersResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Returns the list of event trackers associated with the account. The response provides the properties for each event tracker, including the Amazon Resource Name (ARN) and tracking ID. For more information on event trackers, see <a>CreateEventTracker</a>.",
        "operationId": "ListEventTrackers"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListFilters": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.ListFilters"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListFiltersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListFiltersResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Lists all filters that belong to a given dataset group.",
        "operationId": "ListFilters"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListRecipes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListRecipes"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListRecipesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListRecipesResponse"
            }
          },
          "480": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Returns a list of available recipes. The response provides the properties for each recipe, including the recipe's Amazon Resource Name (ARN).",
        "operationId": "ListRecipes"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListSchemas": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListSchemas"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSchemasRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSchemasResponse"
            }
          },
          "480": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Returns the list of schemas associated with the account. The response provides the properties for each schema, including the Amazon Resource Name (ARN). For more information on schemas, see <a>CreateSchema</a>.",
        "operationId": "ListSchemas"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListSolutionVersions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListSolutionVersions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSolutionVersionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSolutionVersionsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Returns a list of solution versions for the given solution. When a solution is not specified, all the solution versions associated with the account are listed. The response provides the properties for each solution version, including the Amazon Resource Name (ARN). For more information on solutions, see <a>CreateSolution</a>.",
        "operationId": "ListSolutionVersions"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.ListSolutions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "maxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "AmazonPersonalize.ListSolutions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSolutionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSolutionsResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Returns a list of solutions that use the given dataset group. When a dataset group is not specified, all the solutions associated with the account are listed. The response provides the properties for each solution, including the Amazon Resource Name (ARN). For more information on solutions, see <a>CreateSolution</a>.",
        "operationId": "ListSolutions"
      }
    },
    "/#X-Amz-Target=AmazonPersonalize.UpdateCampaign": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AmazonPersonalize.UpdateCampaign"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCampaignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateCampaignResponse"
            }
          },
          "480": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          }
        },
        "description": "<p>Updates a campaign by either deploying a new solution or changing the value of the campaign's <code>minProvisionedTPS</code> parameter.</p> <p>To update a campaign, the campaign status must be ACTIVE or CREATE FAILED. Check the campaign status using the <a>DescribeCampaign</a> API.</p> <note> <p>You must wait until the <code>status</code> of the updated campaign is <code>ACTIVE</code> before asking the campaign for recommendations.</p> </note> <p>For more information on campaigns, see <a>CreateCampaign</a>.</p>",
        "operationId": "UpdateCampaign"
      }
    }
  },
  "definitions": {
    "AccountId": {
      "maxLength": 256,
      "type": "string"
    },
    "Algorithm": {
      "description": "Describes a custom algorithm.",
      "properties": {
        "algorithmArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the algorithm."
            }
          ]
        },
        "algorithmImage": {
          "allOf": [
            {
              "$ref": "#/definitions/AlgorithmImage"
            },
            {
              "description": "The URI of the Docker container for the algorithm image."
            }
          ]
        },
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the algorithm was created."
            }
          ]
        },
        "defaultHyperParameterRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/DefaultHyperParameterRanges"
            },
            {
              "description": "Specifies the default hyperparameters, their ranges, and whether they are tunable. A tunable hyperparameter can have its value determined during hyperparameter optimization (HPO)."
            }
          ]
        },
        "defaultHyperParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/HyperParameters"
            },
            {
              "description": "Specifies the default hyperparameters."
            }
          ]
        },
        "defaultResourceConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceConfig"
            },
            {
              "description": "Specifies the default maximum number of training jobs and parallel training jobs."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the algorithm was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the algorithm."
            }
          ]
        },
        "roleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the role."
            }
          ]
        },
        "trainingInputMode": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingInputMode"
            },
            {
              "description": "The training input mode."
            }
          ]
        }
      },
      "type": "object"
    },
    "AlgorithmImage": {
      "description": "Describes an algorithm image.",
      "properties": {
        "dockerURI": {
          "allOf": [
            {
              "$ref": "#/definitions/DockerURI"
            },
            {
              "description": "The URI of the Docker container for the algorithm image."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the algorithm image."
            }
          ]
        }
      },
      "required": [
        "dockerURI"
      ],
      "type": "object"
    },
    "Arn": {
      "maxLength": 256,
      "pattern": "arn:([a-z\\d-]+):personalize:.*:.*:.+",
      "type": "string"
    },
    "ArnList": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "maxItems": 100,
      "type": "array"
    },
    "AutoMLConfig": {
      "description": "When the solution performs AutoML (<code>performAutoML</code> is true in <a>CreateSolution</a>), Amazon Personalize determines which recipe, from the specified list, optimizes the given metric. Amazon Personalize then uses that recipe for the solution.",
      "properties": {
        "metricName": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricName"
            },
            {
              "description": "The metric to optimize."
            }
          ]
        },
        "recipeList": {
          "allOf": [
            {
              "$ref": "#/definitions/ArnList"
            },
            {
              "description": "The list of candidate recipes."
            }
          ]
        }
      },
      "type": "object"
    },
    "AutoMLResult": {
      "description": "When the solution performs AutoML (<code>performAutoML</code> is true in <a>CreateSolution</a>), specifies the recipe that best optimized the specified metric.",
      "properties": {
        "bestRecipeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the best recipe."
            }
          ]
        }
      },
      "type": "object"
    },
    "AvroSchema": {
      "maxLength": 10000,
      "type": "string"
    },
    "BatchInferenceJob": {
      "description": "Contains information on a batch inference job.",
      "properties": {
        "batchInferenceJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the batch inference job."
            }
          ]
        },
        "batchInferenceJobConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchInferenceJobConfig"
            },
            {
              "description": "A string to string map of the configuration details of a batch inference job."
            }
          ]
        },
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The time at which the batch inference job was created."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If the batch inference job failed, the reason for the failure."
            }
          ]
        },
        "filterArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the filter used on the batch inference job."
            }
          ]
        },
        "jobInput": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchInferenceJobInput"
            },
            {
              "description": "The Amazon S3 path that leads to the input data used to generate the batch inference job."
            }
          ]
        },
        "jobName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the batch inference job."
            }
          ]
        },
        "jobOutput": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchInferenceJobOutput"
            },
            {
              "description": "The Amazon S3 bucket that contains the output data generated by the batch inference job."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The time at which the batch inference job was last updated."
            }
          ]
        },
        "numResults": {
          "allOf": [
            {
              "$ref": "#/definitions/NumBatchResults"
            },
            {
              "description": "The number of recommendations generated by the batch inference job. This number includes the error messages generated for failed input records."
            }
          ]
        },
        "roleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The ARN of the Amazon Identity and Access Management (IAM) role that requested the batch inference job."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution version from which the batch inference job was created."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the batch inference job. The status is one of the following values:</p> <ul> <li> <p>PENDING</p> </li> <li> <p>IN PROGRESS</p> </li> <li> <p>ACTIVE</p> </li> <li> <p>CREATE FAILED</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchInferenceJobConfig": {
      "description": "The configuration details of a batch inference job.",
      "properties": {
        "itemExplorationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/HyperParameters"
            },
            {
              "description": "A string to string map specifying the inference hyperparameters you wish to use for hyperparameter optimization. See <a>customizing-solution-config-hpo</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchInferenceJobInput": {
      "description": "The input configuration of a batch inference job.",
      "properties": {
        "s3DataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/S3DataConfig"
            },
            {
              "description": "The URI of the Amazon S3 location that contains your input data. The Amazon S3 bucket must be in the same region as the API endpoint you are calling."
            }
          ]
        }
      },
      "required": [
        "s3DataSource"
      ],
      "type": "object"
    },
    "BatchInferenceJobOutput": {
      "description": "The output configuration parameters of a batch inference job.",
      "properties": {
        "s3DataDestination": {
          "allOf": [
            {
              "$ref": "#/definitions/S3DataConfig"
            },
            {
              "description": "Information on the Amazon S3 bucket in which the batch inference job's output is stored."
            }
          ]
        }
      },
      "required": [
        "s3DataDestination"
      ],
      "type": "object"
    },
    "BatchInferenceJobSummary": {
      "description": "A truncated version of the <a>BatchInferenceJob</a> datatype. The <a>ListBatchInferenceJobs</a> operation returns a list of batch inference job summaries.",
      "properties": {
        "batchInferenceJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the batch inference job."
            }
          ]
        },
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The time at which the batch inference job was created."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If the batch inference job failed, the reason for the failure."
            }
          ]
        },
        "jobName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the batch inference job."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The time at which the batch inference job was last updated."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the solution version used by the batch inference job."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the batch inference job. The status is one of the following values:</p> <ul> <li> <p>PENDING</p> </li> <li> <p>IN PROGRESS</p> </li> <li> <p>ACTIVE</p> </li> <li> <p>CREATE FAILED</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchInferenceJobs": {
      "items": {
        "$ref": "#/definitions/BatchInferenceJobSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "Boolean": {
      "type": "boolean"
    },
    "Campaign": {
      "description": "Describes a deployed solution version, otherwise known as a campaign. For more information on campaigns, see <a>CreateCampaign</a>.",
      "properties": {
        "campaignArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the campaign. "
            }
          ]
        },
        "campaignConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CampaignConfig"
            },
            {
              "description": "The configuration details of a campaign."
            }
          ]
        },
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix format) that the campaign was created."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If a campaign fails, the reason behind the failure."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix format) that the campaign was last updated."
            }
          ]
        },
        "latestCampaignUpdate": {
          "$ref": "#/definitions/CampaignUpdateSummary"
        },
        "minProvisionedTPS": {
          "allOf": [
            {
              "$ref": "#/definitions/TransactionsPerSecond"
            },
            {
              "description": "Specifies the requested minimum provisioned transactions (recommendations) per second."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the campaign."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of a specific version of the solution."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the campaign.</p> <p>A campaign can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "CampaignConfig": {
      "description": "The configuration details of a campaign.",
      "properties": {
        "itemExplorationConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/HyperParameters"
            },
            {
              "description": "A string to string map specifying the inference hyperparameters you wish to use for hyperparameter optimization. See <a>customizing-solution-config-hpo</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "CampaignSummary": {
      "description": "Provides a summary of the properties of a campaign. For a complete listing, call the <a>DescribeCampaign</a> API.",
      "properties": {
        "campaignArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the campaign."
            }
          ]
        },
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the campaign was created."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If a campaign fails, the reason behind the failure."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the campaign was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the campaign."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the campaign.</p> <p>A campaign can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "CampaignUpdateSummary": {
      "description": "Provides a summary of the properties of a campaign update. For a complete listing, call the <a>DescribeCampaign</a> API.",
      "properties": {
        "campaignConfig": {
          "$ref": "#/definitions/CampaignConfig"
        },
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the campaign update was created."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If a campaign update fails, the reason behind the failure."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the campaign update was last updated."
            }
          ]
        },
        "minProvisionedTPS": {
          "allOf": [
            {
              "$ref": "#/definitions/TransactionsPerSecond"
            },
            {
              "description": "Specifies the requested minimum provisioned transactions (recommendations) per second that Amazon Personalize will support."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the deployed solution version."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the campaign update.</p> <p>A campaign update can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "Campaigns": {
      "items": {
        "$ref": "#/definitions/CampaignSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "CategoricalHyperParameterRange": {
      "description": "Provides the name and range of a categorical hyperparameter.",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterName"
            },
            {
              "description": "The name of the hyperparameter."
            }
          ]
        },
        "values": {
          "allOf": [
            {
              "$ref": "#/definitions/CategoricalValues"
            },
            {
              "description": "A list of the categories for the hyperparameter."
            }
          ]
        }
      },
      "type": "object"
    },
    "CategoricalHyperParameterRanges": {
      "items": {
        "$ref": "#/definitions/CategoricalHyperParameterRange"
      },
      "maxItems": 100,
      "type": "array"
    },
    "CategoricalValue": {
      "maxLength": 1000,
      "type": "string"
    },
    "CategoricalValues": {
      "items": {
        "$ref": "#/definitions/CategoricalValue"
      },
      "maxItems": 100,
      "type": "array"
    },
    "ContinuousHyperParameterRange": {
      "description": "Provides the name and range of a continuous hyperparameter.",
      "properties": {
        "maxValue": {
          "allOf": [
            {
              "$ref": "#/definitions/ContinuousMaxValue"
            },
            {
              "description": "The maximum allowable value for the hyperparameter."
            }
          ]
        },
        "minValue": {
          "allOf": [
            {
              "$ref": "#/definitions/ContinuousMinValue"
            },
            {
              "description": "The minimum allowable value for the hyperparameter."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterName"
            },
            {
              "description": "The name of the hyperparameter."
            }
          ]
        }
      },
      "type": "object"
    },
    "ContinuousHyperParameterRanges": {
      "items": {
        "$ref": "#/definitions/ContinuousHyperParameterRange"
      },
      "maxItems": 100,
      "type": "array"
    },
    "ContinuousMaxValue": {
      "format": "double",
      "minimum": -1000000,
      "type": "number"
    },
    "ContinuousMinValue": {
      "format": "double",
      "minimum": -1000000,
      "type": "number"
    },
    "CreateBatchInferenceJobRequest": {
      "properties": {
        "batchInferenceJobConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchInferenceJobConfig"
            },
            {
              "description": "The configuration details of a batch inference job."
            }
          ]
        },
        "filterArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the filter to apply to the batch inference job. For more information on using filters, see Using Filters with Amazon Personalize."
            }
          ]
        },
        "jobInput": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchInferenceJobInput"
            },
            {
              "description": "The Amazon S3 path that leads to the input file to base your recommendations on. The input material must be in JSON format."
            }
          ]
        },
        "jobName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the batch inference job to create."
            }
          ]
        },
        "jobOutput": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchInferenceJobOutput"
            },
            {
              "description": "The path to the Amazon S3 bucket where the job's output will be stored."
            }
          ]
        },
        "numResults": {
          "allOf": [
            {
              "$ref": "#/definitions/NumBatchResults"
            },
            {
              "description": "The number of recommendations to retreive."
            }
          ]
        },
        "roleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The ARN of the Amazon Identity and Access Management role that has permissions to read and write to your input and out Amazon S3 buckets respectively."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution version that will be used to generate the batch inference recommendations."
            }
          ]
        }
      },
      "required": [
        "jobName",
        "solutionVersionArn",
        "jobInput",
        "jobOutput",
        "roleArn"
      ],
      "title": "CreateBatchInferenceJobRequest",
      "type": "object"
    },
    "CreateBatchInferenceJobResponse": {
      "properties": {
        "batchInferenceJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the batch inference job."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateCampaignRequest": {
      "properties": {
        "campaignConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CampaignConfig"
            },
            {
              "description": "The configuration details of a campaign."
            }
          ]
        },
        "minProvisionedTPS": {
          "allOf": [
            {
              "$ref": "#/definitions/TransactionsPerSecond"
            },
            {
              "description": "Specifies the requested minimum provisioned transactions (recommendations) per second that Amazon Personalize will support."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "A name for the new campaign. The campaign name must be unique within your account."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution version to deploy."
            }
          ]
        }
      },
      "required": [
        "name",
        "solutionVersionArn",
        "minProvisionedTPS"
      ],
      "title": "CreateCampaignRequest",
      "type": "object"
    },
    "CreateCampaignResponse": {
      "properties": {
        "campaignArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the campaign."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateDatasetGroupRequest": {
      "properties": {
        "kmsKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of a KMS key used to encrypt the datasets."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name for the new dataset group."
            }
          ]
        },
        "roleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The ARN of the IAM role that has permissions to access the KMS key. Supplying an IAM role is only valid when also specifying a KMS key."
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "title": "CreateDatasetGroupRequest",
      "type": "object"
    },
    "CreateDatasetGroupResponse": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the new dataset group."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateDatasetImportJobRequest": {
      "properties": {
        "dataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSource"
            },
            {
              "description": "The Amazon S3 bucket that contains the training data to import."
            }
          ]
        },
        "datasetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dataset that receives the imported data."
            }
          ]
        },
        "jobName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name for the dataset import job."
            }
          ]
        },
        "roleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The ARN of the IAM role that has permissions to read from the Amazon S3 data source."
            }
          ]
        }
      },
      "required": [
        "jobName",
        "datasetArn",
        "dataSource",
        "roleArn"
      ],
      "title": "CreateDatasetImportJobRequest",
      "type": "object"
    },
    "CreateDatasetImportJobResponse": {
      "properties": {
        "datasetImportJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dataset import job."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateDatasetRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group to add the dataset to."
            }
          ]
        },
        "datasetType": {
          "allOf": [
            {
              "$ref": "#/definitions/DatasetType"
            },
            {
              "description": "<p>The type of dataset.</p> <p>One of the following (case insensitive) values:</p> <ul> <li> <p>Interactions</p> </li> <li> <p>Items</p> </li> <li> <p>Users</p> </li> </ul>"
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name for the dataset."
            }
          ]
        },
        "schemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the schema to associate with the dataset. The schema defines the dataset fields."
            }
          ]
        }
      },
      "required": [
        "name",
        "schemaArn",
        "datasetGroupArn",
        "datasetType"
      ],
      "title": "CreateDatasetRequest",
      "type": "object"
    },
    "CreateDatasetResponse": {
      "properties": {
        "datasetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dataset."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateEventTrackerRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group that receives the event data."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name for the event tracker."
            }
          ]
        }
      },
      "required": [
        "name",
        "datasetGroupArn"
      ],
      "title": "CreateEventTrackerRequest",
      "type": "object"
    },
    "CreateEventTrackerResponse": {
      "properties": {
        "eventTrackerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the event tracker."
            }
          ]
        },
        "trackingId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrackingId"
            },
            {
              "description": "The ID of the event tracker. Include this ID in requests to the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_UBS_PutEvents.html\">PutEvents</a> API."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateFilterRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dataset group that the filter will belong to."
            }
          ]
        },
        "filterExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterExpression"
            },
            {
              "description": "<p>The filter expression that designates the interaction types that the filter will filter out. A filter expression must follow the following format:</p> <p> <code>EXCLUDE itemId WHERE INTERACTIONS.event_type in (\"EVENT_TYPE\")</code> </p> <p>Where \"EVENT_TYPE\" is the type of event to filter out. To filter out all items with any interactions history, set <code>\"*\"</code> as the EVENT_TYPE. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filters.html\">Using Filters with Amazon Personalize</a>.</p>"
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the filter to create."
            }
          ]
        }
      },
      "required": [
        "name",
        "datasetGroupArn",
        "filterExpression"
      ],
      "title": "CreateFilterRequest",
      "type": "object"
    },
    "CreateFilterResponse": {
      "properties": {
        "filterArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the new filter."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateSchemaRequest": {
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name for the schema."
            }
          ]
        },
        "schema": {
          "allOf": [
            {
              "$ref": "#/definitions/AvroSchema"
            },
            {
              "description": "A schema in Avro JSON format."
            }
          ]
        }
      },
      "required": [
        "name",
        "schema"
      ],
      "title": "CreateSchemaRequest",
      "type": "object"
    },
    "CreateSchemaResponse": {
      "properties": {
        "schemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the created schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateSolutionRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group that provides the training data."
            }
          ]
        },
        "eventType": {
          "allOf": [
            {
              "$ref": "#/definitions/EventType"
            },
            {
              "description": "When your have multiple event types (using an <code>EVENT_TYPE</code> schema field), this parameter specifies which event type (for example, 'click' or 'like') is used for training the model."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name for the solution."
            }
          ]
        },
        "performAutoML": {
          "allOf": [
            {
              "$ref": "#/definitions/PerformAutoML"
            },
            {
              "description": "<p>Whether to perform automated machine learning (AutoML). The default is <code>false</code>. For this case, you must specify <code>recipeArn</code>.</p> <p>When set to <code>true</code>, Amazon Personalize analyzes your training data and selects the optimal USER_PERSONALIZATION recipe and hyperparameters. In this case, you must omit <code>recipeArn</code>. Amazon Personalize determines the optimal recipe by running tests with different values for the hyperparameters. AutoML lengthens the training process as compared to selecting a specific recipe.</p>"
            }
          ]
        },
        "performHPO": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p>Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is <code>false</code>.</p> <p>When performing AutoML, this parameter is always <code>true</code> and you should not set it to <code>false</code>.</p>"
            }
          ]
        },
        "recipeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the recipe to use for model training. Only specified when <code>performAutoML</code> is false."
            }
          ]
        },
        "solutionConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/SolutionConfig"
            },
            {
              "description": "The configuration to use with the solution. When <code>performAutoML</code> is set to true, Amazon Personalize only evaluates the <code>autoMLConfig</code> section of the solution configuration."
            }
          ]
        }
      },
      "required": [
        "name",
        "datasetGroupArn"
      ],
      "title": "CreateSolutionRequest",
      "type": "object"
    },
    "CreateSolutionResponse": {
      "properties": {
        "solutionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the solution."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateSolutionVersionRequest": {
      "properties": {
        "solutionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution containing the training configuration information."
            }
          ]
        },
        "trainingMode": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingMode"
            },
            {
              "description": "<p>The scope of training to be performed when creating the solution version. The <code>FULL</code> option trains the solution version based on the entirety of the input solution's training data, while the <code>UPDATE</code> option processes only the data that has changed in comparison to the input solution. Choose <code>UPDATE</code> when you want to incrementally update your solution version instead of creating an entirely new one.</p> <important> <p>The <code>UPDATE</code> option can only be used when you already have an active solution version created from the input solution using the <code>FULL</code> option and the input solution was trained with the <a>native-recipe-hrnn-coldstart</a> recipe.</p> </important>"
            }
          ]
        }
      },
      "required": [
        "solutionArn"
      ],
      "title": "CreateSolutionVersionRequest",
      "type": "object"
    },
    "CreateSolutionVersionResponse": {
      "properties": {
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the new solution version."
            }
          ]
        }
      },
      "type": "object"
    },
    "DataSource": {
      "description": "Describes the data source that contains the data to upload to a dataset.",
      "properties": {
        "dataLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Location"
            },
            {
              "description": "<p>The path to the Amazon S3 bucket where the data that you want to upload to your dataset is stored. For example: </p> <p> <code>s3://bucket-name/training-data.csv</code> </p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "Dataset": {
      "description": "Provides metadata for a dataset.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The creation date and time (in Unix time) of the dataset."
            }
          ]
        },
        "datasetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset that you want metadata for."
            }
          ]
        },
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group."
            }
          ]
        },
        "datasetType": {
          "allOf": [
            {
              "$ref": "#/definitions/DatasetType"
            },
            {
              "description": "<p>One of the following values:</p> <ul> <li> <p>Interactions</p> </li> <li> <p>Items</p> </li> <li> <p>Users</p> </li> </ul>"
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "A time stamp that shows when the dataset was updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the dataset."
            }
          ]
        },
        "schemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the associated schema."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the dataset.</p> <p>A dataset can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DatasetGroup": {
      "description": "<p>A dataset group is a collection of related datasets (Interactions, User, and Item). You create a dataset group by calling <a>CreateDatasetGroup</a>. You then create a dataset and add it to a dataset group by calling <a>CreateDataset</a>. The dataset group is used to create and train a solution by calling <a>CreateSolution</a>. A dataset group can contain only one of each type of dataset.</p> <p>You can specify an AWS Key Management Service (KMS) key to encrypt the datasets in the group.</p>",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The creation date and time (in Unix time) of the dataset group."
            }
          ]
        },
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If creating a dataset group fails, provides the reason why."
            }
          ]
        },
        "kmsKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the KMS key used to encrypt the datasets."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The last update date and time (in Unix time) of the dataset group."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the dataset group."
            }
          ]
        },
        "roleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/RoleArn"
            },
            {
              "description": "The ARN of the IAM role that has permissions to create the dataset group."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The current status of the dataset group.</p> <p>A dataset group can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DatasetGroupSummary": {
      "description": "Provides a summary of the properties of a dataset group. For a complete listing, call the <a>DescribeDatasetGroup</a> API.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the dataset group was created."
            }
          ]
        },
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If creating a dataset group fails, the reason behind the failure."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the dataset group was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the dataset group."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the dataset group.</p> <p>A dataset group can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DatasetGroups": {
      "items": {
        "$ref": "#/definitions/DatasetGroupSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DatasetImportJob": {
      "description": "<p>Describes a job that imports training data from a data source (Amazon S3 bucket) to an Amazon Personalize dataset. For more information, see <a>CreateDatasetImportJob</a>.</p> <p>A dataset import job can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> </ul>",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The creation date and time (in Unix time) of the dataset import job."
            }
          ]
        },
        "dataSource": {
          "allOf": [
            {
              "$ref": "#/definitions/DataSource"
            },
            {
              "description": "The Amazon S3 bucket that contains the training data to import."
            }
          ]
        },
        "datasetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset that receives the imported data."
            }
          ]
        },
        "datasetImportJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dataset import job."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If a dataset import job fails, provides the reason why."
            }
          ]
        },
        "jobName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the import job."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) the dataset was last updated."
            }
          ]
        },
        "roleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the AWS Identity and Access Management (IAM) role that has permissions to read from the Amazon S3 data source."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the dataset import job.</p> <p>A dataset import job can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DatasetImportJobSummary": {
      "description": "Provides a summary of the properties of a dataset import job. For a complete listing, call the <a>DescribeDatasetImportJob</a> API.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the dataset import job was created."
            }
          ]
        },
        "datasetImportJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset import job."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If a dataset import job fails, the reason behind the failure."
            }
          ]
        },
        "jobName": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the dataset import job."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the dataset was last updated."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the dataset import job.</p> <p>A dataset import job can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DatasetImportJobs": {
      "items": {
        "$ref": "#/definitions/DatasetImportJobSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DatasetSchema": {
      "description": "Describes the schema for a dataset. For more information on schemas, see <a>CreateSchema</a>.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the schema was created."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the schema was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "schema": {
          "allOf": [
            {
              "$ref": "#/definitions/AvroSchema"
            },
            {
              "description": "The schema."
            }
          ]
        },
        "schemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "DatasetSchemaSummary": {
      "description": "Provides a summary of the properties of a dataset schema. For a complete listing, call the <a>DescribeSchema</a> API.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the schema was created."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the schema was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the schema."
            }
          ]
        },
        "schemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "DatasetSummary": {
      "description": "Provides a summary of the properties of a dataset. For a complete listing, call the <a>DescribeDataset</a> API.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the dataset was created."
            }
          ]
        },
        "datasetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset."
            }
          ]
        },
        "datasetType": {
          "allOf": [
            {
              "$ref": "#/definitions/DatasetType"
            },
            {
              "description": "<p>The dataset type. One of the following values:</p> <ul> <li> <p>Interactions</p> </li> <li> <p>Items</p> </li> <li> <p>Users</p> </li> <li> <p>Event-Interactions</p> </li> </ul>"
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the dataset was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the dataset."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the dataset.</p> <p>A dataset can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DatasetType": {
      "maxLength": 256,
      "type": "string"
    },
    "Datasets": {
      "items": {
        "$ref": "#/definitions/DatasetSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "Date": {
      "format": "date-time",
      "type": "string"
    },
    "DefaultCategoricalHyperParameterRange": {
      "description": "Provides the name and default range of a categorical hyperparameter and whether the hyperparameter is tunable. A tunable hyperparameter can have its value determined during hyperparameter optimization (HPO).",
      "properties": {
        "isTunable": {
          "allOf": [
            {
              "$ref": "#/definitions/Tunable"
            },
            {
              "description": "Whether the hyperparameter is tunable."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterName"
            },
            {
              "description": "The name of the hyperparameter."
            }
          ]
        },
        "values": {
          "allOf": [
            {
              "$ref": "#/definitions/CategoricalValues"
            },
            {
              "description": "A list of the categories for the hyperparameter."
            }
          ]
        }
      },
      "type": "object"
    },
    "DefaultCategoricalHyperParameterRanges": {
      "items": {
        "$ref": "#/definitions/DefaultCategoricalHyperParameterRange"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DefaultContinuousHyperParameterRange": {
      "description": "Provides the name and default range of a continuous hyperparameter and whether the hyperparameter is tunable. A tunable hyperparameter can have its value determined during hyperparameter optimization (HPO).",
      "properties": {
        "isTunable": {
          "allOf": [
            {
              "$ref": "#/definitions/Tunable"
            },
            {
              "description": "Whether the hyperparameter is tunable."
            }
          ]
        },
        "maxValue": {
          "allOf": [
            {
              "$ref": "#/definitions/ContinuousMaxValue"
            },
            {
              "description": "The maximum allowable value for the hyperparameter."
            }
          ]
        },
        "minValue": {
          "allOf": [
            {
              "$ref": "#/definitions/ContinuousMinValue"
            },
            {
              "description": "The minimum allowable value for the hyperparameter."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterName"
            },
            {
              "description": "The name of the hyperparameter."
            }
          ]
        }
      },
      "type": "object"
    },
    "DefaultContinuousHyperParameterRanges": {
      "items": {
        "$ref": "#/definitions/DefaultContinuousHyperParameterRange"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DefaultHyperParameterRanges": {
      "description": "Specifies the hyperparameters and their default ranges. Hyperparameters can be categorical, continuous, or integer-valued.",
      "properties": {
        "categoricalHyperParameterRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/DefaultCategoricalHyperParameterRanges"
            },
            {
              "description": "The categorical hyperparameters and their default ranges."
            }
          ]
        },
        "continuousHyperParameterRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/DefaultContinuousHyperParameterRanges"
            },
            {
              "description": "The continuous hyperparameters and their default ranges."
            }
          ]
        },
        "integerHyperParameterRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/DefaultIntegerHyperParameterRanges"
            },
            {
              "description": "The integer-valued hyperparameters and their default ranges."
            }
          ]
        }
      },
      "type": "object"
    },
    "DefaultIntegerHyperParameterRange": {
      "description": "Provides the name and default range of a integer-valued hyperparameter and whether the hyperparameter is tunable. A tunable hyperparameter can have its value determined during hyperparameter optimization (HPO).",
      "properties": {
        "isTunable": {
          "allOf": [
            {
              "$ref": "#/definitions/Tunable"
            },
            {
              "description": "Indicates whether the hyperparameter is tunable."
            }
          ]
        },
        "maxValue": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerMaxValue"
            },
            {
              "description": "The maximum allowable value for the hyperparameter."
            }
          ]
        },
        "minValue": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerMinValue"
            },
            {
              "description": "The minimum allowable value for the hyperparameter."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterName"
            },
            {
              "description": "The name of the hyperparameter."
            }
          ]
        }
      },
      "type": "object"
    },
    "DefaultIntegerHyperParameterRanges": {
      "items": {
        "$ref": "#/definitions/DefaultIntegerHyperParameterRange"
      },
      "maxItems": 100,
      "type": "array"
    },
    "DeleteCampaignRequest": {
      "properties": {
        "campaignArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the campaign to delete."
            }
          ]
        }
      },
      "required": [
        "campaignArn"
      ],
      "title": "DeleteCampaignRequest",
      "type": "object"
    },
    "DeleteDatasetGroupRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dataset group to delete."
            }
          ]
        }
      },
      "required": [
        "datasetGroupArn"
      ],
      "title": "DeleteDatasetGroupRequest",
      "type": "object"
    },
    "DeleteDatasetRequest": {
      "properties": {
        "datasetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset to delete."
            }
          ]
        }
      },
      "required": [
        "datasetArn"
      ],
      "title": "DeleteDatasetRequest",
      "type": "object"
    },
    "DeleteEventTrackerRequest": {
      "properties": {
        "eventTrackerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the event tracker to delete."
            }
          ]
        }
      },
      "required": [
        "eventTrackerArn"
      ],
      "title": "DeleteEventTrackerRequest",
      "type": "object"
    },
    "DeleteFilterRequest": {
      "properties": {
        "filterArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the filter to delete."
            }
          ]
        }
      },
      "required": [
        "filterArn"
      ],
      "title": "DeleteFilterRequest",
      "type": "object"
    },
    "DeleteSchemaRequest": {
      "properties": {
        "schemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema to delete."
            }
          ]
        }
      },
      "required": [
        "schemaArn"
      ],
      "title": "DeleteSchemaRequest",
      "type": "object"
    },
    "DeleteSolutionRequest": {
      "properties": {
        "solutionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the solution to delete."
            }
          ]
        }
      },
      "required": [
        "solutionArn"
      ],
      "title": "DeleteSolutionRequest",
      "type": "object"
    },
    "DescribeAlgorithmRequest": {
      "properties": {
        "algorithmArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the algorithm to describe."
            }
          ]
        }
      },
      "required": [
        "algorithmArn"
      ],
      "title": "DescribeAlgorithmRequest",
      "type": "object"
    },
    "DescribeAlgorithmResponse": {
      "properties": {
        "algorithm": {
          "allOf": [
            {
              "$ref": "#/definitions/Algorithm"
            },
            {
              "description": "A listing of the properties of the algorithm."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeBatchInferenceJobRequest": {
      "properties": {
        "batchInferenceJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the batch inference job to describe."
            }
          ]
        }
      },
      "required": [
        "batchInferenceJobArn"
      ],
      "title": "DescribeBatchInferenceJobRequest",
      "type": "object"
    },
    "DescribeBatchInferenceJobResponse": {
      "properties": {
        "batchInferenceJob": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchInferenceJob"
            },
            {
              "description": "Information on the specified batch inference job."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeCampaignRequest": {
      "properties": {
        "campaignArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the campaign."
            }
          ]
        }
      },
      "required": [
        "campaignArn"
      ],
      "title": "DescribeCampaignRequest",
      "type": "object"
    },
    "DescribeCampaignResponse": {
      "properties": {
        "campaign": {
          "allOf": [
            {
              "$ref": "#/definitions/Campaign"
            },
            {
              "description": "The properties of the campaign."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDatasetGroupRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group to describe."
            }
          ]
        }
      },
      "required": [
        "datasetGroupArn"
      ],
      "title": "DescribeDatasetGroupRequest",
      "type": "object"
    },
    "DescribeDatasetGroupResponse": {
      "properties": {
        "datasetGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/DatasetGroup"
            },
            {
              "description": "A listing of the dataset group's properties."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDatasetImportJobRequest": {
      "properties": {
        "datasetImportJobArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset import job to describe."
            }
          ]
        }
      },
      "required": [
        "datasetImportJobArn"
      ],
      "title": "DescribeDatasetImportJobRequest",
      "type": "object"
    },
    "DescribeDatasetImportJobResponse": {
      "properties": {
        "datasetImportJob": {
          "allOf": [
            {
              "$ref": "#/definitions/DatasetImportJob"
            },
            {
              "description": "<p>Information about the dataset import job, including the status.</p> <p>The status is one of the following values:</p> <ul> <li> <p>CREATE PENDING</p> </li> <li> <p>CREATE IN_PROGRESS</p> </li> <li> <p>ACTIVE</p> </li> <li> <p>CREATE FAILED</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDatasetRequest": {
      "properties": {
        "datasetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset to describe."
            }
          ]
        }
      },
      "required": [
        "datasetArn"
      ],
      "title": "DescribeDatasetRequest",
      "type": "object"
    },
    "DescribeDatasetResponse": {
      "properties": {
        "dataset": {
          "allOf": [
            {
              "$ref": "#/definitions/Dataset"
            },
            {
              "description": "A listing of the dataset's properties."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeEventTrackerRequest": {
      "properties": {
        "eventTrackerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the event tracker to describe."
            }
          ]
        }
      },
      "required": [
        "eventTrackerArn"
      ],
      "title": "DescribeEventTrackerRequest",
      "type": "object"
    },
    "DescribeEventTrackerResponse": {
      "properties": {
        "eventTracker": {
          "allOf": [
            {
              "$ref": "#/definitions/EventTracker"
            },
            {
              "description": "An object that describes the event tracker."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeFeatureTransformationRequest": {
      "properties": {
        "featureTransformationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the feature transformation to describe."
            }
          ]
        }
      },
      "required": [
        "featureTransformationArn"
      ],
      "title": "DescribeFeatureTransformationRequest",
      "type": "object"
    },
    "DescribeFeatureTransformationResponse": {
      "properties": {
        "featureTransformation": {
          "allOf": [
            {
              "$ref": "#/definitions/FeatureTransformation"
            },
            {
              "description": "A listing of the FeatureTransformation properties."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeFilterRequest": {
      "properties": {
        "filterArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the filter to describe."
            }
          ]
        }
      },
      "required": [
        "filterArn"
      ],
      "title": "DescribeFilterRequest",
      "type": "object"
    },
    "DescribeFilterResponse": {
      "properties": {
        "filter": {
          "allOf": [
            {
              "$ref": "#/definitions/Filter"
            },
            {
              "description": "The filter's details."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeRecipeRequest": {
      "properties": {
        "recipeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the recipe to describe."
            }
          ]
        }
      },
      "required": [
        "recipeArn"
      ],
      "title": "DescribeRecipeRequest",
      "type": "object"
    },
    "DescribeRecipeResponse": {
      "properties": {
        "recipe": {
          "allOf": [
            {
              "$ref": "#/definitions/Recipe"
            },
            {
              "description": "An object that describes the recipe."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeSchemaRequest": {
      "properties": {
        "schemaArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the schema to retrieve."
            }
          ]
        }
      },
      "required": [
        "schemaArn"
      ],
      "title": "DescribeSchemaRequest",
      "type": "object"
    },
    "DescribeSchemaResponse": {
      "properties": {
        "schema": {
          "allOf": [
            {
              "$ref": "#/definitions/DatasetSchema"
            },
            {
              "description": "The requested schema."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeSolutionRequest": {
      "properties": {
        "solutionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution to describe."
            }
          ]
        }
      },
      "required": [
        "solutionArn"
      ],
      "title": "DescribeSolutionRequest",
      "type": "object"
    },
    "DescribeSolutionResponse": {
      "properties": {
        "solution": {
          "allOf": [
            {
              "$ref": "#/definitions/Solution"
            },
            {
              "description": "An object that describes the solution."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeSolutionVersionRequest": {
      "properties": {
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution version."
            }
          ]
        }
      },
      "required": [
        "solutionVersionArn"
      ],
      "title": "DescribeSolutionVersionRequest",
      "type": "object"
    },
    "DescribeSolutionVersionResponse": {
      "properties": {
        "solutionVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/SolutionVersion"
            },
            {
              "description": "The solution version."
            }
          ]
        }
      },
      "type": "object"
    },
    "Description": {
      "type": "string"
    },
    "DockerURI": {
      "maxLength": 256,
      "type": "string"
    },
    "EventTracker": {
      "description": "Provides information about an event tracker.",
      "properties": {
        "accountId": {
          "allOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "description": "The Amazon AWS account that owns the event tracker."
            }
          ]
        },
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix format) that the event tracker was created."
            }
          ]
        },
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group that receives the event data."
            }
          ]
        },
        "eventTrackerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the event tracker."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the event tracker was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the event tracker."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the event tracker.</p> <p>An event tracker can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul>"
            }
          ]
        },
        "trackingId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrackingId"
            },
            {
              "description": "The ID of the event tracker. Include this ID in requests to the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_UBS_PutEvents.html\">PutEvents</a> API."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventTrackerSummary": {
      "description": "Provides a summary of the properties of an event tracker. For a complete listing, call the <a>DescribeEventTracker</a> API.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the event tracker was created."
            }
          ]
        },
        "eventTrackerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the event tracker."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the event tracker was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the event tracker."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the event tracker.</p> <p>An event tracker can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "EventTrackers": {
      "items": {
        "$ref": "#/definitions/EventTrackerSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "EventType": {
      "maxLength": 256,
      "type": "string"
    },
    "EventValueThreshold": {
      "maxLength": 256,
      "type": "string"
    },
    "FailureReason": {
      "type": "string"
    },
    "FeatureTransformation": {
      "description": "Provides feature transformation information. Feature transformation is the process of modifying raw input data into a form more suitable for model training.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The creation date and time (in Unix time) of the feature transformation."
            }
          ]
        },
        "defaultParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/FeaturizationParameters"
            },
            {
              "description": "Provides the default parameters for feature transformation."
            }
          ]
        },
        "featureTransformationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the FeatureTransformation object."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The last update date and time (in Unix time) of the feature transformation."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the feature transformation."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the feature transformation.</p> <p>A feature transformation can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "FeatureTransformationParameters": {
      "additionalProperties": {
        "$ref": "#/definitions/ParameterValue"
      },
      "maxProperties": 100,
      "type": "object"
    },
    "FeaturizationParameters": {
      "additionalProperties": {
        "$ref": "#/definitions/ParameterValue"
      },
      "maxProperties": 100,
      "type": "object"
    },
    "Filter": {
      "description": "Contains information on a recommendation filter, including its ARN, status, and filter expression.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The time at which the filter was created."
            }
          ]
        },
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dataset group to which the filter belongs."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If the filter failed, the reason for its failure."
            }
          ]
        },
        "filterArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the filter."
            }
          ]
        },
        "filterExpression": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterExpression"
            },
            {
              "description": "<p>Specifies the type of item interactions to filter out of recommendation results. The filter expression must follow the following format:</p> <p> <code>EXCLUDE itemId WHERE INTERACTIONS.event_type in (\"EVENT_TYPE\")</code> </p> <p>Where \"EVENT_TYPE\" is the type of event to filter out. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filters.html\">Using Filters with Amazon Personalize</a>.</p>"
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The time at which the filter was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "The status of the filter."
            }
          ]
        }
      },
      "type": "object"
    },
    "FilterExpression": {
      "format": "password",
      "maxLength": 2500,
      "minLength": 1,
      "type": "string"
    },
    "FilterSummary": {
      "description": "A short summary of a filter's attributes.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The time at which the filter was created."
            }
          ]
        },
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dataset group to which the filter belongs."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If the filter failed, the reason for the failure."
            }
          ]
        },
        "filterArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the filter."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The time at which the filter was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the filter."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "The status of the filter."
            }
          ]
        }
      },
      "type": "object"
    },
    "Filters": {
      "items": {
        "$ref": "#/definitions/FilterSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "GetSolutionMetricsRequest": {
      "properties": {
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution version for which to get metrics."
            }
          ]
        }
      },
      "required": [
        "solutionVersionArn"
      ],
      "title": "GetSolutionMetricsRequest",
      "type": "object"
    },
    "GetSolutionMetricsResponse": {
      "properties": {
        "metrics": {
          "allOf": [
            {
              "$ref": "#/definitions/Metrics"
            },
            {
              "description": "The metrics for the solution version."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The same solution version ARN as specified in the request."
            }
          ]
        }
      },
      "type": "object"
    },
    "HPOConfig": {
      "description": "Describes the properties for hyperparameter optimization (HPO). For use with the bring-your-own-recipe feature. Do not use for Amazon Personalize native recipes.",
      "properties": {
        "algorithmHyperParameterRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/HyperParameterRanges"
            },
            {
              "description": "The hyperparameters and their allowable ranges."
            }
          ]
        },
        "hpoObjective": {
          "allOf": [
            {
              "$ref": "#/definitions/HPOObjective"
            },
            {
              "description": "The metric to optimize during HPO."
            }
          ]
        },
        "hpoResourceConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/HPOResourceConfig"
            },
            {
              "description": "Describes the resource configuration for HPO."
            }
          ]
        }
      },
      "type": "object"
    },
    "HPOObjective": {
      "description": "The metric to optimize during hyperparameter optimization (HPO).",
      "properties": {
        "metricName": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricName"
            },
            {
              "description": "The name of the metric."
            }
          ]
        },
        "metricRegex": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricRegex"
            },
            {
              "description": "A regular expression for finding the metric in the training job logs."
            }
          ]
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/HPOObjectiveType"
            },
            {
              "description": "The type of the metric. Valid values are <code>Maximize</code> and <code>Minimize</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "HPOObjectiveType": {
      "maxLength": 256,
      "type": "string"
    },
    "HPOResource": {
      "maxLength": 256,
      "type": "string"
    },
    "HPOResourceConfig": {
      "description": "Describes the resource configuration for hyperparameter optimization (HPO).",
      "properties": {
        "maxNumberOfTrainingJobs": {
          "allOf": [
            {
              "$ref": "#/definitions/HPOResource"
            },
            {
              "description": "The maximum number of training jobs when you create a solution version. The maximum value for <code>maxNumberOfTrainingJobs</code> is <code>40</code>."
            }
          ]
        },
        "maxParallelTrainingJobs": {
          "allOf": [
            {
              "$ref": "#/definitions/HPOResource"
            },
            {
              "description": "The maximum number of parallel training jobs when you create a solution version. The maximum value for <code>maxParallelTrainingJobs</code> is <code>10</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "HyperParameterRanges": {
      "description": "Specifies the hyperparameters and their ranges. Hyperparameters can be categorical, continuous, or integer-valued.",
      "properties": {
        "categoricalHyperParameterRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/CategoricalHyperParameterRanges"
            },
            {
              "description": "The categorical hyperparameters and their ranges."
            }
          ]
        },
        "continuousHyperParameterRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/ContinuousHyperParameterRanges"
            },
            {
              "description": "The continuous hyperparameters and their ranges."
            }
          ]
        },
        "integerHyperParameterRanges": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerHyperParameterRanges"
            },
            {
              "description": "The integer-valued hyperparameters and their ranges."
            }
          ]
        }
      },
      "type": "object"
    },
    "HyperParameters": {
      "additionalProperties": {
        "$ref": "#/definitions/ParameterValue"
      },
      "maxProperties": 100,
      "type": "object"
    },
    "IntegerHyperParameterRange": {
      "description": "Provides the name and range of an integer-valued hyperparameter.",
      "properties": {
        "maxValue": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerMaxValue"
            },
            {
              "description": "The maximum allowable value for the hyperparameter."
            }
          ]
        },
        "minValue": {
          "allOf": [
            {
              "$ref": "#/definitions/IntegerMinValue"
            },
            {
              "description": "The minimum allowable value for the hyperparameter."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ParameterName"
            },
            {
              "description": "The name of the hyperparameter."
            }
          ]
        }
      },
      "type": "object"
    },
    "IntegerHyperParameterRanges": {
      "items": {
        "$ref": "#/definitions/IntegerHyperParameterRange"
      },
      "maxItems": 100,
      "type": "array"
    },
    "IntegerMaxValue": {
      "maximum": 1000000,
      "type": "integer"
    },
    "IntegerMinValue": {
      "minimum": -1000000,
      "type": "integer"
    },
    "InvalidInputException": {},
    "InvalidNextTokenException": {},
    "KmsKeyArn": {
      "type": "string"
    },
    "LimitExceededException": {},
    "ListBatchInferenceJobsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of batch inference job results to return in each page. The default value is 100."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to request the next page of results."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution version from which the batch inference jobs were created."
            }
          ]
        }
      },
      "title": "ListBatchInferenceJobsRequest",
      "type": "object"
    },
    "ListBatchInferenceJobsResponse": {
      "properties": {
        "batchInferenceJobs": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchInferenceJobs"
            },
            {
              "description": "A list containing information on each job that is returned."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token to use to retreive the next page of results. The value is <code>null</code> when there are no more results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListCampaignsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of campaigns to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListCampaigns</code> for getting the next set of campaigns (if they exist)."
            }
          ]
        },
        "solutionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution to list the campaigns for. When a solution is not specified, all the campaigns associated with the account are listed."
            }
          ]
        }
      },
      "title": "ListCampaignsRequest",
      "type": "object"
    },
    "ListCampaignsResponse": {
      "properties": {
        "campaigns": {
          "allOf": [
            {
              "$ref": "#/definitions/Campaigns"
            },
            {
              "description": "A list of the campaigns."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for getting the next set of campaigns (if they exist)."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDatasetGroupsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of dataset groups to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListDatasetGroups</code> for getting the next set of dataset groups (if they exist)."
            }
          ]
        }
      },
      "title": "ListDatasetGroupsRequest",
      "type": "object"
    },
    "ListDatasetGroupsResponse": {
      "properties": {
        "datasetGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/DatasetGroups"
            },
            {
              "description": "The list of your dataset groups."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for getting the next set of dataset groups (if they exist)."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDatasetImportJobsRequest": {
      "properties": {
        "datasetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset to list the dataset import jobs for."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of dataset import jobs to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListDatasetImportJobs</code> for getting the next set of dataset import jobs (if they exist)."
            }
          ]
        }
      },
      "title": "ListDatasetImportJobsRequest",
      "type": "object"
    },
    "ListDatasetImportJobsResponse": {
      "properties": {
        "datasetImportJobs": {
          "allOf": [
            {
              "$ref": "#/definitions/DatasetImportJobs"
            },
            {
              "description": "The list of dataset import jobs."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for getting the next set of dataset import jobs (if they exist)."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDatasetsRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group that contains the datasets to list."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of datasets to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListDatasetImportJobs</code> for getting the next set of dataset import jobs (if they exist)."
            }
          ]
        }
      },
      "title": "ListDatasetsRequest",
      "type": "object"
    },
    "ListDatasetsResponse": {
      "properties": {
        "datasets": {
          "allOf": [
            {
              "$ref": "#/definitions/Datasets"
            },
            {
              "description": "An array of <code>Dataset</code> objects. Each object provides metadata information."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for getting the next set of datasets (if they exist)."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListEventTrackersRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of a dataset group used to filter the response."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of event trackers to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListEventTrackers</code> for getting the next set of event trackers (if they exist)."
            }
          ]
        }
      },
      "title": "ListEventTrackersRequest",
      "type": "object"
    },
    "ListEventTrackersResponse": {
      "properties": {
        "eventTrackers": {
          "allOf": [
            {
              "$ref": "#/definitions/EventTrackers"
            },
            {
              "description": "A list of event trackers."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for getting the next set of event trackers (if they exist)."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListFiltersRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the dataset group that contains the filters."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of filters to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListFilters</code> for getting the next set of filters (if they exist)."
            }
          ]
        }
      },
      "title": "ListFiltersRequest",
      "type": "object"
    },
    "ListFiltersResponse": {
      "properties": {
        "Filters": {
          "allOf": [
            {
              "$ref": "#/definitions/Filters"
            },
            {
              "description": "A list of returned filters."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for getting the next set of filters (if they exist)."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListRecipesRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of recipes to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListRecipes</code> for getting the next set of recipes (if they exist)."
            }
          ]
        },
        "recipeProvider": {
          "allOf": [
            {
              "$ref": "#/definitions/RecipeProvider"
            },
            {
              "description": "The default is <code>SERVICE</code>."
            }
          ]
        }
      },
      "title": "ListRecipesRequest",
      "type": "object"
    },
    "ListRecipesResponse": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for getting the next set of recipes."
            }
          ]
        },
        "recipes": {
          "allOf": [
            {
              "$ref": "#/definitions/Recipes"
            },
            {
              "description": "The list of available recipes."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListSchemasRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of schemas to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListSchemas</code> for getting the next set of schemas (if they exist)."
            }
          ]
        }
      },
      "title": "ListSchemasRequest",
      "type": "object"
    },
    "ListSchemasResponse": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token used to get the next set of schemas (if they exist)."
            }
          ]
        },
        "schemas": {
          "allOf": [
            {
              "$ref": "#/definitions/Schemas"
            },
            {
              "description": "A list of schemas."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListSolutionVersionsRequest": {
      "properties": {
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of solution versions to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListSolutionVersions</code> for getting the next set of solution versions (if they exist)."
            }
          ]
        },
        "solutionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution."
            }
          ]
        }
      },
      "title": "ListSolutionVersionsRequest",
      "type": "object"
    },
    "ListSolutionVersionsResponse": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for getting the next set of solution versions (if they exist)."
            }
          ]
        },
        "solutionVersions": {
          "allOf": [
            {
              "$ref": "#/definitions/SolutionVersions"
            },
            {
              "description": "A list of solution versions describing the version properties."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListSolutionsRequest": {
      "properties": {
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group."
            }
          ]
        },
        "maxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of solutions to return."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token returned from the previous call to <code>ListSolutions</code> for getting the next set of solutions (if they exist)."
            }
          ]
        }
      },
      "title": "ListSolutionsRequest",
      "type": "object"
    },
    "ListSolutionsResponse": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for getting the next set of solutions (if they exist)."
            }
          ]
        },
        "solutions": {
          "allOf": [
            {
              "$ref": "#/definitions/Solutions"
            },
            {
              "description": "A list of the current solutions."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaxResults": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "MetricName": {
      "maxLength": 256,
      "type": "string"
    },
    "MetricRegex": {
      "maxLength": 256,
      "type": "string"
    },
    "MetricValue": {
      "format": "double",
      "type": "number"
    },
    "Metrics": {
      "additionalProperties": {
        "$ref": "#/definitions/MetricValue"
      },
      "maxProperties": 100,
      "type": "object"
    },
    "Name": {
      "maxLength": 63,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]*",
      "type": "string"
    },
    "NextToken": {
      "maxLength": 1300,
      "type": "string"
    },
    "NumBatchResults": {
      "type": "integer"
    },
    "ParameterName": {
      "maxLength": 256,
      "type": "string"
    },
    "ParameterValue": {
      "maxLength": 1000,
      "type": "string"
    },
    "PerformAutoML": {
      "type": "boolean"
    },
    "PerformHPO": {
      "type": "boolean"
    },
    "Recipe": {
      "description": "Provides information about a recipe. Each recipe provides an algorithm that Amazon Personalize uses in model training when you use the <a>CreateSolution</a> operation. ",
      "properties": {
        "algorithmArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the algorithm that Amazon Personalize uses to train the model."
            }
          ]
        },
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix format) that the recipe was created."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The description of the recipe."
            }
          ]
        },
        "featureTransformationArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the FeatureTransformation object."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix format) that the recipe was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the recipe."
            }
          ]
        },
        "recipeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the recipe."
            }
          ]
        },
        "recipeType": {
          "allOf": [
            {
              "$ref": "#/definitions/RecipeType"
            },
            {
              "description": "<p>One of the following values:</p> <ul> <li> <p>PERSONALIZED_RANKING</p> </li> <li> <p>RELATED_ITEMS</p> </li> <li> <p>USER_PERSONALIZATION</p> </li> </ul>"
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "The status of the recipe."
            }
          ]
        }
      },
      "type": "object"
    },
    "RecipeProvider": {
      "enum": [
        "SERVICE"
      ],
      "type": "string"
    },
    "RecipeSummary": {
      "description": "Provides a summary of the properties of a recipe. For a complete listing, call the <a>DescribeRecipe</a> API.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the recipe was created."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the recipe was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the recipe."
            }
          ]
        },
        "recipeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the recipe."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "The status of the recipe."
            }
          ]
        }
      },
      "type": "object"
    },
    "RecipeType": {
      "maxLength": 256,
      "type": "string"
    },
    "Recipes": {
      "items": {
        "$ref": "#/definitions/RecipeSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "ResourceAlreadyExistsException": {},
    "ResourceConfig": {
      "additionalProperties": {
        "$ref": "#/definitions/ParameterValue"
      },
      "maxProperties": 100,
      "type": "object"
    },
    "ResourceInUseException": {},
    "ResourceNotFoundException": {},
    "RoleArn": {
      "maxLength": 256,
      "pattern": "arn:([a-z\\d-]+):iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
      "type": "string"
    },
    "S3DataConfig": {
      "description": "The configuration details of an Amazon S3 input or output bucket.",
      "properties": {
        "kmsKeyArn": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the Amazon Key Management Service (KMS) key that Amazon Personalize uses to encrypt or decrypt the input and output files of a batch inference job."
            }
          ]
        },
        "path": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Location"
            },
            {
              "description": "The file path of the Amazon S3 bucket."
            }
          ]
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "S3Location": {
      "maxLength": 256,
      "type": "string"
    },
    "Schemas": {
      "items": {
        "$ref": "#/definitions/DatasetSchemaSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "Solution": {
      "description": "An object that provides information about a solution. A solution is a trained model that can be deployed as a campaign.",
      "properties": {
        "autoMLResult": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoMLResult"
            },
            {
              "description": "When <code>performAutoML</code> is true, specifies the best recipe found."
            }
          ]
        },
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The creation date and time (in Unix time) of the solution."
            }
          ]
        },
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group that provides the training data."
            }
          ]
        },
        "eventType": {
          "allOf": [
            {
              "$ref": "#/definitions/EventType"
            },
            {
              "description": "The event type (for example, 'click' or 'like') that is used for training the model."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the solution was last updated."
            }
          ]
        },
        "latestSolutionVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/SolutionVersionSummary"
            },
            {
              "description": "Describes the latest version of the solution, including the status and the ARN."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the solution."
            }
          ]
        },
        "performAutoML": {
          "allOf": [
            {
              "$ref": "#/definitions/PerformAutoML"
            },
            {
              "description": "When true, Amazon Personalize performs a search for the best USER_PERSONALIZATION recipe from the list specified in the solution configuration (<code>recipeArn</code> must not be specified). When false (the default), Amazon Personalize uses <code>recipeArn</code> for training."
            }
          ]
        },
        "performHPO": {
          "allOf": [
            {
              "$ref": "#/definitions/PerformHPO"
            },
            {
              "description": "Whether to perform hyperparameter optimization (HPO) on the chosen recipe. The default is <code>false</code>."
            }
          ]
        },
        "recipeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the recipe used to create the solution."
            }
          ]
        },
        "solutionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the solution."
            }
          ]
        },
        "solutionConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/SolutionConfig"
            },
            {
              "description": "Describes the configuration properties for the solution."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the solution.</p> <p>A solution can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "SolutionConfig": {
      "description": "Describes the configuration properties for the solution.",
      "properties": {
        "algorithmHyperParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/HyperParameters"
            },
            {
              "description": "Lists the hyperparameter names and ranges."
            }
          ]
        },
        "autoMLConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoMLConfig"
            },
            {
              "description": "The <a>AutoMLConfig</a> object containing a list of recipes to search when AutoML is performed."
            }
          ]
        },
        "eventValueThreshold": {
          "allOf": [
            {
              "$ref": "#/definitions/EventValueThreshold"
            },
            {
              "description": "Only events with a value greater than or equal to this threshold are used for training a model."
            }
          ]
        },
        "featureTransformationParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/FeatureTransformationParameters"
            },
            {
              "description": "Lists the feature transformation parameters."
            }
          ]
        },
        "hpoConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/HPOConfig"
            },
            {
              "description": "Describes the properties for hyperparameter optimization (HPO)."
            }
          ]
        }
      },
      "type": "object"
    },
    "SolutionSummary": {
      "description": "Provides a summary of the properties of a solution. For a complete listing, call the <a>DescribeSolution</a> API.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the solution was created."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the solution was last updated."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/Name"
            },
            {
              "description": "The name of the solution."
            }
          ]
        },
        "solutionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the solution.</p> <p>A solution can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> <li> <p>DELETE PENDING &gt; DELETE IN_PROGRESS</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "SolutionVersion": {
      "description": "An object that provides information about a specific version of a <a>Solution</a>.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that this version of the solution was created."
            }
          ]
        },
        "datasetGroupArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the dataset group providing the training data."
            }
          ]
        },
        "eventType": {
          "allOf": [
            {
              "$ref": "#/definitions/EventType"
            },
            {
              "description": "The event type (for example, 'click' or 'like') that is used for training the model."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If training a solution version fails, the reason for the failure."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the solution was last updated."
            }
          ]
        },
        "performAutoML": {
          "allOf": [
            {
              "$ref": "#/definitions/PerformAutoML"
            },
            {
              "description": "When true, Amazon Personalize searches for the most optimal recipe according to the solution configuration. When false (the default), Amazon Personalize uses <code>recipeArn</code>."
            }
          ]
        },
        "performHPO": {
          "allOf": [
            {
              "$ref": "#/definitions/PerformHPO"
            },
            {
              "description": "Whether to perform hyperparameter optimization (HPO) on the chosen recipe. The default is <code>false</code>."
            }
          ]
        },
        "recipeArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the recipe used in the solution."
            }
          ]
        },
        "solutionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the solution."
            }
          ]
        },
        "solutionConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/SolutionConfig"
            },
            {
              "description": "Describes the configuration properties for the solution."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of the solution version."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the solution version.</p> <p>A solution version can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING</p> </li> <li> <p>CREATE IN_PROGRESS</p> </li> <li> <p>ACTIVE</p> </li> <li> <p>CREATE FAILED</p> </li> </ul>"
            }
          ]
        },
        "trainingHours": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingHours"
            },
            {
              "description": "The time used to train the model. You are billed for the time it takes to train a model. This field is visible only after Amazon Personalize successfully trains a model."
            }
          ]
        },
        "trainingMode": {
          "allOf": [
            {
              "$ref": "#/definitions/TrainingMode"
            },
            {
              "description": "<p>The scope of training used to create the solution version. The <code>FULL</code> option trains the solution version based on the entirety of the input solution's training data, while the <code>UPDATE</code> option processes only the training data that has changed since the creation of the last solution version. Choose <code>UPDATE</code> when you want to start recommending items added to the dataset without retraining the model.</p> <important> <p>The <code>UPDATE</code> option can only be used after you've created a solution version with the <code>FULL</code> option and the training solution uses the <a>native-recipe-hrnn-coldstart</a>.</p> </important>"
            }
          ]
        },
        "tunedHPOParams": {
          "allOf": [
            {
              "$ref": "#/definitions/TunedHPOParams"
            },
            {
              "description": "If hyperparameter optimization was performed, contains the hyperparameter values of the best performing model."
            }
          ]
        }
      },
      "type": "object"
    },
    "SolutionVersionSummary": {
      "description": "Provides a summary of the properties of a solution version. For a complete listing, call the <a>DescribeSolutionVersion</a> API.",
      "properties": {
        "creationDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that this version of a solution was created."
            }
          ]
        },
        "failureReason": {
          "allOf": [
            {
              "$ref": "#/definitions/FailureReason"
            },
            {
              "description": "If a solution version fails, the reason behind the failure."
            }
          ]
        },
        "lastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Date"
            },
            {
              "description": "The date and time (in Unix time) that the solution version was last updated."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the solution version."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/Status"
            },
            {
              "description": "<p>The status of the solution version.</p> <p>A solution version can be in one of the following states:</p> <ul> <li> <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "SolutionVersions": {
      "items": {
        "$ref": "#/definitions/SolutionVersionSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "Solutions": {
      "items": {
        "$ref": "#/definitions/SolutionSummary"
      },
      "maxItems": 100,
      "type": "array"
    },
    "Status": {
      "maxLength": 256,
      "type": "string"
    },
    "TrackingId": {
      "maxLength": 256,
      "type": "string"
    },
    "TrainingHours": {
      "format": "double",
      "minimum": 0,
      "type": "number"
    },
    "TrainingInputMode": {
      "maxLength": 256,
      "type": "string"
    },
    "TrainingMode": {
      "enum": [
        "FULL",
        "UPDATE"
      ],
      "type": "string"
    },
    "TransactionsPerSecond": {
      "minimum": 1,
      "type": "integer"
    },
    "Tunable": {
      "type": "boolean"
    },
    "TunedHPOParams": {
      "description": "If hyperparameter optimization (HPO) was performed, contains the hyperparameter values of the best performing model.",
      "properties": {
        "algorithmHyperParameters": {
          "allOf": [
            {
              "$ref": "#/definitions/HyperParameters"
            },
            {
              "description": "A list of the hyperparameter values of the best performing model."
            }
          ]
        }
      },
      "type": "object"
    },
    "UpdateCampaignRequest": {
      "properties": {
        "campaignArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the campaign."
            }
          ]
        },
        "campaignConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/CampaignConfig"
            },
            {
              "description": "The configuration details of a campaign."
            }
          ]
        },
        "minProvisionedTPS": {
          "allOf": [
            {
              "$ref": "#/definitions/TransactionsPerSecond"
            },
            {
              "description": "Specifies the requested minimum provisioned transactions (recommendations) per second that Amazon Personalize will support."
            }
          ]
        },
        "solutionVersionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The ARN of a new solution version to deploy."
            }
          ]
        }
      },
      "required": [
        "campaignArn"
      ],
      "title": "UpdateCampaignRequest",
      "type": "object"
    },
    "UpdateCampaignResponse": {
      "properties": {
        "campaignArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": "The same campaign ARN as given in the request."
            }
          ]
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/personalize/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}