{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Directory Service</fullname> <p>AWS Directory Service is a web service that makes it easy for you to setup and run directories in the AWS cloud, or connect your AWS resources with an existing on-premises Microsoft Active Directory. This guide provides detailed information about AWS Directory Service operations, data types, parameters, and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to AWS Directory Service and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Directory Service",
    "version": "2015-04-16",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ds-2015-04-16.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "ds",
    "x-datafire": {
      "name": "amazonaws_ds",
      "type": "openapi"
    }
  },
  "host": "ds.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=DirectoryService_20150416.AcceptSharedDirectory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.AcceptSharedDirectory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AcceptSharedDirectoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AcceptSharedDirectoryResult"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "DirectoryAlreadySharedException",
            "schema": {
              "$ref": "#/definitions/DirectoryAlreadySharedException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Accepts a directory sharing request that was sent from the directory owner account.",
        "operationId": "AcceptSharedDirectory"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.AddIpRoutes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.AddIpRoutes"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddIpRoutesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddIpRoutesResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "EntityAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/EntityAlreadyExistsException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "484": {
            "description": "IpRouteLimitExceededException",
            "schema": {
              "$ref": "#/definitions/IpRouteLimitExceededException"
            }
          },
          "485": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "486": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>If the DNS server for your on-premises domain uses a publicly addressable IP address, you must add a CIDR address block to correctly route traffic to and from your Microsoft AD on Amazon Web Services. <i>AddIpRoutes</i> adds this address block. You can also use <i>AddIpRoutes</i> to facilitate routing traffic that uses public IP ranges from your Microsoft AD on AWS to a peer VPC. </p> <p>Before you call <i>AddIpRoutes</i>, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the <i>AddIpRoutes</i> operation, see <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html\">AWS Directory Service API Permissions: Actions, Resources, and Conditions Reference</a>.</p>",
        "operationId": "AddIpRoutes"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.AddRegion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.AddRegion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddRegionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddRegionResult"
            }
          },
          "480": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "483": {
            "description": "DirectoryAlreadyInRegionException",
            "schema": {
              "$ref": "#/definitions/DirectoryAlreadyInRegionException"
            }
          },
          "484": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "485": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "486": {
            "description": "RegionLimitExceededException",
            "schema": {
              "$ref": "#/definitions/RegionLimitExceededException"
            }
          },
          "487": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "488": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "489": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Adds two domain controllers in the specified Region for the specified directory.",
        "operationId": "AddRegion"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.AddTagsToResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.AddTagsToResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddTagsToResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddTagsToResourceResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TagLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TagLimitExceededException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Adds or overwrites one or more tags for the specified directory. Each directory can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique to each resource.",
        "operationId": "AddTagsToResource"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.CancelSchemaExtension": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.CancelSchemaExtension"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelSchemaExtensionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelSchemaExtensionResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "482": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Cancels an in-progress schema extension to a Microsoft AD directory. Once a schema extension has started replicating to all domain controllers, the task can no longer be canceled. A schema extension can be canceled during any of the following states; <code>Initializing</code>, <code>CreatingSnapshot</code>, and <code>UpdatingSchema</code>.",
        "operationId": "CancelSchemaExtension"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.ConnectDirectory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.ConnectDirectory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectDirectoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConnectDirectoryResult"
            }
          },
          "480": {
            "description": "DirectoryLimitExceededException",
            "schema": {
              "$ref": "#/definitions/DirectoryLimitExceededException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Creates an AD Connector to connect to an on-premises directory.</p> <p>Before you call <code>ConnectDirectory</code>, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the <code>ConnectDirectory</code> operation, see <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html\">AWS Directory Service API Permissions: Actions, Resources, and Conditions Reference</a>.</p>",
        "operationId": "ConnectDirectory"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.CreateAlias": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.CreateAlias"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAliasRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAliasResult"
            }
          },
          "480": {
            "description": "EntityAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/EntityAlreadyExistsException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Creates an alias for a directory and assigns the alias to the directory. The alias is used to construct the access URL for the directory, such as <code>http://&lt;alias&gt;.awsapps.com</code>.</p> <important> <p>After an alias has been created, it cannot be deleted or reused, so this operation should only be used when absolutely necessary.</p> </important>",
        "operationId": "CreateAlias"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.CreateComputer": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.CreateComputer"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateComputerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateComputerResult"
            }
          },
          "480": {
            "description": "AuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "EntityAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/EntityAlreadyExistsException"
            }
          },
          "483": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "484": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "485": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "486": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "487": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Creates an Active Directory computer object in the specified directory.",
        "operationId": "CreateComputer"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.CreateConditionalForwarder": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.CreateConditionalForwarder"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateConditionalForwarderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateConditionalForwarderResult"
            }
          },
          "480": {
            "description": "EntityAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/EntityAlreadyExistsException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "484": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "485": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "486": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Creates a conditional forwarder associated with your AWS directory. Conditional forwarders are required in order to set up a trust relationship with another domain. The conditional forwarder points to the trusted domain.",
        "operationId": "CreateConditionalForwarder"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.CreateDirectory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.CreateDirectory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDirectoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDirectoryResult"
            }
          },
          "480": {
            "description": "DirectoryLimitExceededException",
            "schema": {
              "$ref": "#/definitions/DirectoryLimitExceededException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Creates a Simple AD directory. For more information, see <a href=\"https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_simple_ad.html\">Simple Active Directory</a> in the <i>AWS Directory Service Admin Guide</i>.</p> <p>Before you call <code>CreateDirectory</code>, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the <code>CreateDirectory</code> operation, see <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html\">AWS Directory Service API Permissions: Actions, Resources, and Conditions Reference</a>.</p>",
        "operationId": "CreateDirectory"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.CreateLogSubscription": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.CreateLogSubscription"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLogSubscriptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateLogSubscriptionResult"
            }
          },
          "480": {
            "description": "EntityAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/EntityAlreadyExistsException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "483": {
            "description": "InsufficientPermissionsException",
            "schema": {
              "$ref": "#/definitions/InsufficientPermissionsException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Creates a subscription to forward real-time Directory Service domain controller security logs to the specified Amazon CloudWatch log group in your AWS account.",
        "operationId": "CreateLogSubscription"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.CreateMicrosoftAD": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.CreateMicrosoftAD"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMicrosoftADRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateMicrosoftADResult"
            }
          },
          "480": {
            "description": "DirectoryLimitExceededException",
            "schema": {
              "$ref": "#/definitions/DirectoryLimitExceededException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "484": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "<p>Creates a Microsoft AD directory in the AWS Cloud. For more information, see <a href=\"https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html\">AWS Managed Microsoft AD</a> in the <i>AWS Directory Service Admin Guide</i>.</p> <p>Before you call <i>CreateMicrosoftAD</i>, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the <i>CreateMicrosoftAD</i> operation, see <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html\">AWS Directory Service API Permissions: Actions, Resources, and Conditions Reference</a>.</p>",
        "operationId": "CreateMicrosoftAD"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.CreateSnapshot": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.CreateSnapshot"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSnapshotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateSnapshotResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "SnapshotLimitExceededException",
            "schema": {
              "$ref": "#/definitions/SnapshotLimitExceededException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Creates a snapshot of a Simple AD or Microsoft AD directory in the AWS cloud.</p> <note> <p>You cannot take snapshots of AD Connector directories.</p> </note>",
        "operationId": "CreateSnapshot"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.CreateTrust": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.CreateTrust"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTrustRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateTrustResult"
            }
          },
          "480": {
            "description": "EntityAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/EntityAlreadyExistsException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "485": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "<p>AWS Directory Service for Microsoft Active Directory allows you to configure trust relationships. For example, you can establish a trust between your AWS Managed Microsoft AD directory, and your existing on-premises Microsoft Active Directory. This would allow you to provide users and groups access to resources in either domain, with a single set of credentials.</p> <p>This action initiates the creation of the AWS side of a trust relationship between an AWS Managed Microsoft AD directory and an external domain. You can create either a forest trust or an external trust.</p>",
        "operationId": "CreateTrust"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DeleteConditionalForwarder": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DeleteConditionalForwarder"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteConditionalForwarderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteConditionalForwarderResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Deletes a conditional forwarder that has been set up for your AWS directory.",
        "operationId": "DeleteConditionalForwarder"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DeleteDirectory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DeleteDirectory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDirectoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDirectoryResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "482": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Deletes an AWS Directory Service directory.</p> <p>Before you call <code>DeleteDirectory</code>, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the <code>DeleteDirectory</code> operation, see <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html\">AWS Directory Service API Permissions: Actions, Resources, and Conditions Reference</a>.</p>",
        "operationId": "DeleteDirectory"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DeleteLogSubscription": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DeleteLogSubscription"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteLogSubscriptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteLogSubscriptionResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Deletes the specified log subscription.",
        "operationId": "DeleteLogSubscription"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DeleteSnapshot": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DeleteSnapshot"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSnapshotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteSnapshotResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Deletes a directory snapshot.",
        "operationId": "DeleteSnapshot"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DeleteTrust": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DeleteTrust"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTrustRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTrustResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "484": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "Deletes an existing trust relationship between your AWS Managed Microsoft AD directory and an external domain.",
        "operationId": "DeleteTrust"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DeregisterCertificate": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DeregisterCertificate"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterCertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterCertificateResult"
            }
          },
          "480": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "481": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "482": {
            "description": "CertificateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CertificateDoesNotExistException"
            }
          },
          "483": {
            "description": "CertificateInUseException",
            "schema": {
              "$ref": "#/definitions/CertificateInUseException"
            }
          },
          "484": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "485": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "486": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "487": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Deletes from the system the certificate that was registered for secure LDAP or client certificate authentication.",
        "operationId": "DeregisterCertificate"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DeregisterEventTopic": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DeregisterEventTopic"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterEventTopicRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeregisterEventTopicResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Removes the specified directory as a publisher to the specified SNS topic.",
        "operationId": "DeregisterEventTopic"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeCertificate": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DescribeCertificate"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeCertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeCertificateResult"
            }
          },
          "480": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "481": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "482": {
            "description": "CertificateDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/CertificateDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Displays information about the certificate registered for secure LDAP or client certificate authentication.",
        "operationId": "DescribeCertificate"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeConditionalForwarders": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DescribeConditionalForwarders"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeConditionalForwardersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeConditionalForwardersResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Obtains information about the conditional forwarders for this account.</p> <p>If no input parameters are provided for RemoteDomainNames, this request describes all conditional forwarders for the specified directory ID.</p>",
        "operationId": "DescribeConditionalForwarders"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeDirectories": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DescribeDirectories"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDirectoriesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDirectoriesResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Obtains information about the directories that belong to this account.</p> <p>You can retrieve information about specific directories by passing the directory identifiers in the <code>DirectoryIds</code> parameter. Otherwise, all directories that belong to the current account are returned.</p> <p>This operation supports pagination with the use of the <code>NextToken</code> request and response parameters. If more results are available, the <code>DescribeDirectoriesResult.NextToken</code> member contains a token that you pass in the next call to <a>DescribeDirectories</a> to retrieve the next set of items.</p> <p>You can also specify a maximum number of return results with the <code>Limit</code> parameter.</p>",
        "operationId": "DescribeDirectories"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeDomainControllers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "Limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DirectoryService_20150416.DescribeDomainControllers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDomainControllersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDomainControllersResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "485": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "Provides information about any domain controllers in your directory.",
        "operationId": "DescribeDomainControllers"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeEventTopics": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DescribeEventTopics"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEventTopicsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEventTopicsResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Obtains information about which SNS topics receive status messages from the specified directory.</p> <p>If no input parameters are provided, such as DirectoryId or TopicName, this request describes all of the associations in the account.</p>",
        "operationId": "DescribeEventTopics"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeLDAPSSettings": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DescribeLDAPSSettings"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeLDAPSSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeLDAPSSettingsResult"
            }
          },
          "480": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "481": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "482": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Describes the status of LDAP security for the specified directory.",
        "operationId": "DescribeLDAPSSettings"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeRegions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DescribeRegions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeRegionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeRegionsResult"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "482": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "484": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "485": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "486": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Provides information about the Regions that are configured for multi-Region replication.",
        "operationId": "DescribeRegions"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeSharedDirectories": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DescribeSharedDirectories"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeSharedDirectoriesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeSharedDirectoriesResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Returns the shared directories in your account. ",
        "operationId": "DescribeSharedDirectories"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeSnapshots": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DescribeSnapshots"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeSnapshotsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeSnapshotsResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Obtains information about the directory snapshots that belong to this account.</p> <p>This operation supports pagination with the use of the <i>NextToken</i> request and response parameters. If more results are available, the <i>DescribeSnapshots.NextToken</i> member contains a token that you pass in the next call to <a>DescribeSnapshots</a> to retrieve the next set of items.</p> <p>You can also specify a maximum number of return results with the <i>Limit</i> parameter.</p>",
        "operationId": "DescribeSnapshots"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DescribeTrusts": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DescribeTrusts"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeTrustsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeTrustsResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "485": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "<p>Obtains information about the trust relationships for this account.</p> <p>If no input parameters are provided, such as DirectoryId or TrustIds, this request describes all the trust relationships belonging to the account.</p>",
        "operationId": "DescribeTrusts"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DisableClientAuthentication": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DisableClientAuthentication"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisableClientAuthenticationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisableClientAuthenticationResult"
            }
          },
          "480": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "481": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "482": {
            "description": "InvalidClientAuthStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidClientAuthStatusException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Disables alternative client authentication methods for the specified directory. ",
        "operationId": "DisableClientAuthentication"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DisableLDAPS": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DisableLDAPS"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisableLDAPSRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisableLDAPSResult"
            }
          },
          "480": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "481": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidLDAPSStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidLDAPSStatusException"
            }
          },
          "483": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "484": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "485": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "486": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Deactivates LDAP secure calls for the specified directory.",
        "operationId": "DisableLDAPS"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DisableRadius": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DisableRadius"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisableRadiusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisableRadiusResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "482": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Disables multi-factor authentication (MFA) with the Remote Authentication Dial In User Service (RADIUS) server for an AD Connector or Microsoft AD directory.",
        "operationId": "DisableRadius"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.DisableSso": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.DisableSso"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisableSsoRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DisableSsoResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InsufficientPermissionsException",
            "schema": {
              "$ref": "#/definitions/InsufficientPermissionsException"
            }
          },
          "482": {
            "description": "AuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Disables single-sign on for a directory.",
        "operationId": "DisableSso"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.EnableClientAuthentication": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.EnableClientAuthentication"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnableClientAuthenticationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EnableClientAuthenticationResult"
            }
          },
          "480": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "481": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "482": {
            "description": "InvalidClientAuthStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidClientAuthStatusException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "NoAvailableCertificateException",
            "schema": {
              "$ref": "#/definitions/NoAvailableCertificateException"
            }
          },
          "485": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "486": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Enables alternative client authentication methods for the specified directory.",
        "operationId": "EnableClientAuthentication"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.EnableLDAPS": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.EnableLDAPS"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnableLDAPSRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EnableLDAPSResult"
            }
          },
          "480": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "481": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "482": {
            "description": "NoAvailableCertificateException",
            "schema": {
              "$ref": "#/definitions/NoAvailableCertificateException"
            }
          },
          "483": {
            "description": "InvalidLDAPSStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidLDAPSStatusException"
            }
          },
          "484": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "485": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "486": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "487": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Activates the switch for the specific directory to always use LDAP secure calls.",
        "operationId": "EnableLDAPS"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.EnableRadius": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.EnableRadius"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnableRadiusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EnableRadiusResult"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "EntityAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/EntityAlreadyExistsException"
            }
          },
          "482": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Enables multi-factor authentication (MFA) with the Remote Authentication Dial In User Service (RADIUS) server for an AD Connector or Microsoft AD directory.",
        "operationId": "EnableRadius"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.EnableSso": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.EnableSso"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnableSsoRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EnableSsoResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InsufficientPermissionsException",
            "schema": {
              "$ref": "#/definitions/InsufficientPermissionsException"
            }
          },
          "482": {
            "description": "AuthenticationFailedException",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Enables single sign-on for a directory. Single sign-on allows users in your directory to access certain AWS services from a computer joined to the directory without having to enter their credentials separately.",
        "operationId": "EnableSso"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.GetDirectoryLimits": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.GetDirectoryLimits"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDirectoryLimitsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDirectoryLimitsResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "482": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Obtains directory limit information for the current Region.",
        "operationId": "GetDirectoryLimits"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.GetSnapshotLimits": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.GetSnapshotLimits"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSnapshotLimitsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSnapshotLimitsResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "482": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Obtains the manual snapshot limits for a directory.",
        "operationId": "GetSnapshotLimits"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.ListCertificates": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.ListCertificates"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListCertificatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListCertificatesResult"
            }
          },
          "480": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "481": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "For the specified directory, lists all the certificates registered for a secure LDAP or client certificate authentication.",
        "operationId": "ListCertificates"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.ListIpRoutes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.ListIpRoutes"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListIpRoutesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIpRoutesResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Lists the address blocks that you have added to a directory.",
        "operationId": "ListIpRoutes"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.ListLogSubscriptions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.ListLogSubscriptions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListLogSubscriptionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListLogSubscriptionsResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Lists the active log subscriptions for the AWS account.",
        "operationId": "ListLogSubscriptions"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.ListSchemaExtensions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.ListSchemaExtensions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSchemaExtensionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSchemaExtensionsResult"
            }
          },
          "480": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Lists all schema extensions applied to a Microsoft AD Directory.",
        "operationId": "ListSchemaExtensions"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Lists all tags on a directory.",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.RegisterCertificate": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.RegisterCertificate"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterCertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterCertificateResult"
            }
          },
          "480": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "481": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidCertificateException",
            "schema": {
              "$ref": "#/definitions/InvalidCertificateException"
            }
          },
          "483": {
            "description": "CertificateLimitExceededException",
            "schema": {
              "$ref": "#/definitions/CertificateLimitExceededException"
            }
          },
          "484": {
            "description": "CertificateAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/CertificateAlreadyExistsException"
            }
          },
          "485": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "486": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "487": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "488": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Registers a certificate for a secure LDAP or client certificate authentication.",
        "operationId": "RegisterCertificate"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.RegisterEventTopic": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.RegisterEventTopic"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterEventTopicRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegisterEventTopicResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Associates a directory with an SNS topic. This establishes the directory as a publisher to the specified SNS topic. You can then receive email or text (SMS) messages when the status of your directory changes. You get notified if your directory goes from an Active status to an Impaired or Inoperable status. You also receive a notification when the directory returns to an Active status.",
        "operationId": "RegisterEventTopic"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.RejectSharedDirectory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.RejectSharedDirectory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectSharedDirectoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RejectSharedDirectoryResult"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "DirectoryAlreadySharedException",
            "schema": {
              "$ref": "#/definitions/DirectoryAlreadySharedException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Rejects a directory sharing request that was sent from the directory owner account.",
        "operationId": "RejectSharedDirectory"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.RemoveIpRoutes": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.RemoveIpRoutes"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveIpRoutesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RemoveIpRoutesResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Removes IP address blocks from a directory.",
        "operationId": "RemoveIpRoutes"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.RemoveRegion": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.RemoveRegion"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveRegionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RemoveRegionResult"
            }
          },
          "480": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "481": {
            "description": "DirectoryDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DirectoryDoesNotExistException"
            }
          },
          "482": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "483": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Stops all replication and removes the domain controllers from the specified Region. You cannot remove the primary Region with this operation. Instead, use the <code>DeleteDirectory</code> API.",
        "operationId": "RemoveRegion"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.RemoveTagsFromResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.RemoveTagsFromResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveTagsFromResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RemoveTagsFromResourceResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Removes tags from a directory.",
        "operationId": "RemoveTagsFromResource"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.ResetUserPassword": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.ResetUserPassword"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetUserPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResetUserPasswordResult"
            }
          },
          "480": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "481": {
            "description": "UserDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/UserDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "483": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "484": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "485": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "486": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Resets the password for any user in your AWS Managed Microsoft AD or Simple AD directory.</p> <p>You can reset the password for any user in your directory with the following exceptions:</p> <ul> <li> <p>For Simple AD, you cannot reset the password for any user that is a member of either the <b>Domain Admins</b> or <b>Enterprise Admins</b> group except for the administrator user.</p> </li> <li> <p>For AWS Managed Microsoft AD, you can only reset the password for a user that is in an OU based off of the NetBIOS name that you typed when you created your directory. For example, you cannot reset the password for a user in the <b>AWS Reserved</b> OU. For more information about the OU structure for an AWS Managed Microsoft AD directory, see <a href=\"https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ms_ad_getting_started_what_gets_created.html\">What Gets Created</a> in the <i>AWS Directory Service Administration Guide</i>.</p> </li> </ul>",
        "operationId": "ResetUserPassword"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.RestoreFromSnapshot": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.RestoreFromSnapshot"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestoreFromSnapshotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RestoreFromSnapshotResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Restores a directory using an existing directory snapshot.</p> <p>When you restore a directory from a snapshot, any changes made to the directory after the snapshot date are overwritten.</p> <p>This action returns as soon as the restore operation is initiated. You can monitor the progress of the restore operation by calling the <a>DescribeDirectories</a> operation with the directory identifier. When the <b>DirectoryDescription.Stage</b> value changes to <code>Active</code>, the restore operation is complete.</p>",
        "operationId": "RestoreFromSnapshot"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.ShareDirectory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.ShareDirectory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareDirectoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ShareDirectoryResult"
            }
          },
          "480": {
            "description": "DirectoryAlreadySharedException",
            "schema": {
              "$ref": "#/definitions/DirectoryAlreadySharedException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidTargetException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetException"
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ShareLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ShareLimitExceededException"
            }
          },
          "486": {
            "description": "OrganizationsException",
            "schema": {
              "$ref": "#/definitions/OrganizationsException"
            }
          },
          "487": {
            "description": "AccessDeniedException",
            "schema": {
              "$ref": "#/definitions/AccessDeniedException"
            }
          },
          "488": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "489": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "<p>Shares a specified directory (<code>DirectoryId</code>) in your AWS account (directory owner) with another AWS account (directory consumer). With this operation you can use your directory from any AWS account and from any Amazon VPC within an AWS Region.</p> <p>When you share your AWS Managed Microsoft AD directory, AWS Directory Service creates a shared directory in the directory consumer account. This shared directory contains the metadata to provide access to the directory within the directory owner account. The shared directory is visible in all VPCs in the directory consumer account.</p> <p>The <code>ShareMethod</code> parameter determines whether the specified directory can be shared between AWS accounts inside the same AWS organization (<code>ORGANIZATIONS</code>). It also determines whether you can share the directory with any other AWS account either inside or outside of the organization (<code>HANDSHAKE</code>).</p> <p>The <code>ShareNotes</code> parameter is only used when <code>HANDSHAKE</code> is called, which sends a directory sharing request to the directory consumer. </p>",
        "operationId": "ShareDirectory"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.StartSchemaExtension": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.StartSchemaExtension"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartSchemaExtensionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartSchemaExtensionResult"
            }
          },
          "480": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "SnapshotLimitExceededException",
            "schema": {
              "$ref": "#/definitions/SnapshotLimitExceededException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Applies a schema extension to a Microsoft AD directory.",
        "operationId": "StartSchemaExtension"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.UnshareDirectory": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.UnshareDirectory"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnshareDirectoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UnshareDirectoryResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidTargetException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetException"
            }
          },
          "482": {
            "description": "DirectoryNotSharedException",
            "schema": {
              "$ref": "#/definitions/DirectoryNotSharedException"
            }
          },
          "483": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "484": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Stops the directory sharing between the directory owner and consumer accounts. ",
        "operationId": "UnshareDirectory"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.UpdateConditionalForwarder": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.UpdateConditionalForwarder"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateConditionalForwarderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateConditionalForwarderResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "483": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "484": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "485": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Updates a conditional forwarder that has been set up for your AWS directory.",
        "operationId": "UpdateConditionalForwarder"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.UpdateNumberOfDomainControllers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.UpdateNumberOfDomainControllers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNumberOfDomainControllersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateNumberOfDomainControllersResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "DirectoryUnavailableException",
            "schema": {
              "$ref": "#/definitions/DirectoryUnavailableException"
            }
          },
          "482": {
            "description": "DomainControllerLimitExceededException",
            "schema": {
              "$ref": "#/definitions/DomainControllerLimitExceededException"
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "484": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          },
          "485": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "486": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Adds or removes domain controllers to or from the directory. Based on the difference between current value and new value (provided through this API call), domain controllers will be added or removed. It may take up to 45 minutes for any new domain controllers to become fully active once the requested number of domain controllers is updated. During this time, you cannot make another update request.",
        "operationId": "UpdateNumberOfDomainControllers"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.UpdateRadius": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.UpdateRadius"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRadiusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateRadiusResult"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Updates the Remote Authentication Dial In User Service (RADIUS) server information for an AD Connector or Microsoft AD directory.",
        "operationId": "UpdateRadius"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.UpdateTrust": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.UpdateTrust"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTrustRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateTrustResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          }
        },
        "description": "Updates the trust that has been set up between your AWS Managed Microsoft AD directory and an on-premises Active Directory.",
        "operationId": "UpdateTrust"
      }
    },
    "/#X-Amz-Target=DirectoryService_20150416.VerifyTrust": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "DirectoryService_20150416.VerifyTrust"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerifyTrustRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerifyTrustResult"
            }
          },
          "480": {
            "description": "EntityDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/EntityDoesNotExistException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ClientException",
            "schema": {
              "$ref": "#/definitions/ClientException"
            }
          },
          "483": {
            "description": "ServiceException",
            "schema": {
              "$ref": "#/definitions/ServiceException"
            }
          },
          "484": {
            "description": "UnsupportedOperationException",
            "schema": {
              "$ref": "#/definitions/UnsupportedOperationException"
            }
          }
        },
        "description": "<p>AWS Directory Service for Microsoft Active Directory allows you to configure and verify trust relationships.</p> <p>This action verifies a trust relationship between your AWS Managed Microsoft AD directory and an external domain.</p>",
        "operationId": "VerifyTrust"
      }
    }
  },
  "definitions": {
    "AcceptSharedDirectoryRequest": {
      "properties": {
        "SharedDirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the shared directory in the directory consumer account. This identifier is different for each directory owner account. "
            }
          ]
        }
      },
      "required": [
        "SharedDirectoryId"
      ],
      "title": "AcceptSharedDirectoryRequest",
      "type": "object"
    },
    "AcceptSharedDirectoryResult": {
      "properties": {
        "SharedDirectory": {
          "allOf": [
            {
              "$ref": "#/definitions/SharedDirectory"
            },
            {
              "description": "The shared directory in the directory consumer account."
            }
          ]
        }
      },
      "type": "object"
    },
    "AccessDeniedException": {},
    "AccessUrl": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "AddIpRoutesRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier (ID) of the directory to which to add the address block."
            }
          ]
        },
        "IpRoutes": {
          "allOf": [
            {
              "$ref": "#/definitions/IpRoutes"
            },
            {
              "description": "IP address blocks, using CIDR format, of the traffic to route. This is often the IP address block of the DNS server used for your on-premises domain."
            }
          ]
        },
        "UpdateSecurityGroupForDirectoryControllers": {
          "allOf": [
            {
              "$ref": "#/definitions/UpdateSecurityGroupForDirectoryControllers"
            },
            {
              "description": "<p>If set to true, updates the inbound and outbound rules of the security group that has the description: \"AWS created security group for <i>directory ID</i> directory controllers.\" Following are the new rules: </p> <p>Inbound:</p> <ul> <li> <p>Type: Custom UDP Rule, Protocol: UDP, Range: 88, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom UDP Rule, Protocol: UDP, Range: 123, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom UDP Rule, Protocol: UDP, Range: 138, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom UDP Rule, Protocol: UDP, Range: 389, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom UDP Rule, Protocol: UDP, Range: 464, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom UDP Rule, Protocol: UDP, Range: 445, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom TCP Rule, Protocol: TCP, Range: 88, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom TCP Rule, Protocol: TCP, Range: 135, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom TCP Rule, Protocol: TCP, Range: 445, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom TCP Rule, Protocol: TCP, Range: 464, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom TCP Rule, Protocol: TCP, Range: 636, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom TCP Rule, Protocol: TCP, Range: 1024-65535, Source: 0.0.0.0/0</p> </li> <li> <p>Type: Custom TCP Rule, Protocol: TCP, Range: 3268-33269, Source: 0.0.0.0/0</p> </li> <li> <p>Type: DNS (UDP), Protocol: UDP, Range: 53, Source: 0.0.0.0/0</p> </li> <li> <p>Type: DNS (TCP), Protocol: TCP, Range: 53, Source: 0.0.0.0/0</p> </li> <li> <p>Type: LDAP, Protocol: TCP, Range: 389, Source: 0.0.0.0/0</p> </li> <li> <p>Type: All ICMP, Protocol: All, Range: N/A, Source: 0.0.0.0/0</p> </li> </ul> <p/> <p>Outbound:</p> <ul> <li> <p>Type: All traffic, Protocol: All, Range: All, Destination: 0.0.0.0/0</p> </li> </ul> <p>These security rules impact an internal network interface that is not exposed publicly.</p>"
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "IpRoutes"
      ],
      "title": "AddIpRoutesRequest",
      "type": "object"
    },
    "AddIpRoutesResult": {
      "properties": {},
      "type": "object"
    },
    "AddRegionRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory to which you want to add Region replication."
            }
          ]
        },
        "RegionName": {
          "allOf": [
            {
              "$ref": "#/definitions/RegionName"
            },
            {
              "description": "The name of the Region where you want to add domain controllers for replication. For example, <code>us-east-1</code>."
            }
          ]
        },
        "VPCSettings": {
          "$ref": "#/definitions/DirectoryVpcSettings"
        }
      },
      "required": [
        "DirectoryId",
        "RegionName",
        "VPCSettings"
      ],
      "title": "AddRegionRequest",
      "type": "object"
    },
    "AddRegionResult": {
      "properties": {},
      "type": "object"
    },
    "AddTagsToResourceRequest": {
      "properties": {
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "Identifier (ID) for the directory to which to add the tag."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "The tags to be assigned to the directory."
            }
          ]
        }
      },
      "required": [
        "ResourceId",
        "Tags"
      ],
      "title": "AddTagsToResourceRequest",
      "type": "object"
    },
    "AddTagsToResourceResult": {
      "properties": {},
      "type": "object"
    },
    "AddedDateTime": {
      "format": "date-time",
      "type": "string"
    },
    "AdditionalRegions": {
      "items": {
        "$ref": "#/definitions/RegionName"
      },
      "type": "array"
    },
    "AliasName": {
      "maxLength": 62,
      "minLength": 1,
      "pattern": "^(?!d-)([\\da-zA-Z]+)([-]*[\\da-zA-Z])*",
      "type": "string"
    },
    "Attribute": {
      "description": "Represents a named directory attribute.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/AttributeName"
            },
            {
              "description": "The name of the attribute."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/AttributeValue"
            },
            {
              "description": "The value of the attribute."
            }
          ]
        }
      },
      "type": "object"
    },
    "AttributeName": {
      "minLength": 1,
      "type": "string"
    },
    "AttributeValue": {
      "type": "string"
    },
    "Attributes": {
      "items": {
        "$ref": "#/definitions/Attribute"
      },
      "type": "array"
    },
    "AuthenticationFailedException": {},
    "AvailabilityZone": {
      "type": "string"
    },
    "AvailabilityZones": {
      "items": {
        "$ref": "#/definitions/AvailabilityZone"
      },
      "type": "array"
    },
    "CancelSchemaExtensionRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory whose schema extension will be canceled."
            }
          ]
        },
        "SchemaExtensionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaExtensionId"
            },
            {
              "description": "The identifier of the schema extension that will be canceled."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "SchemaExtensionId"
      ],
      "title": "CancelSchemaExtensionRequest",
      "type": "object"
    },
    "CancelSchemaExtensionResult": {
      "properties": {},
      "type": "object"
    },
    "Certificate": {
      "description": "Information about the certificate.",
      "properties": {
        "CertificateId": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateId"
            },
            {
              "description": "The identifier of the certificate."
            }
          ]
        },
        "ClientCertAuthSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientCertAuthSettings"
            },
            {
              "description": "A <code>ClientCertAuthSettings</code> object that contains client certificate authentication settings."
            }
          ]
        },
        "CommonName": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateCN"
            },
            {
              "description": "The common name for the certificate."
            }
          ]
        },
        "ExpiryDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateExpiryDateTime"
            },
            {
              "description": "The date and time when the certificate will expire."
            }
          ]
        },
        "RegisteredDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateRegisteredDateTime"
            },
            {
              "description": "The date and time that the certificate was registered."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateState"
            },
            {
              "description": "The state of the certificate."
            }
          ]
        },
        "StateReason": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateStateReason"
            },
            {
              "description": "Describes a state change for the certificate."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateType"
            },
            {
              "description": "The function that the registered certificate performs. Valid values include <code>ClientLDAPS</code> or <code>ClientCertAuth</code>. The default value is <code>ClientLDAPS</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "CertificateAlreadyExistsException": {},
    "CertificateCN": {
      "type": "string"
    },
    "CertificateData": {
      "maxLength": 8192,
      "minLength": 1,
      "type": "string"
    },
    "CertificateDoesNotExistException": {},
    "CertificateExpiryDateTime": {
      "format": "date-time",
      "type": "string"
    },
    "CertificateId": {
      "pattern": "^c-[0-9a-f]{10}$",
      "type": "string"
    },
    "CertificateInUseException": {},
    "CertificateInfo": {
      "description": "Contains general information about a certificate.",
      "properties": {
        "CertificateId": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateId"
            },
            {
              "description": "The identifier of the certificate."
            }
          ]
        },
        "CommonName": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateCN"
            },
            {
              "description": "The common name for the certificate."
            }
          ]
        },
        "ExpiryDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateExpiryDateTime"
            },
            {
              "description": "The date and time when the certificate will expire."
            }
          ]
        },
        "State": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateState"
            },
            {
              "description": "The state of the certificate."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateType"
            },
            {
              "description": "The function that the registered certificate performs. Valid values include <code>ClientLDAPS</code> or <code>ClientCertAuth</code>. The default value is <code>ClientLDAPS</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "CertificateLimitExceededException": {},
    "CertificateRegisteredDateTime": {
      "format": "date-time",
      "type": "string"
    },
    "CertificateState": {
      "enum": [
        "Registering",
        "Registered",
        "RegisterFailed",
        "Deregistering",
        "Deregistered",
        "DeregisterFailed"
      ],
      "type": "string"
    },
    "CertificateStateReason": {
      "type": "string"
    },
    "CertificateType": {
      "enum": [
        "ClientCertAuth",
        "ClientLDAPS"
      ],
      "type": "string"
    },
    "CertificatesInfo": {
      "items": {
        "$ref": "#/definitions/CertificateInfo"
      },
      "type": "array"
    },
    "CidrIp": {
      "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([1-9]|[1-2][0-9]|3[0-2]))$",
      "type": "string"
    },
    "CidrIps": {
      "items": {
        "$ref": "#/definitions/CidrIp"
      },
      "type": "array"
    },
    "ClientAuthenticationType": {
      "enum": [
        "SmartCard"
      ],
      "type": "string"
    },
    "ClientCertAuthSettings": {
      "description": "Contains information about the client certificate authentication settings for the <code>RegisterCertificate</code> and <code>DescribeCertificate</code> operations. ",
      "properties": {
        "OCSPUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/OCSPUrl"
            },
            {
              "description": "Specifies the URL of the default OCSP server used to check for revocation status. A secondary value to any OCSP address found in the AIA extension of the user certificate."
            }
          ]
        }
      },
      "type": "object"
    },
    "ClientException": {},
    "CloudOnlyDirectoriesLimitReached": {
      "type": "boolean"
    },
    "Computer": {
      "description": "Contains information about a computer account in a directory.",
      "properties": {
        "ComputerAttributes": {
          "allOf": [
            {
              "$ref": "#/definitions/Attributes"
            },
            {
              "description": "An array of <a>Attribute</a> objects containing the LDAP attributes that belong to the computer account."
            }
          ]
        },
        "ComputerId": {
          "allOf": [
            {
              "$ref": "#/definitions/SID"
            },
            {
              "description": "The identifier of the computer."
            }
          ]
        },
        "ComputerName": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputerName"
            },
            {
              "description": "The computer name."
            }
          ]
        }
      },
      "type": "object"
    },
    "ComputerName": {
      "maxLength": 15,
      "minLength": 1,
      "type": "string"
    },
    "ComputerPassword": {
      "format": "password",
      "maxLength": 64,
      "minLength": 8,
      "pattern": "[\\u0020-\\u00FF]+",
      "type": "string"
    },
    "ConditionalForwarder": {
      "description": "Points to a remote domain with which you are setting up a trust relationship. Conditional forwarders are required in order to set up a trust relationship with another domain.",
      "properties": {
        "DnsIpAddrs": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsIpAddrs"
            },
            {
              "description": "The IP addresses of the remote DNS server associated with RemoteDomainName. This is the IP address of the DNS server that your conditional forwarder points to."
            }
          ]
        },
        "RemoteDomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/RemoteDomainName"
            },
            {
              "description": "The fully qualified domain name (FQDN) of the remote domains pointed to by the conditional forwarder."
            }
          ]
        },
        "ReplicationScope": {
          "allOf": [
            {
              "$ref": "#/definitions/ReplicationScope"
            },
            {
              "description": "The replication scope of the conditional forwarder. The only allowed value is <code>Domain</code>, which will replicate the conditional forwarder to all of the domain controllers for your AWS directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "ConditionalForwarders": {
      "items": {
        "$ref": "#/definitions/ConditionalForwarder"
      },
      "type": "array"
    },
    "ConnectDirectoryRequest": {
      "description": "Contains the inputs for the <a>ConnectDirectory</a> operation.",
      "properties": {
        "ConnectSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryConnectSettings"
            },
            {
              "description": "A <a>DirectoryConnectSettings</a> object that contains additional information for the operation."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description for the directory."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryName"
            },
            {
              "description": "The fully qualified name of the on-premises directory, such as <code>corp.example.com</code>."
            }
          ]
        },
        "Password": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectPassword"
            },
            {
              "description": "The password for the on-premises user account."
            }
          ]
        },
        "ShortName": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryShortName"
            },
            {
              "description": "The NetBIOS name of the on-premises directory, such as <code>CORP</code>."
            }
          ]
        },
        "Size": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectorySize"
            },
            {
              "description": "The size of the directory."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "The tags to be assigned to AD Connector."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Password",
        "Size",
        "ConnectSettings"
      ],
      "title": "ConnectDirectoryRequest",
      "type": "object"
    },
    "ConnectDirectoryResult": {
      "description": "Contains the results of the <a>ConnectDirectory</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the new directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "ConnectPassword": {
      "format": "password",
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "ConnectedDirectoriesLimitReached": {
      "type": "boolean"
    },
    "CreateAliasRequest": {
      "description": "Contains the inputs for the <a>CreateAlias</a> operation.",
      "properties": {
        "Alias": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasName"
            },
            {
              "description": "<p>The requested alias.</p> <p>The alias must be unique amongst all aliases in AWS. This operation throws an <code>EntityAlreadyExistsException</code> error if the alias already exists.</p>"
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory for which to create the alias."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "Alias"
      ],
      "title": "CreateAliasRequest",
      "type": "object"
    },
    "CreateAliasResult": {
      "description": "Contains the results of the <a>CreateAlias</a> operation.",
      "properties": {
        "Alias": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasName"
            },
            {
              "description": "The alias for the directory."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateComputerRequest": {
      "description": "Contains the inputs for the <a>CreateComputer</a> operation.",
      "properties": {
        "ComputerAttributes": {
          "allOf": [
            {
              "$ref": "#/definitions/Attributes"
            },
            {
              "description": "An array of <a>Attribute</a> objects that contain any LDAP attributes to apply to the computer account."
            }
          ]
        },
        "ComputerName": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputerName"
            },
            {
              "description": "The name of the computer account."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory in which to create the computer account."
            }
          ]
        },
        "OrganizationalUnitDistinguishedName": {
          "allOf": [
            {
              "$ref": "#/definitions/OrganizationalUnitDN"
            },
            {
              "description": "The fully-qualified distinguished name of the organizational unit to place the computer account in."
            }
          ]
        },
        "Password": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputerPassword"
            },
            {
              "description": "A one-time password that is used to join the computer to the directory. You should generate a random, strong password to use for this parameter."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "ComputerName",
        "Password"
      ],
      "title": "CreateComputerRequest",
      "type": "object"
    },
    "CreateComputerResult": {
      "description": "Contains the results for the <a>CreateComputer</a> operation.",
      "properties": {
        "Computer": {
          "allOf": [
            {
              "$ref": "#/definitions/Computer"
            },
            {
              "description": "A <a>Computer</a> object that represents the computer account."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateConditionalForwarderRequest": {
      "description": "Initiates the creation of a conditional forwarder for your AWS Directory Service for Microsoft Active Directory. Conditional forwarders are required in order to set up a trust relationship with another domain.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The directory ID of the AWS directory for which you are creating the conditional forwarder."
            }
          ]
        },
        "DnsIpAddrs": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsIpAddrs"
            },
            {
              "description": "The IP addresses of the remote DNS server associated with RemoteDomainName."
            }
          ]
        },
        "RemoteDomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/RemoteDomainName"
            },
            {
              "description": "The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "RemoteDomainName",
        "DnsIpAddrs"
      ],
      "title": "CreateConditionalForwarderRequest",
      "type": "object"
    },
    "CreateConditionalForwarderResult": {
      "description": "The result of a CreateConditinalForwarder request.",
      "properties": {},
      "type": "object"
    },
    "CreateDirectoryRequest": {
      "description": "Contains the inputs for the <a>CreateDirectory</a> operation. ",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description for the directory."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryName"
            },
            {
              "description": "The fully qualified name for the directory, such as <code>corp.example.com</code>."
            }
          ]
        },
        "Password": {
          "allOf": [
            {
              "$ref": "#/definitions/Password"
            },
            {
              "description": "<p>The password for the directory administrator. The directory creation process creates a directory administrator account with the user name <code>Administrator</code> and this password.</p> <p>If you need to change the password for the administrator account, you can use the <a>ResetUserPassword</a> API call.</p> <p>The regex pattern for this string is made up of the following conditions:</p> <ul> <li> <p>Length (?=^.{8,64}$) – Must be between 8 and 64 characters</p> </li> </ul> <p>AND any 3 of the following password complexity rules required by Active Directory:</p> <ul> <li> <p>Numbers and upper case and lowercase (?=.*\\d)(?=.*[A-Z])(?=.*[a-z])</p> </li> <li> <p>Numbers and special characters and lower case (?=.*\\d)(?=.*[^A-Za-z0-9\\s])(?=.*[a-z])</p> </li> <li> <p>Special characters and upper case and lower case (?=.*[^A-Za-z0-9\\s])(?=.*[A-Z])(?=.*[a-z])</p> </li> <li> <p>Numbers and upper case and special characters (?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\\s])</p> </li> </ul> <p>For additional information about how Active Directory passwords are enforced, see <a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/password-must-meet-complexity-requirements\">Password must meet complexity requirements</a> on the Microsoft website.</p>"
            }
          ]
        },
        "ShortName": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryShortName"
            },
            {
              "description": "The NetBIOS name of the directory, such as <code>CORP</code>."
            }
          ]
        },
        "Size": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectorySize"
            },
            {
              "description": "The size of the directory."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "The tags to be assigned to the Simple AD directory."
            }
          ]
        },
        "VpcSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryVpcSettings"
            },
            {
              "description": "A <a>DirectoryVpcSettings</a> object that contains additional information for the operation."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Password",
        "Size"
      ],
      "title": "CreateDirectoryRequest",
      "type": "object"
    },
    "CreateDirectoryResult": {
      "description": "Contains the results of the <a>CreateDirectory</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory that was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateLogSubscriptionRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the directory to which you want to subscribe and receive real-time logs to your specified CloudWatch log group."
            }
          ]
        },
        "LogGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/LogGroupName"
            },
            {
              "description": "The name of the CloudWatch log group where the real-time domain controller logs are forwarded."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "LogGroupName"
      ],
      "title": "CreateLogSubscriptionRequest",
      "type": "object"
    },
    "CreateLogSubscriptionResult": {
      "properties": {},
      "type": "object"
    },
    "CreateMicrosoftADRequest": {
      "description": "Creates an AWS Managed Microsoft AD directory.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description for the directory. This label will appear on the AWS console <code>Directory Details</code> page after the directory is created."
            }
          ]
        },
        "Edition": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryEdition"
            },
            {
              "description": "AWS Managed Microsoft AD is available in two editions: <code>Standard</code> and <code>Enterprise</code>. <code>Enterprise</code> is the default."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryName"
            },
            {
              "description": "The fully qualified domain name for the AWS Managed Microsoft AD directory, such as <code>corp.example.com</code>. This name will resolve inside your VPC only. It does not need to be publicly resolvable."
            }
          ]
        },
        "Password": {
          "allOf": [
            {
              "$ref": "#/definitions/Password"
            },
            {
              "description": "<p>The password for the default administrative user named <code>Admin</code>.</p> <p>If you need to change the password for the administrator account, you can use the <a>ResetUserPassword</a> API call.</p>"
            }
          ]
        },
        "ShortName": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryShortName"
            },
            {
              "description": "The NetBIOS name for your domain, such as <code>CORP</code>. If you don't specify a NetBIOS name, it will default to the first part of your directory DNS. For example, <code>CORP</code> for the directory DNS <code>corp.example.com</code>. "
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "The tags to be assigned to the AWS Managed Microsoft AD directory."
            }
          ]
        },
        "VpcSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryVpcSettings"
            },
            {
              "description": "Contains VPC information for the <a>CreateDirectory</a> or <a>CreateMicrosoftAD</a> operation."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Password",
        "VpcSettings"
      ],
      "title": "CreateMicrosoftADRequest",
      "type": "object"
    },
    "CreateMicrosoftADResult": {
      "description": "Result of a CreateMicrosoftAD request.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory that was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateSnapshotBeforeSchemaExtension": {
      "type": "boolean"
    },
    "CreateSnapshotRequest": {
      "description": "Contains the inputs for the <a>CreateSnapshot</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory of which to take a snapshot."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotName"
            },
            {
              "description": "The descriptive name to apply to the snapshot."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "CreateSnapshotRequest",
      "type": "object"
    },
    "CreateSnapshotResult": {
      "description": "Contains the results of the <a>CreateSnapshot</a> operation.",
      "properties": {
        "SnapshotId": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotId"
            },
            {
              "description": "The identifier of the snapshot that was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateTrustRequest": {
      "description": "<p>AWS Directory Service for Microsoft Active Directory allows you to configure trust relationships. For example, you can establish a trust between your AWS Managed Microsoft AD directory, and your existing on-premises Microsoft Active Directory. This would allow you to provide users and groups access to resources in either domain, with a single set of credentials.</p> <p>This action initiates the creation of the AWS side of a trust relationship between an AWS Managed Microsoft AD directory and an external domain.</p>",
      "properties": {
        "ConditionalForwarderIpAddrs": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsIpAddrs"
            },
            {
              "description": "The IP addresses of the remote DNS server associated with RemoteDomainName."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The Directory ID of the AWS Managed Microsoft AD directory for which to establish the trust relationship."
            }
          ]
        },
        "RemoteDomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/RemoteDomainName"
            },
            {
              "description": "The Fully Qualified Domain Name (FQDN) of the external domain for which to create the trust relationship."
            }
          ]
        },
        "SelectiveAuth": {
          "allOf": [
            {
              "$ref": "#/definitions/SelectiveAuth"
            },
            {
              "description": "Optional parameter to enable selective authentication for the trust."
            }
          ]
        },
        "TrustDirection": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustDirection"
            },
            {
              "description": "The direction of the trust relationship."
            }
          ]
        },
        "TrustPassword": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustPassword"
            },
            {
              "description": "The trust password. The must be the same password that was used when creating the trust relationship on the external domain."
            }
          ]
        },
        "TrustType": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustType"
            },
            {
              "description": "The trust relationship type. <code>Forest</code> is the default."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "RemoteDomainName",
        "TrustPassword",
        "TrustDirection"
      ],
      "title": "CreateTrustRequest",
      "type": "object"
    },
    "CreateTrustResult": {
      "description": "The result of a CreateTrust request.",
      "properties": {
        "TrustId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustId"
            },
            {
              "description": "A unique identifier for the trust relationship that was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreatedDateTime": {
      "format": "date-time",
      "type": "string"
    },
    "CustomerId": {
      "pattern": "^(\\d{12})$",
      "type": "string"
    },
    "CustomerUserName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^(?!.*\\\\|.*\"|.*\\/|.*\\[|.*\\]|.*:|.*;|.*\\||.*=|.*,|.*\\+|.*\\*|.*\\?|.*<|.*>|.*@).*$",
      "type": "string"
    },
    "DeleteAssociatedConditionalForwarder": {
      "type": "boolean"
    },
    "DeleteConditionalForwarderRequest": {
      "description": "Deletes a conditional forwarder.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The directory ID for which you are deleting the conditional forwarder."
            }
          ]
        },
        "RemoteDomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/RemoteDomainName"
            },
            {
              "description": "The fully qualified domain name (FQDN) of the remote domain with which you are deleting the conditional forwarder."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "RemoteDomainName"
      ],
      "title": "DeleteConditionalForwarderRequest",
      "type": "object"
    },
    "DeleteConditionalForwarderResult": {
      "description": "The result of a DeleteConditionalForwarder request.",
      "properties": {},
      "type": "object"
    },
    "DeleteDirectoryRequest": {
      "description": "Contains the inputs for the <a>DeleteDirectory</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory to delete."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "DeleteDirectoryRequest",
      "type": "object"
    },
    "DeleteDirectoryResult": {
      "description": "Contains the results of the <a>DeleteDirectory</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The directory identifier."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteLogSubscriptionRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the directory whose log subscription you want to delete."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "DeleteLogSubscriptionRequest",
      "type": "object"
    },
    "DeleteLogSubscriptionResult": {
      "properties": {},
      "type": "object"
    },
    "DeleteSnapshotRequest": {
      "description": "Contains the inputs for the <a>DeleteSnapshot</a> operation.",
      "properties": {
        "SnapshotId": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotId"
            },
            {
              "description": "The identifier of the directory snapshot to be deleted."
            }
          ]
        }
      },
      "required": [
        "SnapshotId"
      ],
      "title": "DeleteSnapshotRequest",
      "type": "object"
    },
    "DeleteSnapshotResult": {
      "description": "Contains the results of the <a>DeleteSnapshot</a> operation.",
      "properties": {
        "SnapshotId": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotId"
            },
            {
              "description": "The identifier of the directory snapshot that was deleted."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteTrustRequest": {
      "description": "Deletes the local side of an existing trust relationship between the AWS Managed Microsoft AD directory and the external domain.",
      "properties": {
        "DeleteAssociatedConditionalForwarder": {
          "allOf": [
            {
              "$ref": "#/definitions/DeleteAssociatedConditionalForwarder"
            },
            {
              "description": "Delete a conditional forwarder as part of a DeleteTrustRequest."
            }
          ]
        },
        "TrustId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustId"
            },
            {
              "description": "The Trust ID of the trust relationship to be deleted."
            }
          ]
        }
      },
      "required": [
        "TrustId"
      ],
      "title": "DeleteTrustRequest",
      "type": "object"
    },
    "DeleteTrustResult": {
      "description": "The result of a DeleteTrust request.",
      "properties": {
        "TrustId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustId"
            },
            {
              "description": "The Trust ID of the trust relationship that was deleted."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeregisterCertificateRequest": {
      "properties": {
        "CertificateId": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateId"
            },
            {
              "description": "The identifier of the certificate."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "CertificateId"
      ],
      "title": "DeregisterCertificateRequest",
      "type": "object"
    },
    "DeregisterCertificateResult": {
      "properties": {},
      "type": "object"
    },
    "DeregisterEventTopicRequest": {
      "description": "Removes the specified directory as a publisher to the specified SNS topic.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The Directory ID to remove as a publisher. This directory will no longer send messages to the specified SNS topic."
            }
          ]
        },
        "TopicName": {
          "allOf": [
            {
              "$ref": "#/definitions/TopicName"
            },
            {
              "description": "The name of the SNS topic from which to remove the directory as a publisher."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "TopicName"
      ],
      "title": "DeregisterEventTopicRequest",
      "type": "object"
    },
    "DeregisterEventTopicResult": {
      "description": "The result of a DeregisterEventTopic request.",
      "properties": {},
      "type": "object"
    },
    "DescribeCertificateRequest": {
      "properties": {
        "CertificateId": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateId"
            },
            {
              "description": "The identifier of the certificate."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "CertificateId"
      ],
      "title": "DescribeCertificateRequest",
      "type": "object"
    },
    "DescribeCertificateResult": {
      "properties": {
        "Certificate": {
          "allOf": [
            {
              "$ref": "#/definitions/Certificate"
            },
            {
              "description": "Information about the certificate, including registered date time, certificate state, the reason for the state, expiration date time, and certificate common name."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeConditionalForwardersRequest": {
      "description": "Describes a conditional forwarder.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The directory ID for which to get the list of associated conditional forwarders."
            }
          ]
        },
        "RemoteDomainNames": {
          "allOf": [
            {
              "$ref": "#/definitions/RemoteDomainNames"
            },
            {
              "description": "The fully qualified domain names (FQDN) of the remote domains for which to get the list of associated conditional forwarders. If this member is null, all conditional forwarders are returned."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "DescribeConditionalForwardersRequest",
      "type": "object"
    },
    "DescribeConditionalForwardersResult": {
      "description": "The result of a DescribeConditionalForwarder request.",
      "properties": {
        "ConditionalForwarders": {
          "allOf": [
            {
              "$ref": "#/definitions/ConditionalForwarders"
            },
            {
              "description": "The list of conditional forwarders that have been created."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDirectoriesRequest": {
      "description": "Contains the inputs for the <a>DescribeDirectories</a> operation.",
      "properties": {
        "DirectoryIds": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryIds"
            },
            {
              "description": "<p>A list of identifiers of the directories for which to obtain the information. If this member is null, all directories that belong to the current account are returned.</p> <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>"
            }
          ]
        },
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The <code>DescribeDirectoriesResult.NextToken</code> value from a previous call to <a>DescribeDirectories</a>. Pass null if this is the first call."
            }
          ]
        }
      },
      "title": "DescribeDirectoriesRequest",
      "type": "object"
    },
    "DescribeDirectoriesResult": {
      "description": "Contains the results of the <a>DescribeDirectories</a> operation.",
      "properties": {
        "DirectoryDescriptions": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryDescriptions"
            },
            {
              "description": "<p>The list of <a>DirectoryDescription</a> objects that were retrieved.</p> <p>It is possible that this list contains less than the number of items specified in the <code>Limit</code> member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.</p>"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to <a>DescribeDirectories</a> to retrieve the next set of items."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDomainControllersRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the directory for which to retrieve the domain controller information."
            }
          ]
        },
        "DomainControllerIds": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainControllerIds"
            },
            {
              "description": "A list of identifiers for the domain controllers whose information will be provided."
            }
          ]
        },
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of items to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The <i>DescribeDomainControllers.NextToken</i> value from a previous call to <a>DescribeDomainControllers</a>. Pass null if this is the first call. "
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "DescribeDomainControllersRequest",
      "type": "object"
    },
    "DescribeDomainControllersResult": {
      "properties": {
        "DomainControllers": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainControllers"
            },
            {
              "description": "List of the <a>DomainController</a> objects that were retrieved."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to <a>DescribeDomainControllers</a> retrieve the next set of items."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeEventTopicsRequest": {
      "description": "Describes event topics.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The Directory ID for which to get the list of associated SNS topics. If this member is null, associations for all Directory IDs are returned."
            }
          ]
        },
        "TopicNames": {
          "allOf": [
            {
              "$ref": "#/definitions/TopicNames"
            },
            {
              "description": "<p>A list of SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned.</p> <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>"
            }
          ]
        }
      },
      "title": "DescribeEventTopicsRequest",
      "type": "object"
    },
    "DescribeEventTopicsResult": {
      "description": "The result of a DescribeEventTopic request.",
      "properties": {
        "EventTopics": {
          "allOf": [
            {
              "$ref": "#/definitions/EventTopics"
            },
            {
              "description": "A list of SNS topic names that receive status messages from the specified Directory ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeLDAPSSettingsRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        },
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/PageLimit"
            },
            {
              "description": "Specifies the number of items that should be displayed on one page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The type of next token used for pagination."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/LDAPSType"
            },
            {
              "description": "The type of LDAP security to enable. Currently only the value <code>Client</code> is supported."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "DescribeLDAPSSettingsRequest",
      "type": "object"
    },
    "DescribeLDAPSSettingsResult": {
      "properties": {
        "LDAPSSettingsInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LDAPSSettingsInfo"
            },
            {
              "description": "Information about LDAP security for the specified directory, including status of enablement, state last updated date time, and the reason for the state."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The next token used to retrieve the LDAPS settings if the number of setting types exceeds page limit and there is another page."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeRegionsRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The <code>DescribeRegionsResult.NextToken</code> value from a previous call to <a>DescribeRegions</a>. Pass null if this is the first call."
            }
          ]
        },
        "RegionName": {
          "allOf": [
            {
              "$ref": "#/definitions/RegionName"
            },
            {
              "description": "The name of the Region. For example, <code>us-east-1</code>."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "DescribeRegionsRequest",
      "type": "object"
    },
    "DescribeRegionsResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to <a>DescribeRegions</a> to retrieve the next set of items."
            }
          ]
        },
        "RegionsDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/RegionsDescription"
            },
            {
              "description": "List of Region information related to the directory for each replicated Region."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeSharedDirectoriesRequest": {
      "properties": {
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The number of shared directories to return in the response object."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The <code>DescribeSharedDirectoriesResult.NextToken</code> value from a previous call to <a>DescribeSharedDirectories</a>. Pass null if this is the first call. "
            }
          ]
        },
        "OwnerDirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Returns the identifier of the directory in the directory owner account. "
            }
          ]
        },
        "SharedDirectoryIds": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryIds"
            },
            {
              "description": "A list of identifiers of all shared directories in your account. "
            }
          ]
        }
      },
      "required": [
        "OwnerDirectoryId"
      ],
      "title": "DescribeSharedDirectoriesRequest",
      "type": "object"
    },
    "DescribeSharedDirectoriesResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If not null, token that indicates that more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to <a>DescribeSharedDirectories</a> to retrieve the next set of items."
            }
          ]
        },
        "SharedDirectories": {
          "allOf": [
            {
              "$ref": "#/definitions/SharedDirectories"
            },
            {
              "description": "A list of all shared directories in your account."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeSnapshotsRequest": {
      "description": "Contains the inputs for the <a>DescribeSnapshots</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory for which to retrieve snapshot information."
            }
          ]
        },
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of objects to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The <i>DescribeSnapshotsResult.NextToken</i> value from a previous call to <a>DescribeSnapshots</a>. Pass null if this is the first call."
            }
          ]
        },
        "SnapshotIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotIds"
            },
            {
              "description": "A list of identifiers of the snapshots to obtain the information for. If this member is null or empty, all snapshots are returned using the <i>Limit</i> and <i>NextToken</i> members."
            }
          ]
        }
      },
      "title": "DescribeSnapshotsRequest",
      "type": "object"
    },
    "DescribeSnapshotsResult": {
      "description": "Contains the results of the <a>DescribeSnapshots</a> operation.",
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If not null, more results are available. Pass this value in the <i>NextToken</i> member of a subsequent call to <a>DescribeSnapshots</a>."
            }
          ]
        },
        "Snapshots": {
          "allOf": [
            {
              "$ref": "#/definitions/Snapshots"
            },
            {
              "description": "<p>The list of <a>Snapshot</a> objects that were retrieved.</p> <p>It is possible that this list contains less than the number of items specified in the <i>Limit</i> member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeTrustsRequest": {
      "description": "Describes the trust relationships for a particular AWS Managed Microsoft AD directory. If no input parameters are are provided, such as directory ID or trust ID, this request describes all the trust relationships.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The Directory ID of the AWS directory that is a part of the requested trust relationship."
            }
          ]
        },
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of objects to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The <i>DescribeTrustsResult.NextToken</i> value from a previous call to <a>DescribeTrusts</a>. Pass null if this is the first call."
            }
          ]
        },
        "TrustIds": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustIds"
            },
            {
              "description": "<p>A list of identifiers of the trust relationships for which to obtain the information. If this member is null, all trust relationships that belong to the current account are returned.</p> <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>"
            }
          ]
        }
      },
      "title": "DescribeTrustsRequest",
      "type": "object"
    },
    "DescribeTrustsResult": {
      "description": "The result of a DescribeTrust request.",
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If not null, more results are available. Pass this value for the <i>NextToken</i> parameter in a subsequent call to <a>DescribeTrusts</a> to retrieve the next set of items."
            }
          ]
        },
        "Trusts": {
          "allOf": [
            {
              "$ref": "#/definitions/Trusts"
            },
            {
              "description": "<p>The list of Trust objects that were retrieved.</p> <p>It is possible that this list contains less than the number of items specified in the <i>Limit</i> member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "Description": {
      "maxLength": 128,
      "minLength": 0,
      "pattern": "^([a-zA-Z0-9_])[\\\\a-zA-Z0-9_@#%*+=:?./!\\s-]*$",
      "type": "string"
    },
    "DesiredNumberOfDomainControllers": {
      "minimum": 2,
      "type": "integer"
    },
    "DirectoryAlreadyInRegionException": {},
    "DirectoryAlreadySharedException": {},
    "DirectoryConnectSettings": {
      "description": "Contains information for the <a>ConnectDirectory</a> operation when an AD Connector directory is being created.",
      "properties": {
        "CustomerDnsIps": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsIpAddrs"
            },
            {
              "description": "A list of one or more IP addresses of DNS servers or domain controllers in the on-premises directory."
            }
          ]
        },
        "CustomerUserName": {
          "allOf": [
            {
              "$ref": "#/definitions/UserName"
            },
            {
              "description": "<p>The user name of an account in the on-premises directory that is used to connect to the directory. This account must have the following permissions:</p> <ul> <li> <p>Read users and groups</p> </li> <li> <p>Create computer objects</p> </li> <li> <p>Join computers to the domain</p> </li> </ul>"
            }
          ]
        },
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIds"
            },
            {
              "description": "A list of subnet identifiers in the VPC in which the AD Connector is created."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcId"
            },
            {
              "description": "The identifier of the VPC in which the AD Connector is created."
            }
          ]
        }
      },
      "required": [
        "VpcId",
        "SubnetIds",
        "CustomerDnsIps",
        "CustomerUserName"
      ],
      "type": "object"
    },
    "DirectoryConnectSettingsDescription": {
      "description": "Contains information about an AD Connector directory.",
      "properties": {
        "AvailabilityZones": {
          "allOf": [
            {
              "$ref": "#/definitions/AvailabilityZones"
            },
            {
              "description": "A list of the Availability Zones that the directory is in."
            }
          ]
        },
        "ConnectIps": {
          "allOf": [
            {
              "$ref": "#/definitions/IpAddrs"
            },
            {
              "description": "The IP addresses of the AD Connector servers."
            }
          ]
        },
        "CustomerUserName": {
          "allOf": [
            {
              "$ref": "#/definitions/UserName"
            },
            {
              "description": "The user name of the service account in the on-premises directory."
            }
          ]
        },
        "SecurityGroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityGroupId"
            },
            {
              "description": "The security group identifier for the AD Connector directory."
            }
          ]
        },
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIds"
            },
            {
              "description": "A list of subnet identifiers in the VPC that the AD Connector is in."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcId"
            },
            {
              "description": "The identifier of the VPC that the AD Connector is in."
            }
          ]
        }
      },
      "type": "object"
    },
    "DirectoryDescription": {
      "description": "Contains information about an AWS Directory Service directory.",
      "properties": {
        "AccessUrl": {
          "allOf": [
            {
              "$ref": "#/definitions/AccessUrl"
            },
            {
              "description": "The access URL for the directory, such as <code>http://&lt;alias&gt;.awsapps.com</code>. If no alias has been created for the directory, <code>&lt;alias&gt;</code> is the directory identifier, such as <code>d-XXXXXXXXXX</code>."
            }
          ]
        },
        "Alias": {
          "allOf": [
            {
              "$ref": "#/definitions/AliasName"
            },
            {
              "description": "The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as <code>d-XXXXXXXXXX</code>."
            }
          ]
        },
        "ConnectSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryConnectSettingsDescription"
            },
            {
              "description": "A <a>DirectoryConnectSettingsDescription</a> object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "The description for the directory."
            }
          ]
        },
        "DesiredNumberOfDomainControllers": {
          "allOf": [
            {
              "$ref": "#/definitions/DesiredNumberOfDomainControllers"
            },
            {
              "description": "The desired number of domain controllers in the directory if the directory is Microsoft AD."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The directory identifier."
            }
          ]
        },
        "DnsIpAddrs": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsIpAddrs"
            },
            {
              "description": "The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in the on-premises directory to which the AD Connector is connected."
            }
          ]
        },
        "Edition": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryEdition"
            },
            {
              "description": "The edition associated with this directory."
            }
          ]
        },
        "LaunchTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LaunchTime"
            },
            {
              "description": "Specifies when the directory was created."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryName"
            },
            {
              "description": "The fully qualified name of the directory."
            }
          ]
        },
        "OwnerDirectoryDescription": {
          "allOf": [
            {
              "$ref": "#/definitions/OwnerDirectoryDescription"
            },
            {
              "description": "Describes the AWS Managed Microsoft AD directory in the directory owner account."
            }
          ]
        },
        "RadiusSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusSettings"
            },
            {
              "description": "A <a>RadiusSettings</a> object that contains information about the RADIUS server configured for this directory."
            }
          ]
        },
        "RadiusStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusStatus"
            },
            {
              "description": "The status of the RADIUS MFA server connection."
            }
          ]
        },
        "RegionsInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/RegionsInfo"
            },
            {
              "description": "Lists the Regions where the directory has replicated."
            }
          ]
        },
        "ShareMethod": {
          "allOf": [
            {
              "$ref": "#/definitions/ShareMethod"
            },
            {
              "description": "The method used when sharing a directory to determine whether the directory should be shared within your AWS organization (<code>ORGANIZATIONS</code>) or with any AWS account by sending a shared directory request (<code>HANDSHAKE</code>)."
            }
          ]
        },
        "ShareNotes": {
          "allOf": [
            {
              "$ref": "#/definitions/Notes"
            },
            {
              "description": "A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation."
            }
          ]
        },
        "ShareStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ShareStatus"
            },
            {
              "description": "Current directory status of the shared AWS Managed Microsoft AD directory."
            }
          ]
        },
        "ShortName": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryShortName"
            },
            {
              "description": "The short name of the directory."
            }
          ]
        },
        "Size": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectorySize"
            },
            {
              "description": "The directory size."
            }
          ]
        },
        "SsoEnabled": {
          "allOf": [
            {
              "$ref": "#/definitions/SsoEnabled"
            },
            {
              "description": "Indicates if single sign-on is enabled for the directory. For more information, see <a>EnableSso</a> and <a>DisableSso</a>."
            }
          ]
        },
        "Stage": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryStage"
            },
            {
              "description": "The current stage of the directory."
            }
          ]
        },
        "StageLastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LastUpdatedDateTime"
            },
            {
              "description": "The date and time that the stage was last updated."
            }
          ]
        },
        "StageReason": {
          "allOf": [
            {
              "$ref": "#/definitions/StageReason"
            },
            {
              "description": "Additional information about the directory stage."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryType"
            },
            {
              "description": "The directory size."
            }
          ]
        },
        "VpcSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryVpcSettingsDescription"
            },
            {
              "description": "A <a>DirectoryVpcSettingsDescription</a> object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed AD directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "DirectoryDescriptions": {
      "description": "A list of directory descriptions.",
      "items": {
        "$ref": "#/definitions/DirectoryDescription"
      },
      "type": "array"
    },
    "DirectoryDoesNotExistException": {},
    "DirectoryEdition": {
      "enum": [
        "Enterprise",
        "Standard"
      ],
      "type": "string"
    },
    "DirectoryId": {
      "pattern": "^d-[0-9a-f]{10}$",
      "type": "string"
    },
    "DirectoryIds": {
      "description": "A list of directory identifiers.",
      "items": {
        "$ref": "#/definitions/DirectoryId"
      },
      "type": "array"
    },
    "DirectoryLimitExceededException": {},
    "DirectoryLimits": {
      "description": "Contains directory limit information for a Region.",
      "properties": {
        "CloudOnlyDirectoriesCurrentCount": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The current number of cloud directories in the Region."
            }
          ]
        },
        "CloudOnlyDirectoriesLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of cloud directories allowed in the Region."
            }
          ]
        },
        "CloudOnlyDirectoriesLimitReached": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudOnlyDirectoriesLimitReached"
            },
            {
              "description": "Indicates if the cloud directory limit has been reached."
            }
          ]
        },
        "CloudOnlyMicrosoftADCurrentCount": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The current number of AWS Managed Microsoft AD directories in the region."
            }
          ]
        },
        "CloudOnlyMicrosoftADLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of AWS Managed Microsoft AD directories allowed in the region."
            }
          ]
        },
        "CloudOnlyMicrosoftADLimitReached": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudOnlyDirectoriesLimitReached"
            },
            {
              "description": "Indicates if the AWS Managed Microsoft AD directory limit has been reached."
            }
          ]
        },
        "ConnectedDirectoriesCurrentCount": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The current number of connected directories in the Region."
            }
          ]
        },
        "ConnectedDirectoriesLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of connected directories allowed in the Region."
            }
          ]
        },
        "ConnectedDirectoriesLimitReached": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectedDirectoriesLimitReached"
            },
            {
              "description": "Indicates if the connected directory limit has been reached."
            }
          ]
        }
      },
      "type": "object"
    },
    "DirectoryName": {
      "pattern": "^([a-zA-Z0-9]+[\\\\.-])+([a-zA-Z0-9])+$",
      "type": "string"
    },
    "DirectoryNotSharedException": {},
    "DirectoryShortName": {
      "pattern": "^[^\\\\/:*?\"<>|.]+[^\\\\/:*?\"<>|]*$",
      "type": "string"
    },
    "DirectorySize": {
      "enum": [
        "Small",
        "Large"
      ],
      "type": "string"
    },
    "DirectoryStage": {
      "enum": [
        "Requested",
        "Creating",
        "Created",
        "Active",
        "Inoperable",
        "Impaired",
        "Restoring",
        "RestoreFailed",
        "Deleting",
        "Deleted",
        "Failed"
      ],
      "type": "string"
    },
    "DirectoryType": {
      "enum": [
        "SimpleAD",
        "ADConnector",
        "MicrosoftAD",
        "SharedMicrosoftAD"
      ],
      "type": "string"
    },
    "DirectoryUnavailableException": {},
    "DirectoryVpcSettings": {
      "description": "Contains VPC information for the <a>CreateDirectory</a> or <a>CreateMicrosoftAD</a> operation.",
      "properties": {
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIds"
            },
            {
              "description": "The identifiers of the subnets for the directory servers. The two subnets must be in different Availability Zones. AWS Directory Service creates a directory server and a DNS server in each of these subnets."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcId"
            },
            {
              "description": "The identifier of the VPC in which to create the directory."
            }
          ]
        }
      },
      "required": [
        "VpcId",
        "SubnetIds"
      ],
      "type": "object"
    },
    "DirectoryVpcSettingsDescription": {
      "description": "Contains information about the directory.",
      "properties": {
        "AvailabilityZones": {
          "allOf": [
            {
              "$ref": "#/definitions/AvailabilityZones"
            },
            {
              "description": "The list of Availability Zones that the directory is in."
            }
          ]
        },
        "SecurityGroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityGroupId"
            },
            {
              "description": "The domain controller security group identifier for the directory."
            }
          ]
        },
        "SubnetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetIds"
            },
            {
              "description": "The identifiers of the subnets for the directory servers."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcId"
            },
            {
              "description": "The identifier of the VPC that the directory is in."
            }
          ]
        }
      },
      "type": "object"
    },
    "DisableClientAuthenticationRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory "
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientAuthenticationType"
            },
            {
              "description": "The type of client authentication to disable. Currently, only the parameter, <code>SmartCard</code> is supported."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "Type"
      ],
      "title": "DisableClientAuthenticationRequest",
      "type": "object"
    },
    "DisableClientAuthenticationResult": {
      "properties": {},
      "type": "object"
    },
    "DisableLDAPSRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/LDAPSType"
            },
            {
              "description": "The type of LDAP security to enable. Currently only the value <code>Client</code> is supported."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "Type"
      ],
      "title": "DisableLDAPSRequest",
      "type": "object"
    },
    "DisableLDAPSResult": {
      "properties": {},
      "type": "object"
    },
    "DisableRadiusRequest": {
      "description": "Contains the inputs for the <a>DisableRadius</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory for which to disable MFA."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "DisableRadiusRequest",
      "type": "object"
    },
    "DisableRadiusResult": {
      "description": "Contains the results of the <a>DisableRadius</a> operation.",
      "properties": {},
      "type": "object"
    },
    "DisableSsoRequest": {
      "description": "Contains the inputs for the <a>DisableSso</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory for which to disable single-sign on."
            }
          ]
        },
        "Password": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectPassword"
            },
            {
              "description": "The password of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. For more information, see the <i>UserName</i> parameter."
            }
          ]
        },
        "UserName": {
          "allOf": [
            {
              "$ref": "#/definitions/UserName"
            },
            {
              "description": "<p>The username of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. This account must have privileges to remove a service principal name.</p> <p>If the AD Connector service account does not have privileges to remove a service principal name, you can specify an alternate account with the <i>UserName</i> and <i>Password</i> parameters. These credentials are only used to disable single sign-on and are not stored by the service. The AD Connector service account is not changed.</p>"
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "DisableSsoRequest",
      "type": "object"
    },
    "DisableSsoResult": {
      "description": "Contains the results of the <a>DisableSso</a> operation.",
      "properties": {},
      "type": "object"
    },
    "DnsIpAddrs": {
      "items": {
        "$ref": "#/definitions/IpAddr"
      },
      "type": "array"
    },
    "DomainController": {
      "description": "Contains information about the domain controllers for a specified directory.",
      "properties": {
        "AvailabilityZone": {
          "allOf": [
            {
              "$ref": "#/definitions/AvailabilityZone"
            },
            {
              "description": "The Availability Zone where the domain controller is located."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the directory where the domain controller resides."
            }
          ]
        },
        "DnsIpAddr": {
          "allOf": [
            {
              "$ref": "#/definitions/IpAddr"
            },
            {
              "description": "The IP address of the domain controller."
            }
          ]
        },
        "DomainControllerId": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainControllerId"
            },
            {
              "description": "Identifies a specific domain controller in the directory."
            }
          ]
        },
        "LaunchTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LaunchTime"
            },
            {
              "description": "Specifies when the domain controller was created."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainControllerStatus"
            },
            {
              "description": "The status of the domain controller."
            }
          ]
        },
        "StatusLastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LastUpdatedDateTime"
            },
            {
              "description": "The date and time that the status was last updated."
            }
          ]
        },
        "StatusReason": {
          "allOf": [
            {
              "$ref": "#/definitions/DomainControllerStatusReason"
            },
            {
              "description": "A description of the domain controller state."
            }
          ]
        },
        "SubnetId": {
          "allOf": [
            {
              "$ref": "#/definitions/SubnetId"
            },
            {
              "description": "Identifier of the subnet in the VPC that contains the domain controller."
            }
          ]
        },
        "VpcId": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcId"
            },
            {
              "description": "The identifier of the VPC that contains the domain controller."
            }
          ]
        }
      },
      "type": "object"
    },
    "DomainControllerId": {
      "pattern": "^dc-[0-9a-f]{10}$",
      "type": "string"
    },
    "DomainControllerIds": {
      "items": {
        "$ref": "#/definitions/DomainControllerId"
      },
      "type": "array"
    },
    "DomainControllerLimitExceededException": {},
    "DomainControllerStatus": {
      "enum": [
        "Creating",
        "Active",
        "Impaired",
        "Restoring",
        "Deleting",
        "Deleted",
        "Failed"
      ],
      "type": "string"
    },
    "DomainControllerStatusReason": {
      "type": "string"
    },
    "DomainControllers": {
      "items": {
        "$ref": "#/definitions/DomainController"
      },
      "type": "array"
    },
    "EnableClientAuthenticationRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the specified directory. "
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientAuthenticationType"
            },
            {
              "description": "The type of client authentication to enable. Currently only the value <code>SmartCard</code> is supported. Smart card authentication in AD Connector requires that you enable Kerberos Constrained Delegation for the Service User to the LDAP service in the on-premises AD. "
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "Type"
      ],
      "title": "EnableClientAuthenticationRequest",
      "type": "object"
    },
    "EnableClientAuthenticationResult": {
      "properties": {},
      "type": "object"
    },
    "EnableLDAPSRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/LDAPSType"
            },
            {
              "description": "The type of LDAP security to enable. Currently only the value <code>Client</code> is supported."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "Type"
      ],
      "title": "EnableLDAPSRequest",
      "type": "object"
    },
    "EnableLDAPSResult": {
      "properties": {},
      "type": "object"
    },
    "EnableRadiusRequest": {
      "description": "Contains the inputs for the <a>EnableRadius</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory for which to enable MFA."
            }
          ]
        },
        "RadiusSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusSettings"
            },
            {
              "description": "A <a>RadiusSettings</a> object that contains information about the RADIUS server."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "RadiusSettings"
      ],
      "title": "EnableRadiusRequest",
      "type": "object"
    },
    "EnableRadiusResult": {
      "description": "Contains the results of the <a>EnableRadius</a> operation.",
      "properties": {},
      "type": "object"
    },
    "EnableSsoRequest": {
      "description": "Contains the inputs for the <a>EnableSso</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory for which to enable single-sign on."
            }
          ]
        },
        "Password": {
          "allOf": [
            {
              "$ref": "#/definitions/ConnectPassword"
            },
            {
              "description": "The password of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. For more information, see the <i>UserName</i> parameter."
            }
          ]
        },
        "UserName": {
          "allOf": [
            {
              "$ref": "#/definitions/UserName"
            },
            {
              "description": "<p>The username of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. This account must have privileges to add a service principal name.</p> <p>If the AD Connector service account does not have privileges to add a service principal name, you can specify an alternate account with the <i>UserName</i> and <i>Password</i> parameters. These credentials are only used to enable single sign-on and are not stored by the service. The AD Connector service account is not changed.</p>"
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "EnableSsoRequest",
      "type": "object"
    },
    "EnableSsoResult": {
      "description": "Contains the results of the <a>EnableSso</a> operation.",
      "properties": {},
      "type": "object"
    },
    "EndDateTime": {
      "format": "date-time",
      "type": "string"
    },
    "EntityAlreadyExistsException": {},
    "EntityDoesNotExistException": {},
    "EventTopic": {
      "description": "Information about SNS topic and AWS Directory Service directory associations.",
      "properties": {
        "CreatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedDateTime"
            },
            {
              "description": "The date and time of when you associated your directory with the SNS topic."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The Directory ID of an AWS Directory Service directory that will publish status messages to an SNS topic."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/TopicStatus"
            },
            {
              "description": "The topic registration status."
            }
          ]
        },
        "TopicArn": {
          "allOf": [
            {
              "$ref": "#/definitions/TopicArn"
            },
            {
              "description": "The SNS topic ARN (Amazon Resource Name)."
            }
          ]
        },
        "TopicName": {
          "allOf": [
            {
              "$ref": "#/definitions/TopicName"
            },
            {
              "description": "The name of an AWS SNS topic the receives status messages from the directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventTopics": {
      "items": {
        "$ref": "#/definitions/EventTopic"
      },
      "type": "array"
    },
    "GetDirectoryLimitsRequest": {
      "description": "Contains the inputs for the <a>GetDirectoryLimits</a> operation.",
      "properties": {},
      "title": "GetDirectoryLimitsRequest",
      "type": "object"
    },
    "GetDirectoryLimitsResult": {
      "description": "Contains the results of the <a>GetDirectoryLimits</a> operation.",
      "properties": {
        "DirectoryLimits": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryLimits"
            },
            {
              "description": "A <a>DirectoryLimits</a> object that contains the directory limits for the current rRegion."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetSnapshotLimitsRequest": {
      "description": "Contains the inputs for the <a>GetSnapshotLimits</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Contains the identifier of the directory to obtain the limits for."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "GetSnapshotLimitsRequest",
      "type": "object"
    },
    "GetSnapshotLimitsResult": {
      "description": "Contains the results of the <a>GetSnapshotLimits</a> operation.",
      "properties": {
        "SnapshotLimits": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotLimits"
            },
            {
              "description": "A <a>SnapshotLimits</a> object that contains the manual snapshot limits for the specified directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "InsufficientPermissionsException": {},
    "InvalidCertificateException": {},
    "InvalidClientAuthStatusException": {},
    "InvalidLDAPSStatusException": {},
    "InvalidNextTokenException": {},
    "InvalidParameterException": {},
    "InvalidPasswordException": {},
    "InvalidTargetException": {},
    "IpAddr": {
      "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
      "type": "string"
    },
    "IpAddrs": {
      "items": {
        "$ref": "#/definitions/IpAddr"
      },
      "type": "array"
    },
    "IpRoute": {
      "description": "IP address block. This is often the address block of the DNS server used for your on-premises domain. ",
      "properties": {
        "CidrIp": {
          "allOf": [
            {
              "$ref": "#/definitions/CidrIp"
            },
            {
              "description": "IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your on-premises domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "Description of the address block."
            }
          ]
        }
      },
      "type": "object"
    },
    "IpRouteInfo": {
      "description": "Information about one or more IP address blocks.",
      "properties": {
        "AddedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/AddedDateTime"
            },
            {
              "description": "The date and time the address block was added to the directory."
            }
          ]
        },
        "CidrIp": {
          "allOf": [
            {
              "$ref": "#/definitions/CidrIp"
            },
            {
              "description": "IP address block in the <a>IpRoute</a>."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "Description of the <a>IpRouteInfo</a>."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier (ID) of the directory associated with the IP addresses."
            }
          ]
        },
        "IpRouteStatusMsg": {
          "allOf": [
            {
              "$ref": "#/definitions/IpRouteStatusMsg"
            },
            {
              "description": "The status of the IP address block."
            }
          ]
        },
        "IpRouteStatusReason": {
          "allOf": [
            {
              "$ref": "#/definitions/IpRouteStatusReason"
            },
            {
              "description": "The reason for the IpRouteStatusMsg."
            }
          ]
        }
      },
      "type": "object"
    },
    "IpRouteLimitExceededException": {},
    "IpRouteStatusMsg": {
      "enum": [
        "Adding",
        "Added",
        "Removing",
        "Removed",
        "AddFailed",
        "RemoveFailed"
      ],
      "type": "string"
    },
    "IpRouteStatusReason": {
      "type": "string"
    },
    "IpRoutes": {
      "items": {
        "$ref": "#/definitions/IpRoute"
      },
      "type": "array"
    },
    "IpRoutesInfo": {
      "items": {
        "$ref": "#/definitions/IpRouteInfo"
      },
      "type": "array"
    },
    "LDAPSSettingInfo": {
      "description": "Contains general information about the LDAPS settings.",
      "properties": {
        "LDAPSStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/LDAPSStatus"
            },
            {
              "description": "The state of the LDAPS settings."
            }
          ]
        },
        "LDAPSStatusReason": {
          "allOf": [
            {
              "$ref": "#/definitions/LDAPSStatusReason"
            },
            {
              "description": "Describes a state change for LDAPS."
            }
          ]
        },
        "LastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LastUpdatedDateTime"
            },
            {
              "description": "The date and time when the LDAPS settings were last updated."
            }
          ]
        }
      },
      "type": "object"
    },
    "LDAPSSettingsInfo": {
      "items": {
        "$ref": "#/definitions/LDAPSSettingInfo"
      },
      "type": "array"
    },
    "LDAPSStatus": {
      "enum": [
        "Enabling",
        "Enabled",
        "EnableFailed",
        "Disabled"
      ],
      "type": "string"
    },
    "LDAPSStatusReason": {
      "type": "string"
    },
    "LDAPSType": {
      "enum": [
        "Client"
      ],
      "type": "string"
    },
    "LastUpdatedDateTime": {
      "format": "date-time",
      "type": "string"
    },
    "LaunchTime": {
      "format": "date-time",
      "type": "string"
    },
    "LdifContent": {
      "maxLength": 500000,
      "minLength": 1,
      "type": "string"
    },
    "Limit": {
      "minimum": 0,
      "type": "integer"
    },
    "ListCertificatesRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        },
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/PageLimit"
            },
            {
              "description": "The number of items that should show up on one page"
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "A token for requesting another page of certificates if the <code>NextToken</code> response element indicates that more certificates are available. Use the value of the returned <code>NextToken</code> element in your request until the token comes back as <code>null</code>. Pass <code>null</code> if this is the first call."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "ListCertificatesRequest",
      "type": "object"
    },
    "ListCertificatesResult": {
      "properties": {
        "CertificatesInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificatesInfo"
            },
            {
              "description": "A list of certificates with basic details including certificate ID, certificate common name, certificate state."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "Indicates whether another page of certificates is available when the number of available certificates exceeds the page limit."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListIpRoutesRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier (ID) of the directory for which you want to retrieve the IP addresses."
            }
          ]
        },
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "Maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The <i>ListIpRoutes.NextToken</i> value from a previous call to <a>ListIpRoutes</a>. Pass null if this is the first call."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "ListIpRoutesRequest",
      "type": "object"
    },
    "ListIpRoutesResult": {
      "properties": {
        "IpRoutesInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/IpRoutesInfo"
            },
            {
              "description": "A list of <a>IpRoute</a>s."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If not null, more results are available. Pass this value for the <i>NextToken</i> parameter in a subsequent call to <a>ListIpRoutes</a> to retrieve the next set of items."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListLogSubscriptionsRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "If a <i>DirectoryID</i> is provided, lists only the log subscription associated with that directory. If no <i>DirectoryId</i> is provided, lists all log subscriptions associated with your AWS account. If there are no log subscriptions for the AWS account or the directory, an empty list will be returned."
            }
          ]
        },
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of items returned."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return."
            }
          ]
        }
      },
      "title": "ListLogSubscriptionsRequest",
      "type": "object"
    },
    "ListLogSubscriptionsResult": {
      "properties": {
        "LogSubscriptions": {
          "allOf": [
            {
              "$ref": "#/definitions/LogSubscriptions"
            },
            {
              "description": "A list of active <a>LogSubscription</a> objects for calling the AWS account."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of items to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListSchemaExtensionsRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory from which to retrieve the schema extension information."
            }
          ]
        },
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of items to return."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The <code>ListSchemaExtensions.NextToken</code> value from a previous call to <code>ListSchemaExtensions</code>. Pass null if this is the first call."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "ListSchemaExtensionsRequest",
      "type": "object"
    },
    "ListSchemaExtensionsResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to <code>ListSchemaExtensions</code> to retrieve the next set of items."
            }
          ]
        },
        "SchemaExtensionsInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaExtensionsInfo"
            },
            {
              "description": "Information about the schema extensions applied to the directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "Limit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "Identifier (ID) of the directory for which you want to retrieve tags."
            }
          ]
        }
      },
      "required": [
        "ResourceId"
      ],
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResult": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "Reserved for future use."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/Tags"
            },
            {
              "description": "List of tags returned by the ListTagsForResource operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "LogGroupName": {
      "maxLength": 512,
      "minLength": 1,
      "pattern": "[-._/#A-Za-z0-9]+",
      "type": "string"
    },
    "LogSubscription": {
      "description": "Represents a log subscription, which tracks real-time data from a chosen log group to a specified destination.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier (ID) of the directory that you want to associate with the log subscription."
            }
          ]
        },
        "LogGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/LogGroupName"
            },
            {
              "description": "The name of the log group."
            }
          ]
        },
        "SubscriptionCreatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/SubscriptionCreatedDateTime"
            },
            {
              "description": "The date and time that the log subscription was created."
            }
          ]
        }
      },
      "type": "object"
    },
    "LogSubscriptions": {
      "items": {
        "$ref": "#/definitions/LogSubscription"
      },
      "type": "array"
    },
    "ManualSnapshotsLimitReached": {
      "type": "boolean"
    },
    "NextToken": {
      "type": "string"
    },
    "NoAvailableCertificateException": {},
    "Notes": {
      "format": "password",
      "maxLength": 1024,
      "type": "string"
    },
    "OCSPUrl": {
      "maxLength": 1024,
      "minLength": 1,
      "pattern": "^(https?|ftp|file|ldaps?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;()]*[-a-zA-Z0-9+&@#/%=~_|()]",
      "type": "string"
    },
    "OrganizationalUnitDN": {
      "maxLength": 2000,
      "minLength": 1,
      "type": "string"
    },
    "OrganizationsException": {},
    "OwnerDirectoryDescription": {
      "description": "Describes the directory owner account details that have been shared to the directory consumer account.",
      "properties": {
        "AccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerId"
            },
            {
              "description": "Identifier of the directory owner account."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the AWS Managed Microsoft AD directory in the directory owner account."
            }
          ]
        },
        "DnsIpAddrs": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsIpAddrs"
            },
            {
              "description": "IP address of the directory’s domain controllers."
            }
          ]
        },
        "RadiusSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusSettings"
            },
            {
              "description": "A <a>RadiusSettings</a> object that contains information about the RADIUS server."
            }
          ]
        },
        "RadiusStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusStatus"
            },
            {
              "description": "Information about the status of the RADIUS server."
            }
          ]
        },
        "VpcSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryVpcSettingsDescription"
            },
            {
              "description": "Information about the VPC settings for the directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "PageLimit": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer"
    },
    "Password": {
      "format": "password",
      "pattern": "(?=^.{8,64}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9\\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\\s]))^.*",
      "type": "string"
    },
    "PortNumber": {
      "maximum": 65535,
      "minimum": 1025,
      "type": "integer"
    },
    "RadiusAuthenticationProtocol": {
      "enum": [
        "PAP",
        "CHAP",
        "MS-CHAPv1",
        "MS-CHAPv2"
      ],
      "type": "string"
    },
    "RadiusDisplayLabel": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "RadiusRetries": {
      "maximum": 10,
      "minimum": 0,
      "type": "integer"
    },
    "RadiusSettings": {
      "description": "Contains information about a Remote Authentication Dial In User Service (RADIUS) server.",
      "properties": {
        "AuthenticationProtocol": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusAuthenticationProtocol"
            },
            {
              "description": "The protocol specified for your RADIUS endpoints."
            }
          ]
        },
        "DisplayLabel": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusDisplayLabel"
            },
            {
              "description": "Not currently used."
            }
          ]
        },
        "RadiusPort": {
          "allOf": [
            {
              "$ref": "#/definitions/PortNumber"
            },
            {
              "description": "The port that your RADIUS server is using for communications. Your on-premises network must allow inbound traffic over this port from the AWS Directory Service servers."
            }
          ]
        },
        "RadiusRetries": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusRetries"
            },
            {
              "description": "The maximum number of times that communication with the RADIUS server is attempted."
            }
          ]
        },
        "RadiusServers": {
          "allOf": [
            {
              "$ref": "#/definitions/Servers"
            },
            {
              "description": "An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer."
            }
          ]
        },
        "RadiusTimeout": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusTimeout"
            },
            {
              "description": "The amount of time, in seconds, to wait for the RADIUS server to respond."
            }
          ]
        },
        "SharedSecret": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusSharedSecret"
            },
            {
              "description": "Required for enabling RADIUS on the directory."
            }
          ]
        },
        "UseSameUsername": {
          "allOf": [
            {
              "$ref": "#/definitions/UseSameUsername"
            },
            {
              "description": "Not currently used."
            }
          ]
        }
      },
      "type": "object"
    },
    "RadiusSharedSecret": {
      "format": "password",
      "maxLength": 512,
      "minLength": 8,
      "type": "string"
    },
    "RadiusStatus": {
      "enum": [
        "Creating",
        "Completed",
        "Failed"
      ],
      "type": "string"
    },
    "RadiusTimeout": {
      "maximum": 20,
      "minimum": 1,
      "type": "integer"
    },
    "RegionDescription": {
      "description": "The replicated Region information for a directory.",
      "properties": {
        "DesiredNumberOfDomainControllers": {
          "allOf": [
            {
              "$ref": "#/definitions/DesiredNumberOfDomainControllers"
            },
            {
              "description": "The desired number of domain controllers in the specified Region for the specified directory."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        },
        "LastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LastUpdatedDateTime"
            },
            {
              "description": "The date and time that the Region description was last updated."
            }
          ]
        },
        "LaunchTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LaunchTime"
            },
            {
              "description": "Specifies when the Region replication began."
            }
          ]
        },
        "RegionName": {
          "allOf": [
            {
              "$ref": "#/definitions/RegionName"
            },
            {
              "description": "The name of the Region. For example, <code>us-east-1</code>."
            }
          ]
        },
        "RegionType": {
          "allOf": [
            {
              "$ref": "#/definitions/RegionType"
            },
            {
              "description": "Specifies whether the Region is the primary Region or an additional Region."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryStage"
            },
            {
              "description": "The status of the replication process for the specified Region."
            }
          ]
        },
        "StatusLastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/StateLastUpdatedDateTime"
            },
            {
              "description": "The date and time that the Region status was last updated."
            }
          ]
        },
        "VpcSettings": {
          "$ref": "#/definitions/DirectoryVpcSettings"
        }
      },
      "type": "object"
    },
    "RegionLimitExceededException": {},
    "RegionName": {
      "maxLength": 32,
      "minLength": 8,
      "type": "string"
    },
    "RegionType": {
      "enum": [
        "Primary",
        "Additional"
      ],
      "type": "string"
    },
    "RegionsDescription": {
      "items": {
        "$ref": "#/definitions/RegionDescription"
      },
      "type": "array"
    },
    "RegionsInfo": {
      "description": "Provides information about the Regions that are configured for multi-Region replication.",
      "properties": {
        "AdditionalRegions": {
          "allOf": [
            {
              "$ref": "#/definitions/AdditionalRegions"
            },
            {
              "description": "Lists the Regions where the directory has been replicated, excluding the primary Region."
            }
          ]
        },
        "PrimaryRegion": {
          "allOf": [
            {
              "$ref": "#/definitions/RegionName"
            },
            {
              "description": "The Region where the AWS Managed Microsoft AD directory was originally created."
            }
          ]
        }
      },
      "type": "object"
    },
    "RegisterCertificateRequest": {
      "properties": {
        "CertificateData": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateData"
            },
            {
              "description": "The certificate PEM string that needs to be registered."
            }
          ]
        },
        "ClientCertAuthSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientCertAuthSettings"
            },
            {
              "description": "A <code>ClientCertAuthSettings</code> object that contains client certificate authentication settings."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateType"
            },
            {
              "description": "The function that the registered certificate performs. Valid values include <code>ClientLDAPS</code> or <code>ClientCertAuth</code>. The default value is <code>ClientLDAPS</code>."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "CertificateData"
      ],
      "title": "RegisterCertificateRequest",
      "type": "object"
    },
    "RegisterCertificateResult": {
      "properties": {
        "CertificateId": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificateId"
            },
            {
              "description": "The identifier of the certificate."
            }
          ]
        }
      },
      "type": "object"
    },
    "RegisterEventTopicRequest": {
      "description": "Registers a new event topic.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The Directory ID that will publish status messages to the SNS topic."
            }
          ]
        },
        "TopicName": {
          "allOf": [
            {
              "$ref": "#/definitions/TopicName"
            },
            {
              "description": "The SNS topic name to which the directory will publish status messages. This SNS topic must be in the same region as the specified Directory ID."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "TopicName"
      ],
      "title": "RegisterEventTopicRequest",
      "type": "object"
    },
    "RegisterEventTopicResult": {
      "description": "The result of a RegisterEventTopic request.",
      "properties": {},
      "type": "object"
    },
    "RejectSharedDirectoryRequest": {
      "properties": {
        "SharedDirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the shared directory in the directory consumer account. This identifier is different for each directory owner account."
            }
          ]
        }
      },
      "required": [
        "SharedDirectoryId"
      ],
      "title": "RejectSharedDirectoryRequest",
      "type": "object"
    },
    "RejectSharedDirectoryResult": {
      "properties": {
        "SharedDirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the shared directory in the directory consumer account."
            }
          ]
        }
      },
      "type": "object"
    },
    "RemoteDomainName": {
      "pattern": "^([a-zA-Z0-9]+[\\\\.-])+([a-zA-Z0-9])+[.]?$",
      "type": "string"
    },
    "RemoteDomainNames": {
      "items": {
        "$ref": "#/definitions/RemoteDomainName"
      },
      "type": "array"
    },
    "RemoveIpRoutesRequest": {
      "properties": {
        "CidrIps": {
          "allOf": [
            {
              "$ref": "#/definitions/CidrIps"
            },
            {
              "description": "IP address blocks that you want to remove."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier (ID) of the directory from which you want to remove the IP addresses."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "CidrIps"
      ],
      "title": "RemoveIpRoutesRequest",
      "type": "object"
    },
    "RemoveIpRoutesResult": {
      "properties": {},
      "type": "object"
    },
    "RemoveRegionRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory for which you want to remove Region replication."
            }
          ]
        }
      },
      "required": [
        "DirectoryId"
      ],
      "title": "RemoveRegionRequest",
      "type": "object"
    },
    "RemoveRegionResult": {
      "properties": {},
      "type": "object"
    },
    "RemoveTagsFromResourceRequest": {
      "properties": {
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            },
            {
              "description": "Identifier (ID) of the directory from which to remove the tag."
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeys"
            },
            {
              "description": "The tag key (name) of the tag to be removed."
            }
          ]
        }
      },
      "required": [
        "ResourceId",
        "TagKeys"
      ],
      "title": "RemoveTagsFromResourceRequest",
      "type": "object"
    },
    "RemoveTagsFromResourceResult": {
      "properties": {},
      "type": "object"
    },
    "ReplicationScope": {
      "enum": [
        "Domain"
      ],
      "type": "string"
    },
    "RequestId": {
      "description": "The AWS request identifier.",
      "pattern": "^([A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12})$",
      "type": "string"
    },
    "ResetUserPasswordRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the AWS Managed Microsoft AD or Simple AD directory in which the user resides."
            }
          ]
        },
        "NewPassword": {
          "allOf": [
            {
              "$ref": "#/definitions/UserPassword"
            },
            {
              "description": "The new password that will be reset."
            }
          ]
        },
        "UserName": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerUserName"
            },
            {
              "description": "The user name of the user whose password will be reset."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "UserName",
        "NewPassword"
      ],
      "title": "ResetUserPasswordRequest",
      "type": "object"
    },
    "ResetUserPasswordResult": {
      "properties": {},
      "type": "object"
    },
    "ResourceId": {
      "pattern": "^[d]-[0-9a-f]{10}$",
      "type": "string"
    },
    "RestoreFromSnapshotRequest": {
      "description": "An object representing the inputs for the <a>RestoreFromSnapshot</a> operation.",
      "properties": {
        "SnapshotId": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotId"
            },
            {
              "description": "The identifier of the snapshot to restore from."
            }
          ]
        }
      },
      "required": [
        "SnapshotId"
      ],
      "title": "RestoreFromSnapshotRequest",
      "type": "object"
    },
    "RestoreFromSnapshotResult": {
      "description": "Contains the results of the <a>RestoreFromSnapshot</a> operation.",
      "properties": {},
      "type": "object"
    },
    "SID": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "[&\\w+-.@]+",
      "type": "string"
    },
    "SchemaExtensionId": {
      "pattern": "^e-[0-9a-f]{10}$",
      "type": "string"
    },
    "SchemaExtensionInfo": {
      "description": "Information about a schema extension.",
      "properties": {
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description of the schema extension."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory to which the schema extension is applied."
            }
          ]
        },
        "EndDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/EndDateTime"
            },
            {
              "description": "The date and time that the schema extension was completed."
            }
          ]
        },
        "SchemaExtensionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaExtensionId"
            },
            {
              "description": "The identifier of the schema extension."
            }
          ]
        },
        "SchemaExtensionStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaExtensionStatus"
            },
            {
              "description": "The current status of the schema extension."
            }
          ]
        },
        "SchemaExtensionStatusReason": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaExtensionStatusReason"
            },
            {
              "description": "The reason for the <code>SchemaExtensionStatus</code>."
            }
          ]
        },
        "StartDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/StartDateTime"
            },
            {
              "description": "The date and time that the schema extension started being applied to the directory."
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaExtensionStatus": {
      "enum": [
        "Initializing",
        "CreatingSnapshot",
        "UpdatingSchema",
        "Replicating",
        "CancelInProgress",
        "RollbackInProgress",
        "Cancelled",
        "Failed",
        "Completed"
      ],
      "type": "string"
    },
    "SchemaExtensionStatusReason": {
      "type": "string"
    },
    "SchemaExtensionsInfo": {
      "items": {
        "$ref": "#/definitions/SchemaExtensionInfo"
      },
      "type": "array"
    },
    "SecurityGroupId": {
      "pattern": "^(sg-[0-9a-f]{8}|sg-[0-9a-f]{17})$",
      "type": "string"
    },
    "SelectiveAuth": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "Server": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string"
    },
    "Servers": {
      "items": {
        "$ref": "#/definitions/Server"
      },
      "type": "array"
    },
    "ServiceException": {},
    "ShareDirectoryRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the AWS Managed Microsoft AD directory that you want to share with other AWS accounts."
            }
          ]
        },
        "ShareMethod": {
          "allOf": [
            {
              "$ref": "#/definitions/ShareMethod"
            },
            {
              "description": "The method used when sharing a directory to determine whether the directory should be shared within your AWS organization (<code>ORGANIZATIONS</code>) or with any AWS account by sending a directory sharing request (<code>HANDSHAKE</code>)."
            }
          ]
        },
        "ShareNotes": {
          "allOf": [
            {
              "$ref": "#/definitions/Notes"
            },
            {
              "description": "A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation."
            }
          ]
        },
        "ShareTarget": {
          "allOf": [
            {
              "$ref": "#/definitions/ShareTarget"
            },
            {
              "description": "Identifier for the directory consumer account with whom the directory is to be shared."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "ShareTarget",
        "ShareMethod"
      ],
      "title": "ShareDirectoryRequest",
      "type": "object"
    },
    "ShareDirectoryResult": {
      "properties": {
        "SharedDirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the directory that is stored in the directory consumer account that is shared from the specified directory (<code>DirectoryId</code>)."
            }
          ]
        }
      },
      "type": "object"
    },
    "ShareLimitExceededException": {},
    "ShareMethod": {
      "enum": [
        "ORGANIZATIONS",
        "HANDSHAKE"
      ],
      "type": "string"
    },
    "ShareStatus": {
      "enum": [
        "Shared",
        "PendingAcceptance",
        "Rejected",
        "Rejecting",
        "RejectFailed",
        "Sharing",
        "ShareFailed",
        "Deleted",
        "Deleting"
      ],
      "type": "string"
    },
    "ShareTarget": {
      "description": "Identifier that contains details about the directory consumer account.",
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetId"
            },
            {
              "description": "Identifier of the directory consumer account."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetType"
            },
            {
              "description": "Type of identifier to be used in the <code>Id</code> field."
            }
          ]
        }
      },
      "required": [
        "Id",
        "Type"
      ],
      "type": "object"
    },
    "SharedDirectories": {
      "items": {
        "$ref": "#/definitions/SharedDirectory"
      },
      "type": "array"
    },
    "SharedDirectory": {
      "description": "Details about the shared directory in the directory owner account for which the share request in the directory consumer account has been accepted.",
      "properties": {
        "CreatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedDateTime"
            },
            {
              "description": "The date and time that the shared directory was created."
            }
          ]
        },
        "LastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LastUpdatedDateTime"
            },
            {
              "description": "The date and time that the shared directory was last updated."
            }
          ]
        },
        "OwnerAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerId"
            },
            {
              "description": "Identifier of the directory owner account, which contains the directory that has been shared to the consumer account."
            }
          ]
        },
        "OwnerDirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the directory in the directory owner account. "
            }
          ]
        },
        "ShareMethod": {
          "allOf": [
            {
              "$ref": "#/definitions/ShareMethod"
            },
            {
              "description": "The method used when sharing a directory to determine whether the directory should be shared within your AWS organization (<code>ORGANIZATIONS</code>) or with any AWS account by sending a shared directory request (<code>HANDSHAKE</code>)."
            }
          ]
        },
        "ShareNotes": {
          "allOf": [
            {
              "$ref": "#/definitions/Notes"
            },
            {
              "description": "A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation."
            }
          ]
        },
        "ShareStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/ShareStatus"
            },
            {
              "description": "Current directory status of the shared AWS Managed Microsoft AD directory."
            }
          ]
        },
        "SharedAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerId"
            },
            {
              "description": "Identifier of the directory consumer account that has access to the shared directory (<code>OwnerDirectoryId</code>) in the directory owner account."
            }
          ]
        },
        "SharedDirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the shared directory in the directory consumer account. This identifier is different for each directory owner account."
            }
          ]
        }
      },
      "type": "object"
    },
    "Snapshot": {
      "description": "Describes a directory snapshot.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The directory identifier."
            }
          ]
        },
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotName"
            },
            {
              "description": "The descriptive name of the snapshot."
            }
          ]
        },
        "SnapshotId": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotId"
            },
            {
              "description": "The snapshot identifier."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/StartTime"
            },
            {
              "description": "The date and time that the snapshot was taken."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotStatus"
            },
            {
              "description": "The snapshot status."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/SnapshotType"
            },
            {
              "description": "The snapshot type."
            }
          ]
        }
      },
      "type": "object"
    },
    "SnapshotId": {
      "pattern": "^s-[0-9a-f]{10}$",
      "type": "string"
    },
    "SnapshotIds": {
      "description": "A list of directory snapshot identifiers.",
      "items": {
        "$ref": "#/definitions/SnapshotId"
      },
      "type": "array"
    },
    "SnapshotLimitExceededException": {},
    "SnapshotLimits": {
      "description": "Contains manual snapshot limit information for a directory.",
      "properties": {
        "ManualSnapshotsCurrentCount": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The current number of manual snapshots of the directory."
            }
          ]
        },
        "ManualSnapshotsLimit": {
          "allOf": [
            {
              "$ref": "#/definitions/Limit"
            },
            {
              "description": "The maximum number of manual snapshots allowed."
            }
          ]
        },
        "ManualSnapshotsLimitReached": {
          "allOf": [
            {
              "$ref": "#/definitions/ManualSnapshotsLimitReached"
            },
            {
              "description": "Indicates if the manual snapshot limit has been reached."
            }
          ]
        }
      },
      "type": "object"
    },
    "SnapshotName": {
      "maxLength": 128,
      "minLength": 0,
      "pattern": "^([a-zA-Z0-9_])[\\\\a-zA-Z0-9_@#%*+=:?./!\\s-]*$",
      "type": "string"
    },
    "SnapshotStatus": {
      "enum": [
        "Creating",
        "Completed",
        "Failed"
      ],
      "type": "string"
    },
    "SnapshotType": {
      "enum": [
        "Auto",
        "Manual"
      ],
      "type": "string"
    },
    "Snapshots": {
      "description": "A list of descriptions of directory snapshots.",
      "items": {
        "$ref": "#/definitions/Snapshot"
      },
      "type": "array"
    },
    "SsoEnabled": {
      "type": "boolean"
    },
    "StageReason": {
      "type": "string"
    },
    "StartDateTime": {
      "format": "date-time",
      "type": "string"
    },
    "StartSchemaExtensionRequest": {
      "properties": {
        "CreateSnapshotBeforeSchemaExtension": {
          "allOf": [
            {
              "$ref": "#/definitions/CreateSnapshotBeforeSchemaExtension"
            },
            {
              "description": "If true, creates a snapshot of the directory before applying the schema extension."
            }
          ]
        },
        "Description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A description of the schema extension."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory for which the schema extension will be applied to."
            }
          ]
        },
        "LdifContent": {
          "allOf": [
            {
              "$ref": "#/definitions/LdifContent"
            },
            {
              "description": "The LDIF file represented as a string. To construct the LdifContent string, precede each line as it would be formatted in an ldif file with \\n. See the example request below for more details. The file size can be no larger than 1MB."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "CreateSnapshotBeforeSchemaExtension",
        "LdifContent",
        "Description"
      ],
      "title": "StartSchemaExtensionRequest",
      "type": "object"
    },
    "StartSchemaExtensionResult": {
      "properties": {
        "SchemaExtensionId": {
          "allOf": [
            {
              "$ref": "#/definitions/SchemaExtensionId"
            },
            {
              "description": "The identifier of the schema extension that will be applied."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartTime": {
      "format": "date-time",
      "type": "string"
    },
    "StateLastUpdatedDateTime": {
      "format": "date-time",
      "type": "string"
    },
    "SubnetId": {
      "pattern": "^(subnet-[0-9a-f]{8}|subnet-[0-9a-f]{17})$",
      "type": "string"
    },
    "SubnetIds": {
      "items": {
        "$ref": "#/definitions/SubnetId"
      },
      "type": "array"
    },
    "SubscriptionCreatedDateTime": {
      "format": "date-time",
      "type": "string"
    },
    "Tag": {
      "description": "Metadata assigned to a directory consisting of a key-value pair.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKey"
            },
            {
              "description": "Required name of the tag. The string value can be Unicode characters and cannot be prefixed with \"aws:\". The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: \"^([\\\\p{L}\\\\p{Z}\\\\p{N}_.:/=+\\\\-]*)$\")."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/TagValue"
            },
            {
              "description": "The optional value of the tag. The string value can be Unicode characters. The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: \"^([\\\\p{L}\\\\p{Z}\\\\p{N}_.:/=+\\\\-]*)$\")."
            }
          ]
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "TagKeys": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "TagLimitExceededException": {},
    "TagValue": {
      "maxLength": 256,
      "minLength": 0,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
      "type": "string"
    },
    "Tags": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "TargetId": {
      "maxLength": 64,
      "minLength": 1,
      "type": "string"
    },
    "TargetType": {
      "enum": [
        "ACCOUNT"
      ],
      "type": "string"
    },
    "TopicArn": {
      "type": "string"
    },
    "TopicName": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_-]+",
      "type": "string"
    },
    "TopicNames": {
      "items": {
        "$ref": "#/definitions/TopicName"
      },
      "type": "array"
    },
    "TopicStatus": {
      "enum": [
        "Registered",
        "Topic not found",
        "Failed",
        "Deleted"
      ],
      "type": "string"
    },
    "Trust": {
      "description": "Describes a trust relationship between an AWS Managed Microsoft AD directory and an external domain.",
      "properties": {
        "CreatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/CreatedDateTime"
            },
            {
              "description": "The date and time that the trust relationship was created."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The Directory ID of the AWS directory involved in the trust relationship."
            }
          ]
        },
        "LastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/LastUpdatedDateTime"
            },
            {
              "description": "The date and time that the trust relationship was last updated."
            }
          ]
        },
        "RemoteDomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/RemoteDomainName"
            },
            {
              "description": "The Fully Qualified Domain Name (FQDN) of the external domain involved in the trust relationship."
            }
          ]
        },
        "SelectiveAuth": {
          "allOf": [
            {
              "$ref": "#/definitions/SelectiveAuth"
            },
            {
              "description": "Current state of selective authentication for the trust."
            }
          ]
        },
        "StateLastUpdatedDateTime": {
          "allOf": [
            {
              "$ref": "#/definitions/StateLastUpdatedDateTime"
            },
            {
              "description": "The date and time that the TrustState was last updated."
            }
          ]
        },
        "TrustDirection": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustDirection"
            },
            {
              "description": "The trust relationship direction."
            }
          ]
        },
        "TrustId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustId"
            },
            {
              "description": "The unique ID of the trust relationship."
            }
          ]
        },
        "TrustState": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustState"
            },
            {
              "description": "The trust relationship state."
            }
          ]
        },
        "TrustStateReason": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustStateReason"
            },
            {
              "description": "The reason for the TrustState."
            }
          ]
        },
        "TrustType": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustType"
            },
            {
              "description": "The trust relationship type. <code>Forest</code> is the default."
            }
          ]
        }
      },
      "type": "object"
    },
    "TrustDirection": {
      "enum": [
        "One-Way: Outgoing",
        "One-Way: Incoming",
        "Two-Way"
      ],
      "type": "string"
    },
    "TrustId": {
      "pattern": "^t-[0-9a-f]{10}$",
      "type": "string"
    },
    "TrustIds": {
      "items": {
        "$ref": "#/definitions/TrustId"
      },
      "type": "array"
    },
    "TrustPassword": {
      "format": "password",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "(.|\\s)*\\S(.|\\s)*",
      "type": "string"
    },
    "TrustState": {
      "enum": [
        "Creating",
        "Created",
        "Verifying",
        "VerifyFailed",
        "Verified",
        "Updating",
        "UpdateFailed",
        "Updated",
        "Deleting",
        "Deleted",
        "Failed"
      ],
      "type": "string"
    },
    "TrustStateReason": {
      "type": "string"
    },
    "TrustType": {
      "enum": [
        "Forest",
        "External"
      ],
      "type": "string"
    },
    "Trusts": {
      "items": {
        "$ref": "#/definitions/Trust"
      },
      "type": "array"
    },
    "UnshareDirectoryRequest": {
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the AWS Managed Microsoft AD directory that you want to stop sharing."
            }
          ]
        },
        "UnshareTarget": {
          "allOf": [
            {
              "$ref": "#/definitions/UnshareTarget"
            },
            {
              "description": "Identifier for the directory consumer account with whom the directory has to be unshared."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "UnshareTarget"
      ],
      "title": "UnshareDirectoryRequest",
      "type": "object"
    },
    "UnshareDirectoryResult": {
      "properties": {
        "SharedDirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the directory stored in the directory consumer account that is to be unshared from the specified directory (<code>DirectoryId</code>)."
            }
          ]
        }
      },
      "type": "object"
    },
    "UnshareTarget": {
      "description": "Identifier that contains details about the directory consumer account with whom the directory is being unshared.",
      "properties": {
        "Id": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetId"
            },
            {
              "description": "Identifier of the directory consumer account."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetType"
            },
            {
              "description": "Type of identifier to be used in the <i>Id</i> field."
            }
          ]
        }
      },
      "required": [
        "Id",
        "Type"
      ],
      "type": "object"
    },
    "UnsupportedOperationException": {},
    "UpdateConditionalForwarderRequest": {
      "description": "Updates a conditional forwarder.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The directory ID of the AWS directory for which to update the conditional forwarder."
            }
          ]
        },
        "DnsIpAddrs": {
          "allOf": [
            {
              "$ref": "#/definitions/DnsIpAddrs"
            },
            {
              "description": "The updated IP addresses of the remote DNS server associated with the conditional forwarder."
            }
          ]
        },
        "RemoteDomainName": {
          "allOf": [
            {
              "$ref": "#/definitions/RemoteDomainName"
            },
            {
              "description": "The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "RemoteDomainName",
        "DnsIpAddrs"
      ],
      "title": "UpdateConditionalForwarderRequest",
      "type": "object"
    },
    "UpdateConditionalForwarderResult": {
      "description": "The result of an UpdateConditionalForwarder request.",
      "properties": {},
      "type": "object"
    },
    "UpdateNumberOfDomainControllersRequest": {
      "properties": {
        "DesiredNumber": {
          "allOf": [
            {
              "$ref": "#/definitions/DesiredNumberOfDomainControllers"
            },
            {
              "description": "The number of domain controllers desired in the directory."
            }
          ]
        },
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "Identifier of the directory to which the domain controllers will be added or removed."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "DesiredNumber"
      ],
      "title": "UpdateNumberOfDomainControllersRequest",
      "type": "object"
    },
    "UpdateNumberOfDomainControllersResult": {
      "properties": {},
      "type": "object"
    },
    "UpdateRadiusRequest": {
      "description": "Contains the inputs for the <a>UpdateRadius</a> operation.",
      "properties": {
        "DirectoryId": {
          "allOf": [
            {
              "$ref": "#/definitions/DirectoryId"
            },
            {
              "description": "The identifier of the directory for which to update the RADIUS server information."
            }
          ]
        },
        "RadiusSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/RadiusSettings"
            },
            {
              "description": "A <a>RadiusSettings</a> object that contains information about the RADIUS server."
            }
          ]
        }
      },
      "required": [
        "DirectoryId",
        "RadiusSettings"
      ],
      "title": "UpdateRadiusRequest",
      "type": "object"
    },
    "UpdateRadiusResult": {
      "description": "Contains the results of the <a>UpdateRadius</a> operation.",
      "properties": {},
      "type": "object"
    },
    "UpdateSecurityGroupForDirectoryControllers": {
      "type": "boolean"
    },
    "UpdateTrustRequest": {
      "properties": {
        "SelectiveAuth": {
          "allOf": [
            {
              "$ref": "#/definitions/SelectiveAuth"
            },
            {
              "description": "Updates selective authentication for the trust."
            }
          ]
        },
        "TrustId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustId"
            },
            {
              "description": "Identifier of the trust relationship."
            }
          ]
        }
      },
      "required": [
        "TrustId"
      ],
      "title": "UpdateTrustRequest",
      "type": "object"
    },
    "UpdateTrustResult": {
      "properties": {
        "RequestId": {
          "$ref": "#/definitions/RequestId"
        },
        "TrustId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustId"
            },
            {
              "description": "Identifier of the trust relationship."
            }
          ]
        }
      },
      "type": "object"
    },
    "UseSameUsername": {
      "type": "boolean"
    },
    "UserDoesNotExistException": {},
    "UserName": {
      "minLength": 1,
      "pattern": "[a-zA-Z0-9._-]+",
      "type": "string"
    },
    "UserPassword": {
      "format": "password",
      "maxLength": 127,
      "minLength": 1,
      "type": "string"
    },
    "VerifyTrustRequest": {
      "description": "Initiates the verification of an existing trust relationship between an AWS Managed Microsoft AD directory and an external domain.",
      "properties": {
        "TrustId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustId"
            },
            {
              "description": "The unique Trust ID of the trust relationship to verify."
            }
          ]
        }
      },
      "required": [
        "TrustId"
      ],
      "title": "VerifyTrustRequest",
      "type": "object"
    },
    "VerifyTrustResult": {
      "description": "Result of a VerifyTrust request.",
      "properties": {
        "TrustId": {
          "allOf": [
            {
              "$ref": "#/definitions/TrustId"
            },
            {
              "description": "The unique Trust ID of the trust relationship that was verified."
            }
          ]
        }
      },
      "type": "object"
    },
    "VpcId": {
      "pattern": "^(vpc-[0-9a-f]{8}|vpc-[0-9a-f]{17})$",
      "type": "string"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/ds/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}