{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS Auto Scaling</fullname> <p>Use AWS Auto Scaling to quickly discover all the scalable AWS resources for your application and configure dynamic scaling and predictive scaling for your resources using scaling plans. Use this service in conjunction with the Amazon EC2 Auto Scaling, Application Auto Scaling, Amazon CloudWatch, and AWS CloudFormation services. </p> <p>Currently, predictive scaling is only available for Amazon EC2 Auto Scaling groups.</p> <p>For more information about AWS Auto Scaling, including information about granting IAM users required permissions for AWS Auto Scaling actions, see the <a href=\"https://docs.aws.amazon.com/autoscaling/plans/userguide/what-is-aws-auto-scaling.html\">AWS Auto Scaling User Guide</a>.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS Auto Scaling Plans",
    "version": "2018-01-06",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/autoscaling-plans-2018-01-06.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "autoscaling-plans",
    "x-datafire": {
      "name": "amazonaws_autoscaling_plans",
      "type": "openapi"
    }
  },
  "host": "autoscaling-plans.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.CreateScalingPlan": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AnyScaleScalingPlannerFrontendService.CreateScalingPlan"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateScalingPlanRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateScalingPlanResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "482": {
            "description": "ConcurrentUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentUpdateException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Creates a scaling plan.",
        "operationId": "CreateScalingPlan"
      }
    },
    "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DeleteScalingPlan": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AnyScaleScalingPlannerFrontendService.DeleteScalingPlan"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteScalingPlanRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteScalingPlanResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ObjectNotFoundException",
            "schema": {
              "$ref": "#/definitions/ObjectNotFoundException"
            }
          },
          "482": {
            "description": "ConcurrentUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentUpdateException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "<p>Deletes the specified scaling plan.</p> <p>Deleting a scaling plan deletes the underlying <a>ScalingInstruction</a> for all of the scalable resources that are covered by the plan.</p> <p>If the plan has launched resources or has scaling activities in progress, you must delete those resources separately.</p>",
        "operationId": "DeleteScalingPlan"
      }
    },
    "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlanResources": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AnyScaleScalingPlannerFrontendService.DescribeScalingPlanResources"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeScalingPlanResourcesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeScalingPlanResourcesResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "ConcurrentUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentUpdateException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Describes the scalable resources in the specified scaling plan.",
        "operationId": "DescribeScalingPlanResources"
      }
    },
    "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlans": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AnyScaleScalingPlannerFrontendService.DescribeScalingPlans"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeScalingPlansRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeScalingPlansResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "482": {
            "description": "ConcurrentUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentUpdateException"
            }
          },
          "483": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "Describes one or more of your scaling plans.",
        "operationId": "DescribeScalingPlans"
      }
    },
    "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.GetScalingPlanResourceForecastData": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AnyScaleScalingPlannerFrontendService.GetScalingPlanResourceForecastData"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetScalingPlanResourceForecastDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetScalingPlanResourceForecastDataResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          }
        },
        "description": "<p>Retrieves the forecast data for a scalable resource.</p> <p>Capacity forecasts are represented as predicted values, or data points, that are calculated using historical data points from a specified CloudWatch load metric. Data points are available for up to 56 days. </p>",
        "operationId": "GetScalingPlanResourceForecastData"
      }
    },
    "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.UpdateScalingPlan": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "AnyScaleScalingPlannerFrontendService.UpdateScalingPlan"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateScalingPlanRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateScalingPlanResponse"
            }
          },
          "480": {
            "description": "ValidationException",
            "schema": {
              "$ref": "#/definitions/ValidationException"
            }
          },
          "481": {
            "description": "ConcurrentUpdateException",
            "schema": {
              "$ref": "#/definitions/ConcurrentUpdateException"
            }
          },
          "482": {
            "description": "InternalServiceException",
            "schema": {
              "$ref": "#/definitions/InternalServiceException"
            }
          },
          "483": {
            "description": "ObjectNotFoundException",
            "schema": {
              "$ref": "#/definitions/ObjectNotFoundException"
            }
          }
        },
        "description": "<p>Updates the specified scaling plan.</p> <p>You cannot update a scaling plan if it is in the process of being created, updated, or deleted.</p>",
        "operationId": "UpdateScalingPlan"
      }
    }
  },
  "definitions": {
    "ApplicationSource": {
      "description": "Represents an application source.",
      "properties": {
        "CloudFormationStackARN": {
          "allOf": [
            {
              "$ref": "#/definitions/XmlString"
            },
            {
              "description": "The Amazon Resource Name (ARN) of a AWS CloudFormation stack."
            }
          ]
        },
        "TagFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/TagFilters"
            },
            {
              "description": "A set of tags (up to 50)."
            }
          ]
        }
      },
      "type": "object"
    },
    "ApplicationSources": {
      "items": {
        "$ref": "#/definitions/ApplicationSource"
      },
      "type": "array"
    },
    "ConcurrentUpdateException": {},
    "Cooldown": {
      "type": "integer"
    },
    "CreateScalingPlanRequest": {
      "properties": {
        "ApplicationSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationSource"
            },
            {
              "description": "A CloudFormation stack or set of tags. You can create one scaling plan per application source."
            }
          ]
        },
        "ScalingInstructions": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingInstructions"
            },
            {
              "description": "The scaling instructions."
            }
          ]
        },
        "ScalingPlanName": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanName"
            },
            {
              "description": "The name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes."
            }
          ]
        }
      },
      "required": [
        "ScalingPlanName",
        "ApplicationSource",
        "ScalingInstructions"
      ],
      "title": "CreateScalingPlanRequest",
      "type": "object"
    },
    "CreateScalingPlanResponse": {
      "properties": {
        "ScalingPlanVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanVersion"
            },
            {
              "description": "<p>The version number of the scaling plan. This value is always 1.</p> <p>Currently, you cannot specify multiple scaling plan versions.</p>"
            }
          ]
        }
      },
      "required": [
        "ScalingPlanVersion"
      ],
      "type": "object"
    },
    "CustomizedLoadMetricSpecification": {
      "description": "<p>Represents a CloudWatch metric of your choosing that can be used for predictive scaling. </p> <p>For predictive scaling to work with a customized load metric specification, AWS Auto Scaling needs access to the <code>Sum</code> and <code>Average</code> statistics that CloudWatch computes from metric data. Statistics are calculations used to aggregate data over specified time periods.</p> <p>When you choose a load metric, make sure that the required <code>Sum</code> and <code>Average</code> statistics for your metric are available in CloudWatch and that they provide relevant data for predictive scaling. The <code>Sum</code> statistic must represent the total load on the resource, and the <code>Average</code> statistic must represent the average load per capacity unit of the resource. For example, there is a metric that counts the number of requests processed by your Auto Scaling group. If the <code>Sum</code> statistic represents the total request count processed by the group, then the <code>Average</code> statistic for the specified metric must represent the average request count processed by each instance of the group.</p> <p>For information about terminology, available metrics, or how to publish new metrics, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html\">Amazon CloudWatch Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>",
      "properties": {
        "Dimensions": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricDimensions"
            },
            {
              "description": "<p>The dimensions of the metric.</p> <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized load metric specification.</p>"
            }
          ]
        },
        "MetricName": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricName"
            },
            {
              "description": "The name of the metric."
            }
          ]
        },
        "Namespace": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricNamespace"
            },
            {
              "description": "The namespace of the metric."
            }
          ]
        },
        "Statistic": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricStatistic"
            },
            {
              "description": "The statistic of the metric. Currently, the value must always be <code>Sum</code>. "
            }
          ]
        },
        "Unit": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricUnit"
            },
            {
              "description": "The unit of the metric."
            }
          ]
        }
      },
      "required": [
        "MetricName",
        "Namespace",
        "Statistic"
      ],
      "type": "object"
    },
    "CustomizedScalingMetricSpecification": {
      "description": "<p>Represents a CloudWatch metric of your choosing that can be used for dynamic scaling as part of a target tracking scaling policy. </p> <p>To create your customized scaling metric specification:</p> <ul> <li> <p>Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html\">Publish Custom Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p> </li> <li> <p>Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases. </p> </li> </ul> <p>For more information about CloudWatch, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html\">Amazon CloudWatch Concepts</a>. </p>",
      "properties": {
        "Dimensions": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricDimensions"
            },
            {
              "description": "<p>The dimensions of the metric.</p> <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized scaling metric specification.</p>"
            }
          ]
        },
        "MetricName": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricName"
            },
            {
              "description": "The name of the metric."
            }
          ]
        },
        "Namespace": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricNamespace"
            },
            {
              "description": "The namespace of the metric."
            }
          ]
        },
        "Statistic": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricStatistic"
            },
            {
              "description": "The statistic of the metric."
            }
          ]
        },
        "Unit": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricUnit"
            },
            {
              "description": "The unit of the metric. "
            }
          ]
        }
      },
      "required": [
        "MetricName",
        "Namespace",
        "Statistic"
      ],
      "type": "object"
    },
    "Datapoint": {
      "description": "Represents a single value in the forecast data used for predictive scaling.",
      "properties": {
        "Timestamp": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampType"
            },
            {
              "description": "The time stamp for the data point in UTC format."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricScale"
            },
            {
              "description": "The value of the data point."
            }
          ]
        }
      },
      "type": "object"
    },
    "Datapoints": {
      "items": {
        "$ref": "#/definitions/Datapoint"
      },
      "type": "array"
    },
    "DeleteScalingPlanRequest": {
      "properties": {
        "ScalingPlanName": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanName"
            },
            {
              "description": "The name of the scaling plan."
            }
          ]
        },
        "ScalingPlanVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanVersion"
            },
            {
              "description": "The version number of the scaling plan."
            }
          ]
        }
      },
      "required": [
        "ScalingPlanName",
        "ScalingPlanVersion"
      ],
      "title": "DeleteScalingPlanRequest",
      "type": "object"
    },
    "DeleteScalingPlanResponse": {
      "properties": {},
      "type": "object"
    },
    "DescribeScalingPlanResourcesRequest": {
      "properties": {
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of scalable resources to return. The value must be between 1 and 50. The default value is 50."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of results."
            }
          ]
        },
        "ScalingPlanName": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanName"
            },
            {
              "description": "The name of the scaling plan."
            }
          ]
        },
        "ScalingPlanVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanVersion"
            },
            {
              "description": "The version number of the scaling plan."
            }
          ]
        }
      },
      "required": [
        "ScalingPlanName",
        "ScalingPlanVersion"
      ],
      "title": "DescribeScalingPlanResourcesRequest",
      "type": "object"
    },
    "DescribeScalingPlanResourcesResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token required to get the next set of results. This value is <code>null</code> if there are no more results to return."
            }
          ]
        },
        "ScalingPlanResources": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanResources"
            },
            {
              "description": "Information about the scalable resources."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeScalingPlansRequest": {
      "properties": {
        "ApplicationSources": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationSources"
            },
            {
              "description": "The sources for the applications (up to 10). If you specify scaling plan names, you cannot specify application sources."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResults"
            },
            {
              "description": "The maximum number of scalable resources to return. This value can be between 1 and 50. The default value is 50."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token for the next set of results."
            }
          ]
        },
        "ScalingPlanNames": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanNames"
            },
            {
              "description": "The names of the scaling plans (up to 10). If you specify application sources, you cannot specify scaling plan names."
            }
          ]
        },
        "ScalingPlanVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanVersion"
            },
            {
              "description": "The version number of the scaling plan. If you specify a scaling plan version, you must also specify a scaling plan name."
            }
          ]
        }
      },
      "title": "DescribeScalingPlansRequest",
      "type": "object"
    },
    "DescribeScalingPlansResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "The token required to get the next set of results. This value is <code>null</code> if there are no more results to return."
            }
          ]
        },
        "ScalingPlans": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlans"
            },
            {
              "description": "Information about the scaling plans."
            }
          ]
        }
      },
      "type": "object"
    },
    "DisableDynamicScaling": {
      "type": "boolean"
    },
    "DisableScaleIn": {
      "type": "boolean"
    },
    "ForecastDataType": {
      "enum": [
        "CapacityForecast",
        "LoadForecast",
        "ScheduledActionMinCapacity",
        "ScheduledActionMaxCapacity"
      ],
      "type": "string"
    },
    "GetScalingPlanResourceForecastDataRequest": {
      "properties": {
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampType"
            },
            {
              "description": "<p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. </p> <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.</p>"
            }
          ]
        },
        "ForecastDataType": {
          "allOf": [
            {
              "$ref": "#/definitions/ForecastDataType"
            },
            {
              "description": "<p>The type of forecast data to get.</p> <ul> <li> <p> <code>LoadForecast</code>: The load metric forecast. </p> </li> <li> <p> <code>CapacityForecast</code>: The capacity forecast. </p> </li> <li> <p> <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.</p> </li> <li> <p> <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.</p> </li> </ul>"
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/XmlString"
            },
            {
              "description": "<p>The ID of the resource. This string consists of the resource type and unique identifier. </p> <ul> <li> <p>Auto Scaling group - The resource type is <code>autoScalingGroup</code> and the unique identifier is the name of the Auto Scaling group. Example: <code>autoScalingGroup/my-asg</code>.</p> </li> <li> <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name and service name. Example: <code>service/default/sample-webapp</code>.</p> </li> <li> <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p> </li> <li> <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the resource ID. Example: <code>table/my-table</code>.</p> </li> <li> <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the resource ID. Example: <code>table/my-table/index/my-table-index</code>.</p> </li> <li> <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:my-db-cluster</code>.</p> </li> </ul>"
            }
          ]
        },
        "ScalableDimension": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalableDimension"
            },
            {
              "description": "The scalable dimension for the resource."
            }
          ]
        },
        "ScalingPlanName": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanName"
            },
            {
              "description": "The name of the scaling plan."
            }
          ]
        },
        "ScalingPlanVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanVersion"
            },
            {
              "description": "The version number of the scaling plan."
            }
          ]
        },
        "ServiceNamespace": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceNamespace"
            },
            {
              "description": "The namespace of the AWS service."
            }
          ]
        },
        "StartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampType"
            },
            {
              "description": "The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. "
            }
          ]
        }
      },
      "required": [
        "ScalingPlanName",
        "ScalingPlanVersion",
        "ServiceNamespace",
        "ResourceId",
        "ScalableDimension",
        "ForecastDataType",
        "StartTime",
        "EndTime"
      ],
      "title": "GetScalingPlanResourceForecastDataRequest",
      "type": "object"
    },
    "GetScalingPlanResourceForecastDataResponse": {
      "properties": {
        "Datapoints": {
          "allOf": [
            {
              "$ref": "#/definitions/Datapoints"
            },
            {
              "description": "The data points to return."
            }
          ]
        }
      },
      "required": [
        "Datapoints"
      ],
      "type": "object"
    },
    "InternalServiceException": {},
    "InvalidNextTokenException": {},
    "LimitExceededException": {},
    "LoadMetricType": {
      "enum": [
        "ASGTotalCPUUtilization",
        "ASGTotalNetworkIn",
        "ASGTotalNetworkOut",
        "ALBTargetGroupRequestCount"
      ],
      "type": "string"
    },
    "MaxResults": {
      "type": "integer"
    },
    "MetricDimension": {
      "description": "Represents a dimension for a customized metric.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricDimensionName"
            },
            {
              "description": "The name of the dimension."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricDimensionValue"
            },
            {
              "description": "The value of the dimension."
            }
          ]
        }
      },
      "required": [
        "Name",
        "Value"
      ],
      "type": "object"
    },
    "MetricDimensionName": {
      "type": "string"
    },
    "MetricDimensionValue": {
      "type": "string"
    },
    "MetricDimensions": {
      "items": {
        "$ref": "#/definitions/MetricDimension"
      },
      "type": "array"
    },
    "MetricName": {
      "type": "string"
    },
    "MetricNamespace": {
      "type": "string"
    },
    "MetricScale": {
      "format": "double",
      "type": "number"
    },
    "MetricStatistic": {
      "enum": [
        "Average",
        "Minimum",
        "Maximum",
        "SampleCount",
        "Sum"
      ],
      "type": "string"
    },
    "MetricUnit": {
      "type": "string"
    },
    "NextToken": {
      "type": "string"
    },
    "ObjectNotFoundException": {},
    "PolicyName": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "\\p{Print}+",
      "type": "string"
    },
    "PolicyType": {
      "enum": [
        "TargetTrackingScaling"
      ],
      "type": "string"
    },
    "PredefinedLoadMetricSpecification": {
      "description": "Represents a predefined metric that can be used for predictive scaling. ",
      "properties": {
        "PredefinedLoadMetricType": {
          "allOf": [
            {
              "$ref": "#/definitions/LoadMetricType"
            },
            {
              "description": "The metric type."
            }
          ]
        },
        "ResourceLabel": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceLabel"
            },
            {
              "description": "<p>Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is <code>ALBRequestCountPerTarget</code> and there is a target group for an Application Load Balancer attached to the Auto Scaling group.</p> <p>The format is app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt;/targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt;, where:</p> <ul> <li> <p>app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt; is the final portion of the load balancer ARN.</p> </li> <li> <p>targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt; is the final portion of the target group ARN.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "PredefinedLoadMetricType"
      ],
      "type": "object"
    },
    "PredefinedScalingMetricSpecification": {
      "description": "Represents a predefined metric that can be used for dynamic scaling as part of a target tracking scaling policy.",
      "properties": {
        "PredefinedScalingMetricType": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingMetricType"
            },
            {
              "description": "The metric type. The <code>ALBRequestCountPerTarget</code> metric type applies only to Auto Scaling groups, Spot Fleet requests, and ECS services."
            }
          ]
        },
        "ResourceLabel": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceLabel"
            },
            {
              "description": "<p>Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is <code>ALBRequestCountPerTarget</code> and there is a target group for an Application Load Balancer attached to the Auto Scaling group, Spot Fleet request, or ECS service.</p> <p>The format is app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt;/targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt;, where:</p> <ul> <li> <p>app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt; is the final portion of the load balancer ARN.</p> </li> <li> <p>targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt; is the final portion of the target group ARN.</p> </li> </ul>"
            }
          ]
        }
      },
      "required": [
        "PredefinedScalingMetricType"
      ],
      "type": "object"
    },
    "PredictiveScalingMaxCapacityBehavior": {
      "enum": [
        "SetForecastCapacityToMaxCapacity",
        "SetMaxCapacityToForecastCapacity",
        "SetMaxCapacityAboveForecastCapacity"
      ],
      "type": "string"
    },
    "PredictiveScalingMode": {
      "enum": [
        "ForecastAndScale",
        "ForecastOnly"
      ],
      "type": "string"
    },
    "ResourceCapacity": {
      "type": "integer"
    },
    "ResourceIdMaxLen1600": {
      "maxLength": 1600,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "ResourceLabel": {
      "maxLength": 1023,
      "minLength": 1,
      "type": "string"
    },
    "ScalableDimension": {
      "enum": [
        "autoscaling:autoScalingGroup:DesiredCapacity",
        "ecs:service:DesiredCount",
        "ec2:spot-fleet-request:TargetCapacity",
        "rds:cluster:ReadReplicaCount",
        "dynamodb:table:ReadCapacityUnits",
        "dynamodb:table:WriteCapacityUnits",
        "dynamodb:index:ReadCapacityUnits",
        "dynamodb:index:WriteCapacityUnits"
      ],
      "type": "string"
    },
    "ScalingInstruction": {
      "description": "<p>Describes a scaling instruction for a scalable resource.</p> <p>The scaling instruction is used in combination with a scaling plan, which is a set of instructions for configuring dynamic scaling and predictive scaling for the scalable resources in your application. Each scaling instruction applies to one resource.</p> <p>AWS Auto Scaling creates target tracking scaling policies based on the scaling instructions. Target tracking scaling policies adjust the capacity of your scalable resource as required to maintain resource utilization at the target value that you specified. </p> <p>AWS Auto Scaling also configures predictive scaling for your Amazon EC2 Auto Scaling groups using a subset of parameters, including the load metric, the scaling metric, the target value for the scaling metric, the predictive scaling mode (forecast and scale or forecast only), and the desired behavior when the forecast capacity exceeds the maximum capacity of the resource. With predictive scaling, AWS Auto Scaling generates forecasts with traffic predictions for the two days ahead and schedules scaling actions that proactively add and remove resource capacity to match the forecast. </p> <p>We recommend waiting a minimum of 24 hours after creating an Auto Scaling group to configure predictive scaling. At minimum, there must be 24 hours of historical data to generate a forecast.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/autoscaling/plans/userguide/auto-scaling-getting-started.html\">Getting Started with AWS Auto Scaling</a>.</p>",
      "properties": {
        "CustomizedLoadMetricSpecification": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomizedLoadMetricSpecification"
            },
            {
              "description": "The customized load metric to use for predictive scaling. This parameter or a <b>PredefinedLoadMetricSpecification</b> is required when configuring predictive scaling, and cannot be used otherwise. "
            }
          ]
        },
        "DisableDynamicScaling": {
          "allOf": [
            {
              "$ref": "#/definitions/DisableDynamicScaling"
            },
            {
              "description": "<p>Controls whether dynamic scaling by AWS Auto Scaling is disabled. When dynamic scaling is enabled, AWS Auto Scaling creates target tracking scaling policies based on the specified target tracking configurations. </p> <p>The default is enabled (<code>false</code>). </p>"
            }
          ]
        },
        "MaxCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceCapacity"
            },
            {
              "description": "The maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for <b>PredictiveScalingMaxCapacityBehavior</b>. "
            }
          ]
        },
        "MinCapacity": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceCapacity"
            },
            {
              "description": "The minimum capacity of the resource. "
            }
          ]
        },
        "PredefinedLoadMetricSpecification": {
          "allOf": [
            {
              "$ref": "#/definitions/PredefinedLoadMetricSpecification"
            },
            {
              "description": "The predefined load metric to use for predictive scaling. This parameter or a <b>CustomizedLoadMetricSpecification</b> is required when configuring predictive scaling, and cannot be used otherwise. "
            }
          ]
        },
        "PredictiveScalingMaxCapacityBehavior": {
          "allOf": [
            {
              "$ref": "#/definitions/PredictiveScalingMaxCapacityBehavior"
            },
            {
              "description": "<p>Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource. The default value is <code>SetForecastCapacityToMaxCapacity</code>.</p> <p>The following are possible values:</p> <ul> <li> <p> <code>SetForecastCapacityToMaxCapacity</code> - AWS Auto Scaling cannot scale resource capacity higher than the maximum capacity. The maximum capacity is enforced as a hard limit. </p> </li> <li> <p> <code>SetMaxCapacityToForecastCapacity</code> - AWS Auto Scaling may scale resource capacity higher than the maximum capacity to equal but not exceed forecast capacity.</p> </li> <li> <p> <code>SetMaxCapacityAboveForecastCapacity</code> - AWS Auto Scaling may scale resource capacity higher than the maximum capacity by a specified buffer value. The intention is to give the target tracking scaling policy extra capacity if unexpected traffic occurs. </p> </li> </ul> <p>Only valid when configuring predictive scaling.</p>"
            }
          ]
        },
        "PredictiveScalingMaxCapacityBuffer": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceCapacity"
            },
            {
              "description": "<p>The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55.</p> <p>Only valid when configuring predictive scaling. Required if the <b>PredictiveScalingMaxCapacityBehavior</b> is set to <code>SetMaxCapacityAboveForecastCapacity</code>, and cannot be used otherwise.</p> <p>The range is 1-100.</p>"
            }
          ]
        },
        "PredictiveScalingMode": {
          "allOf": [
            {
              "$ref": "#/definitions/PredictiveScalingMode"
            },
            {
              "description": "The predictive scaling mode. The default value is <code>ForecastAndScale</code>. Otherwise, AWS Auto Scaling forecasts capacity but does not create any scheduled scaling actions based on the capacity forecast. "
            }
          ]
        },
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceIdMaxLen1600"
            },
            {
              "description": "<p>The ID of the resource. This string consists of the resource type and unique identifier.</p> <ul> <li> <p>Auto Scaling group - The resource type is <code>autoScalingGroup</code> and the unique identifier is the name of the Auto Scaling group. Example: <code>autoScalingGroup/my-asg</code>.</p> </li> <li> <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name and service name. Example: <code>service/default/sample-webapp</code>.</p> </li> <li> <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p> </li> <li> <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the resource ID. Example: <code>table/my-table</code>.</p> </li> <li> <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the resource ID. Example: <code>table/my-table/index/my-table-index</code>.</p> </li> <li> <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:my-db-cluster</code>.</p> </li> </ul>"
            }
          ]
        },
        "ScalableDimension": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalableDimension"
            },
            {
              "description": "<p>The scalable dimension associated with the resource.</p> <ul> <li> <p> <code>autoscaling:autoScalingGroup:DesiredCapacity</code> - The desired capacity of an Auto Scaling group.</p> </li> <li> <p> <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p> </li> <li> <p> <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p> </li> <li> <p> <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p> </li> <li> <p> <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p> </li> <li> <p> <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p> </li> <li> <p> <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p> </li> <li> <p> <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p> </li> </ul>"
            }
          ]
        },
        "ScalingPolicyUpdateBehavior": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPolicyUpdateBehavior"
            },
            {
              "description": "<p>Controls whether a resource's externally created scaling policies are kept or replaced. </p> <p>The default value is <code>KeepExternalPolicies</code>. If the parameter is set to <code>ReplaceExternalPolicies</code>, any scaling policies that are external to AWS Auto Scaling are deleted and new target tracking scaling policies created. </p> <p>Only valid when configuring dynamic scaling. </p> <p>Condition: The number of existing policies to be replaced must be less than or equal to 50. If there are more than 50 policies to be replaced, AWS Auto Scaling keeps all existing policies and does not create new ones.</p>"
            }
          ]
        },
        "ScheduledActionBufferTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ScheduledActionBufferTime"
            },
            {
              "description": "<p>The amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out. For example, if the forecast says to add capacity at 10:00 AM, and the buffer time is 5 minutes, then the run time of the corresponding scheduled scaling action will be 9:55 AM. The intention is to give resources time to be provisioned. For example, it can take a few minutes to launch an EC2 instance. The actual amount of time required depends on several factors, such as the size of the instance and whether there are startup scripts to complete. </p> <p>The value must be less than the forecast interval duration of 3600 seconds (60 minutes). The default is 300 seconds. </p> <p>Only valid when configuring predictive scaling. </p>"
            }
          ]
        },
        "ServiceNamespace": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceNamespace"
            },
            {
              "description": "The namespace of the AWS service."
            }
          ]
        },
        "TargetTrackingConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetTrackingConfigurations"
            },
            {
              "description": "<p>The structure that defines new target tracking configurations (up to 10). Each of these structures includes a specific scaling metric and a target value for the metric, along with various parameters to use with dynamic scaling. </p> <p>With predictive scaling and dynamic scaling, the resource scales based on the target tracking configuration that provides the largest capacity for both scale in and scale out. </p> <p>Condition: The scaling metric must be unique across target tracking configurations.</p>"
            }
          ]
        }
      },
      "required": [
        "ServiceNamespace",
        "ResourceId",
        "ScalableDimension",
        "MinCapacity",
        "MaxCapacity",
        "TargetTrackingConfigurations"
      ],
      "type": "object"
    },
    "ScalingInstructions": {
      "items": {
        "$ref": "#/definitions/ScalingInstruction"
      },
      "type": "array"
    },
    "ScalingMetricType": {
      "enum": [
        "ASGAverageCPUUtilization",
        "ASGAverageNetworkIn",
        "ASGAverageNetworkOut",
        "DynamoDBReadCapacityUtilization",
        "DynamoDBWriteCapacityUtilization",
        "ECSServiceAverageCPUUtilization",
        "ECSServiceAverageMemoryUtilization",
        "ALBRequestCountPerTarget",
        "RDSReaderAverageCPUUtilization",
        "RDSReaderAverageDatabaseConnections",
        "EC2SpotFleetRequestAverageCPUUtilization",
        "EC2SpotFleetRequestAverageNetworkIn",
        "EC2SpotFleetRequestAverageNetworkOut"
      ],
      "type": "string"
    },
    "ScalingPlan": {
      "description": "Represents a scaling plan.",
      "properties": {
        "ApplicationSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationSource"
            },
            {
              "description": "The application source."
            }
          ]
        },
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampType"
            },
            {
              "description": "The Unix time stamp when the scaling plan was created."
            }
          ]
        },
        "ScalingInstructions": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingInstructions"
            },
            {
              "description": "The scaling instructions."
            }
          ]
        },
        "ScalingPlanName": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanName"
            },
            {
              "description": "The name of the scaling plan."
            }
          ]
        },
        "ScalingPlanVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanVersion"
            },
            {
              "description": "The version number of the scaling plan."
            }
          ]
        },
        "StatusCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanStatusCode"
            },
            {
              "description": "<p>The status of the scaling plan.</p> <ul> <li> <p> <code>Active</code> - The scaling plan is active.</p> </li> <li> <p> <code>ActiveWithProblems</code> - The scaling plan is active, but the scaling configuration for one or more resources could not be applied.</p> </li> <li> <p> <code>CreationInProgress</code> - The scaling plan is being created.</p> </li> <li> <p> <code>CreationFailed</code> - The scaling plan could not be created.</p> </li> <li> <p> <code>DeletionInProgress</code> - The scaling plan is being deleted.</p> </li> <li> <p> <code>DeletionFailed</code> - The scaling plan could not be deleted.</p> </li> <li> <p> <code>UpdateInProgress</code> - The scaling plan is being updated.</p> </li> <li> <p> <code>UpdateFailed</code> - The scaling plan could not be updated.</p> </li> </ul>"
            }
          ]
        },
        "StatusMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/XmlString"
            },
            {
              "description": "A simple message about the current status of the scaling plan."
            }
          ]
        },
        "StatusStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/TimestampType"
            },
            {
              "description": "The Unix time stamp when the scaling plan entered the current status."
            }
          ]
        }
      },
      "required": [
        "ScalingPlanName",
        "ScalingPlanVersion",
        "ApplicationSource",
        "ScalingInstructions",
        "StatusCode"
      ],
      "type": "object"
    },
    "ScalingPlanName": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\p{Print}&&[^|:/]]+",
      "type": "string"
    },
    "ScalingPlanNames": {
      "items": {
        "$ref": "#/definitions/ScalingPlanName"
      },
      "type": "array"
    },
    "ScalingPlanResource": {
      "description": "Represents a scalable resource.",
      "properties": {
        "ResourceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceIdMaxLen1600"
            },
            {
              "description": "<p>The ID of the resource. This string consists of the resource type and unique identifier.</p> <ul> <li> <p>Auto Scaling group - The resource type is <code>autoScalingGroup</code> and the unique identifier is the name of the Auto Scaling group. Example: <code>autoScalingGroup/my-asg</code>.</p> </li> <li> <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name and service name. Example: <code>service/default/sample-webapp</code>.</p> </li> <li> <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p> </li> <li> <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the resource ID. Example: <code>table/my-table</code>.</p> </li> <li> <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the resource ID. Example: <code>table/my-table/index/my-table-index</code>.</p> </li> <li> <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name. Example: <code>cluster:my-db-cluster</code>.</p> </li> </ul>"
            }
          ]
        },
        "ScalableDimension": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalableDimension"
            },
            {
              "description": "<p>The scalable dimension for the resource.</p> <ul> <li> <p> <code>autoscaling:autoScalingGroup:DesiredCapacity</code> - The desired capacity of an Auto Scaling group.</p> </li> <li> <p> <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p> </li> <li> <p> <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p> </li> <li> <p> <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p> </li> <li> <p> <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p> </li> <li> <p> <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p> </li> <li> <p> <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p> </li> <li> <p> <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p> </li> </ul>"
            }
          ]
        },
        "ScalingPlanName": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanName"
            },
            {
              "description": "The name of the scaling plan."
            }
          ]
        },
        "ScalingPlanVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanVersion"
            },
            {
              "description": "The version number of the scaling plan."
            }
          ]
        },
        "ScalingPolicies": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPolicies"
            },
            {
              "description": "The scaling policies."
            }
          ]
        },
        "ScalingStatusCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingStatusCode"
            },
            {
              "description": "<p>The scaling status of the resource.</p> <ul> <li> <p> <code>Active</code> - The scaling configuration is active.</p> </li> <li> <p> <code>Inactive</code> - The scaling configuration is not active because the scaling plan is being created or the scaling configuration could not be applied. Check the status message for more information.</p> </li> <li> <p> <code>PartiallyActive</code> - The scaling configuration is partially active because the scaling plan is being created or deleted or the scaling configuration could not be fully applied. Check the status message for more information.</p> </li> </ul>"
            }
          ]
        },
        "ScalingStatusMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/XmlString"
            },
            {
              "description": "A simple message about the current scaling status of the resource."
            }
          ]
        },
        "ServiceNamespace": {
          "allOf": [
            {
              "$ref": "#/definitions/ServiceNamespace"
            },
            {
              "description": "The namespace of the AWS service."
            }
          ]
        }
      },
      "required": [
        "ScalingPlanName",
        "ScalingPlanVersion",
        "ServiceNamespace",
        "ResourceId",
        "ScalableDimension",
        "ScalingStatusCode"
      ],
      "type": "object"
    },
    "ScalingPlanResources": {
      "items": {
        "$ref": "#/definitions/ScalingPlanResource"
      },
      "type": "array"
    },
    "ScalingPlanStatusCode": {
      "enum": [
        "Active",
        "ActiveWithProblems",
        "CreationInProgress",
        "CreationFailed",
        "DeletionInProgress",
        "DeletionFailed",
        "UpdateInProgress",
        "UpdateFailed"
      ],
      "type": "string"
    },
    "ScalingPlanVersion": {
      "type": "integer"
    },
    "ScalingPlans": {
      "items": {
        "$ref": "#/definitions/ScalingPlan"
      },
      "type": "array"
    },
    "ScalingPolicies": {
      "items": {
        "$ref": "#/definitions/ScalingPolicy"
      },
      "type": "array"
    },
    "ScalingPolicy": {
      "description": "Represents a scaling policy.",
      "properties": {
        "PolicyName": {
          "allOf": [
            {
              "$ref": "#/definitions/PolicyName"
            },
            {
              "description": "The name of the scaling policy."
            }
          ]
        },
        "PolicyType": {
          "allOf": [
            {
              "$ref": "#/definitions/PolicyType"
            },
            {
              "description": "The type of scaling policy."
            }
          ]
        },
        "TargetTrackingConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetTrackingConfiguration"
            },
            {
              "description": "The target tracking scaling policy. Includes support for predefined or customized metrics."
            }
          ]
        }
      },
      "required": [
        "PolicyName",
        "PolicyType"
      ],
      "type": "object"
    },
    "ScalingPolicyUpdateBehavior": {
      "enum": [
        "KeepExternalPolicies",
        "ReplaceExternalPolicies"
      ],
      "type": "string"
    },
    "ScalingStatusCode": {
      "enum": [
        "Inactive",
        "PartiallyActive",
        "Active"
      ],
      "type": "string"
    },
    "ScheduledActionBufferTime": {
      "minimum": 0,
      "type": "integer"
    },
    "ServiceNamespace": {
      "enum": [
        "autoscaling",
        "ecs",
        "ec2",
        "rds",
        "dynamodb"
      ],
      "type": "string"
    },
    "TagFilter": {
      "description": "Represents a tag.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/XmlStringMaxLen128"
            },
            {
              "description": "The tag key."
            }
          ]
        },
        "Values": {
          "allOf": [
            {
              "$ref": "#/definitions/TagValues"
            },
            {
              "description": "The tag values (0 to 20)."
            }
          ]
        }
      },
      "type": "object"
    },
    "TagFilters": {
      "items": {
        "$ref": "#/definitions/TagFilter"
      },
      "type": "array"
    },
    "TagValues": {
      "items": {
        "$ref": "#/definitions/XmlStringMaxLen256"
      },
      "type": "array"
    },
    "TargetTrackingConfiguration": {
      "description": "Describes a target tracking configuration to use with AWS Auto Scaling. Used with <a>ScalingInstruction</a> and <a>ScalingPolicy</a>.",
      "properties": {
        "CustomizedScalingMetricSpecification": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomizedScalingMetricSpecification"
            },
            {
              "description": "A customized metric. You can specify either a predefined metric or a customized metric. "
            }
          ]
        },
        "DisableScaleIn": {
          "allOf": [
            {
              "$ref": "#/definitions/DisableScaleIn"
            },
            {
              "description": "<p>Indicates whether scale in by the target tracking scaling policy is disabled. If the value is <code>true</code>, scale in is disabled and the target tracking scaling policy doesn't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable resource. </p> <p>The default value is <code>false</code>.</p>"
            }
          ]
        },
        "EstimatedInstanceWarmup": {
          "allOf": [
            {
              "$ref": "#/definitions/Cooldown"
            },
            {
              "description": "The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This value is used only if the resource is an Auto Scaling group."
            }
          ]
        },
        "PredefinedScalingMetricSpecification": {
          "allOf": [
            {
              "$ref": "#/definitions/PredefinedScalingMetricSpecification"
            },
            {
              "description": "A predefined metric. You can specify either a predefined metric or a customized metric."
            }
          ]
        },
        "ScaleInCooldown": {
          "allOf": [
            {
              "$ref": "#/definitions/Cooldown"
            },
            {
              "description": "<p>The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. This value is not used if the scalable resource is an Auto Scaling group.</p> <p>The cooldown period is used to block subsequent scale in requests until it has expired. The intention is to scale in conservatively to protect your application's availability. However, if another alarm triggers a scale-out policy during the cooldown period after a scale-in, AWS Auto Scaling scales out your scalable target immediately.</p>"
            }
          ]
        },
        "ScaleOutCooldown": {
          "allOf": [
            {
              "$ref": "#/definitions/Cooldown"
            },
            {
              "description": "<p>The amount of time, in seconds, after a scale-out activity completes before another scale-out activity can start. This value is not used if the scalable resource is an Auto Scaling group.</p> <p>While the cooldown period is in effect, the capacity that has been added by the previous scale-out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. The intention is to continuously (but not excessively) scale out.</p>"
            }
          ]
        },
        "TargetValue": {
          "allOf": [
            {
              "$ref": "#/definitions/MetricScale"
            },
            {
              "description": "The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2)."
            }
          ]
        }
      },
      "required": [
        "TargetValue"
      ],
      "type": "object"
    },
    "TargetTrackingConfigurations": {
      "items": {
        "$ref": "#/definitions/TargetTrackingConfiguration"
      },
      "type": "array"
    },
    "TimestampType": {
      "format": "date-time",
      "type": "string"
    },
    "UpdateScalingPlanRequest": {
      "properties": {
        "ApplicationSource": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationSource"
            },
            {
              "description": "A CloudFormation stack or set of tags."
            }
          ]
        },
        "ScalingInstructions": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingInstructions"
            },
            {
              "description": "The scaling instructions."
            }
          ]
        },
        "ScalingPlanName": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanName"
            },
            {
              "description": "The name of the scaling plan."
            }
          ]
        },
        "ScalingPlanVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/ScalingPlanVersion"
            },
            {
              "description": "The version number of the scaling plan."
            }
          ]
        }
      },
      "required": [
        "ScalingPlanName",
        "ScalingPlanVersion"
      ],
      "title": "UpdateScalingPlanRequest",
      "type": "object"
    },
    "UpdateScalingPlanResponse": {
      "properties": {},
      "type": "object"
    },
    "ValidationException": {},
    "XmlString": {
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringMaxLen128": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringMaxLen256": {
      "maxLength": 256,
      "minLength": 1,
      "type": "string",
      "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/autoscaling-plans/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}