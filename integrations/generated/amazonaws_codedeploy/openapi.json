{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "<fullname>AWS CodeDeploy</fullname> <p>AWS CodeDeploy is a deployment service that automates application deployments to Amazon EC2 instances, on-premises instances running in your own facility, serverless AWS Lambda functions, or applications in an Amazon ECS service.</p> <p>You can deploy a nearly unlimited variety of application content, such as an updated Lambda function, updated applications in an Amazon ECS service, code, web and configuration files, executables, packages, scripts, multimedia files, and so on. AWS CodeDeploy can deploy application content stored in Amazon S3 buckets, GitHub repositories, or Bitbucket repositories. You do not need to make changes to your existing code before you can use AWS CodeDeploy.</p> <p>AWS CodeDeploy makes it easier for you to rapidly release new features, helps you avoid downtime during application deployment, and handles the complexity of updating your applications, without many of the risks associated with error-prone manual deployments.</p> <p> <b>AWS CodeDeploy Components</b> </p> <p>Use the information in this guide to help you work with the following AWS CodeDeploy components:</p> <ul> <li> <p> <b>Application</b>: A name that uniquely identifies the application you want to deploy. AWS CodeDeploy uses this name, which functions as a container, to ensure the correct combination of revision, deployment configuration, and deployment group are referenced during a deployment.</p> </li> <li> <p> <b>Deployment group</b>: A set of individual instances, CodeDeploy Lambda deployment configuration settings, or an Amazon ECS service and network details. A Lambda deployment group specifies how to route traffic to a new version of a Lambda function. An Amazon ECS deployment group specifies the service created in Amazon ECS to deploy, a load balancer, and a listener to reroute production traffic to an updated containerized application. An EC2/On-premises deployment group contains individually tagged instances, Amazon EC2 instances in Amazon EC2 Auto Scaling groups, or both. All deployment groups can specify optional trigger, alarm, and rollback settings.</p> </li> <li> <p> <b>Deployment configuration</b>: A set of deployment rules and deployment success and failure conditions used by AWS CodeDeploy during a deployment.</p> </li> <li> <p> <b>Deployment</b>: The process and the components used when updating a Lambda function, a containerized application in an Amazon ECS service, or of installing content on one or more instances. </p> </li> <li> <p> <b>Application revisions</b>: For an AWS Lambda deployment, this is an AppSpec file that specifies the Lambda function to be updated and one or more functions to validate deployment lifecycle events. For an Amazon ECS deployment, this is an AppSpec file that specifies the Amazon ECS task definition, container, and port where production traffic is rerouted. For an EC2/On-premises deployment, this is an archive file that contains source content—source code, webpages, executable files, and deployment scripts—along with an AppSpec file. Revisions are stored in Amazon S3 buckets or GitHub repositories. For Amazon S3, a revision is uniquely identified by its Amazon S3 object key and its ETag, version, or both. For GitHub, a revision is uniquely identified by its commit ID.</p> </li> </ul> <p>This guide also contains information to help you get details about the instances in your deployments, to make on-premises instances available for AWS CodeDeploy deployments, to get details about a Lambda function deployment, and to get details about Amazon ECS service deployments.</p> <p> <b>AWS CodeDeploy Information Resources</b> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide\">AWS CodeDeploy User Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/codedeploy/latest/APIReference/\">AWS CodeDeploy API Reference Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/deploy/index.html\">AWS CLI Reference for AWS CodeDeploy</a> </p> </li> <li> <p> <a href=\"https://forums.aws.amazon.com/forum.jspa?forumID=179\">AWS CodeDeploy Developer Forum</a> </p> </li> </ul>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "AWS CodeDeploy",
    "version": "2014-10-06",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/codedeploy-2014-10-06.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "codedeploy",
    "x-datafire": {
      "name": "amazonaws_codedeploy",
      "type": "openapi"
    }
  },
  "host": "codedeploy.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=CodeDeploy_20141006.AddTagsToOnPremisesInstances": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.AddTagsToOnPremisesInstances"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddTagsToOnPremisesInstancesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InstanceNameRequiredException",
            "schema": {
              "$ref": "#/definitions/InstanceNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidInstanceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceNameException"
            }
          },
          "482": {
            "description": "TagRequiredException",
            "schema": {
              "$ref": "#/definitions/TagRequiredException"
            }
          },
          "483": {
            "description": "InvalidTagException",
            "schema": {
              "$ref": "#/definitions/InvalidTagException"
            }
          },
          "484": {
            "description": "TagLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TagLimitExceededException"
            }
          },
          "485": {
            "description": "InstanceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/InstanceLimitExceededException"
            }
          },
          "486": {
            "description": "InstanceNotRegisteredException",
            "schema": {
              "$ref": "#/definitions/InstanceNotRegisteredException"
            }
          }
        },
        "description": "Adds tags to on-premises instances.",
        "operationId": "AddTagsToOnPremisesInstances"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.BatchGetApplicationRevisions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.BatchGetApplicationRevisions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetApplicationRevisionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetApplicationRevisionsOutput"
            }
          },
          "480": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "481": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "482": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "483": {
            "description": "RevisionRequiredException",
            "schema": {
              "$ref": "#/definitions/RevisionRequiredException"
            }
          },
          "484": {
            "description": "InvalidRevisionException",
            "schema": {
              "$ref": "#/definitions/InvalidRevisionException"
            }
          },
          "485": {
            "description": "BatchLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchLimitExceededException"
            }
          }
        },
        "description": "Gets information about one or more application revisions. The maximum number of application revisions that can be returned is 25.",
        "operationId": "BatchGetApplicationRevisions"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.BatchGetApplications": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.BatchGetApplications"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetApplicationsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetApplicationsOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "483": {
            "description": "BatchLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchLimitExceededException"
            }
          }
        },
        "description": "Gets information about one or more applications. The maximum number of applications that can be returned is 100.",
        "operationId": "BatchGetApplications"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentGroups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.BatchGetDeploymentGroups"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetDeploymentGroupsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetDeploymentGroupsOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "483": {
            "description": "DeploymentGroupNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupNameRequiredException"
            }
          },
          "484": {
            "description": "InvalidDeploymentGroupNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentGroupNameException"
            }
          },
          "485": {
            "description": "BatchLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchLimitExceededException"
            }
          },
          "486": {
            "description": "DeploymentConfigDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigDoesNotExistException"
            }
          }
        },
        "description": "Gets information about one or more deployment groups.",
        "operationId": "BatchGetDeploymentGroups"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentInstances": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.BatchGetDeploymentInstances"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetDeploymentInstancesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetDeploymentInstancesOutput"
            }
          },
          "480": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "481": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "482": {
            "description": "InstanceIdRequiredException",
            "schema": {
              "$ref": "#/definitions/InstanceIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "484": {
            "description": "InvalidInstanceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceNameException"
            }
          },
          "485": {
            "description": "BatchLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchLimitExceededException"
            }
          },
          "486": {
            "description": "InvalidComputePlatformException",
            "schema": {
              "$ref": "#/definitions/InvalidComputePlatformException"
            }
          }
        },
        "deprecated": true,
        "description": "<note> <p> This method works, but is deprecated. Use <code>BatchGetDeploymentTargets</code> instead. </p> </note> <p> Returns an array of one or more instances associated with a deployment. This method works with EC2/On-premises and AWS Lambda compute platforms. The newer <code>BatchGetDeploymentTargets</code> works with all compute platforms. The maximum number of instances that can be returned is 25.</p>",
        "operationId": "BatchGetDeploymentInstances"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentTargets": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.BatchGetDeploymentTargets"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetDeploymentTargetsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetDeploymentTargetsOutput"
            }
          },
          "480": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "481": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "482": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "483": {
            "description": "DeploymentNotStartedException",
            "schema": {
              "$ref": "#/definitions/DeploymentNotStartedException"
            }
          },
          "484": {
            "description": "DeploymentTargetIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetIdRequiredException"
            }
          },
          "485": {
            "description": "InvalidDeploymentTargetIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentTargetIdException"
            }
          },
          "486": {
            "description": "DeploymentTargetDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetDoesNotExistException"
            }
          },
          "487": {
            "description": "DeploymentTargetListSizeExceededException",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetListSizeExceededException"
            }
          },
          "488": {
            "description": "InstanceDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/InstanceDoesNotExistException"
            }
          }
        },
        "description": "<p> Returns an array of one or more targets associated with a deployment. This method works with all compute types and should be used instead of the deprecated <code>BatchGetDeploymentInstances</code>. The maximum number of targets that can be returned is 25.</p> <p> The type of targets returned depends on the deployment's compute platform or deployment method: </p> <ul> <li> <p> <b>EC2/On-premises</b>: Information about EC2 instance targets. </p> </li> <li> <p> <b>AWS Lambda</b>: Information about Lambda functions targets. </p> </li> <li> <p> <b>Amazon ECS</b>: Information about Amazon ECS service targets. </p> </li> <li> <p> <b>CloudFormation</b>: Information about targets of blue/green deployments initiated by a CloudFormation stack update.</p> </li> </ul>",
        "operationId": "BatchGetDeploymentTargets"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.BatchGetDeployments": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.BatchGetDeployments"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetDeploymentsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetDeploymentsOutput"
            }
          },
          "480": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "481": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "482": {
            "description": "BatchLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchLimitExceededException"
            }
          }
        },
        "description": "Gets information about one or more deployments. The maximum number of deployments that can be returned is 25.",
        "operationId": "BatchGetDeployments"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.BatchGetOnPremisesInstances": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.BatchGetOnPremisesInstances"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchGetOnPremisesInstancesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchGetOnPremisesInstancesOutput"
            }
          },
          "480": {
            "description": "InstanceNameRequiredException",
            "schema": {
              "$ref": "#/definitions/InstanceNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidInstanceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceNameException"
            }
          },
          "482": {
            "description": "BatchLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchLimitExceededException"
            }
          }
        },
        "description": "Gets information about one or more on-premises instances. The maximum number of on-premises instances that can be returned is 25.",
        "operationId": "BatchGetOnPremisesInstances"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ContinueDeployment": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.ContinueDeployment"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContinueDeploymentInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "481": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "482": {
            "description": "DeploymentAlreadyCompletedException",
            "schema": {
              "$ref": "#/definitions/DeploymentAlreadyCompletedException"
            }
          },
          "483": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "484": {
            "description": "DeploymentIsNotInReadyStateException",
            "schema": {
              "$ref": "#/definitions/DeploymentIsNotInReadyStateException"
            }
          },
          "485": {
            "description": "UnsupportedActionForDeploymentTypeException",
            "schema": {
              "$ref": "#/definitions/UnsupportedActionForDeploymentTypeException"
            }
          },
          "486": {
            "description": "InvalidDeploymentWaitTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentWaitTypeException"
            }
          },
          "487": {
            "description": "InvalidDeploymentStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentStatusException"
            }
          }
        },
        "description": "For a blue/green deployment, starts the process of rerouting traffic from instances in the original environment to instances in the replacement environment without waiting for a specified wait time to elapse. (Traffic rerouting, which is achieved by registering instances in the replacement environment with the load balancer, can start as soon as all instances have a status of Ready.) ",
        "operationId": "ContinueDeployment"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.CreateApplication": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.CreateApplication"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApplicationInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateApplicationOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ApplicationAlreadyExistsException"
            }
          },
          "483": {
            "description": "ApplicationLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ApplicationLimitExceededException"
            }
          },
          "484": {
            "description": "InvalidComputePlatformException",
            "schema": {
              "$ref": "#/definitions/InvalidComputePlatformException"
            }
          },
          "485": {
            "description": "InvalidTagsToAddException",
            "schema": {
              "$ref": "#/definitions/InvalidTagsToAddException"
            }
          }
        },
        "description": "Creates an application.",
        "operationId": "CreateApplication"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.CreateDeployment": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.CreateDeployment"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeploymentInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDeploymentOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "483": {
            "description": "DeploymentGroupNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupNameRequiredException"
            }
          },
          "484": {
            "description": "InvalidDeploymentGroupNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentGroupNameException"
            }
          },
          "485": {
            "description": "DeploymentGroupDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupDoesNotExistException"
            }
          },
          "486": {
            "description": "RevisionRequiredException",
            "schema": {
              "$ref": "#/definitions/RevisionRequiredException"
            }
          },
          "487": {
            "description": "RevisionDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RevisionDoesNotExistException"
            }
          },
          "488": {
            "description": "InvalidRevisionException",
            "schema": {
              "$ref": "#/definitions/InvalidRevisionException"
            }
          },
          "489": {
            "description": "InvalidDeploymentConfigNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentConfigNameException"
            }
          },
          "490": {
            "description": "DeploymentConfigDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigDoesNotExistException"
            }
          },
          "491": {
            "description": "DescriptionTooLongException",
            "schema": {
              "$ref": "#/definitions/DescriptionTooLongException"
            }
          },
          "492": {
            "description": "DeploymentLimitExceededException",
            "schema": {
              "$ref": "#/definitions/DeploymentLimitExceededException"
            }
          },
          "493": {
            "description": "InvalidTargetInstancesException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetInstancesException"
            }
          },
          "494": {
            "description": "InvalidAutoRollbackConfigException",
            "schema": {
              "$ref": "#/definitions/InvalidAutoRollbackConfigException"
            }
          },
          "495": {
            "description": "InvalidLoadBalancerInfoException",
            "schema": {
              "$ref": "#/definitions/InvalidLoadBalancerInfoException"
            }
          },
          "496": {
            "description": "InvalidFileExistsBehaviorException",
            "schema": {
              "$ref": "#/definitions/InvalidFileExistsBehaviorException"
            }
          },
          "497": {
            "description": "InvalidRoleException",
            "schema": {
              "$ref": "#/definitions/InvalidRoleException"
            }
          },
          "498": {
            "description": "InvalidAutoScalingGroupException",
            "schema": {
              "$ref": "#/definitions/InvalidAutoScalingGroupException"
            }
          },
          "499": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "500": {
            "description": "InvalidUpdateOutdatedInstancesOnlyValueException",
            "schema": {
              "$ref": "#/definitions/InvalidUpdateOutdatedInstancesOnlyValueException"
            }
          },
          "501": {
            "description": "InvalidIgnoreApplicationStopFailuresValueException",
            "schema": {
              "$ref": "#/definitions/InvalidIgnoreApplicationStopFailuresValueException"
            }
          },
          "502": {
            "description": "InvalidGitHubAccountTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidGitHubAccountTokenException"
            }
          },
          "503": {
            "description": "InvalidTrafficRoutingConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidTrafficRoutingConfigurationException"
            }
          }
        },
        "description": "Deploys an application revision through the specified deployment group.",
        "operationId": "CreateDeployment"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentConfig": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.CreateDeploymentConfig"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeploymentConfigInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDeploymentConfigOutput"
            }
          },
          "480": {
            "description": "InvalidDeploymentConfigNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentConfigNameException"
            }
          },
          "481": {
            "description": "DeploymentConfigNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigNameRequiredException"
            }
          },
          "482": {
            "description": "DeploymentConfigAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigAlreadyExistsException"
            }
          },
          "483": {
            "description": "InvalidMinimumHealthyHostValueException",
            "schema": {
              "$ref": "#/definitions/InvalidMinimumHealthyHostValueException"
            }
          },
          "484": {
            "description": "DeploymentConfigLimitExceededException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigLimitExceededException"
            }
          },
          "485": {
            "description": "InvalidComputePlatformException",
            "schema": {
              "$ref": "#/definitions/InvalidComputePlatformException"
            }
          },
          "486": {
            "description": "InvalidTrafficRoutingConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidTrafficRoutingConfigurationException"
            }
          }
        },
        "description": " Creates a deployment configuration. ",
        "operationId": "CreateDeploymentConfig"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.CreateDeploymentGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeploymentGroupInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDeploymentGroupOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "483": {
            "description": "DeploymentGroupNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupNameRequiredException"
            }
          },
          "484": {
            "description": "InvalidDeploymentGroupNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentGroupNameException"
            }
          },
          "485": {
            "description": "DeploymentGroupAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupAlreadyExistsException"
            }
          },
          "486": {
            "description": "InvalidEC2TagException",
            "schema": {
              "$ref": "#/definitions/InvalidEC2TagException"
            }
          },
          "487": {
            "description": "InvalidTagException",
            "schema": {
              "$ref": "#/definitions/InvalidTagException"
            }
          },
          "488": {
            "description": "InvalidAutoScalingGroupException",
            "schema": {
              "$ref": "#/definitions/InvalidAutoScalingGroupException"
            }
          },
          "489": {
            "description": "InvalidDeploymentConfigNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentConfigNameException"
            }
          },
          "490": {
            "description": "DeploymentConfigDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigDoesNotExistException"
            }
          },
          "491": {
            "description": "RoleRequiredException",
            "schema": {
              "$ref": "#/definitions/RoleRequiredException"
            }
          },
          "492": {
            "description": "InvalidRoleException",
            "schema": {
              "$ref": "#/definitions/InvalidRoleException"
            }
          },
          "493": {
            "description": "DeploymentGroupLimitExceededException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupLimitExceededException"
            }
          },
          "494": {
            "description": "LifecycleHookLimitExceededException",
            "schema": {
              "$ref": "#/definitions/LifecycleHookLimitExceededException"
            }
          },
          "495": {
            "description": "InvalidTriggerConfigException",
            "schema": {
              "$ref": "#/definitions/InvalidTriggerConfigException"
            }
          },
          "496": {
            "description": "TriggerTargetsLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TriggerTargetsLimitExceededException"
            }
          },
          "497": {
            "description": "InvalidAlarmConfigException",
            "schema": {
              "$ref": "#/definitions/InvalidAlarmConfigException"
            }
          },
          "498": {
            "description": "AlarmsLimitExceededException",
            "schema": {
              "$ref": "#/definitions/AlarmsLimitExceededException"
            }
          },
          "499": {
            "description": "InvalidAutoRollbackConfigException",
            "schema": {
              "$ref": "#/definitions/InvalidAutoRollbackConfigException"
            }
          },
          "500": {
            "description": "InvalidLoadBalancerInfoException",
            "schema": {
              "$ref": "#/definitions/InvalidLoadBalancerInfoException"
            }
          },
          "501": {
            "description": "InvalidDeploymentStyleException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentStyleException"
            }
          },
          "502": {
            "description": "InvalidBlueGreenDeploymentConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidBlueGreenDeploymentConfigurationException"
            }
          },
          "503": {
            "description": "InvalidEC2TagCombinationException",
            "schema": {
              "$ref": "#/definitions/InvalidEC2TagCombinationException"
            }
          },
          "504": {
            "description": "InvalidOnPremisesTagCombinationException",
            "schema": {
              "$ref": "#/definitions/InvalidOnPremisesTagCombinationException"
            }
          },
          "505": {
            "description": "TagSetListLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TagSetListLimitExceededException"
            }
          },
          "506": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "507": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "508": {
            "description": "InvalidECSServiceException",
            "schema": {
              "$ref": "#/definitions/InvalidECSServiceException"
            }
          },
          "509": {
            "description": "InvalidTargetGroupPairException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetGroupPairException"
            }
          },
          "510": {
            "description": "ECSServiceMappingLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ECSServiceMappingLimitExceededException"
            }
          },
          "511": {
            "description": "InvalidTagsToAddException",
            "schema": {
              "$ref": "#/definitions/InvalidTagsToAddException"
            }
          },
          "512": {
            "description": "InvalidTrafficRoutingConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidTrafficRoutingConfigurationException"
            }
          }
        },
        "description": "Creates a deployment group to which application revisions are deployed.",
        "operationId": "CreateDeploymentGroup"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.DeleteApplication": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.DeleteApplication"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteApplicationInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "InvalidRoleException",
            "schema": {
              "$ref": "#/definitions/InvalidRoleException"
            }
          }
        },
        "description": "Deletes an application.",
        "operationId": "DeleteApplication"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentConfig": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.DeleteDeploymentConfig"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDeploymentConfigInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidDeploymentConfigNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentConfigNameException"
            }
          },
          "481": {
            "description": "DeploymentConfigNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigNameRequiredException"
            }
          },
          "482": {
            "description": "DeploymentConfigInUseException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigInUseException"
            }
          },
          "483": {
            "description": "InvalidOperationException",
            "schema": {
              "$ref": "#/definitions/InvalidOperationException"
            }
          }
        },
        "description": "<p>Deletes a deployment configuration.</p> <note> <p>A deployment configuration cannot be deleted if it is currently in use. Predefined configurations cannot be deleted.</p> </note>",
        "operationId": "DeleteDeploymentConfig"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.DeleteDeploymentGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDeploymentGroupInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDeploymentGroupOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "DeploymentGroupNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupNameRequiredException"
            }
          },
          "483": {
            "description": "InvalidDeploymentGroupNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentGroupNameException"
            }
          },
          "484": {
            "description": "InvalidRoleException",
            "schema": {
              "$ref": "#/definitions/InvalidRoleException"
            }
          }
        },
        "description": "Deletes a deployment group.",
        "operationId": "DeleteDeploymentGroup"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.DeleteGitHubAccountToken": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.DeleteGitHubAccountToken"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteGitHubAccountTokenInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteGitHubAccountTokenOutput"
            }
          },
          "480": {
            "description": "GitHubAccountTokenNameRequiredException",
            "schema": {
              "$ref": "#/definitions/GitHubAccountTokenNameRequiredException"
            }
          },
          "481": {
            "description": "GitHubAccountTokenDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/GitHubAccountTokenDoesNotExistException"
            }
          },
          "482": {
            "description": "InvalidGitHubAccountTokenNameException",
            "schema": {
              "$ref": "#/definitions/InvalidGitHubAccountTokenNameException"
            }
          },
          "483": {
            "description": "ResourceValidationException",
            "schema": {
              "$ref": "#/definitions/ResourceValidationException"
            }
          },
          "484": {
            "description": "OperationNotSupportedException",
            "schema": {
              "$ref": "#/definitions/OperationNotSupportedException"
            }
          }
        },
        "description": "Deletes a GitHub account connection.",
        "operationId": "DeleteGitHubAccountToken"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.DeleteResourcesByExternalId": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.DeleteResourcesByExternalId"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteResourcesByExternalIdInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteResourcesByExternalIdOutput"
            }
          }
        },
        "description": "Deletes resources linked to an external ID.",
        "operationId": "DeleteResourcesByExternalId"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.DeregisterOnPremisesInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.DeregisterOnPremisesInstance"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeregisterOnPremisesInstanceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InstanceNameRequiredException",
            "schema": {
              "$ref": "#/definitions/InstanceNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidInstanceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceNameException"
            }
          }
        },
        "description": "Deregisters an on-premises instance.",
        "operationId": "DeregisterOnPremisesInstance"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.GetApplication": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.GetApplication"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetApplicationInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetApplicationOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          }
        },
        "description": "Gets information about an application.",
        "operationId": "GetApplication"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.GetApplicationRevision": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.GetApplicationRevision"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetApplicationRevisionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetApplicationRevisionOutput"
            }
          },
          "480": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "481": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "482": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "483": {
            "description": "RevisionDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/RevisionDoesNotExistException"
            }
          },
          "484": {
            "description": "RevisionRequiredException",
            "schema": {
              "$ref": "#/definitions/RevisionRequiredException"
            }
          },
          "485": {
            "description": "InvalidRevisionException",
            "schema": {
              "$ref": "#/definitions/InvalidRevisionException"
            }
          }
        },
        "description": "Gets information about an application revision.",
        "operationId": "GetApplicationRevision"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.GetDeployment": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.GetDeployment"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeploymentInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeploymentOutput"
            }
          },
          "480": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "481": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "482": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          }
        },
        "description": "<p>Gets information about a deployment.</p> <note> <p> The <code>content</code> property of the <code>appSpecContent</code> object in the returned revision is always null. Use <code>GetApplicationRevision</code> and the <code>sha256</code> property of the returned <code>appSpecContent</code> object to get the content of the deployment’s AppSpec file. </p> </note>",
        "operationId": "GetDeployment"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.GetDeploymentConfig": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.GetDeploymentConfig"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeploymentConfigInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeploymentConfigOutput"
            }
          },
          "480": {
            "description": "InvalidDeploymentConfigNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentConfigNameException"
            }
          },
          "481": {
            "description": "DeploymentConfigNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigNameRequiredException"
            }
          },
          "482": {
            "description": "DeploymentConfigDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidComputePlatformException",
            "schema": {
              "$ref": "#/definitions/InvalidComputePlatformException"
            }
          }
        },
        "description": "Gets information about a deployment configuration.",
        "operationId": "GetDeploymentConfig"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.GetDeploymentGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.GetDeploymentGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeploymentGroupInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeploymentGroupOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "483": {
            "description": "DeploymentGroupNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupNameRequiredException"
            }
          },
          "484": {
            "description": "InvalidDeploymentGroupNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentGroupNameException"
            }
          },
          "485": {
            "description": "DeploymentGroupDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupDoesNotExistException"
            }
          },
          "486": {
            "description": "DeploymentConfigDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigDoesNotExistException"
            }
          }
        },
        "description": "Gets information about a deployment group.",
        "operationId": "GetDeploymentGroup"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.GetDeploymentInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.GetDeploymentInstance"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeploymentInstanceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeploymentInstanceOutput"
            }
          },
          "480": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "481": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "482": {
            "description": "InstanceIdRequiredException",
            "schema": {
              "$ref": "#/definitions/InstanceIdRequiredException"
            }
          },
          "483": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "484": {
            "description": "InstanceDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/InstanceDoesNotExistException"
            }
          },
          "485": {
            "description": "InvalidInstanceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceNameException"
            }
          },
          "486": {
            "description": "InvalidComputePlatformException",
            "schema": {
              "$ref": "#/definitions/InvalidComputePlatformException"
            }
          }
        },
        "deprecated": true,
        "description": "Gets information about an instance as part of a deployment.",
        "operationId": "GetDeploymentInstance"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.GetDeploymentTarget": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.GetDeploymentTarget"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeploymentTargetInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeploymentTargetOutput"
            }
          },
          "480": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "481": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "482": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "483": {
            "description": "DeploymentNotStartedException",
            "schema": {
              "$ref": "#/definitions/DeploymentNotStartedException"
            }
          },
          "484": {
            "description": "DeploymentTargetIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetIdRequiredException"
            }
          },
          "485": {
            "description": "InvalidDeploymentTargetIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentTargetIdException"
            }
          },
          "486": {
            "description": "DeploymentTargetDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetDoesNotExistException"
            }
          },
          "487": {
            "description": "InvalidInstanceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceNameException"
            }
          }
        },
        "description": " Returns information about a deployment target. ",
        "operationId": "GetDeploymentTarget"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.GetOnPremisesInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.GetOnPremisesInstance"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetOnPremisesInstanceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetOnPremisesInstanceOutput"
            }
          },
          "480": {
            "description": "InstanceNameRequiredException",
            "schema": {
              "$ref": "#/definitions/InstanceNameRequiredException"
            }
          },
          "481": {
            "description": "InstanceNotRegisteredException",
            "schema": {
              "$ref": "#/definitions/InstanceNotRegisteredException"
            }
          },
          "482": {
            "description": "InvalidInstanceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceNameException"
            }
          }
        },
        "description": " Gets information about an on-premises instance. ",
        "operationId": "GetOnPremisesInstance"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListApplicationRevisions": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeDeploy_20141006.ListApplicationRevisions"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListApplicationRevisionsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListApplicationRevisionsOutput"
            }
          },
          "480": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "481": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "482": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "483": {
            "description": "InvalidSortByException",
            "schema": {
              "$ref": "#/definitions/InvalidSortByException"
            }
          },
          "484": {
            "description": "InvalidSortOrderException",
            "schema": {
              "$ref": "#/definitions/InvalidSortOrderException"
            }
          },
          "485": {
            "description": "InvalidBucketNameFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidBucketNameFilterException"
            }
          },
          "486": {
            "description": "InvalidKeyPrefixFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidKeyPrefixFilterException"
            }
          },
          "487": {
            "description": "BucketNameFilterRequiredException",
            "schema": {
              "$ref": "#/definitions/BucketNameFilterRequiredException"
            }
          },
          "488": {
            "description": "InvalidDeployedStateFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidDeployedStateFilterException"
            }
          },
          "489": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Lists information about revisions for an application.",
        "operationId": "ListApplicationRevisions"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListApplications": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeDeploy_20141006.ListApplications"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListApplicationsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListApplicationsOutput"
            }
          },
          "480": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Lists the applications registered with the IAM user or AWS account.",
        "operationId": "ListApplications"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListDeploymentConfigs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeDeploy_20141006.ListDeploymentConfigs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDeploymentConfigsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDeploymentConfigsOutput"
            }
          },
          "480": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Lists the deployment configurations with the IAM user or AWS account.",
        "operationId": "ListDeploymentConfigs"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListDeploymentGroups": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeDeploy_20141006.ListDeploymentGroups"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDeploymentGroupsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDeploymentGroupsOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "Lists the deployment groups for an application registered with the IAM user or AWS account.",
        "operationId": "ListDeploymentGroups"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListDeploymentInstances": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeDeploy_20141006.ListDeploymentInstances"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDeploymentInstancesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDeploymentInstancesOutput"
            }
          },
          "480": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "481": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "482": {
            "description": "DeploymentNotStartedException",
            "schema": {
              "$ref": "#/definitions/DeploymentNotStartedException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "484": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "485": {
            "description": "InvalidInstanceStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceStatusException"
            }
          },
          "486": {
            "description": "InvalidInstanceTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceTypeException"
            }
          },
          "487": {
            "description": "InvalidDeploymentInstanceTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentInstanceTypeException"
            }
          },
          "488": {
            "description": "InvalidTargetFilterNameException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetFilterNameException"
            }
          },
          "489": {
            "description": "InvalidComputePlatformException",
            "schema": {
              "$ref": "#/definitions/InvalidComputePlatformException"
            }
          }
        },
        "deprecated": true,
        "description": "<note> <p> The newer <code>BatchGetDeploymentTargets</code> should be used instead because it works with all compute types. <code>ListDeploymentInstances</code> throws an exception if it is used with a compute platform other than EC2/On-premises or AWS Lambda. </p> </note> <p> Lists the instance for a deployment associated with the IAM user or AWS account. </p>",
        "operationId": "ListDeploymentInstances"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListDeploymentTargets": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.ListDeploymentTargets"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDeploymentTargetsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDeploymentTargetsOutput"
            }
          },
          "480": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "481": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "482": {
            "description": "DeploymentNotStartedException",
            "schema": {
              "$ref": "#/definitions/DeploymentNotStartedException"
            }
          },
          "483": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "484": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "485": {
            "description": "InvalidInstanceStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceStatusException"
            }
          },
          "486": {
            "description": "InvalidInstanceTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceTypeException"
            }
          },
          "487": {
            "description": "InvalidDeploymentInstanceTypeException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentInstanceTypeException"
            }
          }
        },
        "description": " Returns an array of target IDs that are associated a deployment. ",
        "operationId": "ListDeploymentTargets"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListDeployments": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination token",
            "in": "query",
            "name": "nextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CodeDeploy_20141006.ListDeployments"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDeploymentsInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDeploymentsOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidDeploymentGroupNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentGroupNameException"
            }
          },
          "484": {
            "description": "DeploymentGroupDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupDoesNotExistException"
            }
          },
          "485": {
            "description": "DeploymentGroupNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupNameRequiredException"
            }
          },
          "486": {
            "description": "InvalidTimeRangeException",
            "schema": {
              "$ref": "#/definitions/InvalidTimeRangeException"
            }
          },
          "487": {
            "description": "InvalidDeploymentStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentStatusException"
            }
          },
          "488": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "489": {
            "description": "InvalidExternalIdException",
            "schema": {
              "$ref": "#/definitions/InvalidExternalIdException"
            }
          },
          "490": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          }
        },
        "description": "Lists the deployments in a deployment group for an application registered with the IAM user or AWS account.",
        "operationId": "ListDeployments"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListGitHubAccountTokenNames": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.ListGitHubAccountTokenNames"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListGitHubAccountTokenNamesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGitHubAccountTokenNamesOutput"
            }
          },
          "480": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          },
          "481": {
            "description": "ResourceValidationException",
            "schema": {
              "$ref": "#/definitions/ResourceValidationException"
            }
          },
          "482": {
            "description": "OperationNotSupportedException",
            "schema": {
              "$ref": "#/definitions/OperationNotSupportedException"
            }
          }
        },
        "description": "Lists the names of stored connections to GitHub accounts.",
        "operationId": "ListGitHubAccountTokenNames"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListOnPremisesInstances": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.ListOnPremisesInstances"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListOnPremisesInstancesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListOnPremisesInstancesOutput"
            }
          },
          "480": {
            "description": "InvalidRegistrationStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidRegistrationStatusException"
            }
          },
          "481": {
            "description": "InvalidTagFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidTagFilterException"
            }
          },
          "482": {
            "description": "InvalidNextTokenException",
            "schema": {
              "$ref": "#/definitions/InvalidNextTokenException"
            }
          }
        },
        "description": "<p>Gets a list of names for one or more on-premises instances.</p> <p>Unless otherwise specified, both registered and deregistered on-premises instance names are listed. To list only registered or deregistered on-premises instance names, use the registration status parameter.</p>",
        "operationId": "ListOnPremisesInstances"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceOutput"
            }
          },
          "480": {
            "description": "ArnNotSupportedException",
            "schema": {
              "$ref": "#/definitions/ArnNotSupportedException"
            }
          },
          "481": {
            "description": "InvalidArnException",
            "schema": {
              "$ref": "#/definitions/InvalidArnException"
            }
          },
          "482": {
            "description": "ResourceArnRequiredException",
            "schema": {
              "$ref": "#/definitions/ResourceArnRequiredException"
            }
          }
        },
        "description": " Returns a list of tags for the resource identified by a specified Amazon Resource Name (ARN). Tags are used to organize and categorize your CodeDeploy resources. ",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutLifecycleEventHookExecutionStatusInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutLifecycleEventHookExecutionStatusOutput"
            }
          },
          "480": {
            "description": "InvalidLifecycleEventHookExecutionStatusException",
            "schema": {
              "$ref": "#/definitions/InvalidLifecycleEventHookExecutionStatusException"
            }
          },
          "481": {
            "description": "InvalidLifecycleEventHookExecutionIdException",
            "schema": {
              "$ref": "#/definitions/InvalidLifecycleEventHookExecutionIdException"
            }
          },
          "482": {
            "description": "LifecycleEventAlreadyCompletedException",
            "schema": {
              "$ref": "#/definitions/LifecycleEventAlreadyCompletedException"
            }
          },
          "483": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "484": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "485": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "486": {
            "description": "UnsupportedActionForDeploymentTypeException",
            "schema": {
              "$ref": "#/definitions/UnsupportedActionForDeploymentTypeException"
            }
          }
        },
        "description": " Sets the result of a Lambda validation function. The function validates lifecycle hooks during a deployment that uses the AWS Lambda or Amazon ECS compute platform. For AWS Lambda deployments, the available lifecycle hooks are <code>BeforeAllowTraffic</code> and <code>AfterAllowTraffic</code>. For Amazon ECS deployments, the available lifecycle hooks are <code>BeforeInstall</code>, <code>AfterInstall</code>, <code>AfterAllowTestTraffic</code>, <code>BeforeAllowTraffic</code>, and <code>AfterAllowTraffic</code>. Lambda validation functions return <code>Succeeded</code> or <code>Failed</code>. For more information, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-lambda\">AppSpec 'hooks' Section for an AWS Lambda Deployment </a> and <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-ecs\">AppSpec 'hooks' Section for an Amazon ECS Deployment</a>.",
        "operationId": "PutLifecycleEventHookExecutionStatus"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.RegisterApplicationRevision": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.RegisterApplicationRevision"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterApplicationRevisionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "481": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "482": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "483": {
            "description": "DescriptionTooLongException",
            "schema": {
              "$ref": "#/definitions/DescriptionTooLongException"
            }
          },
          "484": {
            "description": "RevisionRequiredException",
            "schema": {
              "$ref": "#/definitions/RevisionRequiredException"
            }
          },
          "485": {
            "description": "InvalidRevisionException",
            "schema": {
              "$ref": "#/definitions/InvalidRevisionException"
            }
          }
        },
        "description": "Registers with AWS CodeDeploy a revision for the specified application.",
        "operationId": "RegisterApplicationRevision"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.RegisterOnPremisesInstance": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.RegisterOnPremisesInstance"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterOnPremisesInstanceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InstanceNameAlreadyRegisteredException",
            "schema": {
              "$ref": "#/definitions/InstanceNameAlreadyRegisteredException"
            }
          },
          "481": {
            "description": "IamArnRequiredException",
            "schema": {
              "$ref": "#/definitions/IamArnRequiredException"
            }
          },
          "482": {
            "description": "IamSessionArnAlreadyRegisteredException",
            "schema": {
              "$ref": "#/definitions/IamSessionArnAlreadyRegisteredException"
            }
          },
          "483": {
            "description": "IamUserArnAlreadyRegisteredException",
            "schema": {
              "$ref": "#/definitions/IamUserArnAlreadyRegisteredException"
            }
          },
          "484": {
            "description": "InstanceNameRequiredException",
            "schema": {
              "$ref": "#/definitions/InstanceNameRequiredException"
            }
          },
          "485": {
            "description": "IamUserArnRequiredException",
            "schema": {
              "$ref": "#/definitions/IamUserArnRequiredException"
            }
          },
          "486": {
            "description": "InvalidInstanceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceNameException"
            }
          },
          "487": {
            "description": "InvalidIamSessionArnException",
            "schema": {
              "$ref": "#/definitions/InvalidIamSessionArnException"
            }
          },
          "488": {
            "description": "InvalidIamUserArnException",
            "schema": {
              "$ref": "#/definitions/InvalidIamUserArnException"
            }
          },
          "489": {
            "description": "MultipleIamArnsProvidedException",
            "schema": {
              "$ref": "#/definitions/MultipleIamArnsProvidedException"
            }
          }
        },
        "description": "<p>Registers an on-premises instance.</p> <note> <p>Only one IAM ARN (an IAM session ARN or IAM user ARN) is supported in the request. You cannot use both.</p> </note>",
        "operationId": "RegisterOnPremisesInstance"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveTagsFromOnPremisesInstancesInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InstanceNameRequiredException",
            "schema": {
              "$ref": "#/definitions/InstanceNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidInstanceNameException",
            "schema": {
              "$ref": "#/definitions/InvalidInstanceNameException"
            }
          },
          "482": {
            "description": "TagRequiredException",
            "schema": {
              "$ref": "#/definitions/TagRequiredException"
            }
          },
          "483": {
            "description": "InvalidTagException",
            "schema": {
              "$ref": "#/definitions/InvalidTagException"
            }
          },
          "484": {
            "description": "TagLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TagLimitExceededException"
            }
          },
          "485": {
            "description": "InstanceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/InstanceLimitExceededException"
            }
          },
          "486": {
            "description": "InstanceNotRegisteredException",
            "schema": {
              "$ref": "#/definitions/InstanceNotRegisteredException"
            }
          }
        },
        "description": "Removes one or more tags from one or more on-premises instances.",
        "operationId": "RemoveTagsFromOnPremisesInstances"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.SkipWaitTimeForInstanceTermination": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.SkipWaitTimeForInstanceTermination"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SkipWaitTimeForInstanceTerminationInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "481": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "482": {
            "description": "DeploymentAlreadyCompletedException",
            "schema": {
              "$ref": "#/definitions/DeploymentAlreadyCompletedException"
            }
          },
          "483": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "484": {
            "description": "DeploymentNotStartedException",
            "schema": {
              "$ref": "#/definitions/DeploymentNotStartedException"
            }
          },
          "485": {
            "description": "UnsupportedActionForDeploymentTypeException",
            "schema": {
              "$ref": "#/definitions/UnsupportedActionForDeploymentTypeException"
            }
          }
        },
        "deprecated": true,
        "description": "In a blue/green deployment, overrides any specified wait time and starts terminating instances immediately after the traffic routing is complete.",
        "operationId": "SkipWaitTimeForInstanceTermination"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.StopDeployment": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.StopDeployment"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopDeploymentInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopDeploymentOutput"
            }
          },
          "480": {
            "description": "DeploymentIdRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentIdRequiredException"
            }
          },
          "481": {
            "description": "DeploymentDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentDoesNotExistException"
            }
          },
          "482": {
            "description": "DeploymentGroupDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupDoesNotExistException"
            }
          },
          "483": {
            "description": "DeploymentAlreadyCompletedException",
            "schema": {
              "$ref": "#/definitions/DeploymentAlreadyCompletedException"
            }
          },
          "484": {
            "description": "InvalidDeploymentIdException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentIdException"
            }
          },
          "485": {
            "description": "UnsupportedActionForDeploymentTypeException",
            "schema": {
              "$ref": "#/definitions/UnsupportedActionForDeploymentTypeException"
            }
          }
        },
        "description": "Attempts to stop an ongoing deployment.",
        "operationId": "StopDeployment"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceOutput"
            }
          },
          "480": {
            "description": "ResourceArnRequiredException",
            "schema": {
              "$ref": "#/definitions/ResourceArnRequiredException"
            }
          },
          "481": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "482": {
            "description": "DeploymentGroupDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupDoesNotExistException"
            }
          },
          "483": {
            "description": "DeploymentConfigDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigDoesNotExistException"
            }
          },
          "484": {
            "description": "TagRequiredException",
            "schema": {
              "$ref": "#/definitions/TagRequiredException"
            }
          },
          "485": {
            "description": "InvalidTagsToAddException",
            "schema": {
              "$ref": "#/definitions/InvalidTagsToAddException"
            }
          },
          "486": {
            "description": "ArnNotSupportedException",
            "schema": {
              "$ref": "#/definitions/ArnNotSupportedException"
            }
          },
          "487": {
            "description": "InvalidArnException",
            "schema": {
              "$ref": "#/definitions/InvalidArnException"
            }
          }
        },
        "description": " Associates the list of tags in the input <code>Tags</code> parameter with the resource identified by the <code>ResourceArn</code> input parameter. ",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceOutput"
            }
          },
          "480": {
            "description": "ResourceArnRequiredException",
            "schema": {
              "$ref": "#/definitions/ResourceArnRequiredException"
            }
          },
          "481": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "482": {
            "description": "DeploymentGroupDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupDoesNotExistException"
            }
          },
          "483": {
            "description": "DeploymentConfigDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigDoesNotExistException"
            }
          },
          "484": {
            "description": "TagRequiredException",
            "schema": {
              "$ref": "#/definitions/TagRequiredException"
            }
          },
          "485": {
            "description": "InvalidTagsToAddException",
            "schema": {
              "$ref": "#/definitions/InvalidTagsToAddException"
            }
          },
          "486": {
            "description": "ArnNotSupportedException",
            "schema": {
              "$ref": "#/definitions/ArnNotSupportedException"
            }
          },
          "487": {
            "description": "InvalidArnException",
            "schema": {
              "$ref": "#/definitions/InvalidArnException"
            }
          }
        },
        "description": " Disassociates a resource from a list of tags. The resource is identified by the <code>ResourceArn</code> input parameter. The tags are identified by the list of keys in the <code>TagKeys</code> input parameter. ",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.UpdateApplication": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.UpdateApplication"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApplicationInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/ApplicationAlreadyExistsException"
            }
          },
          "483": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          }
        },
        "description": "Changes the name of an application.",
        "operationId": "UpdateApplication"
      }
    },
    "/#X-Amz-Target=CodeDeploy_20141006.UpdateDeploymentGroup": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "CodeDeploy_20141006.UpdateDeploymentGroup"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDeploymentGroupInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDeploymentGroupOutput"
            }
          },
          "480": {
            "description": "ApplicationNameRequiredException",
            "schema": {
              "$ref": "#/definitions/ApplicationNameRequiredException"
            }
          },
          "481": {
            "description": "InvalidApplicationNameException",
            "schema": {
              "$ref": "#/definitions/InvalidApplicationNameException"
            }
          },
          "482": {
            "description": "ApplicationDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/ApplicationDoesNotExistException"
            }
          },
          "483": {
            "description": "InvalidDeploymentGroupNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentGroupNameException"
            }
          },
          "484": {
            "description": "DeploymentGroupAlreadyExistsException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupAlreadyExistsException"
            }
          },
          "485": {
            "description": "DeploymentGroupNameRequiredException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupNameRequiredException"
            }
          },
          "486": {
            "description": "DeploymentGroupDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentGroupDoesNotExistException"
            }
          },
          "487": {
            "description": "InvalidEC2TagException",
            "schema": {
              "$ref": "#/definitions/InvalidEC2TagException"
            }
          },
          "488": {
            "description": "InvalidTagException",
            "schema": {
              "$ref": "#/definitions/InvalidTagException"
            }
          },
          "489": {
            "description": "InvalidAutoScalingGroupException",
            "schema": {
              "$ref": "#/definitions/InvalidAutoScalingGroupException"
            }
          },
          "490": {
            "description": "InvalidDeploymentConfigNameException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentConfigNameException"
            }
          },
          "491": {
            "description": "DeploymentConfigDoesNotExistException",
            "schema": {
              "$ref": "#/definitions/DeploymentConfigDoesNotExistException"
            }
          },
          "492": {
            "description": "InvalidRoleException",
            "schema": {
              "$ref": "#/definitions/InvalidRoleException"
            }
          },
          "493": {
            "description": "LifecycleHookLimitExceededException",
            "schema": {
              "$ref": "#/definitions/LifecycleHookLimitExceededException"
            }
          },
          "494": {
            "description": "InvalidTriggerConfigException",
            "schema": {
              "$ref": "#/definitions/InvalidTriggerConfigException"
            }
          },
          "495": {
            "description": "TriggerTargetsLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TriggerTargetsLimitExceededException"
            }
          },
          "496": {
            "description": "InvalidAlarmConfigException",
            "schema": {
              "$ref": "#/definitions/InvalidAlarmConfigException"
            }
          },
          "497": {
            "description": "AlarmsLimitExceededException",
            "schema": {
              "$ref": "#/definitions/AlarmsLimitExceededException"
            }
          },
          "498": {
            "description": "InvalidAutoRollbackConfigException",
            "schema": {
              "$ref": "#/definitions/InvalidAutoRollbackConfigException"
            }
          },
          "499": {
            "description": "InvalidLoadBalancerInfoException",
            "schema": {
              "$ref": "#/definitions/InvalidLoadBalancerInfoException"
            }
          },
          "500": {
            "description": "InvalidDeploymentStyleException",
            "schema": {
              "$ref": "#/definitions/InvalidDeploymentStyleException"
            }
          },
          "501": {
            "description": "InvalidBlueGreenDeploymentConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidBlueGreenDeploymentConfigurationException"
            }
          },
          "502": {
            "description": "InvalidEC2TagCombinationException",
            "schema": {
              "$ref": "#/definitions/InvalidEC2TagCombinationException"
            }
          },
          "503": {
            "description": "InvalidOnPremisesTagCombinationException",
            "schema": {
              "$ref": "#/definitions/InvalidOnPremisesTagCombinationException"
            }
          },
          "504": {
            "description": "TagSetListLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TagSetListLimitExceededException"
            }
          },
          "505": {
            "description": "InvalidInputException",
            "schema": {
              "$ref": "#/definitions/InvalidInputException"
            }
          },
          "506": {
            "description": "ThrottlingException",
            "schema": {
              "$ref": "#/definitions/ThrottlingException"
            }
          },
          "507": {
            "description": "InvalidECSServiceException",
            "schema": {
              "$ref": "#/definitions/InvalidECSServiceException"
            }
          },
          "508": {
            "description": "InvalidTargetGroupPairException",
            "schema": {
              "$ref": "#/definitions/InvalidTargetGroupPairException"
            }
          },
          "509": {
            "description": "ECSServiceMappingLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ECSServiceMappingLimitExceededException"
            }
          },
          "510": {
            "description": "InvalidTrafficRoutingConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidTrafficRoutingConfigurationException"
            }
          }
        },
        "description": "Changes information about a deployment group.",
        "operationId": "UpdateDeploymentGroup"
      }
    }
  },
  "definitions": {
    "AddTagsToOnPremisesInstancesInput": {
      "description": "Represents the input of, and adds tags to, an on-premises instance operation.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "<p>The tag key-value pairs to add to the on-premises instances.</p> <p>Keys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.</p>"
            }
          ]
        },
        "instanceNames": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceNameList"
            },
            {
              "description": "The names of the on-premises instances to which to add tags."
            }
          ]
        }
      },
      "required": [
        "tags",
        "instanceNames"
      ],
      "title": "AddTagsToOnPremisesInstancesInput",
      "type": "object"
    },
    "AdditionalDeploymentStatusInfo": {
      "description": "AdditionalDeploymentStatusInfo is deprecated, use DeploymentStatusMessageList instead.",
      "type": "string",
      "x-deprecated": true
    },
    "Alarm": {
      "description": "Information about an alarm.",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/AlarmName"
            },
            {
              "description": "The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms."
            }
          ]
        }
      },
      "type": "object"
    },
    "AlarmConfiguration": {
      "description": "Information about alarms associated with the deployment group.",
      "properties": {
        "alarms": {
          "allOf": [
            {
              "$ref": "#/definitions/AlarmList"
            },
            {
              "description": "A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group."
            }
          ]
        },
        "enabled": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether the alarm configuration is enabled."
            }
          ]
        },
        "ignorePollAlarmFailure": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p> <ul> <li> <p> <code>true</code>: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li> <li> <p> <code>false</code>: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "AlarmList": {
      "items": {
        "$ref": "#/definitions/Alarm"
      },
      "type": "array"
    },
    "AlarmName": {
      "type": "string"
    },
    "AlarmsLimitExceededException": {},
    "AppSpecContent": {
      "description": " A revision for an AWS Lambda or Amazon ECS deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda and Amazon ECS deployments, the revision is the same as the AppSpec file. This method replaces the deprecated <code>RawString</code> data type. ",
      "properties": {
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/RawStringContent"
            },
            {
              "description": "<p> The YAML-formatted or JSON-formatted revision string. </p> <p> For an AWS Lambda deployment, the content includes a Lambda function name, the alias for its original version, and the alias for its replacement version. The deployment shifts traffic from the original version of the Lambda function to the replacement version. </p> <p> For an Amazon ECS deployment, the content includes the task name, information about the load balancer that serves traffic to the container, and more. </p> <p> For both types of deployments, the content can specify Lambda functions that run at specified hooks, such as <code>BeforeInstall</code>, during a deployment. </p>"
            }
          ]
        },
        "sha256": {
          "allOf": [
            {
              "$ref": "#/definitions/RawStringSha256"
            },
            {
              "description": " The SHA256 hash value of the revision content. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ApplicationAlreadyExistsException": {},
    "ApplicationDoesNotExistException": {},
    "ApplicationId": {
      "type": "string"
    },
    "ApplicationInfo": {
      "description": "Information about an application.",
      "properties": {
        "applicationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationId"
            },
            {
              "description": "The application ID."
            }
          ]
        },
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The application name."
            }
          ]
        },
        "computePlatform": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputePlatform"
            },
            {
              "description": "The destination platform type for deployment of the application (<code>Lambda</code> or <code>Server</code>)."
            }
          ]
        },
        "createTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time at which the application was created."
            }
          ]
        },
        "gitHubAccountName": {
          "allOf": [
            {
              "$ref": "#/definitions/GitHubAccountTokenName"
            },
            {
              "description": "The name for a connection to a GitHub account."
            }
          ]
        },
        "linkedToGitHub": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "True if the user has authenticated with GitHub for the specified application. Otherwise, false."
            }
          ]
        }
      },
      "type": "object"
    },
    "ApplicationLimitExceededException": {},
    "ApplicationName": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "ApplicationNameRequiredException": {},
    "ApplicationRevisionSortBy": {
      "enum": [
        "registerTime",
        "firstUsedTime",
        "lastUsedTime"
      ],
      "type": "string"
    },
    "ApplicationsInfoList": {
      "items": {
        "$ref": "#/definitions/ApplicationInfo"
      },
      "type": "array"
    },
    "ApplicationsList": {
      "items": {
        "$ref": "#/definitions/ApplicationName"
      },
      "type": "array"
    },
    "Arn": {
      "maxLength": 1011,
      "minLength": 1,
      "type": "string"
    },
    "ArnNotSupportedException": {},
    "AutoRollbackConfiguration": {
      "description": "Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.",
      "properties": {
        "enabled": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether a defined automatic rollback configuration is currently enabled."
            }
          ]
        },
        "events": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoRollbackEventsList"
            },
            {
              "description": "The event type or types that trigger a rollback."
            }
          ]
        }
      },
      "type": "object"
    },
    "AutoRollbackEvent": {
      "enum": [
        "DEPLOYMENT_FAILURE",
        "DEPLOYMENT_STOP_ON_ALARM",
        "DEPLOYMENT_STOP_ON_REQUEST"
      ],
      "type": "string"
    },
    "AutoRollbackEventsList": {
      "items": {
        "$ref": "#/definitions/AutoRollbackEvent"
      },
      "type": "array"
    },
    "AutoScalingGroup": {
      "description": "Information about an Auto Scaling group.",
      "properties": {
        "hook": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoScalingGroupHook"
            },
            {
              "description": "An Auto Scaling lifecycle event hook name."
            }
          ]
        },
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoScalingGroupName"
            },
            {
              "description": "The Auto Scaling group name."
            }
          ]
        }
      },
      "type": "object"
    },
    "AutoScalingGroupHook": {
      "type": "string"
    },
    "AutoScalingGroupList": {
      "items": {
        "$ref": "#/definitions/AutoScalingGroup"
      },
      "type": "array"
    },
    "AutoScalingGroupName": {
      "type": "string"
    },
    "AutoScalingGroupNameList": {
      "items": {
        "$ref": "#/definitions/AutoScalingGroupName"
      },
      "type": "array"
    },
    "BatchGetApplicationRevisionsInput": {
      "description": "Represents the input of a <code>BatchGetApplicationRevisions</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application about which to get revision information."
            }
          ]
        },
        "revisions": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocationList"
            },
            {
              "description": "An array of <code>RevisionLocation</code> objects that specify information to get about the application revisions, including type and location. The maximum number of <code>RevisionLocation</code> objects you can specify is 25."
            }
          ]
        }
      },
      "required": [
        "applicationName",
        "revisions"
      ],
      "title": "BatchGetApplicationRevisionsInput",
      "type": "object"
    },
    "BatchGetApplicationRevisionsOutput": {
      "description": "Represents the output of a <code>BatchGetApplicationRevisions</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of the application that corresponds to the revisions."
            }
          ]
        },
        "errorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessage"
            },
            {
              "description": "Information about errors that might have occurred during the API call."
            }
          ]
        },
        "revisions": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionInfoList"
            },
            {
              "description": "Additional information about the revisions, including the type and location."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetApplicationsInput": {
      "description": "Represents the input of a <code>BatchGetApplications</code> operation.",
      "properties": {
        "applicationNames": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationsList"
            },
            {
              "description": "A list of application names separated by spaces. The maximum number of application names you can specify is 100."
            }
          ]
        }
      },
      "required": [
        "applicationNames"
      ],
      "title": "BatchGetApplicationsInput",
      "type": "object"
    },
    "BatchGetApplicationsOutput": {
      "description": "Represents the output of a <code>BatchGetApplications</code> operation.",
      "properties": {
        "applicationsInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationsInfoList"
            },
            {
              "description": "Information about the applications."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetDeploymentGroupsInput": {
      "description": "Represents the input of a <code>BatchGetDeploymentGroups</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
            }
          ]
        },
        "deploymentGroupNames": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupsList"
            },
            {
              "description": "The names of the deployment groups."
            }
          ]
        }
      },
      "required": [
        "applicationName",
        "deploymentGroupNames"
      ],
      "title": "BatchGetDeploymentGroupsInput",
      "type": "object"
    },
    "BatchGetDeploymentGroupsOutput": {
      "description": "Represents the output of a <code>BatchGetDeploymentGroups</code> operation.",
      "properties": {
        "deploymentGroupsInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupInfoList"
            },
            {
              "description": "Information about the deployment groups."
            }
          ]
        },
        "errorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessage"
            },
            {
              "description": "Information about errors that might have occurred during the API call."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetDeploymentInstancesInput": {
      "description": " Represents the input of a <code>BatchGetDeploymentInstances</code> operation. ",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "instanceIds": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancesList"
            },
            {
              "description": "The unique IDs of instances used in the deployment. The maximum number of instance IDs you can specify is 25."
            }
          ]
        }
      },
      "required": [
        "deploymentId",
        "instanceIds"
      ],
      "title": "BatchGetDeploymentInstancesInput",
      "type": "object"
    },
    "BatchGetDeploymentInstancesOutput": {
      "description": "Represents the output of a <code>BatchGetDeploymentInstances</code> operation.",
      "properties": {
        "errorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessage"
            },
            {
              "description": "Information about errors that might have occurred during the API call."
            }
          ]
        },
        "instancesSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceSummaryList"
            },
            {
              "description": "Information about the instance."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetDeploymentTargetsInput": {
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "targetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetIdList"
            },
            {
              "description": "<p> The unique IDs of the deployment targets. The compute platform of the deployment determines the type of the targets and their formats. The maximum number of deployment target IDs you can specify is 25.</p> <ul> <li> <p> For deployments that use the EC2/On-premises compute platform, the target IDs are EC2 or on-premises instances IDs, and their target type is <code>instanceTarget</code>. </p> </li> <li> <p> For deployments that use the AWS Lambda compute platform, the target IDs are the names of Lambda functions, and their target type is <code>instanceTarget</code>. </p> </li> <li> <p> For deployments that use the Amazon ECS compute platform, the target IDs are pairs of Amazon ECS clusters and services specified using the format <code>&lt;clustername&gt;:&lt;servicename&gt;</code>. Their target type is <code>ecsTarget</code>. </p> </li> <li> <p> For deployments that are deployed with AWS CloudFormation, the target IDs are CloudFormation stack IDs. Their target type is <code>cloudFormationTarget</code>. </p> </li> </ul>"
            }
          ]
        }
      },
      "title": "BatchGetDeploymentTargetsInput",
      "type": "object"
    },
    "BatchGetDeploymentTargetsOutput": {
      "properties": {
        "deploymentTargets": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentTargetList"
            },
            {
              "description": "<p> A list of target objects for a deployment. Each target object contains details about the target, such as its status and lifecycle events. The type of the target objects depends on the deployment' compute platform. </p> <ul> <li> <p> <b>EC2/On-premises</b>: Each target object is an EC2 or on-premises instance. </p> </li> <li> <p> <b>AWS Lambda</b>: The target object is a specific version of an AWS Lambda function. </p> </li> <li> <p> <b>Amazon ECS</b>: The target object is an Amazon ECS service. </p> </li> <li> <p> <b>CloudFormation</b>: The target object is an AWS CloudFormation blue/green deployment. </p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetDeploymentsInput": {
      "description": " Represents the input of a <code>BatchGetDeployments</code> operation. ",
      "properties": {
        "deploymentIds": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentsList"
            },
            {
              "description": " A list of deployment IDs, separated by spaces. The maximum number of deployment IDs you can specify is 25."
            }
          ]
        }
      },
      "required": [
        "deploymentIds"
      ],
      "title": "BatchGetDeploymentsInput",
      "type": "object"
    },
    "BatchGetDeploymentsOutput": {
      "description": " Represents the output of a <code>BatchGetDeployments</code> operation. ",
      "properties": {
        "deploymentsInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentsInfoList"
            },
            {
              "description": " Information about the deployments. "
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchGetOnPremisesInstancesInput": {
      "description": "Represents the input of a <code>BatchGetOnPremisesInstances</code> operation.",
      "properties": {
        "instanceNames": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceNameList"
            },
            {
              "description": "The names of the on-premises instances about which to get information. The maximum number of instance names you can specify is 25."
            }
          ]
        }
      },
      "required": [
        "instanceNames"
      ],
      "title": "BatchGetOnPremisesInstancesInput",
      "type": "object"
    },
    "BatchGetOnPremisesInstancesOutput": {
      "description": "Represents the output of a <code>BatchGetOnPremisesInstances</code> operation.",
      "properties": {
        "instanceInfos": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceInfoList"
            },
            {
              "description": "Information about the on-premises instances."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchLimitExceededException": {},
    "BlueGreenDeploymentConfiguration": {
      "description": "Information about blue/green deployment options for a deployment group.",
      "properties": {
        "deploymentReadyOption": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentReadyOption"
            },
            {
              "description": "Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment."
            }
          ]
        },
        "greenFleetProvisioningOption": {
          "allOf": [
            {
              "$ref": "#/definitions/GreenFleetProvisioningOption"
            },
            {
              "description": "Information about how instances are provisioned for a replacement environment in a blue/green deployment."
            }
          ]
        },
        "terminateBlueInstancesOnDeploymentSuccess": {
          "allOf": [
            {
              "$ref": "#/definitions/BlueInstanceTerminationOption"
            },
            {
              "description": "Information about whether to terminate instances in the original fleet during a blue/green deployment."
            }
          ]
        }
      },
      "type": "object"
    },
    "BlueInstanceTerminationOption": {
      "description": "Information about whether instances in the original environment are terminated when a blue/green deployment is successful. <code>BlueInstanceTerminationOption</code> does not apply to Lambda deployments. ",
      "properties": {
        "action": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceAction"
            },
            {
              "description": "<p>The action to take on instances in the original environment after a successful blue/green deployment.</p> <ul> <li> <p> <code>TERMINATE</code>: Instances are terminated after a specified wait time.</p> </li> <li> <p> <code>KEEP_ALIVE</code>: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.</p> </li> </ul>"
            }
          ]
        },
        "terminationWaitTimeInMinutes": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "<p>For an Amazon EC2 deployment, the number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.</p> <p> For an Amazon ECS deployment, the number of minutes before deleting the original (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the original (blue) task set to a replacement (green) task set. </p> <p> The maximum setting is 2880 minutes (2 days). </p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "Boolean": {
      "type": "boolean"
    },
    "BucketNameFilterRequiredException": {},
    "BundleType": {
      "enum": [
        "tar",
        "tgz",
        "zip",
        "YAML",
        "JSON"
      ],
      "type": "string"
    },
    "CloudFormationResourceType": {
      "type": "string"
    },
    "CloudFormationTarget": {
      "description": " Information about the target to be updated by an AWS CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": "The unique ID of an AWS CloudFormation blue/green deployment."
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Time"
            },
            {
              "description": " The date and time when the target application was updated by an AWS CloudFormation blue/green deployment. "
            }
          ]
        },
        "lifecycleEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventList"
            },
            {
              "description": " The lifecycle events of the AWS CloudFormation blue/green deployment to this target application. "
            }
          ]
        },
        "resourceType": {
          "allOf": [
            {
              "$ref": "#/definitions/CloudFormationResourceType"
            },
            {
              "description": "The resource type for the AWS CloudFormation blue/green deployment."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetStatus"
            },
            {
              "description": " The status of an AWS CloudFormation blue/green deployment's target application. "
            }
          ]
        },
        "targetId": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetId"
            },
            {
              "description": " The unique ID of a deployment target that has a type of <code>CloudFormationTarget</code>. "
            }
          ]
        },
        "targetVersionWeight": {
          "allOf": [
            {
              "$ref": "#/definitions/TrafficWeight"
            },
            {
              "description": "The percentage of production traffic that the target version of an AWS CloudFormation blue/green deployment receives."
            }
          ]
        }
      },
      "type": "object"
    },
    "CommitId": {
      "type": "string"
    },
    "ComputePlatform": {
      "enum": [
        "Server",
        "Lambda",
        "ECS"
      ],
      "type": "string"
    },
    "ContinueDeploymentInput": {
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a blue/green deployment for which you want to start rerouting traffic to the replacement environment. "
            }
          ]
        },
        "deploymentWaitType": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentWaitType"
            },
            {
              "description": " The status of the deployment's waiting period. <code>READY_WAIT</code> indicates that the deployment is ready to start shifting traffic. <code>TERMINATION_WAIT</code> indicates that the traffic is shifted, but the original target is not terminated. "
            }
          ]
        }
      },
      "title": "ContinueDeploymentInput",
      "type": "object"
    },
    "CreateApplicationInput": {
      "description": "Represents the input of a <code>CreateApplication</code> operation.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": " The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. "
            }
          ]
        },
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of the application. This name must be unique with the applicable IAM user or AWS account."
            }
          ]
        },
        "computePlatform": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputePlatform"
            },
            {
              "description": " The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>)."
            }
          ]
        }
      },
      "required": [
        "applicationName"
      ],
      "title": "CreateApplicationInput",
      "type": "object"
    },
    "CreateApplicationOutput": {
      "description": "Represents the output of a <code>CreateApplication</code> operation.",
      "properties": {
        "applicationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationId"
            },
            {
              "description": "A unique application ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateDeploymentConfigInput": {
      "description": "Represents the input of a <code>CreateDeploymentConfig</code> operation.",
      "properties": {
        "computePlatform": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputePlatform"
            },
            {
              "description": "The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>)."
            }
          ]
        },
        "deploymentConfigName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigName"
            },
            {
              "description": "The name of the deployment configuration to create."
            }
          ]
        },
        "minimumHealthyHosts": {
          "allOf": [
            {
              "$ref": "#/definitions/MinimumHealthyHosts"
            },
            {
              "description": "<p>The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.</p> <p>The type parameter takes either of the following values:</p> <ul> <li> <p>HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.</p> </li> <li> <p>FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.</p> </li> </ul> <p>The value parameter takes an integer.</p> <p>For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.</p>"
            }
          ]
        },
        "trafficRoutingConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/TrafficRoutingConfig"
            },
            {
              "description": "The configuration that specifies how the deployment traffic is routed."
            }
          ]
        }
      },
      "required": [
        "deploymentConfigName"
      ],
      "title": "CreateDeploymentConfigInput",
      "type": "object"
    },
    "CreateDeploymentConfigOutput": {
      "description": "Represents the output of a <code>CreateDeploymentConfig</code> operation.",
      "properties": {
        "deploymentConfigId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigId"
            },
            {
              "description": "A unique deployment configuration ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateDeploymentGroupInput": {
      "description": "Represents the input of a <code>CreateDeploymentGroup</code> operation.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": " The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. "
            }
          ]
        },
        "alarmConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/AlarmConfiguration"
            },
            {
              "description": "Information to add about Amazon CloudWatch alarms when the deployment group is created."
            }
          ]
        },
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account."
            }
          ]
        },
        "autoRollbackConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoRollbackConfiguration"
            },
            {
              "description": "Configuration information for an automatic rollback that is added when a deployment group is created."
            }
          ]
        },
        "autoScalingGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoScalingGroupNameList"
            },
            {
              "description": "A list of associated Amazon EC2 Auto Scaling groups."
            }
          ]
        },
        "blueGreenDeploymentConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/BlueGreenDeploymentConfiguration"
            },
            {
              "description": "Information about blue/green deployment options for a deployment group."
            }
          ]
        },
        "deploymentConfigName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigName"
            },
            {
              "description": "<p>If specified, the deployment configuration name can be either one of the predefined configurations provided with AWS CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation.</p> <p> <code>CodeDeployDefault.OneAtATime</code> is the default deployment configuration. It is used if a configuration isn't specified for the deployment or deployment group.</p> <p>For more information about the predefined deployment configurations in AWS CodeDeploy, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html\">Working with Deployment Configurations in CodeDeploy</a> in the <i>AWS CodeDeploy User Guide</i>.</p>"
            }
          ]
        },
        "deploymentGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupName"
            },
            {
              "description": "The name of a new deployment group for the specified application."
            }
          ]
        },
        "deploymentStyle": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentStyle"
            },
            {
              "description": "Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer."
            }
          ]
        },
        "ec2TagFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagFilterList"
            },
            {
              "description": "The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet."
            }
          ]
        },
        "ec2TagSet": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagSet"
            },
            {
              "description": "Information about groups of tags applied to EC2 instances. The deployment group includes only EC2 instances identified by all the tag groups. Cannot be used in the same call as <code>ec2TagFilters</code>."
            }
          ]
        },
        "ecsServices": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSServiceList"
            },
            {
              "description": " The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>&lt;clustername&gt;:&lt;servicename&gt;</code>. "
            }
          ]
        },
        "loadBalancerInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LoadBalancerInfo"
            },
            {
              "description": "Information about the load balancer used in a deployment."
            }
          ]
        },
        "onPremisesInstanceTagFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/TagFilterList"
            },
            {
              "description": "The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as <code>OnPremisesTagSet</code>."
            }
          ]
        },
        "onPremisesTagSet": {
          "allOf": [
            {
              "$ref": "#/definitions/OnPremisesTagSet"
            },
            {
              "description": "Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as <code>onPremisesInstanceTagFilters</code>."
            }
          ]
        },
        "serviceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Role"
            },
            {
              "description": "A service role Amazon Resource Name (ARN) that allows AWS CodeDeploy to act on the user's behalf when interacting with AWS services."
            }
          ]
        },
        "triggerConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerConfigList"
            },
            {
              "description": "Information about triggers to create when the deployment group is created. For examples, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html\">Create a Trigger for an AWS CodeDeploy Event</a> in the <i>AWS CodeDeploy User Guide</i>."
            }
          ]
        }
      },
      "required": [
        "applicationName",
        "deploymentGroupName",
        "serviceRoleArn"
      ],
      "title": "CreateDeploymentGroupInput",
      "type": "object"
    },
    "CreateDeploymentGroupOutput": {
      "description": "Represents the output of a <code>CreateDeploymentGroup</code> operation.",
      "properties": {
        "deploymentGroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupId"
            },
            {
              "description": "A unique deployment group ID."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateDeploymentInput": {
      "description": "Represents the input of a <code>CreateDeployment</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account."
            }
          ]
        },
        "autoRollbackConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoRollbackConfiguration"
            },
            {
              "description": "Configuration information for an automatic rollback that is added when a deployment is created."
            }
          ]
        },
        "deploymentConfigName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigName"
            },
            {
              "description": "<p>The name of a deployment configuration associated with the IAM user or AWS account.</p> <p>If not specified, the value configured in the deployment group is used as the default. If the deployment group does not have a deployment configuration associated with it, <code>CodeDeployDefault</code>.<code>OneAtATime</code> is used by default.</p>"
            }
          ]
        },
        "deploymentGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupName"
            },
            {
              "description": "The name of the deployment group."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A comment about the deployment."
            }
          ]
        },
        "fileExistsBehavior": {
          "allOf": [
            {
              "$ref": "#/definitions/FileExistsBehavior"
            },
            {
              "description": "<p>Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.</p> <p>The <code>fileExistsBehavior</code> parameter takes any of the following values:</p> <ul> <li> <p>DISALLOW: The deployment fails. This is also the default behavior if no option is specified.</p> </li> <li> <p>OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.</p> </li> <li> <p>RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.</p> </li> </ul>"
            }
          ]
        },
        "ignoreApplicationStopFailures": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p> If true, then if an <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, or <code>AfterBlockTraffic</code> deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if <code>ApplicationStop</code> fails, the deployment continues with <code>DownloadBundle</code>. If <code>BeforeBlockTraffic</code> fails, the deployment continues with <code>BlockTraffic</code>. If <code>AfterBlockTraffic</code> fails, the deployment continues with <code>ApplicationStop</code>. </p> <p> If false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted. </p> <p> During a deployment, the AWS CodeDeploy agent runs the scripts specified for <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail. </p> <p> If the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use <code>ignoreApplicationStopFailures</code> to specify that the <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> failures should be ignored. </p>"
            }
          ]
        },
        "revision": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocation"
            },
            {
              "description": " The type and location of the revision to deploy. "
            }
          ]
        },
        "targetInstances": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetInstances"
            },
            {
              "description": " Information about the instances that belong to the replacement environment in a blue/green deployment. "
            }
          ]
        },
        "updateOutdatedInstancesOnly": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": " Indicates whether to deploy to all instances or only to instances that are not running the latest application revision. "
            }
          ]
        }
      },
      "required": [
        "applicationName"
      ],
      "title": "CreateDeploymentInput",
      "type": "object"
    },
    "CreateDeploymentOutput": {
      "description": " Represents the output of a <code>CreateDeployment</code> operation. ",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteApplicationInput": {
      "description": "Represents the input of a <code>DeleteApplication</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account."
            }
          ]
        }
      },
      "required": [
        "applicationName"
      ],
      "title": "DeleteApplicationInput",
      "type": "object"
    },
    "DeleteDeploymentConfigInput": {
      "description": "Represents the input of a <code>DeleteDeploymentConfig</code> operation.",
      "properties": {
        "deploymentConfigName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigName"
            },
            {
              "description": "The name of a deployment configuration associated with the IAM user or AWS account."
            }
          ]
        }
      },
      "required": [
        "deploymentConfigName"
      ],
      "title": "DeleteDeploymentConfigInput",
      "type": "object"
    },
    "DeleteDeploymentGroupInput": {
      "description": "Represents the input of a <code>DeleteDeploymentGroup</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account."
            }
          ]
        },
        "deploymentGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupName"
            },
            {
              "description": "The name of a deployment group for the specified application."
            }
          ]
        }
      },
      "required": [
        "applicationName",
        "deploymentGroupName"
      ],
      "title": "DeleteDeploymentGroupInput",
      "type": "object"
    },
    "DeleteDeploymentGroupOutput": {
      "description": "Represents the output of a <code>DeleteDeploymentGroup</code> operation.",
      "properties": {
        "hooksNotCleanedUp": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoScalingGroupList"
            },
            {
              "description": "If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteGitHubAccountTokenInput": {
      "description": "Represents the input of a <code>DeleteGitHubAccount</code> operation.",
      "properties": {
        "tokenName": {
          "allOf": [
            {
              "$ref": "#/definitions/GitHubAccountTokenName"
            },
            {
              "description": "The name of the GitHub account connection to delete."
            }
          ]
        }
      },
      "title": "DeleteGitHubAccountTokenInput",
      "type": "object"
    },
    "DeleteGitHubAccountTokenOutput": {
      "description": "Represents the output of a <code>DeleteGitHubAccountToken</code> operation.",
      "properties": {
        "tokenName": {
          "allOf": [
            {
              "$ref": "#/definitions/GitHubAccountTokenName"
            },
            {
              "description": "The name of the GitHub account connection that was deleted."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeleteResourcesByExternalIdInput": {
      "properties": {
        "externalId": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalId"
            },
            {
              "description": "The unique ID of an external resource (for example, a CloudFormation stack ID) that is linked to one or more CodeDeploy resources."
            }
          ]
        }
      },
      "title": "DeleteResourcesByExternalIdInput",
      "type": "object"
    },
    "DeleteResourcesByExternalIdOutput": {
      "properties": {},
      "type": "object"
    },
    "DeploymentAlreadyCompletedException": {},
    "DeploymentConfigAlreadyExistsException": {},
    "DeploymentConfigDoesNotExistException": {},
    "DeploymentConfigId": {
      "type": "string"
    },
    "DeploymentConfigInUseException": {},
    "DeploymentConfigInfo": {
      "description": "Information about a deployment configuration.",
      "properties": {
        "computePlatform": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputePlatform"
            },
            {
              "description": "The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>)."
            }
          ]
        },
        "createTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time at which the deployment configuration was created."
            }
          ]
        },
        "deploymentConfigId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigId"
            },
            {
              "description": "The deployment configuration ID."
            }
          ]
        },
        "deploymentConfigName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigName"
            },
            {
              "description": "The deployment configuration name."
            }
          ]
        },
        "minimumHealthyHosts": {
          "allOf": [
            {
              "$ref": "#/definitions/MinimumHealthyHosts"
            },
            {
              "description": "Information about the number or percentage of minimum healthy instance."
            }
          ]
        },
        "trafficRoutingConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/TrafficRoutingConfig"
            },
            {
              "description": "The configuration that specifies how the deployment traffic is routed. Used for deployments with a Lambda or ECS compute platform only."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeploymentConfigLimitExceededException": {},
    "DeploymentConfigName": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "DeploymentConfigNameRequiredException": {},
    "DeploymentConfigsList": {
      "items": {
        "$ref": "#/definitions/DeploymentConfigName"
      },
      "type": "array"
    },
    "DeploymentCreator": {
      "enum": [
        "user",
        "autoscaling",
        "codeDeployRollback",
        "CodeDeploy",
        "CloudFormation",
        "CloudFormationRollback"
      ],
      "type": "string"
    },
    "DeploymentDoesNotExistException": {},
    "DeploymentGroupAlreadyExistsException": {},
    "DeploymentGroupDoesNotExistException": {},
    "DeploymentGroupId": {
      "type": "string"
    },
    "DeploymentGroupInfo": {
      "description": "Information about a deployment group.",
      "properties": {
        "alarmConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/AlarmConfiguration"
            },
            {
              "description": "A list of alarms associated with the deployment group."
            }
          ]
        },
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The application name."
            }
          ]
        },
        "autoRollbackConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoRollbackConfiguration"
            },
            {
              "description": "Information about the automatic rollback configuration associated with the deployment group."
            }
          ]
        },
        "autoScalingGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoScalingGroupList"
            },
            {
              "description": "A list of associated Auto Scaling groups."
            }
          ]
        },
        "blueGreenDeploymentConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/BlueGreenDeploymentConfiguration"
            },
            {
              "description": "Information about blue/green deployment options for a deployment group."
            }
          ]
        },
        "computePlatform": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputePlatform"
            },
            {
              "description": "The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>)."
            }
          ]
        },
        "deploymentConfigName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigName"
            },
            {
              "description": "The deployment configuration name."
            }
          ]
        },
        "deploymentGroupId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupId"
            },
            {
              "description": "The deployment group ID."
            }
          ]
        },
        "deploymentGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupName"
            },
            {
              "description": "The deployment group name."
            }
          ]
        },
        "deploymentStyle": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentStyle"
            },
            {
              "description": "Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer."
            }
          ]
        },
        "ec2TagFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagFilterList"
            },
            {
              "description": "The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags."
            }
          ]
        },
        "ec2TagSet": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagSet"
            },
            {
              "description": "Information about groups of tags applied to an EC2 instance. The deployment group includes only EC2 instances identified by all of the tag groups. Cannot be used in the same call as ec2TagFilters."
            }
          ]
        },
        "ecsServices": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSServiceList"
            },
            {
              "description": " The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>&lt;clustername&gt;:&lt;servicename&gt;</code>. "
            }
          ]
        },
        "lastAttemptedDeployment": {
          "allOf": [
            {
              "$ref": "#/definitions/LastDeploymentInfo"
            },
            {
              "description": "Information about the most recent attempted deployment to the deployment group."
            }
          ]
        },
        "lastSuccessfulDeployment": {
          "allOf": [
            {
              "$ref": "#/definitions/LastDeploymentInfo"
            },
            {
              "description": "Information about the most recent successful deployment to the deployment group."
            }
          ]
        },
        "loadBalancerInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LoadBalancerInfo"
            },
            {
              "description": "Information about the load balancer to use in a deployment."
            }
          ]
        },
        "onPremisesInstanceTagFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/TagFilterList"
            },
            {
              "description": "The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags."
            }
          ]
        },
        "onPremisesTagSet": {
          "allOf": [
            {
              "$ref": "#/definitions/OnPremisesTagSet"
            },
            {
              "description": "Information about groups of tags applied to an on-premises instance. The deployment group includes only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters."
            }
          ]
        },
        "serviceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Role"
            },
            {
              "description": "A service role Amazon Resource Name (ARN) that grants CodeDeploy permission to make calls to AWS services on your behalf. For more information, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html\">Create a Service Role for AWS CodeDeploy</a> in the <i>AWS CodeDeploy User Guide</i>."
            }
          ]
        },
        "targetRevision": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocation"
            },
            {
              "description": "Information about the deployment group's target revision, including type and location."
            }
          ]
        },
        "triggerConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerConfigList"
            },
            {
              "description": "Information about triggers associated with the deployment group."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeploymentGroupInfoList": {
      "items": {
        "$ref": "#/definitions/DeploymentGroupInfo"
      },
      "type": "array"
    },
    "DeploymentGroupLimitExceededException": {},
    "DeploymentGroupName": {
      "maxLength": 100,
      "minLength": 1,
      "type": "string"
    },
    "DeploymentGroupNameRequiredException": {},
    "DeploymentGroupsList": {
      "items": {
        "$ref": "#/definitions/DeploymentGroupName"
      },
      "type": "array"
    },
    "DeploymentId": {
      "type": "string"
    },
    "DeploymentIdRequiredException": {},
    "DeploymentInfo": {
      "description": "Information about a deployment.",
      "properties": {
        "additionalDeploymentStatusInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/AdditionalDeploymentStatusInfo"
            },
            {
              "description": "Provides information about the results of a deployment, such as whether instances in the original environment in a blue/green deployment were not terminated."
            }
          ]
        },
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The application name."
            }
          ]
        },
        "autoRollbackConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoRollbackConfiguration"
            },
            {
              "description": "Information about the automatic rollback configuration associated with the deployment."
            }
          ]
        },
        "blueGreenDeploymentConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/BlueGreenDeploymentConfiguration"
            },
            {
              "description": "Information about blue/green deployment options for this deployment."
            }
          ]
        },
        "completeTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "A timestamp that indicates when the deployment was complete."
            }
          ]
        },
        "computePlatform": {
          "allOf": [
            {
              "$ref": "#/definitions/ComputePlatform"
            },
            {
              "description": "The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>)."
            }
          ]
        },
        "createTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "A timestamp that indicates when the deployment was created."
            }
          ]
        },
        "creator": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentCreator"
            },
            {
              "description": "<p>The means by which the deployment was created:</p> <ul> <li> <p> <code>user</code>: A user created the deployment.</p> </li> <li> <p> <code>autoscaling</code>: Amazon EC2 Auto Scaling created the deployment.</p> </li> <li> <p> <code>codeDeployRollback</code>: A rollback process created the deployment.</p> </li> </ul>"
            }
          ]
        },
        "deploymentConfigName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigName"
            },
            {
              "description": " The deployment configuration name. "
            }
          ]
        },
        "deploymentGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupName"
            },
            {
              "description": " The deployment group name. "
            }
          ]
        },
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "deploymentOverview": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentOverview"
            },
            {
              "description": "A summary of the deployment status of the instances in the deployment."
            }
          ]
        },
        "deploymentStatusMessages": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentStatusMessageList"
            },
            {
              "description": "Messages that contain information about the status of a deployment."
            }
          ]
        },
        "deploymentStyle": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentStyle"
            },
            {
              "description": "Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A comment about the deployment."
            }
          ]
        },
        "errorInformation": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorInformation"
            },
            {
              "description": "Information about any error associated with this deployment."
            }
          ]
        },
        "externalId": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalId"
            },
            {
              "description": "The unique ID for an external resource (for example, a CloudFormation stack ID) that is linked to this deployment."
            }
          ]
        },
        "fileExistsBehavior": {
          "allOf": [
            {
              "$ref": "#/definitions/FileExistsBehavior"
            },
            {
              "description": "<p>Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.</p> <ul> <li> <p> <code>DISALLOW</code>: The deployment fails. This is also the default behavior if no option is specified.</p> </li> <li> <p> <code>OVERWRITE</code>: The version of the file from the application revision currently being deployed replaces the version already on the instance.</p> </li> <li> <p> <code>RETAIN</code>: The version of the file already on the instance is kept and used as part of the new deployment.</p> </li> </ul>"
            }
          ]
        },
        "ignoreApplicationStopFailures": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "<p> If true, then if an <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, or <code>AfterBlockTraffic</code> deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if <code>ApplicationStop</code> fails, the deployment continues with DownloadBundle. If <code>BeforeBlockTraffic</code> fails, the deployment continues with <code>BlockTraffic</code>. If <code>AfterBlockTraffic</code> fails, the deployment continues with <code>ApplicationStop</code>. </p> <p> If false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted. </p> <p> During a deployment, the AWS CodeDeploy agent runs the scripts specified for <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail. </p> <p> If the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use <code>ignoreApplicationStopFailures</code> to specify that the <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> failures should be ignored. </p>"
            }
          ]
        },
        "instanceTerminationWaitTimeStarted": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether the wait period set for the termination of instances in the original environment has started. Status is 'false' if the KEEP_ALIVE option is specified. Otherwise, 'true' as soon as the termination wait period starts."
            }
          ]
        },
        "loadBalancerInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LoadBalancerInfo"
            },
            {
              "description": "Information about the load balancer used in the deployment."
            }
          ]
        },
        "previousRevision": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocation"
            },
            {
              "description": "Information about the application revision that was deployed to the deployment group before the most recent successful deployment."
            }
          ]
        },
        "revision": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocation"
            },
            {
              "description": "Information about the location of stored application artifacts and the service from which to retrieve them."
            }
          ]
        },
        "rollbackInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/RollbackInfo"
            },
            {
              "description": "Information about a deployment rollback."
            }
          ]
        },
        "startTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "<p>A timestamp that indicates when the deployment was deployed to the deployment group.</p> <p>In some cases, the reported value of the start time might be later than the complete time. This is due to differences in the clock settings of backend servers that participate in the deployment process.</p>"
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentStatus"
            },
            {
              "description": "The current state of the deployment as a whole."
            }
          ]
        },
        "targetInstances": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetInstances"
            },
            {
              "description": "Information about the instances that belong to the replacement environment in a blue/green deployment."
            }
          ]
        },
        "updateOutdatedInstancesOnly": {
          "allOf": [
            {
              "$ref": "#/definitions/Boolean"
            },
            {
              "description": "Indicates whether only instances that are not running the latest application revision are to be deployed to."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeploymentIsNotInReadyStateException": {},
    "DeploymentLimitExceededException": {},
    "DeploymentNotStartedException": {},
    "DeploymentOption": {
      "enum": [
        "WITH_TRAFFIC_CONTROL",
        "WITHOUT_TRAFFIC_CONTROL"
      ],
      "type": "string"
    },
    "DeploymentOverview": {
      "description": "Information about the deployment status of the instances in the deployment.",
      "properties": {
        "Failed": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceCount"
            },
            {
              "description": "The number of instances in the deployment in a failed state."
            }
          ]
        },
        "InProgress": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceCount"
            },
            {
              "description": "The number of instances in which the deployment is in progress."
            }
          ]
        },
        "Pending": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceCount"
            },
            {
              "description": "The number of instances in the deployment in a pending state."
            }
          ]
        },
        "Ready": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceCount"
            },
            {
              "description": "The number of instances in a replacement environment ready to receive traffic in a blue/green deployment."
            }
          ]
        },
        "Skipped": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceCount"
            },
            {
              "description": "The number of instances in the deployment in a skipped state."
            }
          ]
        },
        "Succeeded": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceCount"
            },
            {
              "description": "The number of instances in the deployment to which revisions have been successfully deployed."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeploymentReadyAction": {
      "enum": [
        "CONTINUE_DEPLOYMENT",
        "STOP_DEPLOYMENT"
      ],
      "type": "string"
    },
    "DeploymentReadyOption": {
      "description": "Information about how traffic is rerouted to instances in a replacement environment in a blue/green deployment.",
      "properties": {
        "actionOnTimeout": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentReadyAction"
            },
            {
              "description": "<p>Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.</p> <ul> <li> <p>CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.</p> </li> <li> <p>STOP_DEPLOYMENT: Do not register new instances with a load balancer unless traffic rerouting is started using <a>ContinueDeployment</a>. If traffic rerouting is not started before the end of the specified wait period, the deployment status is changed to Stopped.</p> </li> </ul>"
            }
          ]
        },
        "waitTimeInMinutes": {
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "description": "The number of minutes to wait before the status of a blue/green deployment is changed to Stopped if rerouting is not started manually. Applies only to the <code>STOP_DEPLOYMENT</code> option for <code>actionOnTimeout</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeploymentStatus": {
      "enum": [
        "Created",
        "Queued",
        "InProgress",
        "Baking",
        "Succeeded",
        "Failed",
        "Stopped",
        "Ready"
      ],
      "type": "string"
    },
    "DeploymentStatusList": {
      "items": {
        "$ref": "#/definitions/DeploymentStatus"
      },
      "type": "array"
    },
    "DeploymentStatusMessageList": {
      "items": {
        "$ref": "#/definitions/ErrorMessage"
      },
      "type": "array"
    },
    "DeploymentStyle": {
      "description": "Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.",
      "properties": {
        "deploymentOption": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentOption"
            },
            {
              "description": "Indicates whether to route deployment traffic behind a load balancer."
            }
          ]
        },
        "deploymentType": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentType"
            },
            {
              "description": "Indicates whether to run an in-place deployment or a blue/green deployment."
            }
          ]
        }
      },
      "type": "object"
    },
    "DeploymentTarget": {
      "description": " Information about the deployment target. ",
      "properties": {
        "cloudFormationTarget": {
          "$ref": "#/definitions/CloudFormationTarget"
        },
        "deploymentTargetType": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentTargetType"
            },
            {
              "description": "The deployment type that is specific to the deployment's compute platform or deployments initiated by a CloudFormation stack update."
            }
          ]
        },
        "ecsTarget": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSTarget"
            },
            {
              "description": " Information about the target for a deployment that uses the Amazon ECS compute platform. "
            }
          ]
        },
        "instanceTarget": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceTarget"
            },
            {
              "description": " Information about the target for a deployment that uses the EC2/On-premises compute platform. "
            }
          ]
        },
        "lambdaTarget": {
          "allOf": [
            {
              "$ref": "#/definitions/LambdaTarget"
            },
            {
              "description": " Information about the target for a deployment that uses the AWS Lambda compute platform. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DeploymentTargetDoesNotExistException": {},
    "DeploymentTargetIdRequiredException": {},
    "DeploymentTargetList": {
      "items": {
        "$ref": "#/definitions/DeploymentTarget"
      },
      "type": "array"
    },
    "DeploymentTargetListSizeExceededException": {},
    "DeploymentTargetType": {
      "enum": [
        "InstanceTarget",
        "LambdaTarget",
        "ECSTarget",
        "CloudFormationTarget"
      ],
      "type": "string"
    },
    "DeploymentType": {
      "enum": [
        "IN_PLACE",
        "BLUE_GREEN"
      ],
      "type": "string"
    },
    "DeploymentWaitType": {
      "enum": [
        "READY_WAIT",
        "TERMINATION_WAIT"
      ],
      "type": "string"
    },
    "DeploymentsInfoList": {
      "items": {
        "$ref": "#/definitions/DeploymentInfo"
      },
      "type": "array"
    },
    "DeploymentsList": {
      "items": {
        "$ref": "#/definitions/DeploymentId"
      },
      "type": "array"
    },
    "DeregisterOnPremisesInstanceInput": {
      "description": "Represents the input of a <code>DeregisterOnPremisesInstance</code> operation.",
      "properties": {
        "instanceName": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceName"
            },
            {
              "description": "The name of the on-premises instance to deregister."
            }
          ]
        }
      },
      "required": [
        "instanceName"
      ],
      "title": "DeregisterOnPremisesInstanceInput",
      "type": "object"
    },
    "Description": {
      "type": "string"
    },
    "DescriptionTooLongException": {},
    "Diagnostics": {
      "description": "Diagnostic information about executable scripts that are part of a deployment.",
      "properties": {
        "errorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleErrorCode"
            },
            {
              "description": "<p>The associated error code:</p> <ul> <li> <p>Success: The specified script ran.</p> </li> <li> <p>ScriptMissing: The specified script was not found in the specified location.</p> </li> <li> <p>ScriptNotExecutable: The specified script is not a recognized executable file type.</p> </li> <li> <p>ScriptTimedOut: The specified script did not finish running in the specified time period.</p> </li> <li> <p>ScriptFailed: The specified script failed to run as expected.</p> </li> <li> <p>UnknownError: The specified script did not run for an unknown reason.</p> </li> </ul>"
            }
          ]
        },
        "logTail": {
          "allOf": [
            {
              "$ref": "#/definitions/LogTail"
            },
            {
              "description": "<p>The last portion of the diagnostic log.</p> <p>If available, AWS CodeDeploy returns up to the last 4 KB of the diagnostic log.</p>"
            }
          ]
        },
        "message": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleMessage"
            },
            {
              "description": "The message associated with the error."
            }
          ]
        },
        "scriptName": {
          "allOf": [
            {
              "$ref": "#/definitions/ScriptName"
            },
            {
              "description": "The name of the script."
            }
          ]
        }
      },
      "type": "object"
    },
    "Duration": {
      "type": "integer"
    },
    "EC2TagFilter": {
      "description": "Information about an EC2 tag filter.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/Key"
            },
            {
              "description": "The tag filter key."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagFilterType"
            },
            {
              "description": "<p>The tag filter type:</p> <ul> <li> <p> <code>KEY_ONLY</code>: Key only.</p> </li> <li> <p> <code>VALUE_ONLY</code>: Value only.</p> </li> <li> <p> <code>KEY_AND_VALUE</code>: Key and value.</p> </li> </ul>"
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/Value"
            },
            {
              "description": "The tag filter value."
            }
          ]
        }
      },
      "type": "object"
    },
    "EC2TagFilterList": {
      "items": {
        "$ref": "#/definitions/EC2TagFilter"
      },
      "type": "array"
    },
    "EC2TagFilterType": {
      "enum": [
        "KEY_ONLY",
        "VALUE_ONLY",
        "KEY_AND_VALUE"
      ],
      "type": "string"
    },
    "EC2TagSet": {
      "description": "Information about groups of EC2 instance tags.",
      "properties": {
        "ec2TagSetList": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagSetList"
            },
            {
              "description": "A list that contains other lists of EC2 instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "EC2TagSetList": {
      "items": {
        "$ref": "#/definitions/EC2TagFilterList"
      },
      "type": "array"
    },
    "ECSClusterName": {
      "type": "string"
    },
    "ECSService": {
      "description": " Contains the service and cluster names used to identify an Amazon ECS deployment's target. ",
      "properties": {
        "clusterName": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSClusterName"
            },
            {
              "description": " The name of the cluster that the Amazon ECS service is associated with. "
            }
          ]
        },
        "serviceName": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSServiceName"
            },
            {
              "description": " The name of the target Amazon ECS service. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ECSServiceList": {
      "items": {
        "$ref": "#/definitions/ECSService"
      },
      "type": "array"
    },
    "ECSServiceMappingLimitExceededException": {},
    "ECSServiceName": {
      "type": "string"
    },
    "ECSTarget": {
      "description": " Information about the target of an Amazon ECS deployment. ",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Time"
            },
            {
              "description": " The date and time when the target Amazon ECS application was updated by a deployment. "
            }
          ]
        },
        "lifecycleEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventList"
            },
            {
              "description": " The lifecycle events of the deployment to this target Amazon ECS application. "
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetStatus"
            },
            {
              "description": " The status an Amazon ECS deployment's target ECS application. "
            }
          ]
        },
        "targetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetArn"
            },
            {
              "description": " The Amazon Resource Name (ARN) of the target. "
            }
          ]
        },
        "targetId": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetId"
            },
            {
              "description": " The unique ID of a deployment target that has a type of <code>ecsTarget</code>. "
            }
          ]
        },
        "taskSetsInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSTaskSetList"
            },
            {
              "description": " The <code>ECSTaskSet</code> objects associated with the ECS target. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ECSTaskSet": {
      "description": " Information about a set of Amazon ECS tasks in an AWS CodeDeploy deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic. An AWS CodeDeploy application that uses the Amazon ECS compute platform deploys a containerized application in an Amazon ECS service as a task set. ",
      "properties": {
        "desiredCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSTaskSetCount"
            },
            {
              "description": " The number of tasks in a task set. During a deployment that uses the Amazon ECS compute type, CodeDeploy instructs Amazon ECS to create a new task set and uses this value to determine how many tasks to create. After the updated task set is created, CodeDeploy shifts traffic to the new task set. "
            }
          ]
        },
        "identifer": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSTaskSetIdentifier"
            },
            {
              "description": " A unique ID of an <code>ECSTaskSet</code>. "
            }
          ]
        },
        "pendingCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSTaskSetCount"
            },
            {
              "description": " The number of tasks in the task set that are in the <code>PENDING</code> status during an Amazon ECS deployment. A task in the <code>PENDING</code> state is preparing to enter the <code>RUNNING</code> state. A task set enters the <code>PENDING</code> status when it launches for the first time, or when it is restarted after being in the <code>STOPPED</code> state. "
            }
          ]
        },
        "runningCount": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSTaskSetCount"
            },
            {
              "description": " The number of tasks in the task set that are in the <code>RUNNING</code> status during an Amazon ECS deployment. A task in the <code>RUNNING</code> state is running and ready for use. "
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSTaskSetStatus"
            },
            {
              "description": "<p> The status of the task set. There are three valid task set statuses: </p> <ul> <li> <p> <code>PRIMARY</code>: Indicates the task set is serving production traffic. </p> </li> <li> <p> <code>ACTIVE</code>: Indicates the task set is not serving production traffic. </p> </li> <li> <p> <code>DRAINING</code>: Indicates the tasks in the task set are being stopped and their corresponding targets are being deregistered from their target group. </p> </li> </ul>"
            }
          ]
        },
        "targetGroup": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetGroupInfo"
            },
            {
              "description": " The target group associated with the task set. The target group is used by AWS CodeDeploy to manage traffic to a task set. "
            }
          ]
        },
        "taskSetLabel": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLabel"
            },
            {
              "description": " A label that identifies whether the ECS task set is an original target (<code>BLUE</code>) or a replacement target (<code>GREEN</code>). "
            }
          ]
        },
        "trafficWeight": {
          "allOf": [
            {
              "$ref": "#/definitions/TrafficWeight"
            },
            {
              "description": " The percentage of traffic served by this task set. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ECSTaskSetCount": {
      "type": "integer"
    },
    "ECSTaskSetIdentifier": {
      "type": "string"
    },
    "ECSTaskSetList": {
      "items": {
        "$ref": "#/definitions/ECSTaskSet"
      },
      "type": "array"
    },
    "ECSTaskSetStatus": {
      "type": "string"
    },
    "ELBInfo": {
      "description": "Information about a load balancer in Elastic Load Balancing to use in a deployment. Instances are registered directly with a load balancer, and traffic is routed to the load balancer.",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/ELBName"
            },
            {
              "description": "For blue/green deployments, the name of the load balancer that is used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete."
            }
          ]
        }
      },
      "type": "object"
    },
    "ELBInfoList": {
      "items": {
        "$ref": "#/definitions/ELBInfo"
      },
      "type": "array"
    },
    "ELBName": {
      "type": "string"
    },
    "ETag": {
      "type": "string"
    },
    "ErrorCode": {
      "enum": [
        "AGENT_ISSUE",
        "ALARM_ACTIVE",
        "APPLICATION_MISSING",
        "AUTOSCALING_VALIDATION_ERROR",
        "AUTO_SCALING_CONFIGURATION",
        "AUTO_SCALING_IAM_ROLE_PERMISSIONS",
        "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND",
        "CUSTOMER_APPLICATION_UNHEALTHY",
        "DEPLOYMENT_GROUP_MISSING",
        "ECS_UPDATE_ERROR",
        "ELASTIC_LOAD_BALANCING_INVALID",
        "ELB_INVALID_INSTANCE",
        "HEALTH_CONSTRAINTS",
        "HEALTH_CONSTRAINTS_INVALID",
        "HOOK_EXECUTION_FAILURE",
        "IAM_ROLE_MISSING",
        "IAM_ROLE_PERMISSIONS",
        "INTERNAL_ERROR",
        "INVALID_ECS_SERVICE",
        "INVALID_LAMBDA_CONFIGURATION",
        "INVALID_LAMBDA_FUNCTION",
        "INVALID_REVISION",
        "MANUAL_STOP",
        "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION",
        "MISSING_ELB_INFORMATION",
        "MISSING_GITHUB_TOKEN",
        "NO_EC2_SUBSCRIPTION",
        "NO_INSTANCES",
        "OVER_MAX_INSTANCES",
        "RESOURCE_LIMIT_EXCEEDED",
        "REVISION_MISSING",
        "THROTTLED",
        "TIMEOUT",
        "CLOUDFORMATION_STACK_FAILURE"
      ],
      "type": "string"
    },
    "ErrorInformation": {
      "description": "Information about a deployment error.",
      "properties": {
        "code": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorCode"
            },
            {
              "description": "<p>For more information, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/error-codes.html\">Error Codes for AWS CodeDeploy</a> in the <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide\">AWS CodeDeploy User Guide</a>.</p> <p>The error code:</p> <ul> <li> <p>APPLICATION_MISSING: The application was missing. This error code is most likely raised if the application is deleted after the deployment is created, but before it is started.</p> </li> <li> <p>DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code is most likely raised if the deployment group is deleted after the deployment is created, but before it is started.</p> </li> <li> <p>HEALTH_CONSTRAINTS: The deployment failed on too many instances to be successfully deployed within the instance health constraints specified.</p> </li> <li> <p>HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed within the instance health constraints specified.</p> </li> <li> <p>IAM_ROLE_MISSING: The service role cannot be accessed.</p> </li> <li> <p>IAM_ROLE_PERMISSIONS: The service role does not have the correct permissions.</p> </li> <li> <p>INTERNAL_ERROR: There was an internal error.</p> </li> <li> <p>NO_EC2_SUBSCRIPTION: The calling account is not subscribed to Amazon EC2.</p> </li> <li> <p>NO_INSTANCES: No instances were specified, or no instances can be found.</p> </li> <li> <p>OVER_MAX_INSTANCES: The maximum number of instances was exceeded.</p> </li> <li> <p>THROTTLED: The operation was throttled because the calling account exceeded the throttling limits of one or more AWS services.</p> </li> <li> <p>TIMEOUT: The deployment has timed out.</p> </li> <li> <p>REVISION_MISSING: The revision ID was missing. This error code is most likely raised if the revision is deleted after the deployment is created, but before it is started.</p> </li> </ul>"
            }
          ]
        },
        "message": {
          "allOf": [
            {
              "$ref": "#/definitions/ErrorMessage"
            },
            {
              "description": "An accompanying error message."
            }
          ]
        }
      },
      "type": "object"
    },
    "ErrorMessage": {
      "type": "string"
    },
    "ExternalId": {
      "type": "string"
    },
    "FileExistsBehavior": {
      "enum": [
        "DISALLOW",
        "OVERWRITE",
        "RETAIN"
      ],
      "type": "string"
    },
    "FilterValue": {
      "type": "string"
    },
    "FilterValueList": {
      "items": {
        "$ref": "#/definitions/FilterValue"
      },
      "type": "array"
    },
    "GenericRevisionInfo": {
      "description": "Information about an application revision.",
      "properties": {
        "deploymentGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupsList"
            },
            {
              "description": "The deployment groups for which this is the current target revision."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A comment about the revision."
            }
          ]
        },
        "firstUsedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "When the revision was first used by AWS CodeDeploy."
            }
          ]
        },
        "lastUsedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "When the revision was last used by AWS CodeDeploy."
            }
          ]
        },
        "registerTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "When the revision was registered with AWS CodeDeploy."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetApplicationInput": {
      "description": "Represents the input of a <code>GetApplication</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account."
            }
          ]
        }
      },
      "required": [
        "applicationName"
      ],
      "title": "GetApplicationInput",
      "type": "object"
    },
    "GetApplicationOutput": {
      "description": "Represents the output of a <code>GetApplication</code> operation.",
      "properties": {
        "application": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationInfo"
            },
            {
              "description": "Information about the application."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetApplicationRevisionInput": {
      "description": "Represents the input of a <code>GetApplicationRevision</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of the application that corresponds to the revision."
            }
          ]
        },
        "revision": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocation"
            },
            {
              "description": "Information about the application revision to get, including type and location."
            }
          ]
        }
      },
      "required": [
        "applicationName",
        "revision"
      ],
      "title": "GetApplicationRevisionInput",
      "type": "object"
    },
    "GetApplicationRevisionOutput": {
      "description": "Represents the output of a <code>GetApplicationRevision</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of the application that corresponds to the revision."
            }
          ]
        },
        "revision": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocation"
            },
            {
              "description": "Additional information about the revision, including type and location."
            }
          ]
        },
        "revisionInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericRevisionInfo"
            },
            {
              "description": "General information about the revision."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDeploymentConfigInput": {
      "description": "Represents the input of a <code>GetDeploymentConfig</code> operation.",
      "properties": {
        "deploymentConfigName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigName"
            },
            {
              "description": "The name of a deployment configuration associated with the IAM user or AWS account."
            }
          ]
        }
      },
      "required": [
        "deploymentConfigName"
      ],
      "title": "GetDeploymentConfigInput",
      "type": "object"
    },
    "GetDeploymentConfigOutput": {
      "description": "Represents the output of a <code>GetDeploymentConfig</code> operation.",
      "properties": {
        "deploymentConfigInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigInfo"
            },
            {
              "description": "Information about the deployment configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDeploymentGroupInput": {
      "description": "Represents the input of a <code>GetDeploymentGroup</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account."
            }
          ]
        },
        "deploymentGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupName"
            },
            {
              "description": "The name of a deployment group for the specified application."
            }
          ]
        }
      },
      "required": [
        "applicationName",
        "deploymentGroupName"
      ],
      "title": "GetDeploymentGroupInput",
      "type": "object"
    },
    "GetDeploymentGroupOutput": {
      "description": "Represents the output of a <code>GetDeploymentGroup</code> operation.",
      "properties": {
        "deploymentGroupInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupInfo"
            },
            {
              "description": "Information about the deployment group."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDeploymentInput": {
      "description": "Represents the input of a <code>GetDeployment</code> operation.",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment associated with the IAM user or AWS account. "
            }
          ]
        }
      },
      "required": [
        "deploymentId"
      ],
      "title": "GetDeploymentInput",
      "type": "object"
    },
    "GetDeploymentInstanceInput": {
      "description": " Represents the input of a <code>GetDeploymentInstance</code> operation. ",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "instanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": " The unique ID of an instance in the deployment group. "
            }
          ]
        }
      },
      "required": [
        "deploymentId",
        "instanceId"
      ],
      "title": "GetDeploymentInstanceInput",
      "type": "object"
    },
    "GetDeploymentInstanceOutput": {
      "description": " Represents the output of a <code>GetDeploymentInstance</code> operation. ",
      "properties": {
        "instanceSummary": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceSummary"
            },
            {
              "description": " Information about the instance. "
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDeploymentOutput": {
      "description": "Represents the output of a <code>GetDeployment</code> operation.",
      "properties": {
        "deploymentInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentInfo"
            },
            {
              "description": "Information about the deployment."
            }
          ]
        }
      },
      "type": "object"
    },
    "GetDeploymentTargetInput": {
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "targetId": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetId"
            },
            {
              "description": " The unique ID of a deployment target. "
            }
          ]
        }
      },
      "title": "GetDeploymentTargetInput",
      "type": "object"
    },
    "GetDeploymentTargetOutput": {
      "properties": {
        "deploymentTarget": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentTarget"
            },
            {
              "description": " A deployment target that contains information about a deployment such as its status, lifecycle events, and when it was last updated. It also contains metadata about the deployment target. The deployment target metadata depends on the deployment target's type (<code>instanceTarget</code>, <code>lambdaTarget</code>, or <code>ecsTarget</code>). "
            }
          ]
        }
      },
      "type": "object"
    },
    "GetOnPremisesInstanceInput": {
      "description": " Represents the input of a <code>GetOnPremisesInstance</code> operation. ",
      "properties": {
        "instanceName": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceName"
            },
            {
              "description": " The name of the on-premises instance about which to get information. "
            }
          ]
        }
      },
      "required": [
        "instanceName"
      ],
      "title": "GetOnPremisesInstanceInput",
      "type": "object"
    },
    "GetOnPremisesInstanceOutput": {
      "description": " Represents the output of a <code>GetOnPremisesInstance</code> operation. ",
      "properties": {
        "instanceInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceInfo"
            },
            {
              "description": " Information about the on-premises instance. "
            }
          ]
        }
      },
      "type": "object"
    },
    "GitHubAccountTokenDoesNotExistException": {},
    "GitHubAccountTokenName": {
      "type": "string"
    },
    "GitHubAccountTokenNameList": {
      "items": {
        "$ref": "#/definitions/GitHubAccountTokenName"
      },
      "type": "array"
    },
    "GitHubAccountTokenNameRequiredException": {},
    "GitHubLocation": {
      "description": "Information about the location of application artifacts stored in GitHub.",
      "properties": {
        "commitId": {
          "allOf": [
            {
              "$ref": "#/definitions/CommitId"
            },
            {
              "description": "The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision."
            }
          ]
        },
        "repository": {
          "allOf": [
            {
              "$ref": "#/definitions/Repository"
            },
            {
              "description": "<p>The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision. </p> <p>Specified as account/repository.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "GreenFleetProvisioningAction": {
      "enum": [
        "DISCOVER_EXISTING",
        "COPY_AUTO_SCALING_GROUP"
      ],
      "type": "string"
    },
    "GreenFleetProvisioningOption": {
      "description": "Information about the instances that belong to the replacement environment in a blue/green deployment.",
      "properties": {
        "action": {
          "allOf": [
            {
              "$ref": "#/definitions/GreenFleetProvisioningAction"
            },
            {
              "description": "<p>The method used to add instances to a replacement environment.</p> <ul> <li> <p> <code>DISCOVER_EXISTING</code>: Use instances that already exist or will be created manually.</p> </li> <li> <p> <code>COPY_AUTO_SCALING_GROUP</code>: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "IamArnRequiredException": {},
    "IamSessionArn": {
      "type": "string"
    },
    "IamSessionArnAlreadyRegisteredException": {},
    "IamUserArn": {
      "type": "string"
    },
    "IamUserArnAlreadyRegisteredException": {},
    "IamUserArnRequiredException": {},
    "InstanceAction": {
      "enum": [
        "TERMINATE",
        "KEEP_ALIVE"
      ],
      "type": "string"
    },
    "InstanceArn": {
      "type": "string"
    },
    "InstanceCount": {
      "type": "integer"
    },
    "InstanceDoesNotExistException": {},
    "InstanceId": {
      "type": "string"
    },
    "InstanceIdRequiredException": {},
    "InstanceInfo": {
      "description": "Information about an on-premises instance.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tags currently associated with the on-premises instance."
            }
          ]
        },
        "deregisterTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "If the on-premises instance was deregistered, the time at which the on-premises instance was deregistered."
            }
          ]
        },
        "iamSessionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamSessionArn"
            },
            {
              "description": "The ARN of the IAM session associated with the on-premises instance."
            }
          ]
        },
        "iamUserArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamUserArn"
            },
            {
              "description": "The IAM user ARN associated with the on-premises instance."
            }
          ]
        },
        "instanceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceArn"
            },
            {
              "description": "The ARN of the on-premises instance."
            }
          ]
        },
        "instanceName": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceName"
            },
            {
              "description": "The name of the on-premises instance."
            }
          ]
        },
        "registerTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time at which the on-premises instance was registered."
            }
          ]
        }
      },
      "type": "object"
    },
    "InstanceInfoList": {
      "items": {
        "$ref": "#/definitions/InstanceInfo"
      },
      "type": "array"
    },
    "InstanceLimitExceededException": {},
    "InstanceName": {
      "type": "string"
    },
    "InstanceNameAlreadyRegisteredException": {},
    "InstanceNameList": {
      "items": {
        "$ref": "#/definitions/InstanceName"
      },
      "type": "array"
    },
    "InstanceNameRequiredException": {},
    "InstanceNotRegisteredException": {},
    "InstanceStatus": {
      "description": "InstanceStatus is deprecated, use TargetStatus instead.",
      "enum": [
        "Pending",
        "InProgress",
        "Succeeded",
        "Failed",
        "Skipped",
        "Unknown",
        "Ready"
      ],
      "type": "string",
      "x-deprecated": true
    },
    "InstanceStatusList": {
      "items": {
        "$ref": "#/definitions/InstanceStatus"
      },
      "type": "array"
    },
    "InstanceSummary": {
      "description": "Information about an instance in a deployment.InstanceSummary is deprecated, use DeploymentTarget instead.",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "instanceId": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceId"
            },
            {
              "description": "The instance ID."
            }
          ]
        },
        "instanceType": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceType"
            },
            {
              "description": "<p>Information about which environment an instance belongs to in a blue/green deployment.</p> <ul> <li> <p>BLUE: The instance is part of the original environment.</p> </li> <li> <p>GREEN: The instance is part of the replacement environment.</p> </li> </ul>"
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "A timestamp that indicates when the instance information was last updated."
            }
          ]
        },
        "lifecycleEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventList"
            },
            {
              "description": "A list of lifecycle events for this instance."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceStatus"
            },
            {
              "description": "<p>The deployment status for this instance:</p> <ul> <li> <p> <code>Pending</code>: The deployment is pending for this instance.</p> </li> <li> <p> <code>In Progress</code>: The deployment is in progress for this instance.</p> </li> <li> <p> <code>Succeeded</code>: The deployment has succeeded for this instance.</p> </li> <li> <p> <code>Failed</code>: The deployment has failed for this instance.</p> </li> <li> <p> <code>Skipped</code>: The deployment has been skipped for this instance.</p> </li> <li> <p> <code>Unknown</code>: The deployment status is unknown for this instance.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object",
      "x-deprecated": true
    },
    "InstanceSummaryList": {
      "items": {
        "$ref": "#/definitions/InstanceSummary"
      },
      "type": "array"
    },
    "InstanceTarget": {
      "description": " A target Amazon EC2 or on-premises instance during a deployment that uses the EC2/On-premises compute platform. ",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "instanceLabel": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetLabel"
            },
            {
              "description": " A label that identifies whether the instance is an original target (<code>BLUE</code>) or a replacement target (<code>GREEN</code>). "
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Time"
            },
            {
              "description": " The date and time when the target instance was updated by a deployment. "
            }
          ]
        },
        "lifecycleEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventList"
            },
            {
              "description": " The lifecycle events of the deployment to this target instance. "
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetStatus"
            },
            {
              "description": " The status an EC2/On-premises deployment's target instance. "
            }
          ]
        },
        "targetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetArn"
            },
            {
              "description": " The Amazon Resource Name (ARN) of the target. "
            }
          ]
        },
        "targetId": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetId"
            },
            {
              "description": " The unique ID of a deployment target that has a type of <code>instanceTarget</code>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "InstanceType": {
      "enum": [
        "Blue",
        "Green"
      ],
      "type": "string"
    },
    "InstanceTypeList": {
      "items": {
        "$ref": "#/definitions/InstanceType"
      },
      "type": "array"
    },
    "InstancesList": {
      "items": {
        "$ref": "#/definitions/InstanceId"
      },
      "type": "array"
    },
    "InvalidAlarmConfigException": {},
    "InvalidApplicationNameException": {},
    "InvalidArnException": {},
    "InvalidAutoRollbackConfigException": {},
    "InvalidAutoScalingGroupException": {},
    "InvalidBlueGreenDeploymentConfigurationException": {},
    "InvalidBucketNameFilterException": {},
    "InvalidComputePlatformException": {},
    "InvalidDeployedStateFilterException": {},
    "InvalidDeploymentConfigNameException": {},
    "InvalidDeploymentGroupNameException": {},
    "InvalidDeploymentIdException": {},
    "InvalidDeploymentInstanceTypeException": {},
    "InvalidDeploymentStatusException": {},
    "InvalidDeploymentStyleException": {},
    "InvalidDeploymentTargetIdException": {},
    "InvalidDeploymentWaitTypeException": {},
    "InvalidEC2TagCombinationException": {},
    "InvalidEC2TagException": {},
    "InvalidECSServiceException": {},
    "InvalidExternalIdException": {},
    "InvalidFileExistsBehaviorException": {},
    "InvalidGitHubAccountTokenException": {},
    "InvalidGitHubAccountTokenNameException": {},
    "InvalidIamSessionArnException": {},
    "InvalidIamUserArnException": {},
    "InvalidIgnoreApplicationStopFailuresValueException": {},
    "InvalidInputException": {},
    "InvalidInstanceNameException": {},
    "InvalidInstanceStatusException": {},
    "InvalidInstanceTypeException": {},
    "InvalidKeyPrefixFilterException": {},
    "InvalidLifecycleEventHookExecutionIdException": {},
    "InvalidLifecycleEventHookExecutionStatusException": {},
    "InvalidLoadBalancerInfoException": {},
    "InvalidMinimumHealthyHostValueException": {},
    "InvalidNextTokenException": {},
    "InvalidOnPremisesTagCombinationException": {},
    "InvalidOperationException": {},
    "InvalidRegistrationStatusException": {},
    "InvalidRevisionException": {},
    "InvalidRoleException": {},
    "InvalidSortByException": {},
    "InvalidSortOrderException": {},
    "InvalidTagException": {},
    "InvalidTagFilterException": {},
    "InvalidTagsToAddException": {},
    "InvalidTargetFilterNameException": {},
    "InvalidTargetGroupPairException": {},
    "InvalidTargetInstancesException": {},
    "InvalidTimeRangeException": {},
    "InvalidTrafficRoutingConfigurationException": {},
    "InvalidTriggerConfigException": {},
    "InvalidUpdateOutdatedInstancesOnlyValueException": {},
    "Key": {
      "type": "string"
    },
    "LambdaFunctionAlias": {
      "type": "string"
    },
    "LambdaFunctionInfo": {
      "description": " Information about a Lambda function specified in a deployment. ",
      "properties": {
        "currentVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/Version"
            },
            {
              "description": " The version of a Lambda function that production traffic points to. "
            }
          ]
        },
        "functionAlias": {
          "allOf": [
            {
              "$ref": "#/definitions/LambdaFunctionAlias"
            },
            {
              "description": " The alias of a Lambda function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html\">AWS Lambda Function Aliases</a> in the <i>AWS Lambda Developer Guide</i>."
            }
          ]
        },
        "functionName": {
          "allOf": [
            {
              "$ref": "#/definitions/LambdaFunctionName"
            },
            {
              "description": " The name of a Lambda function. "
            }
          ]
        },
        "targetVersion": {
          "allOf": [
            {
              "$ref": "#/definitions/Version"
            },
            {
              "description": " The version of a Lambda function that production traffic points to after the Lambda function is deployed. "
            }
          ]
        },
        "targetVersionWeight": {
          "allOf": [
            {
              "$ref": "#/definitions/TrafficWeight"
            },
            {
              "description": " The percentage of production traffic that the target version of a Lambda function receives. "
            }
          ]
        }
      },
      "type": "object"
    },
    "LambdaFunctionName": {
      "type": "string"
    },
    "LambdaTarget": {
      "description": " Information about the target AWS Lambda function during an AWS Lambda deployment. ",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "lambdaFunctionInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LambdaFunctionInfo"
            },
            {
              "description": " A <code>LambdaFunctionInfo</code> object that describes a target Lambda function. "
            }
          ]
        },
        "lastUpdatedAt": {
          "allOf": [
            {
              "$ref": "#/definitions/Time"
            },
            {
              "description": " The date and time when the target Lambda function was updated by a deployment. "
            }
          ]
        },
        "lifecycleEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventList"
            },
            {
              "description": " The lifecycle events of the deployment to this target Lambda function. "
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetStatus"
            },
            {
              "description": " The status an AWS Lambda deployment's target Lambda function. "
            }
          ]
        },
        "targetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetArn"
            },
            {
              "description": " The Amazon Resource Name (ARN) of the target. "
            }
          ]
        },
        "targetId": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetId"
            },
            {
              "description": " The unique ID of a deployment target that has a type of <code>lambdaTarget</code>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "LastDeploymentInfo": {
      "description": "Information about the most recent attempted or successful deployment to a deployment group.",
      "properties": {
        "createTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "A timestamp that indicates when the most recent deployment to the deployment group started."
            }
          ]
        },
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "endTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "A timestamp that indicates when the most recent deployment to the deployment group was complete."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentStatus"
            },
            {
              "description": "The status of the most recent deployment."
            }
          ]
        }
      },
      "type": "object"
    },
    "LifecycleErrorCode": {
      "enum": [
        "Success",
        "ScriptMissing",
        "ScriptNotExecutable",
        "ScriptTimedOut",
        "ScriptFailed",
        "UnknownError"
      ],
      "type": "string"
    },
    "LifecycleEvent": {
      "description": "Information about a deployment lifecycle event.",
      "properties": {
        "diagnostics": {
          "allOf": [
            {
              "$ref": "#/definitions/Diagnostics"
            },
            {
              "description": "Diagnostic information about the deployment lifecycle event."
            }
          ]
        },
        "endTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "A timestamp that indicates when the deployment lifecycle event ended."
            }
          ]
        },
        "lifecycleEventName": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventName"
            },
            {
              "description": "The deployment lifecycle event name, such as <code>ApplicationStop</code>, <code>BeforeInstall</code>, <code>AfterInstall</code>, <code>ApplicationStart</code>, or <code>ValidateService</code>."
            }
          ]
        },
        "startTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "A timestamp that indicates when the deployment lifecycle event started."
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventStatus"
            },
            {
              "description": "<p>The deployment lifecycle event status:</p> <ul> <li> <p>Pending: The deployment lifecycle event is pending.</p> </li> <li> <p>InProgress: The deployment lifecycle event is in progress.</p> </li> <li> <p>Succeeded: The deployment lifecycle event ran successfully.</p> </li> <li> <p>Failed: The deployment lifecycle event has failed.</p> </li> <li> <p>Skipped: The deployment lifecycle event has been skipped.</p> </li> <li> <p>Unknown: The deployment lifecycle event is unknown.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "LifecycleEventAlreadyCompletedException": {},
    "LifecycleEventHookExecutionId": {
      "type": "string"
    },
    "LifecycleEventList": {
      "items": {
        "$ref": "#/definitions/LifecycleEvent"
      },
      "type": "array"
    },
    "LifecycleEventName": {
      "type": "string"
    },
    "LifecycleEventStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Succeeded",
        "Failed",
        "Skipped",
        "Unknown"
      ],
      "type": "string"
    },
    "LifecycleHookLimitExceededException": {},
    "LifecycleMessage": {
      "type": "string"
    },
    "ListApplicationRevisionsInput": {
      "description": " Represents the input of a <code>ListApplicationRevisions</code> operation. ",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": " The name of an AWS CodeDeploy application associated with the IAM user or AWS account. "
            }
          ]
        },
        "deployed": {
          "allOf": [
            {
              "$ref": "#/definitions/ListStateFilterAction"
            },
            {
              "description": "<p> Whether to list revisions based on whether the revision is the target revision of a deployment group: </p> <ul> <li> <p> <code>include</code>: List revisions that are target revisions of a deployment group.</p> </li> <li> <p> <code>exclude</code>: Do not list revisions that are target revisions of a deployment group.</p> </li> <li> <p> <code>ignore</code>: List all revisions.</p> </li> </ul>"
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An identifier returned from the previous <code>ListApplicationRevisions</code> call. It can be used to return the next set of applications in the list."
            }
          ]
        },
        "s3Bucket": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Bucket"
            },
            {
              "description": "<p> An Amazon S3 bucket name to limit the search for revisions. </p> <p> If set to null, all of the user's buckets are searched. </p>"
            }
          ]
        },
        "s3KeyPrefix": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Key"
            },
            {
              "description": " A key prefix for the set of Amazon S3 objects to limit the search for revisions. "
            }
          ]
        },
        "sortBy": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationRevisionSortBy"
            },
            {
              "description": "<p>The column name to use to sort the list results:</p> <ul> <li> <p> <code>registerTime</code>: Sort by the time the revisions were registered with AWS CodeDeploy.</p> </li> <li> <p> <code>firstUsedTime</code>: Sort by the time the revisions were first used in a deployment.</p> </li> <li> <p> <code>lastUsedTime</code>: Sort by the time the revisions were last used in a deployment.</p> </li> </ul> <p> If not specified or set to null, the results are returned in an arbitrary order. </p>"
            }
          ]
        },
        "sortOrder": {
          "allOf": [
            {
              "$ref": "#/definitions/SortOrder"
            },
            {
              "description": "<p> The order in which to sort the list results: </p> <ul> <li> <p> <code>ascending</code>: ascending order.</p> </li> <li> <p> <code>descending</code>: descending order.</p> </li> </ul> <p>If not specified, the results are sorted in ascending order.</p> <p>If set to null, the results are sorted in an arbitrary order.</p>"
            }
          ]
        }
      },
      "required": [
        "applicationName"
      ],
      "title": "ListApplicationRevisionsInput",
      "type": "object"
    },
    "ListApplicationRevisionsOutput": {
      "description": "Represents the output of a <code>ListApplicationRevisions</code> operation.",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list."
            }
          ]
        },
        "revisions": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocationList"
            },
            {
              "description": "A list of locations that contain the matching revisions."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListApplicationsInput": {
      "description": "Represents the input of a <code>ListApplications</code> operation.",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list."
            }
          ]
        }
      },
      "title": "ListApplicationsInput",
      "type": "object"
    },
    "ListApplicationsOutput": {
      "description": "Represents the output of a ListApplications operation.",
      "properties": {
        "applications": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationsList"
            },
            {
              "description": "A list of application names."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list applications call to return the next set of applications in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDeploymentConfigsInput": {
      "description": "Represents the input of a <code>ListDeploymentConfigs</code> operation.",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An identifier returned from the previous <code>ListDeploymentConfigs</code> call. It can be used to return the next set of deployment configurations in the list. "
            }
          ]
        }
      },
      "title": "ListDeploymentConfigsInput",
      "type": "object"
    },
    "ListDeploymentConfigsOutput": {
      "description": "Represents the output of a <code>ListDeploymentConfigs</code> operation.",
      "properties": {
        "deploymentConfigsList": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigsList"
            },
            {
              "description": "A list of deployment configurations, including built-in configurations such as <code>CodeDeployDefault.OneAtATime</code>."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment configurations call to return the next set of deployment configurations in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDeploymentGroupsInput": {
      "description": "Represents the input of a <code>ListDeploymentGroups</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list."
            }
          ]
        }
      },
      "required": [
        "applicationName"
      ],
      "title": "ListDeploymentGroupsInput",
      "type": "object"
    },
    "ListDeploymentGroupsOutput": {
      "description": "Represents the output of a <code>ListDeploymentGroups</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The application name."
            }
          ]
        },
        "deploymentGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupsList"
            },
            {
              "description": "A list of deployment group names."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment groups call to return the next set of deployment groups in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDeploymentInstancesInput": {
      "description": " Represents the input of a <code>ListDeploymentInstances</code> operation. ",
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "instanceStatusFilter": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceStatusList"
            },
            {
              "description": "<p>A subset of instances to list by status:</p> <ul> <li> <p> <code>Pending</code>: Include those instances with pending deployments.</p> </li> <li> <p> <code>InProgress</code>: Include those instances where deployments are still in progress.</p> </li> <li> <p> <code>Succeeded</code>: Include those instances with successful deployments.</p> </li> <li> <p> <code>Failed</code>: Include those instances with failed deployments.</p> </li> <li> <p> <code>Skipped</code>: Include those instances with skipped deployments.</p> </li> <li> <p> <code>Unknown</code>: Include those instances with deployments in an unknown state.</p> </li> </ul>"
            }
          ]
        },
        "instanceTypeFilter": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceTypeList"
            },
            {
              "description": "The set of instances in a blue/green deployment, either those in the original environment (\"BLUE\") or those in the replacement environment (\"GREEN\"), for which you want to view instance information."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list."
            }
          ]
        }
      },
      "required": [
        "deploymentId"
      ],
      "title": "ListDeploymentInstancesInput",
      "type": "object"
    },
    "ListDeploymentInstancesOutput": {
      "description": "Represents the output of a <code>ListDeploymentInstances</code> operation.",
      "properties": {
        "instancesList": {
          "allOf": [
            {
              "$ref": "#/definitions/InstancesList"
            },
            {
              "description": "A list of instance IDs."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment instances call to return the next set of deployment instances in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDeploymentTargetsInput": {
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": " A token identifier returned from the previous <code>ListDeploymentTargets</code> call. It can be used to return the next set of deployment targets in the list. "
            }
          ]
        },
        "targetFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetFilters"
            },
            {
              "description": "<p> A key used to filter the returned targets. The two valid values are:</p> <ul> <li> <p> <code>TargetStatus</code> - A <code>TargetStatus</code> filter string can be <code>Failed</code>, <code>InProgress</code>, <code>Pending</code>, <code>Ready</code>, <code>Skipped</code>, <code>Succeeded</code>, or <code>Unknown</code>. </p> </li> <li> <p> <code>ServerInstanceLabel</code> - A <code>ServerInstanceLabel</code> filter string can be <code>Blue</code> or <code>Green</code>. </p> </li> </ul>"
            }
          ]
        }
      },
      "title": "ListDeploymentTargetsInput",
      "type": "object"
    },
    "ListDeploymentTargetsOutput": {
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": " If a large amount of information is returned, a token identifier is also returned. It can be used in a subsequent <code>ListDeploymentTargets</code> call to return the next set of deployment targets in the list. "
            }
          ]
        },
        "targetIds": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetIdList"
            },
            {
              "description": " The unique IDs of deployment targets. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDeploymentsInput": {
      "description": "Represents the input of a <code>ListDeployments</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "<p>The name of an AWS CodeDeploy application associated with the IAM user or AWS account.</p> <note> <p>If <code>applicationName</code> is specified, then <code>deploymentGroupName</code> must be specified. If it is not specified, then <code>deploymentGroupName</code> must not be specified. </p> </note>"
            }
          ]
        },
        "createTimeRange": {
          "allOf": [
            {
              "$ref": "#/definitions/TimeRange"
            },
            {
              "description": "A time range (start and end) for returning a subset of the list of deployments."
            }
          ]
        },
        "deploymentGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupName"
            },
            {
              "description": "<p>The name of a deployment group for the specified application.</p> <note> <p>If <code>deploymentGroupName</code> is specified, then <code>applicationName</code> must be specified. If it is not specified, then <code>applicationName</code> must not be specified. </p> </note>"
            }
          ]
        },
        "externalId": {
          "allOf": [
            {
              "$ref": "#/definitions/ExternalId"
            },
            {
              "description": "The unique ID of an external resource for returning deployments linked to the external resource."
            }
          ]
        },
        "includeOnlyStatuses": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentStatusList"
            },
            {
              "description": "<p>A subset of deployments to list by status:</p> <ul> <li> <p> <code>Created</code>: Include created deployments in the resulting list.</p> </li> <li> <p> <code>Queued</code>: Include queued deployments in the resulting list.</p> </li> <li> <p> <code>In Progress</code>: Include in-progress deployments in the resulting list.</p> </li> <li> <p> <code>Succeeded</code>: Include successful deployments in the resulting list.</p> </li> <li> <p> <code>Failed</code>: Include failed deployments in the resulting list.</p> </li> <li> <p> <code>Stopped</code>: Include stopped deployments in the resulting list.</p> </li> </ul>"
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list."
            }
          ]
        }
      },
      "title": "ListDeploymentsInput",
      "type": "object"
    },
    "ListDeploymentsOutput": {
      "description": "Represents the output of a <code>ListDeployments</code> operation.",
      "properties": {
        "deployments": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentsList"
            },
            {
              "description": "A list of deployment IDs."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployments call to return the next set of deployments in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListGitHubAccountTokenNamesInput": {
      "description": "Represents the input of a <code>ListGitHubAccountTokenNames</code> operation.",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An identifier returned from the previous <code>ListGitHubAccountTokenNames</code> call. It can be used to return the next set of names in the list. "
            }
          ]
        }
      },
      "title": "ListGitHubAccountTokenNamesInput",
      "type": "object"
    },
    "ListGitHubAccountTokenNamesOutput": {
      "description": "Represents the output of a <code>ListGitHubAccountTokenNames</code> operation.",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent <code>ListGitHubAccountTokenNames</code> call to return the next set of names in the list. "
            }
          ]
        },
        "tokenNameList": {
          "allOf": [
            {
              "$ref": "#/definitions/GitHubAccountTokenNameList"
            },
            {
              "description": "A list of names of connections to GitHub accounts."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListOnPremisesInstancesInput": {
      "description": "Represents the input of a <code>ListOnPremisesInstances</code> operation.",
      "properties": {
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list."
            }
          ]
        },
        "registrationStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/RegistrationStatus"
            },
            {
              "description": "<p>The registration status of the on-premises instances:</p> <ul> <li> <p> <code>Deregistered</code>: Include deregistered on-premises instances in the resulting list.</p> </li> <li> <p> <code>Registered</code>: Include registered on-premises instances in the resulting list.</p> </li> </ul>"
            }
          ]
        },
        "tagFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/TagFilterList"
            },
            {
              "description": "The on-premises instance tags that are used to restrict the on-premises instance names returned."
            }
          ]
        }
      },
      "title": "ListOnPremisesInstancesInput",
      "type": "object"
    },
    "ListOnPremisesInstancesOutput": {
      "description": "Represents the output of the list on-premises instances operation.",
      "properties": {
        "instanceNames": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceNameList"
            },
            {
              "description": "The list of matching on-premises instance names."
            }
          ]
        },
        "nextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list on-premises instances call to return the next set of on-premises instances in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListStateFilterAction": {
      "enum": [
        "include",
        "exclude",
        "ignore"
      ],
      "type": "string"
    },
    "ListTagsForResourceInput": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "An identifier returned from the previous <code>ListTagsForResource</code> call. It can be used to return the next set of applications in the list."
            }
          ]
        },
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": " The ARN of a CodeDeploy resource. <code>ListTagsForResource</code> returns all the tags associated with the resource that is identified by the <code>ResourceArn</code>. "
            }
          ]
        }
      },
      "required": [
        "ResourceArn"
      ],
      "title": "ListTagsForResourceInput",
      "type": "object"
    },
    "ListTagsForResourceOutput": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/NextToken"
            },
            {
              "description": "If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": " A list of tags returned by <code>ListTagsForResource</code>. The tags are associated with the resource identified by the input <code>ResourceArn</code> parameter. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ListenerArn": {
      "type": "string"
    },
    "ListenerArnList": {
      "items": {
        "$ref": "#/definitions/ListenerArn"
      },
      "type": "array"
    },
    "LoadBalancerInfo": {
      "description": "Information about the Elastic Load Balancing load balancer or target group used in a deployment.",
      "properties": {
        "elbInfoList": {
          "allOf": [
            {
              "$ref": "#/definitions/ELBInfoList"
            },
            {
              "description": "<p>An array that contains information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.</p> <note> <p> Adding more than one load balancer to the array is not supported. </p> </note>"
            }
          ]
        },
        "targetGroupInfoList": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetGroupInfoList"
            },
            {
              "description": "<p>An array that contains information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.</p> <note> <p> Adding more than one target group to the array is not supported. </p> </note>"
            }
          ]
        },
        "targetGroupPairInfoList": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetGroupPairInfoList"
            },
            {
              "description": " The target group pair information. This is an array of <code>TargeGroupPairInfo</code> objects with a maximum size of one. "
            }
          ]
        }
      },
      "type": "object"
    },
    "LogTail": {
      "type": "string"
    },
    "Message": {
      "type": "string"
    },
    "MinimumHealthyHosts": {
      "description": "Information about minimum healthy instance.",
      "properties": {
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/MinimumHealthyHostsType"
            },
            {
              "description": "<p>The minimum healthy instance type:</p> <ul> <li> <p> <code>HOST_COUNT</code>: The minimum number of healthy instances as an absolute value.</p> </li> <li> <p> <code>FLEET_PERCENT</code>: The minimum number of healthy instances as a percentage of the total number of instances in the deployment.</p> </li> </ul> <p>In an example of nine instances, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instances at a time. The deployment is successful if four or more instances are deployed to successfully. Otherwise, the deployment fails.</p> <note> <p>In a call to the <code>GetDeploymentConfig</code>, CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful.</p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-health.html\">AWS CodeDeploy Instance Health</a> in the <i>AWS CodeDeploy User Guide</i>.</p>"
            }
          ]
        },
        "value": {
          "allOf": [
            {
              "$ref": "#/definitions/MinimumHealthyHostsValue"
            },
            {
              "description": "The minimum healthy instance value."
            }
          ]
        }
      },
      "type": "object"
    },
    "MinimumHealthyHostsType": {
      "enum": [
        "HOST_COUNT",
        "FLEET_PERCENT"
      ],
      "type": "string"
    },
    "MinimumHealthyHostsValue": {
      "type": "integer"
    },
    "MultipleIamArnsProvidedException": {},
    "NextToken": {
      "type": "string"
    },
    "NullableBoolean": {
      "type": "boolean"
    },
    "OnPremisesTagSet": {
      "description": "Information about groups of on-premises instance tags.",
      "properties": {
        "onPremisesTagSetList": {
          "allOf": [
            {
              "$ref": "#/definitions/OnPremisesTagSetList"
            },
            {
              "description": "A list that contains other lists of on-premises instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list."
            }
          ]
        }
      },
      "type": "object"
    },
    "OnPremisesTagSetList": {
      "items": {
        "$ref": "#/definitions/TagFilterList"
      },
      "type": "array"
    },
    "OperationNotSupportedException": {},
    "Percentage": {
      "type": "integer"
    },
    "PutLifecycleEventHookExecutionStatusInput": {
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. Pass this ID to a Lambda function that validates a deployment lifecycle event. "
            }
          ]
        },
        "lifecycleEventHookExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventHookExecutionId"
            },
            {
              "description": " The execution ID of a deployment's lifecycle hook. A deployment lifecycle hook is specified in the <code>hooks</code> section of the AppSpec file. "
            }
          ]
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventStatus"
            },
            {
              "description": "The result of a Lambda function that validates a deployment lifecycle event (<code>Succeeded</code> or <code>Failed</code>)."
            }
          ]
        }
      },
      "title": "PutLifecycleEventHookExecutionStatusInput",
      "type": "object"
    },
    "PutLifecycleEventHookExecutionStatusOutput": {
      "properties": {
        "lifecycleEventHookExecutionId": {
          "allOf": [
            {
              "$ref": "#/definitions/LifecycleEventHookExecutionId"
            },
            {
              "description": "The execution ID of the lifecycle event hook. A hook is specified in the <code>hooks</code> section of the deployment's AppSpec file."
            }
          ]
        }
      },
      "type": "object"
    },
    "RawString": {
      "description": "A revision for an AWS Lambda deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda deployments, the revision is the same as the AppSpec file.RawString and String revision type are deprecated, use AppSpecContent type instead.",
      "properties": {
        "content": {
          "allOf": [
            {
              "$ref": "#/definitions/RawStringContent"
            },
            {
              "description": "The YAML-formatted or JSON-formatted revision string. It includes information about which Lambda function to update and optional Lambda functions that validate deployment lifecycle events."
            }
          ]
        },
        "sha256": {
          "allOf": [
            {
              "$ref": "#/definitions/RawStringSha256"
            },
            {
              "description": "The SHA256 hash value of the revision content."
            }
          ]
        }
      },
      "type": "object",
      "x-deprecated": true
    },
    "RawStringContent": {
      "type": "string"
    },
    "RawStringSha256": {
      "type": "string"
    },
    "RegisterApplicationRevisionInput": {
      "description": "Represents the input of a RegisterApplicationRevision operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account."
            }
          ]
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "A comment about the revision."
            }
          ]
        },
        "revision": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocation"
            },
            {
              "description": "Information about the application revision to register, including type and location."
            }
          ]
        }
      },
      "required": [
        "applicationName",
        "revision"
      ],
      "title": "RegisterApplicationRevisionInput",
      "type": "object"
    },
    "RegisterOnPremisesInstanceInput": {
      "description": "Represents the input of the register on-premises instance operation.",
      "properties": {
        "iamSessionArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamSessionArn"
            },
            {
              "description": "The ARN of the IAM session to associate with the on-premises instance."
            }
          ]
        },
        "iamUserArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamUserArn"
            },
            {
              "description": "The ARN of the IAM user to associate with the on-premises instance."
            }
          ]
        },
        "instanceName": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceName"
            },
            {
              "description": "The name of the on-premises instance to register."
            }
          ]
        }
      },
      "required": [
        "instanceName"
      ],
      "title": "RegisterOnPremisesInstanceInput",
      "type": "object"
    },
    "RegistrationStatus": {
      "enum": [
        "Registered",
        "Deregistered"
      ],
      "type": "string"
    },
    "RemoveTagsFromOnPremisesInstancesInput": {
      "description": "Represents the input of a <code>RemoveTagsFromOnPremisesInstances</code> operation.",
      "properties": {
        "tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "The tag key-value pairs to remove from the on-premises instances."
            }
          ]
        },
        "instanceNames": {
          "allOf": [
            {
              "$ref": "#/definitions/InstanceNameList"
            },
            {
              "description": "The names of the on-premises instances from which to remove tags."
            }
          ]
        }
      },
      "required": [
        "tags",
        "instanceNames"
      ],
      "title": "RemoveTagsFromOnPremisesInstancesInput",
      "type": "object"
    },
    "Repository": {
      "type": "string"
    },
    "ResourceArnRequiredException": {},
    "ResourceValidationException": {},
    "RevisionDoesNotExistException": {},
    "RevisionInfo": {
      "description": "Information about an application revision.",
      "properties": {
        "genericRevisionInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/GenericRevisionInfo"
            },
            {
              "description": "Information about an application revision, including usage details and associated deployment groups."
            }
          ]
        },
        "revisionLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocation"
            },
            {
              "description": "Information about the location and type of an application revision."
            }
          ]
        }
      },
      "type": "object"
    },
    "RevisionInfoList": {
      "items": {
        "$ref": "#/definitions/RevisionInfo"
      },
      "type": "array"
    },
    "RevisionLocation": {
      "description": "Information about the location of an application revision.",
      "properties": {
        "appSpecContent": {
          "allOf": [
            {
              "$ref": "#/definitions/AppSpecContent"
            },
            {
              "description": " The content of an AppSpec file for an AWS Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString. "
            }
          ]
        },
        "gitHubLocation": {
          "allOf": [
            {
              "$ref": "#/definitions/GitHubLocation"
            },
            {
              "description": "Information about the location of application artifacts stored in GitHub."
            }
          ]
        },
        "revisionType": {
          "allOf": [
            {
              "$ref": "#/definitions/RevisionLocationType"
            },
            {
              "description": "<p>The type of application revision:</p> <ul> <li> <p>S3: An application revision stored in Amazon S3.</p> </li> <li> <p>GitHub: An application revision stored in GitHub (EC2/On-premises deployments only).</p> </li> <li> <p>String: A YAML-formatted or JSON-formatted string (AWS Lambda deployments only).</p> </li> <li> <p>AppSpecContent: An <code>AppSpecContent</code> object that contains the contents of an AppSpec file for an AWS Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML stored as a RawString.</p> </li> </ul>"
            }
          ]
        },
        "s3Location": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Location"
            },
            {
              "description": "Information about the location of a revision stored in Amazon S3. "
            }
          ]
        },
        "string": {
          "allOf": [
            {
              "$ref": "#/definitions/RawString"
            },
            {
              "description": "Information about the location of an AWS Lambda deployment revision stored as a RawString."
            }
          ]
        }
      },
      "type": "object"
    },
    "RevisionLocationList": {
      "items": {
        "$ref": "#/definitions/RevisionLocation"
      },
      "type": "array"
    },
    "RevisionLocationType": {
      "enum": [
        "S3",
        "GitHub",
        "String",
        "AppSpecContent"
      ],
      "type": "string"
    },
    "RevisionRequiredException": {},
    "Role": {
      "type": "string"
    },
    "RoleRequiredException": {},
    "RollbackInfo": {
      "description": "Information about a deployment rollback.",
      "properties": {
        "rollbackDeploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": "The ID of the deployment rollback."
            }
          ]
        },
        "rollbackMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Description"
            },
            {
              "description": "Information that describes the status of a deployment rollback (for example, whether the deployment can't be rolled back, is in progress, failed, or succeeded). "
            }
          ]
        },
        "rollbackTriggeringDeploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": "The deployment ID of the deployment that was underway and triggered a rollback deployment because it failed or was stopped."
            }
          ]
        }
      },
      "type": "object"
    },
    "S3Bucket": {
      "type": "string"
    },
    "S3Key": {
      "type": "string"
    },
    "S3Location": {
      "description": "Information about the location of application artifacts stored in Amazon S3.",
      "properties": {
        "bucket": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Bucket"
            },
            {
              "description": "The name of the Amazon S3 bucket where the application revision is stored."
            }
          ]
        },
        "bundleType": {
          "allOf": [
            {
              "$ref": "#/definitions/BundleType"
            },
            {
              "description": "<p>The file type of the application revision. Must be one of the following:</p> <ul> <li> <p> <code>tar</code>: A tar archive file.</p> </li> <li> <p> <code>tgz</code>: A compressed tar archive file.</p> </li> <li> <p> <code>zip</code>: A zip archive file.</p> </li> </ul>"
            }
          ]
        },
        "eTag": {
          "allOf": [
            {
              "$ref": "#/definitions/ETag"
            },
            {
              "description": "<p>The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision.</p> <p>If the ETag is not specified as an input parameter, ETag validation of the object is skipped.</p>"
            }
          ]
        },
        "key": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Key"
            },
            {
              "description": "The name of the Amazon S3 object that represents the bundled artifacts for the application revision."
            }
          ]
        },
        "version": {
          "allOf": [
            {
              "$ref": "#/definitions/VersionId"
            },
            {
              "description": "<p>A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision.</p> <p>If the version is not specified, the system uses the most recent version by default.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "ScriptName": {
      "type": "string"
    },
    "SkipWaitTimeForInstanceTerminationInput": {
      "properties": {
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a blue/green deployment for which you want to skip the instance termination wait time. "
            }
          ]
        }
      },
      "title": "SkipWaitTimeForInstanceTerminationInput",
      "type": "object"
    },
    "SortOrder": {
      "enum": [
        "ascending",
        "descending"
      ],
      "type": "string"
    },
    "StopDeploymentInput": {
      "description": " Represents the input of a <code>StopDeployment</code> operation. ",
      "properties": {
        "autoRollbackEnabled": {
          "allOf": [
            {
              "$ref": "#/definitions/NullableBoolean"
            },
            {
              "description": " Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision. "
            }
          ]
        },
        "deploymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentId"
            },
            {
              "description": " The unique ID of a deployment. "
            }
          ]
        }
      },
      "required": [
        "deploymentId"
      ],
      "title": "StopDeploymentInput",
      "type": "object"
    },
    "StopDeploymentOutput": {
      "description": " Represents the output of a <code>StopDeployment</code> operation. ",
      "properties": {
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/StopStatus"
            },
            {
              "description": "<p>The status of the stop deployment operation:</p> <ul> <li> <p>Pending: The stop operation is pending.</p> </li> <li> <p>Succeeded: The stop operation was successful.</p> </li> </ul>"
            }
          ]
        },
        "statusMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/Message"
            },
            {
              "description": "An accompanying status message."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopStatus": {
      "enum": [
        "Pending",
        "Succeeded"
      ],
      "type": "string"
    },
    "Tag": {
      "description": "Information about a tag.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/Key"
            },
            {
              "description": "The tag's key."
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/Value"
            },
            {
              "description": "The tag's value."
            }
          ]
        }
      },
      "type": "object"
    },
    "TagFilter": {
      "description": "Information about an on-premises instance tag filter.",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/Key"
            },
            {
              "description": "The on-premises instance tag filter key."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/TagFilterType"
            },
            {
              "description": "<p>The on-premises instance tag filter type:</p> <ul> <li> <p>KEY_ONLY: Key only.</p> </li> <li> <p>VALUE_ONLY: Value only.</p> </li> <li> <p>KEY_AND_VALUE: Key and value.</p> </li> </ul>"
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/Value"
            },
            {
              "description": "The on-premises instance tag filter value."
            }
          ]
        }
      },
      "type": "object"
    },
    "TagFilterList": {
      "items": {
        "$ref": "#/definitions/TagFilter"
      },
      "type": "array"
    },
    "TagFilterType": {
      "enum": [
        "KEY_ONLY",
        "VALUE_ONLY",
        "KEY_AND_VALUE"
      ],
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/Key"
      },
      "type": "array"
    },
    "TagLimitExceededException": {},
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "TagRequiredException": {},
    "TagResourceInput": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": " The ARN of a resource, such as a CodeDeploy application or deployment group. "
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": " A list of tags that <code>TagResource</code> associates with a resource. The resource is identified by the <code>ResourceArn</code> input parameter. "
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "title": "TagResourceInput",
      "type": "object"
    },
    "TagResourceOutput": {
      "properties": {},
      "type": "object"
    },
    "TagSetListLimitExceededException": {},
    "TargetArn": {
      "type": "string"
    },
    "TargetFilterName": {
      "enum": [
        "TargetStatus",
        "ServerInstanceLabel"
      ],
      "type": "string"
    },
    "TargetFilters": {
      "additionalProperties": {
        "$ref": "#/definitions/FilterValueList"
      },
      "type": "object"
    },
    "TargetGroupInfo": {
      "description": "Information about a target group in Elastic Load Balancing to use in a deployment. Instances are registered as targets in a target group, and traffic is routed to the target group.",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetGroupName"
            },
            {
              "description": "For blue/green deployments, the name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment are registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete. "
            }
          ]
        }
      },
      "type": "object"
    },
    "TargetGroupInfoList": {
      "items": {
        "$ref": "#/definitions/TargetGroupInfo"
      },
      "type": "array"
    },
    "TargetGroupName": {
      "type": "string"
    },
    "TargetGroupPairInfo": {
      "description": " Information about two target groups and how traffic is routed during an Amazon ECS deployment. An optional test traffic route can be specified. ",
      "properties": {
        "prodTrafficRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/TrafficRoute"
            },
            {
              "description": " The path used by a load balancer to route production traffic when an Amazon ECS deployment is complete. "
            }
          ]
        },
        "targetGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetGroupInfoList"
            },
            {
              "description": " One pair of target groups. One is associated with the original task set. The second is associated with the task set that serves traffic after the deployment is complete. "
            }
          ]
        },
        "testTrafficRoute": {
          "allOf": [
            {
              "$ref": "#/definitions/TrafficRoute"
            },
            {
              "description": " An optional path used by a load balancer to route test traffic after an Amazon ECS deployment. Validation can occur while test traffic is served during a deployment. "
            }
          ]
        }
      },
      "type": "object"
    },
    "TargetGroupPairInfoList": {
      "items": {
        "$ref": "#/definitions/TargetGroupPairInfo"
      },
      "type": "array"
    },
    "TargetId": {
      "type": "string"
    },
    "TargetIdList": {
      "items": {
        "$ref": "#/definitions/TargetId"
      },
      "type": "array"
    },
    "TargetInstances": {
      "description": "Information about the instances to be used in the replacement environment in a blue/green deployment.",
      "properties": {
        "autoScalingGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoScalingGroupNameList"
            },
            {
              "description": "The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment."
            }
          ]
        },
        "ec2TagSet": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagSet"
            },
            {
              "description": "Information about the groups of EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as <code>tagFilters</code>."
            }
          ]
        },
        "tagFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagFilterList"
            },
            {
              "description": "The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as <code>ec2TagSet</code>."
            }
          ]
        }
      },
      "type": "object"
    },
    "TargetLabel": {
      "enum": [
        "Blue",
        "Green"
      ],
      "type": "string"
    },
    "TargetStatus": {
      "enum": [
        "Pending",
        "InProgress",
        "Succeeded",
        "Failed",
        "Skipped",
        "Unknown",
        "Ready"
      ],
      "type": "string"
    },
    "ThrottlingException": {},
    "Time": {
      "format": "date-time",
      "type": "string"
    },
    "TimeBasedCanary": {
      "description": "A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.",
      "properties": {
        "canaryInterval": {
          "allOf": [
            {
              "$ref": "#/definitions/WaitTimeInMins"
            },
            {
              "description": "The number of minutes between the first and second traffic shifts of a <code>TimeBasedCanary</code> deployment."
            }
          ]
        },
        "canaryPercentage": {
          "allOf": [
            {
              "$ref": "#/definitions/Percentage"
            },
            {
              "description": "The percentage of traffic to shift in the first increment of a <code>TimeBasedCanary</code> deployment."
            }
          ]
        }
      },
      "type": "object"
    },
    "TimeBasedLinear": {
      "description": "A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.",
      "properties": {
        "linearInterval": {
          "allOf": [
            {
              "$ref": "#/definitions/WaitTimeInMins"
            },
            {
              "description": "The number of minutes between each incremental traffic shift of a <code>TimeBasedLinear</code> deployment."
            }
          ]
        },
        "linearPercentage": {
          "allOf": [
            {
              "$ref": "#/definitions/Percentage"
            },
            {
              "description": "The percentage of traffic that is shifted at the start of each increment of a <code>TimeBasedLinear</code> deployment."
            }
          ]
        }
      },
      "type": "object"
    },
    "TimeRange": {
      "description": "Information about a time range.",
      "properties": {
        "end": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "<p>The end time of the time range.</p> <note> <p>Specify null to leave the end time open-ended.</p> </note>"
            }
          ]
        },
        "start": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "<p>The start time of the time range.</p> <note> <p>Specify null to leave the start time open-ended.</p> </note>"
            }
          ]
        }
      },
      "type": "object"
    },
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "TrafficRoute": {
      "description": " Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group. ",
      "properties": {
        "listenerArns": {
          "allOf": [
            {
              "$ref": "#/definitions/ListenerArnList"
            },
            {
              "description": " The Amazon Resource Name (ARN) of one listener. The listener identifies the route between a target group and a load balancer. This is an array of strings with a maximum size of one. "
            }
          ]
        }
      },
      "type": "object"
    },
    "TrafficRoutingConfig": {
      "description": "The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an AWS Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment.",
      "properties": {
        "timeBasedCanary": {
          "allOf": [
            {
              "$ref": "#/definitions/TimeBasedCanary"
            },
            {
              "description": "A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file."
            }
          ]
        },
        "timeBasedLinear": {
          "allOf": [
            {
              "$ref": "#/definitions/TimeBasedLinear"
            },
            {
              "description": "A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file."
            }
          ]
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/TrafficRoutingType"
            },
            {
              "description": "The type of traffic shifting (<code>TimeBasedCanary</code> or <code>TimeBasedLinear</code>) used by a deployment configuration."
            }
          ]
        }
      },
      "type": "object"
    },
    "TrafficRoutingType": {
      "enum": [
        "TimeBasedCanary",
        "TimeBasedLinear",
        "AllAtOnce"
      ],
      "type": "string"
    },
    "TrafficWeight": {
      "format": "double",
      "type": "number"
    },
    "TriggerConfig": {
      "description": "Information about notification triggers for the deployment group.",
      "properties": {
        "triggerEvents": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerEventTypeList"
            },
            {
              "description": "The event type or types for which notifications are triggered."
            }
          ]
        },
        "triggerName": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerName"
            },
            {
              "description": "The name of the notification trigger."
            }
          ]
        },
        "triggerTargetArn": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerTargetArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent."
            }
          ]
        }
      },
      "type": "object"
    },
    "TriggerConfigList": {
      "items": {
        "$ref": "#/definitions/TriggerConfig"
      },
      "type": "array"
    },
    "TriggerEventType": {
      "enum": [
        "DeploymentStart",
        "DeploymentSuccess",
        "DeploymentFailure",
        "DeploymentStop",
        "DeploymentRollback",
        "DeploymentReady",
        "InstanceStart",
        "InstanceSuccess",
        "InstanceFailure",
        "InstanceReady"
      ],
      "type": "string"
    },
    "TriggerEventTypeList": {
      "items": {
        "$ref": "#/definitions/TriggerEventType"
      },
      "type": "array"
    },
    "TriggerName": {
      "type": "string"
    },
    "TriggerTargetArn": {
      "type": "string"
    },
    "TriggerTargetsLimitExceededException": {},
    "UnsupportedActionForDeploymentTypeException": {},
    "UntagResourceInput": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Arn"
            },
            {
              "description": " The Amazon Resource Name (ARN) that specifies from which resource to disassociate the tags with the keys in the <code>TagKeys</code> input parameter. "
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeyList"
            },
            {
              "description": " A list of keys of <code>Tag</code> objects. The <code>Tag</code> objects identified by the keys are disassociated from the resource specified by the <code>ResourceArn</code> input parameter. "
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "title": "UntagResourceInput",
      "type": "object"
    },
    "UntagResourceOutput": {
      "properties": {},
      "type": "object"
    },
    "UpdateApplicationInput": {
      "description": "Represents the input of an <code>UpdateApplication</code> operation.",
      "properties": {
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The current name of the application you want to change."
            }
          ]
        },
        "newApplicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The new name to give the application."
            }
          ]
        }
      },
      "title": "UpdateApplicationInput",
      "type": "object"
    },
    "UpdateDeploymentGroupInput": {
      "description": "Represents the input of an <code>UpdateDeploymentGroup</code> operation.",
      "properties": {
        "alarmConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/AlarmConfiguration"
            },
            {
              "description": "Information to add or change about Amazon CloudWatch alarms when the deployment group is updated."
            }
          ]
        },
        "applicationName": {
          "allOf": [
            {
              "$ref": "#/definitions/ApplicationName"
            },
            {
              "description": "The application name that corresponds to the deployment group to update."
            }
          ]
        },
        "autoRollbackConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoRollbackConfiguration"
            },
            {
              "description": "Information for an automatic rollback configuration that is added or changed when a deployment group is updated."
            }
          ]
        },
        "autoScalingGroups": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoScalingGroupNameList"
            },
            {
              "description": "The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them. To keep the Auto Scaling groups, enter their names. To remove Auto Scaling groups, do not enter any Auto Scaling group names."
            }
          ]
        },
        "blueGreenDeploymentConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/BlueGreenDeploymentConfiguration"
            },
            {
              "description": "Information about blue/green deployment options for a deployment group."
            }
          ]
        },
        "currentDeploymentGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupName"
            },
            {
              "description": "The current name of the deployment group."
            }
          ]
        },
        "deploymentConfigName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentConfigName"
            },
            {
              "description": "The replacement deployment configuration name to use, if you want to change it."
            }
          ]
        },
        "deploymentStyle": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentStyle"
            },
            {
              "description": "Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer."
            }
          ]
        },
        "ec2TagFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagFilterList"
            },
            {
              "description": "The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names."
            }
          ]
        },
        "ec2TagSet": {
          "allOf": [
            {
              "$ref": "#/definitions/EC2TagSet"
            },
            {
              "description": "Information about groups of tags applied to on-premises instances. The deployment group includes only EC2 instances identified by all the tag groups."
            }
          ]
        },
        "ecsServices": {
          "allOf": [
            {
              "$ref": "#/definitions/ECSServiceList"
            },
            {
              "description": " The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>&lt;clustername&gt;:&lt;servicename&gt;</code>. "
            }
          ]
        },
        "loadBalancerInfo": {
          "allOf": [
            {
              "$ref": "#/definitions/LoadBalancerInfo"
            },
            {
              "description": "Information about the load balancer used in a deployment."
            }
          ]
        },
        "newDeploymentGroupName": {
          "allOf": [
            {
              "$ref": "#/definitions/DeploymentGroupName"
            },
            {
              "description": "The new name of the deployment group, if you want to change it."
            }
          ]
        },
        "onPremisesInstanceTagFilters": {
          "allOf": [
            {
              "$ref": "#/definitions/TagFilterList"
            },
            {
              "description": "The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names."
            }
          ]
        },
        "onPremisesTagSet": {
          "allOf": [
            {
              "$ref": "#/definitions/OnPremisesTagSet"
            },
            {
              "description": "Information about an on-premises instance tag set. The deployment group includes only on-premises instances identified by all the tag groups."
            }
          ]
        },
        "serviceRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/Role"
            },
            {
              "description": "A replacement ARN for the service role, if you want to change it."
            }
          ]
        },
        "triggerConfigurations": {
          "allOf": [
            {
              "$ref": "#/definitions/TriggerConfigList"
            },
            {
              "description": "Information about triggers to change when the deployment group is updated. For examples, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-edit.html\">Edit a Trigger in a CodeDeploy Deployment Group</a> in the <i>AWS CodeDeploy User Guide</i>."
            }
          ]
        }
      },
      "required": [
        "applicationName",
        "currentDeploymentGroupName"
      ],
      "title": "UpdateDeploymentGroupInput",
      "type": "object"
    },
    "UpdateDeploymentGroupOutput": {
      "description": "Represents the output of an <code>UpdateDeploymentGroup</code> operation.",
      "properties": {
        "hooksNotCleanedUp": {
          "allOf": [
            {
              "$ref": "#/definitions/AutoScalingGroupList"
            },
            {
              "description": "If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the AWS account. If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the AWS account."
            }
          ]
        }
      },
      "type": "object"
    },
    "Value": {
      "type": "string"
    },
    "Version": {
      "type": "string"
    },
    "VersionId": {
      "type": "string"
    },
    "WaitTimeInMins": {
      "type": "integer"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/codedeploy/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}