{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "description": "Amazon Comprehend is an AWS service for gaining insight into the content of documents. Use these actions to determine the topics contained in your documents, the topics they discuss, the predominant sentiment expressed in them, the predominant language used, and more.",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Comprehend",
    "version": "2017-11-27",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/comprehend-2017-11-27.normal.json",
        "x-apisguru-driver": "external"
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "comprehend",
    "x-datafire": {
      "name": "amazonaws_comprehend",
      "type": "openapi"
    }
  },
  "host": "comprehend.us-east-1.amazonaws.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/#X-Amz-Target=Comprehend_20171127.BatchDetectDominantLanguage": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.BatchDetectDominantLanguage"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDetectDominantLanguageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDetectDominantLanguageResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "BatchSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchSizeLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Determines the dominant language of the input text for a batch of documents. For a list of languages that Amazon Comprehend can detect, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>. ",
        "operationId": "BatchDetectDominantLanguage"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.BatchDetectEntities": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.BatchDetectEntities"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDetectEntitiesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDetectEntitiesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "483": {
            "description": "BatchSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchSizeLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Inspects the text of a batch of documents for named entities and returns information about them. For more information about named entities, see <a>how-entities</a> ",
        "operationId": "BatchDetectEntities"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.BatchDetectKeyPhrases": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.BatchDetectKeyPhrases"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDetectKeyPhrasesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDetectKeyPhrasesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "483": {
            "description": "BatchSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchSizeLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Detects the key noun phrases found in a batch of documents.",
        "operationId": "BatchDetectKeyPhrases"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.BatchDetectSentiment": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.BatchDetectSentiment"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDetectSentimentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDetectSentimentResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "483": {
            "description": "BatchSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchSizeLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Inspects a batch of documents and returns an inference of the prevailing sentiment, <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>, in each one.",
        "operationId": "BatchDetectSentiment"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.BatchDetectSyntax": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.BatchDetectSyntax"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDetectSyntaxRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BatchDetectSyntaxResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "483": {
            "description": "BatchSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/BatchSizeLimitExceededException"
            }
          },
          "484": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Inspects the text of a batch of documents for the syntax and part of speech of the words in the document and returns information about them. For more information, see <a>how-syntax</a>.",
        "operationId": "BatchDetectSyntax"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ClassifyDocument": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.ClassifyDocument"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassifyDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClassifyDocumentResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          },
          "482": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Creates a new document classification request to analyze a single document in real-time, using a previously created and trained custom model and an endpoint.",
        "operationId": "ClassifyDocument"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.CreateDocumentClassifier": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.CreateDocumentClassifier"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDocumentClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateDocumentClassifierResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "482": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "485": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "486": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "487": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Creates a new document classifier that you can use to categorize documents. To create a classifier, you provide a set of training documents that labeled with the categories that you want to use. After the classifier is trained you can use it to categorize a set of labeled documents into the categories. For more information, see <a>how-document-classification</a>.",
        "operationId": "CreateDocumentClassifier"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.CreateEndpoint": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.CreateEndpoint"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateEndpointResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "482": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "486": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "487": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Creates a model-specific endpoint for synchronous inference for a previously trained custom model ",
        "operationId": "CreateEndpoint"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.CreateEntityRecognizer": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.CreateEntityRecognizer"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEntityRecognizerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateEntityRecognizerResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "482": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "485": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "486": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "487": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Creates an entity recognizer using submitted files. After your <code>CreateEntityRecognizer</code> request is submitted, you can check job status using the API. ",
        "operationId": "CreateEntityRecognizer"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DeleteDocumentClassifier": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DeleteDocumentClassifier"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDocumentClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDocumentClassifierResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "485": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Deletes a previously created document classifier</p> <p>Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted. If an active inference job is using the model, a <code>ResourceInUseException</code> will be returned.</p> <p>This is an asynchronous action that puts the classifier into a DELETING state, and it is then removed by a background job. Once removed, the classifier disappears from your account and is no longer available for use. </p>",
        "operationId": "DeleteDocumentClassifier"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DeleteEndpoint": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DeleteEndpoint"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteEndpointResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Deletes a model-specific endpoint for a previously-trained custom model. All endpoints must be deleted in order for the model to be deleted.",
        "operationId": "DeleteEndpoint"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DeleteEntityRecognizer": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DeleteEntityRecognizer"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEntityRecognizerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteEntityRecognizerResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "485": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Deletes an entity recognizer.</p> <p>Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted. If an active inference job is using the model, a <code>ResourceInUseException</code> will be returned.</p> <p>This is an asynchronous action that puts the recognizer into a DELETING state, and it is then removed by a background job. Once removed, the recognizer disappears from your account and is no longer available for use. </p>",
        "operationId": "DeleteEntityRecognizer"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeDocumentClassificationJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeDocumentClassificationJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDocumentClassificationJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDocumentClassificationJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the properties associated with a document classification job. Use this operation to get the status of a classification job.",
        "operationId": "DescribeDocumentClassificationJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeDocumentClassifier": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeDocumentClassifier"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDocumentClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDocumentClassifierResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the properties associated with a document classifier.",
        "operationId": "DescribeDocumentClassifier"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeDominantLanguageDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeDominantLanguageDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeDominantLanguageDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeDominantLanguageDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the properties associated with a dominant language detection job. Use this operation to get the status of a detection job.",
        "operationId": "DescribeDominantLanguageDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeEndpoint": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeEndpoint"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEndpointResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the properties associated with a specific endpoint. Use this operation to get the status of an endpoint.",
        "operationId": "DescribeEndpoint"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeEntitiesDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeEntitiesDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEntitiesDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEntitiesDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the properties associated with an entities detection job. Use this operation to get the status of a detection job.",
        "operationId": "DescribeEntitiesDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeEntityRecognizer": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeEntityRecognizer"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEntityRecognizerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEntityRecognizerResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Provides details about an entity recognizer including status, S3 buckets containing training data, recognizer metadata, metrics, and so on.",
        "operationId": "DescribeEntityRecognizer"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeEventsDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeEventsDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeEventsDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeEventsDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the status and details of an events detection job.",
        "operationId": "DescribeEventsDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeKeyPhrasesDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeKeyPhrasesDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeKeyPhrasesDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeKeyPhrasesDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the properties associated with a key phrases detection job. Use this operation to get the status of a detection job.",
        "operationId": "DescribeKeyPhrasesDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribePiiEntitiesDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribePiiEntitiesDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribePiiEntitiesDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribePiiEntitiesDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the properties associated with a PII entities detection job. For example, you can use this operation to get the job status.",
        "operationId": "DescribePiiEntitiesDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeSentimentDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeSentimentDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeSentimentDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeSentimentDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the properties associated with a sentiment detection job. Use this operation to get the status of a detection job.",
        "operationId": "DescribeSentimentDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DescribeTopicsDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DescribeTopicsDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeTopicsDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeTopicsDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets the properties associated with a topic detection job. Use this operation to get the status of a detection job.",
        "operationId": "DescribeTopicsDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DetectDominantLanguage": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DetectDominantLanguage"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetectDominantLanguageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DetectDominantLanguageResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Determines the dominant language of the input text. For a list of languages that Amazon Comprehend can detect, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>. ",
        "operationId": "DetectDominantLanguage"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DetectEntities": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DetectEntities"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetectEntitiesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DetectEntitiesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          },
          "482": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "483": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "484": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Inspects text for named entities, and returns information about them. For more information, about named entities, see <a>how-entities</a>. ",
        "operationId": "DetectEntities"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DetectKeyPhrases": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DetectKeyPhrases"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetectKeyPhrasesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DetectKeyPhrasesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Detects the key noun phrases found in the text. ",
        "operationId": "DetectKeyPhrases"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DetectPiiEntities": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DetectPiiEntities"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetectPiiEntitiesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DetectPiiEntitiesResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Inspects the input text for entities that contain personally identifiable information (PII) and returns information about them.",
        "operationId": "DetectPiiEntities"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DetectSentiment": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DetectSentiment"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetectSentimentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DetectSentimentResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Inspects text and returns an inference of the prevailing sentiment (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>). ",
        "operationId": "DetectSentiment"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.DetectSyntax": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.DetectSyntax"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DetectSyntaxRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DetectSyntaxResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TextSizeLimitExceededException",
            "schema": {
              "$ref": "#/definitions/TextSizeLimitExceededException"
            }
          },
          "482": {
            "description": "UnsupportedLanguageException",
            "schema": {
              "$ref": "#/definitions/UnsupportedLanguageException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Inspects text for syntax and the part of speech of words in the document. For more information, <a>how-syntax</a>.",
        "operationId": "DetectSyntax"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListDocumentClassificationJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Comprehend_20171127.ListDocumentClassificationJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDocumentClassificationJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDocumentClassificationJobsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets a list of the documentation classification jobs that you have submitted.",
        "operationId": "ListDocumentClassificationJobs"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListDocumentClassifiers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Comprehend_20171127.ListDocumentClassifiers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDocumentClassifiersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDocumentClassifiersResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets a list of the document classifiers that you have created.",
        "operationId": "ListDocumentClassifiers"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListDominantLanguageDetectionJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Comprehend_20171127.ListDominantLanguageDetectionJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDominantLanguageDetectionJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDominantLanguageDetectionJobsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets a list of the dominant language detection jobs that you have submitted.",
        "operationId": "ListDominantLanguageDetectionJobs"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListEndpoints": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.ListEndpoints"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListEndpointsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListEndpointsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets a list of all existing endpoints that you've created.",
        "operationId": "ListEndpoints"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListEntitiesDetectionJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Comprehend_20171127.ListEntitiesDetectionJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListEntitiesDetectionJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListEntitiesDetectionJobsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets a list of the entity detection jobs that you have submitted.",
        "operationId": "ListEntitiesDetectionJobs"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListEntityRecognizers": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Comprehend_20171127.ListEntityRecognizers"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListEntityRecognizersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListEntityRecognizersResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Gets a list of the properties of all entity recognizers that you created, including recognizers currently in training. Allows you to filter the list of recognizers based on criteria such as status and submission time. This call returns up to 500 entity recognizers in the list, with a default number of 100 recognizers in the list.</p> <p>The results of this list are not in any particular order. Please get the list and sort locally if needed.</p>",
        "operationId": "ListEntityRecognizers"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListEventsDetectionJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Comprehend_20171127.ListEventsDetectionJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListEventsDetectionJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListEventsDetectionJobsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets a list of the events detection jobs that you have submitted.",
        "operationId": "ListEventsDetectionJobs"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListKeyPhrasesDetectionJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Comprehend_20171127.ListKeyPhrasesDetectionJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListKeyPhrasesDetectionJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListKeyPhrasesDetectionJobsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Get a list of key phrase detection jobs that you have submitted.",
        "operationId": "ListKeyPhrasesDetectionJobs"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListPiiEntitiesDetectionJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.ListPiiEntitiesDetectionJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPiiEntitiesDetectionJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListPiiEntitiesDetectionJobsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets a list of the PII entity detection jobs that you have submitted.",
        "operationId": "ListPiiEntitiesDetectionJobs"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListSentimentDetectionJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Comprehend_20171127.ListSentimentDetectionJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListSentimentDetectionJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListSentimentDetectionJobsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets a list of sentiment detection jobs that you have submitted.",
        "operationId": "ListSentimentDetectionJobs"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListTagsForResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.ListTagsForResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTagsForResourceResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Lists all tags associated with a given Amazon Comprehend resource. ",
        "operationId": "ListTagsForResource"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.ListTopicsDetectionJobs": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Pagination limit",
            "in": "query",
            "name": "MaxResults",
            "required": false,
            "type": "string"
          },
          {
            "description": "Pagination token",
            "in": "query",
            "name": "NextToken",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "Comprehend_20171127.ListTopicsDetectionJobs"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListTopicsDetectionJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListTopicsDetectionJobsResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "InvalidFilterException",
            "schema": {
              "$ref": "#/definitions/InvalidFilterException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Gets a list of the topic detection jobs that you have submitted.",
        "operationId": "ListTopicsDetectionJobs"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StartDocumentClassificationJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StartDocumentClassificationJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartDocumentClassificationJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartDocumentClassificationJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          },
          "484": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "485": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Starts an asynchronous document classification job. Use the operation to track the progress of the job.",
        "operationId": "StartDocumentClassificationJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StartDominantLanguageDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StartDominantLanguageDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartDominantLanguageDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartDominantLanguageDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Starts an asynchronous dominant language detection job for a collection of documents. Use the operation to track the status of a job.",
        "operationId": "StartDominantLanguageDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StartEntitiesDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StartEntitiesDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartEntitiesDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartEntitiesDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          },
          "484": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "485": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Starts an asynchronous entity detection job for a collection of documents. Use the operation to track the status of a job.</p> <p>This API can be used for either standard entity detection or custom entity recognition. In order to be used for custom entity recognition, the optional <code>EntityRecognizerArn</code> must be used in order to provide access to the recognizer being used to detect the custom entity.</p>",
        "operationId": "StartEntitiesDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StartEventsDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StartEventsDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartEventsDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartEventsDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Starts an asynchronous event detection job for a collection of documents.",
        "operationId": "StartEventsDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StartKeyPhrasesDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StartKeyPhrasesDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartKeyPhrasesDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartKeyPhrasesDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Starts an asynchronous key phrase detection job for a collection of documents. Use the operation to track the status of a job.",
        "operationId": "StartKeyPhrasesDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StartPiiEntitiesDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StartPiiEntitiesDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartPiiEntitiesDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartPiiEntitiesDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Starts an asynchronous PII entity detection job for a collection of documents.",
        "operationId": "StartPiiEntitiesDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StartSentimentDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StartSentimentDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartSentimentDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartSentimentDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Starts an asynchronous sentiment detection job for a collection of documents. use the operation to track the status of a job.",
        "operationId": "StartSentimentDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StartTopicsDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StartTopicsDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartTopicsDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartTopicsDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "KmsKeyValidationException",
            "schema": {
              "$ref": "#/definitions/KmsKeyValidationException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Starts an asynchronous topic detection job. Use the <code>DescribeTopicDetectionJob</code> operation to track the status of a job.",
        "operationId": "StartTopicsDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StopDominantLanguageDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StopDominantLanguageDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopDominantLanguageDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopDominantLanguageDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Stops a dominant language detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>",
        "operationId": "StopDominantLanguageDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StopEntitiesDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StopEntitiesDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopEntitiesDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopEntitiesDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Stops an entities detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>",
        "operationId": "StopEntitiesDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StopEventsDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StopEventsDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopEventsDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopEventsDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Stops an events detection job in progress.",
        "operationId": "StopEventsDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StopKeyPhrasesDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StopKeyPhrasesDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopKeyPhrasesDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopKeyPhrasesDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Stops a key phrases detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>",
        "operationId": "StopKeyPhrasesDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StopPiiEntitiesDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StopPiiEntitiesDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopPiiEntitiesDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopPiiEntitiesDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Stops a PII entities detection job in progress.",
        "operationId": "StopPiiEntitiesDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StopSentimentDetectionJob": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StopSentimentDetectionJob"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopSentimentDetectionJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopSentimentDetectionJobResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "JobNotFoundException",
            "schema": {
              "$ref": "#/definitions/JobNotFoundException"
            }
          },
          "482": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Stops a sentiment detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>",
        "operationId": "StopSentimentDetectionJob"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StopTrainingDocumentClassifier": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StopTrainingDocumentClassifier"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopTrainingDocumentClassifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopTrainingDocumentClassifierResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Stops a document classifier training job while in progress.</p> <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and put into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with an empty HTTP body. </p>",
        "operationId": "StopTrainingDocumentClassifier"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.StopTrainingEntityRecognizer": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.StopTrainingEntityRecognizer"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopTrainingEntityRecognizerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopTrainingEntityRecognizerResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "<p>Stops an entity recognizer training job while in progress.</p> <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and putted into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with an empty HTTP body.</p>",
        "operationId": "StopTrainingEntityRecognizer"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.TagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.TagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TagResourceResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "TooManyTagsException",
            "schema": {
              "$ref": "#/definitions/TooManyTagsException"
            }
          },
          "484": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with \"Sales\" as the key might be added to a resource to indicate its use by the sales department. ",
        "operationId": "TagResource"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.UntagResource": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.UntagResource"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UntagResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UntagResourceResponse"
            }
          },
          "480": {
            "description": "TooManyTagKeysException",
            "schema": {
              "$ref": "#/definitions/TooManyTagKeysException"
            }
          },
          "481": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "484": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Removes a specific tag associated with an Amazon Comprehend resource. ",
        "operationId": "UntagResource"
      }
    },
    "/#X-Amz-Target=Comprehend_20171127.UpdateEndpoint": {
      "parameters": [
        {
          "in": "header",
          "name": "X-Amz-Content-Sha256",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Date",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Algorithm",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Credential",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Security-Token",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-Signature",
          "required": false,
          "type": "string"
        },
        {
          "in": "header",
          "name": "X-Amz-SignedHeaders",
          "required": false,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "Comprehend_20171127.UpdateEndpoint"
            ],
            "in": "header",
            "name": "X-Amz-Target",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEndpointRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateEndpointResponse"
            }
          },
          "480": {
            "description": "InvalidRequestException",
            "schema": {
              "$ref": "#/definitions/InvalidRequestException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "ResourceInUseException",
            "schema": {
              "$ref": "#/definitions/ResourceInUseException"
            }
          },
          "483": {
            "description": "ResourceLimitExceededException",
            "schema": {
              "$ref": "#/definitions/ResourceLimitExceededException"
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "485": {
            "description": "ResourceUnavailableException",
            "schema": {
              "$ref": "#/definitions/ResourceUnavailableException"
            }
          },
          "486": {
            "description": "InternalServerException",
            "schema": {
              "$ref": "#/definitions/InternalServerException"
            }
          }
        },
        "description": "Updates information about the specified endpoint.",
        "operationId": "UpdateEndpoint"
      }
    }
  },
  "definitions": {
    "AnyLengthString": {
      "type": "string"
    },
    "AttributeNamesList": {
      "items": {
        "$ref": "#/definitions/AttributeNamesListItem"
      },
      "type": "array"
    },
    "AttributeNamesListItem": {
      "maxLength": 63,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*",
      "type": "string"
    },
    "AugmentedManifestsListItem": {
      "description": "An augmented manifest file that provides training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.",
      "properties": {
        "AttributeNames": {
          "allOf": [
            {
              "$ref": "#/definitions/AttributeNamesList"
            },
            {
              "description": "<p>The JSON attribute that contains the annotations for your training documents. The number of attribute names that you specify depends on whether your augmented manifest file is the output of a single labeling job or a chained labeling job.</p> <p>If your file is the output of a single labeling job, specify the LabelAttributeName key that was used when the job was created in Ground Truth.</p> <p>If your file is the output of a chained labeling job, specify the LabelAttributeName key for one or more jobs in the chain. Each LabelAttributeName key provides the annotations from an individual job.</p>"
            }
          ]
        },
        "S3Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Uri"
            },
            {
              "description": "The Amazon S3 location of the augmented manifest file."
            }
          ]
        }
      },
      "required": [
        "S3Uri",
        "AttributeNames"
      ],
      "type": "object"
    },
    "BatchDetectDominantLanguageItemResult": {
      "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
      "properties": {
        "Index": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The zero-based index of the document in the input list."
            }
          ]
        },
        "Languages": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfDominantLanguages"
            },
            {
              "description": "One or more <a>DominantLanguage</a> objects describing the dominant languages in the document."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDetectDominantLanguageRequest": {
      "properties": {
        "TextList": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputStringList"
            },
            {
              "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters and must contain fewer than 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "TextList"
      ],
      "title": "BatchDetectDominantLanguageRequest",
      "type": "object"
    },
    "BatchDetectDominantLanguageResponse": {
      "properties": {
        "ErrorList": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemErrorList"
            },
            {
              "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty."
            }
          ]
        },
        "ResultList": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfDetectDominantLanguageResult"
            },
            {
              "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty."
            }
          ]
        }
      },
      "required": [
        "ResultList",
        "ErrorList"
      ],
      "type": "object"
    },
    "BatchDetectEntitiesItemResult": {
      "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
      "properties": {
        "Entities": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfEntities"
            },
            {
              "description": "One or more <a>Entity</a> objects, one for each entity detected in the document."
            }
          ]
        },
        "Index": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The zero-based index of the document in the input list."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDetectEntitiesRequest": {
      "properties": {
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language."
            }
          ]
        },
        "TextList": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputStringList"
            },
            {
              "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "TextList",
        "LanguageCode"
      ],
      "title": "BatchDetectEntitiesRequest",
      "type": "object"
    },
    "BatchDetectEntitiesResponse": {
      "properties": {
        "ErrorList": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemErrorList"
            },
            {
              "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty."
            }
          ]
        },
        "ResultList": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfDetectEntitiesResult"
            },
            {
              "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty."
            }
          ]
        }
      },
      "required": [
        "ResultList",
        "ErrorList"
      ],
      "type": "object"
    },
    "BatchDetectKeyPhrasesItemResult": {
      "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
      "properties": {
        "Index": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The zero-based index of the document in the input list."
            }
          ]
        },
        "KeyPhrases": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfKeyPhrases"
            },
            {
              "description": "One or more <a>KeyPhrase</a> objects, one for each key phrase detected in the document."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDetectKeyPhrasesRequest": {
      "properties": {
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language."
            }
          ]
        },
        "TextList": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputStringList"
            },
            {
              "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "TextList",
        "LanguageCode"
      ],
      "title": "BatchDetectKeyPhrasesRequest",
      "type": "object"
    },
    "BatchDetectKeyPhrasesResponse": {
      "properties": {
        "ErrorList": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemErrorList"
            },
            {
              "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty."
            }
          ]
        },
        "ResultList": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfDetectKeyPhrasesResult"
            },
            {
              "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty."
            }
          ]
        }
      },
      "required": [
        "ResultList",
        "ErrorList"
      ],
      "type": "object"
    },
    "BatchDetectSentimentItemResult": {
      "description": "The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.",
      "properties": {
        "Index": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The zero-based index of the document in the input list."
            }
          ]
        },
        "Sentiment": {
          "allOf": [
            {
              "$ref": "#/definitions/SentimentType"
            },
            {
              "description": "The sentiment detected in the document."
            }
          ]
        },
        "SentimentScore": {
          "allOf": [
            {
              "$ref": "#/definitions/SentimentScore"
            },
            {
              "description": "The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDetectSentimentRequest": {
      "properties": {
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language."
            }
          ]
        },
        "TextList": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputStringList"
            },
            {
              "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "TextList",
        "LanguageCode"
      ],
      "title": "BatchDetectSentimentRequest",
      "type": "object"
    },
    "BatchDetectSentimentResponse": {
      "properties": {
        "ErrorList": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemErrorList"
            },
            {
              "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty."
            }
          ]
        },
        "ResultList": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfDetectSentimentResult"
            },
            {
              "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty."
            }
          ]
        }
      },
      "required": [
        "ResultList",
        "ErrorList"
      ],
      "type": "object"
    },
    "BatchDetectSyntaxItemResult": {
      "description": "The result of calling the operation. The operation returns one object that is successfully processed by the operation.",
      "properties": {
        "Index": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The zero-based index of the document in the input list."
            }
          ]
        },
        "SyntaxTokens": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfSyntaxTokens"
            },
            {
              "description": "The syntax tokens for the words in the document, one token for each word."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchDetectSyntaxRequest": {
      "properties": {
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/SyntaxLanguageCode"
            },
            {
              "description": "The language of the input documents. You can specify any of the following languages supported by Amazon Comprehend: German (\"de\"), English (\"en\"), Spanish (\"es\"), French (\"fr\"), Italian (\"it\"), or Portuguese (\"pt\"). All documents must be in the same language."
            }
          ]
        },
        "TextList": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputStringList"
            },
            {
              "description": "A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "TextList",
        "LanguageCode"
      ],
      "title": "BatchDetectSyntaxRequest",
      "type": "object"
    },
    "BatchDetectSyntaxResponse": {
      "properties": {
        "ErrorList": {
          "allOf": [
            {
              "$ref": "#/definitions/BatchItemErrorList"
            },
            {
              "description": "A list containing one object for each document that contained an error. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If there are no errors in the batch, the <code>ErrorList</code> is empty."
            }
          ]
        },
        "ResultList": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfDetectSyntaxResult"
            },
            {
              "description": "A list of objects containing the results of the operation. The results are sorted in ascending order by the <code>Index</code> field and match the order of the documents in the input list. If all of the documents contain an error, the <code>ResultList</code> is empty."
            }
          ]
        }
      },
      "required": [
        "ResultList",
        "ErrorList"
      ],
      "type": "object"
    },
    "BatchItemError": {
      "description": "Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.",
      "properties": {
        "ErrorCode": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The numeric error code of the error."
            }
          ]
        },
        "ErrorMessage": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A text description of the error."
            }
          ]
        },
        "Index": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The zero-based index of the document in the input list."
            }
          ]
        }
      },
      "type": "object"
    },
    "BatchItemErrorList": {
      "items": {
        "$ref": "#/definitions/BatchItemError"
      },
      "type": "array"
    },
    "BatchSizeLimitExceededException": {},
    "ClassifierEvaluationMetrics": {
      "description": "Describes the result metrics for the test data associated with an documentation classifier.",
      "properties": {
        "Accuracy": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents."
            }
          ]
        },
        "F1Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of how accurate the classifier results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. "
            }
          ]
        },
        "HammingLoss": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "Indicates the fraction of labels that are incorrectly predicted. Also seen as the fraction of wrong labels compared to the total number of labels. Scores closer to zero are better."
            }
          ]
        },
        "MicroF1Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of how accurate the classifier results are for the test data. It is a combination of the <code>Micro Precision</code> and <code>Micro Recall</code> values. The <code>Micro F1Score</code> is the harmonic mean of the two scores. The highest score is 1, and the worst score is 0."
            }
          ]
        },
        "MicroPrecision": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. Unlike the Precision metric which comes from averaging the precision of all available labels, this is based on the overall score of all precision scores added together."
            }
          ]
        },
        "MicroRecall": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. Specifically, this indicates how many of the correct categories in the text that the model can predict. It is a percentage of correct categories in the text that can found. Instead of averaging the recall scores of all labels (as with Recall), micro Recall is based on the overall score of all recall scores added together."
            }
          ]
        },
        "Precision": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones."
            }
          ]
        },
        "Recall": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ClassifierMetadata": {
      "description": "Provides information about a document classifier.",
      "properties": {
        "EvaluationMetrics": {
          "allOf": [
            {
              "$ref": "#/definitions/ClassifierEvaluationMetrics"
            },
            {
              "description": " Describes the result metrics for the test data associated with an documentation classifier."
            }
          ]
        },
        "NumberOfLabels": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of labels in the input data. "
            }
          ]
        },
        "NumberOfTestDocuments": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents, up to 10,000 documents."
            }
          ]
        },
        "NumberOfTrainedDocuments": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents."
            }
          ]
        }
      },
      "type": "object"
    },
    "ClassifyDocumentRequest": {
      "properties": {
        "EndpointArn": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierEndpointArn"
            },
            {
              "description": "The Amazon Resource Number (ARN) of the endpoint."
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputString"
            },
            {
              "description": "The document text to be analyzed."
            }
          ]
        }
      },
      "required": [
        "Text",
        "EndpointArn"
      ],
      "title": "ClassifyDocumentRequest",
      "type": "object"
    },
    "ClassifyDocumentResponse": {
      "properties": {
        "Classes": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfClasses"
            },
            {
              "description": "The classes used by the document being analyzed. These are used for multi-class trained models. Individual classes are mutually exclusive and each document is expected to have only a single class assigned to it. For example, an animal can be a dog or a cat, but not both at the same time. "
            }
          ]
        },
        "Labels": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfLabels"
            },
            {
              "description": "The labels used the document being analyzed. These are used for multi-label trained models. Individual labels represent different categories that are related in some manner and are not mutually exclusive. For example, a movie can be just an action movie, or it can be an action movie, a science fiction movie, and a comedy, all at the same time. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ClientRequestTokenString": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9-]+$",
      "type": "string"
    },
    "ComprehendArn": {
      "maxLength": 256,
      "pattern": "arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z0-9-]{1,64}/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
      "type": "string"
    },
    "ComprehendArnName": {
      "maxLength": 63,
      "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$",
      "type": "string"
    },
    "ComprehendEndpointArn": {
      "maxLength": 256,
      "pattern": "arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:(document-classifier-endpoint|entity-recognizer-endpoint)/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
      "type": "string"
    },
    "ComprehendEndpointName": {
      "maxLength": 40,
      "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$",
      "type": "string"
    },
    "ComprehendModelArn": {
      "maxLength": 256,
      "pattern": "arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:(document-classifier|entity-recognizer)/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
      "type": "string"
    },
    "ConcurrentModificationException": {},
    "CreateDocumentClassifierRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data."
            }
          ]
        },
        "DocumentClassifierName": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendArnName"
            },
            {
              "description": "The name of the document classifier."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierInputDataConfig"
            },
            {
              "description": "Specifies the format and location of the input data for the job."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents. You can specify any of the following languages supported by Amazon Comprehend: German (\"de\"), English (\"en\"), Spanish (\"es\"), French (\"fr\"), Italian (\"it\"), or Portuguese (\"pt\"). All documents must be in the same language."
            }
          ]
        },
        "Mode": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierMode"
            },
            {
              "description": "Indicates the mode in which the classifier will be trained. The classifier can be trained in multi-class mode, which identifies one and only one class for each document, or multi-label mode, which identifies one or more labels for each document. In multi-label mode, multiple labels for an individual document are separated by a delimiter. The default delimiter between labels is a pipe (|)."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierOutputDataConfig"
            },
            {
              "description": "Enables the addition of output results configuration parameters for custom classifier jobs."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Tags to be associated with the document classifier being created. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with \"Sales\" as the key might be added to a resource to indicate its use by the sales department. "
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your custom classifier. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "required": [
        "DocumentClassifierName",
        "DataAccessRoleArn",
        "InputDataConfig",
        "LanguageCode"
      ],
      "title": "CreateDocumentClassifierRequest",
      "type": "object"
    },
    "CreateDocumentClassifierResponse": {
      "properties": {
        "DocumentClassifierArn": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the document classifier."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateEndpointRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "An idempotency token provided by the customer. If this token matches a previous endpoint creation request, Amazon Comprehend will not return a <code>ResourceInUseException</code>. "
            }
          ]
        },
        "DesiredInferenceUnits": {
          "allOf": [
            {
              "$ref": "#/definitions/InferenceUnitsInteger"
            },
            {
              "description": " The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second."
            }
          ]
        },
        "EndpointName": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendEndpointName"
            },
            {
              "description": "This is the descriptive suffix that becomes part of the <code>EndpointArn</code> used for all subsequent requests to this resource. "
            }
          ]
        },
        "ModelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendModelArn"
            },
            {
              "description": "The Amazon Resource Number (ARN) of the model to which the endpoint will be attached."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Tags associated with the endpoint being created. A tag is a key-value pair that adds metadata to the endpoint. For example, a tag with \"Sales\" as the key might be added to an endpoint to indicate its use by the sales department. "
            }
          ]
        }
      },
      "required": [
        "EndpointName",
        "ModelArn",
        "DesiredInferenceUnits"
      ],
      "title": "CreateEndpointRequest",
      "type": "object"
    },
    "CreateEndpointResponse": {
      "properties": {
        "EndpointArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendEndpointArn"
            },
            {
              "description": "The Amazon Resource Number (ARN) of the endpoint being created."
            }
          ]
        }
      },
      "type": "object"
    },
    "CreateEntityRecognizerRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": " A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerInputDataConfig"
            },
            {
              "description": "Specifies the format and location of the input data. The S3 bucket containing the input data must be located in the same region as the entity recognizer being created. "
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": " You can specify any of the following languages supported by Amazon Comprehend: English (\"en\"), Spanish (\"es\"), French (\"fr\"), Italian (\"it\"), German (\"de\"), or Portuguese (\"pt\"). All documents must be in the same language."
            }
          ]
        },
        "RecognizerName": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendArnName"
            },
            {
              "description": "The name given to the newly created recognizer. Recognizer names can be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The name must be unique in the account/region."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Tags to be associated with the entity recognizer being created. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with \"Sales\" as the key might be added to a resource to indicate its use by the sales department. "
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your custom entity recognizer. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "required": [
        "RecognizerName",
        "DataAccessRoleArn",
        "InputDataConfig",
        "LanguageCode"
      ],
      "title": "CreateEntityRecognizerRequest",
      "type": "object"
    },
    "CreateEntityRecognizerResponse": {
      "properties": {
        "EntityRecognizerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer."
            }
          ]
        }
      },
      "type": "object"
    },
    "CustomerInputString": {
      "format": "password",
      "minLength": 1,
      "type": "string"
    },
    "CustomerInputStringList": {
      "items": {
        "$ref": "#/definitions/CustomerInputString"
      },
      "type": "array"
    },
    "DeleteDocumentClassifierRequest": {
      "properties": {
        "DocumentClassifierArn": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the document classifier. "
            }
          ]
        }
      },
      "required": [
        "DocumentClassifierArn"
      ],
      "title": "DeleteDocumentClassifierRequest",
      "type": "object"
    },
    "DeleteDocumentClassifierResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteEndpointRequest": {
      "properties": {
        "EndpointArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendEndpointArn"
            },
            {
              "description": "The Amazon Resource Number (ARN) of the endpoint being deleted."
            }
          ]
        }
      },
      "required": [
        "EndpointArn"
      ],
      "title": "DeleteEndpointRequest",
      "type": "object"
    },
    "DeleteEndpointResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteEntityRecognizerRequest": {
      "properties": {
        "EntityRecognizerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer."
            }
          ]
        }
      },
      "required": [
        "EntityRecognizerArn"
      ],
      "title": "DeleteEntityRecognizerRequest",
      "type": "object"
    },
    "DeleteEntityRecognizerResponse": {
      "properties": {},
      "type": "object"
    },
    "DescribeDocumentClassificationJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "DescribeDocumentClassificationJobRequest",
      "type": "object"
    },
    "DescribeDocumentClassificationJobResponse": {
      "properties": {
        "DocumentClassificationJobProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassificationJobProperties"
            },
            {
              "description": "An object that describes the properties associated with the document classification job."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDocumentClassifierRequest": {
      "properties": {
        "DocumentClassifierArn": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the document classifier. The operation returns this identifier in its response."
            }
          ]
        }
      },
      "required": [
        "DocumentClassifierArn"
      ],
      "title": "DescribeDocumentClassifierRequest",
      "type": "object"
    },
    "DescribeDocumentClassifierResponse": {
      "properties": {
        "DocumentClassifierProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierProperties"
            },
            {
              "description": "An object that contains the properties associated with a document classifier."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeDominantLanguageDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "DescribeDominantLanguageDetectionJobRequest",
      "type": "object"
    },
    "DescribeDominantLanguageDetectionJobResponse": {
      "properties": {
        "DominantLanguageDetectionJobProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/DominantLanguageDetectionJobProperties"
            },
            {
              "description": "An object that contains the properties associated with a dominant language detection job."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeEndpointRequest": {
      "properties": {
        "EndpointArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendEndpointArn"
            },
            {
              "description": "The Amazon Resource Number (ARN) of the endpoint being described."
            }
          ]
        }
      },
      "required": [
        "EndpointArn"
      ],
      "title": "DescribeEndpointRequest",
      "type": "object"
    },
    "DescribeEndpointResponse": {
      "properties": {
        "EndpointProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/EndpointProperties"
            },
            {
              "description": "Describes information associated with the specific endpoint."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeEntitiesDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "DescribeEntitiesDetectionJobRequest",
      "type": "object"
    },
    "DescribeEntitiesDetectionJobResponse": {
      "properties": {
        "EntitiesDetectionJobProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitiesDetectionJobProperties"
            },
            {
              "description": "An object that contains the properties associated with an entities detection job."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeEntityRecognizerRequest": {
      "properties": {
        "EntityRecognizerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer."
            }
          ]
        }
      },
      "required": [
        "EntityRecognizerArn"
      ],
      "title": "DescribeEntityRecognizerRequest",
      "type": "object"
    },
    "DescribeEntityRecognizerResponse": {
      "properties": {
        "EntityRecognizerProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerProperties"
            },
            {
              "description": "Describes information associated with an entity recognizer."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeEventsDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the events detection job."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "DescribeEventsDetectionJobRequest",
      "type": "object"
    },
    "DescribeEventsDetectionJobResponse": {
      "properties": {
        "EventsDetectionJobProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/EventsDetectionJobProperties"
            },
            {
              "description": "An object that contains the properties associated with an event detection job."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeKeyPhrasesDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "DescribeKeyPhrasesDetectionJobRequest",
      "type": "object"
    },
    "DescribeKeyPhrasesDetectionJobResponse": {
      "properties": {
        "KeyPhrasesDetectionJobProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyPhrasesDetectionJobProperties"
            },
            {
              "description": "An object that contains the properties associated with a key phrases detection job. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribePiiEntitiesDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "DescribePiiEntitiesDetectionJobRequest",
      "type": "object"
    },
    "DescribePiiEntitiesDetectionJobResponse": {
      "properties": {
        "PiiEntitiesDetectionJobProperties": {
          "$ref": "#/definitions/PiiEntitiesDetectionJobProperties"
        }
      },
      "type": "object"
    },
    "DescribeSentimentDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "DescribeSentimentDetectionJobRequest",
      "type": "object"
    },
    "DescribeSentimentDetectionJobResponse": {
      "properties": {
        "SentimentDetectionJobProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/SentimentDetectionJobProperties"
            },
            {
              "description": "An object that contains the properties associated with a sentiment detection job."
            }
          ]
        }
      },
      "type": "object"
    },
    "DescribeTopicsDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier assigned by the user to the detection job."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "DescribeTopicsDetectionJobRequest",
      "type": "object"
    },
    "DescribeTopicsDetectionJobResponse": {
      "properties": {
        "TopicsDetectionJobProperties": {
          "allOf": [
            {
              "$ref": "#/definitions/TopicsDetectionJobProperties"
            },
            {
              "description": "The list of properties for the requested job."
            }
          ]
        }
      },
      "type": "object"
    },
    "DetectDominantLanguageRequest": {
      "properties": {
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputString"
            },
            {
              "description": "A UTF-8 text string. Each string should contain at least 20 characters and must contain fewer that 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "Text"
      ],
      "title": "DetectDominantLanguageRequest",
      "type": "object"
    },
    "DetectDominantLanguageResponse": {
      "properties": {
        "Languages": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfDominantLanguages"
            },
            {
              "description": "The languages that Amazon Comprehend detected in the input text. For each language, the response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy of its inference. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site."
            }
          ]
        }
      },
      "type": "object"
    },
    "DetectEntitiesRequest": {
      "properties": {
        "EndpointArn": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerEndpointArn"
            },
            {
              "description": "<p>The Amazon Resource Name of an endpoint that is associated with a custom entity recognition model. Provide an endpoint if you want to detect entities by using your own custom model instead of the default model that is used by Amazon Comprehend.</p> <p>If you specify an endpoint, Amazon Comprehend uses the language of your custom model, and it ignores any language code that you provide in your request.</p>"
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "<p>The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.</p> <p>If your request includes the endpoint for a custom entity recognition model, Amazon Comprehend uses the language of your custom model, and it ignores any language code that you specify here.</p>"
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputString"
            },
            {
              "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "Text"
      ],
      "title": "DetectEntitiesRequest",
      "type": "object"
    },
    "DetectEntitiesResponse": {
      "properties": {
        "Entities": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfEntities"
            },
            {
              "description": "<p>A collection of entities identified in the input text. For each entity, the response provides the entity text, entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection. </p> <p>If your request uses a custom entity recognition model, Amazon Comprehend detects the entities that the model is trained to recognize. Otherwise, it detects the default entity types. For a list of default entity types, see <a>how-entities</a>.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DetectKeyPhrasesRequest": {
      "properties": {
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language."
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputString"
            },
            {
              "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "Text",
        "LanguageCode"
      ],
      "title": "DetectKeyPhrasesRequest",
      "type": "object"
    },
    "DetectKeyPhrasesResponse": {
      "properties": {
        "KeyPhrases": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfKeyPhrases"
            },
            {
              "description": "A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DetectPiiEntitiesRequest": {
      "properties": {
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents."
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "Text",
        "LanguageCode"
      ],
      "title": "DetectPiiEntitiesRequest",
      "type": "object"
    },
    "DetectPiiEntitiesResponse": {
      "properties": {
        "Entities": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfPiiEntities"
            },
            {
              "description": "A collection of PII entities identified in the input text. For each entity, the response provides the entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection."
            }
          ]
        }
      },
      "type": "object"
    },
    "DetectSentimentRequest": {
      "properties": {
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language."
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputString"
            },
            {
              "description": "A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters."
            }
          ]
        }
      },
      "required": [
        "Text",
        "LanguageCode"
      ],
      "title": "DetectSentimentRequest",
      "type": "object"
    },
    "DetectSentimentResponse": {
      "properties": {
        "Sentiment": {
          "allOf": [
            {
              "$ref": "#/definitions/SentimentType"
            },
            {
              "description": "The inferred sentiment that Amazon Comprehend has the highest level of confidence in."
            }
          ]
        },
        "SentimentScore": {
          "allOf": [
            {
              "$ref": "#/definitions/SentimentScore"
            },
            {
              "description": "An object that lists the sentiments, and their corresponding confidence levels."
            }
          ]
        }
      },
      "type": "object"
    },
    "DetectSyntaxRequest": {
      "properties": {
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/SyntaxLanguageCode"
            },
            {
              "description": "The language code of the input documents. You can specify any of the following languages supported by Amazon Comprehend: German (\"de\"), English (\"en\"), Spanish (\"es\"), French (\"fr\"), Italian (\"it\"), or Portuguese (\"pt\")."
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/CustomerInputString"
            },
            {
              "description": "A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded characters."
            }
          ]
        }
      },
      "required": [
        "Text",
        "LanguageCode"
      ],
      "title": "DetectSyntaxRequest",
      "type": "object"
    },
    "DetectSyntaxResponse": {
      "properties": {
        "SyntaxTokens": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfSyntaxTokens"
            },
            {
              "description": "A collection of syntax tokens describing the text. For each token, the response provides the text, the token type, where the text begins and ends, and the level of confidence that Amazon Comprehend has that the token is correct. For a list of token types, see <a>how-syntax</a>."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentClass": {
      "description": "Specifies the class that categorizes the document being analyzed",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the class."
            }
          ]
        },
        "Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The confidence score that Amazon Comprehend has this class correctly attributed."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentClassificationJobFilter": {
      "description": "Provides information for filtering a list of document classification jobs. For more information, see the operation. You can provide only one filter parameter in each request.",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "Filters on the name of the job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Filters the list based on job status. Returns only jobs with the specified status."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentClassificationJobProperties": {
      "description": "Provides information about a document classification job.",
      "properties": {
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data."
            }
          ]
        },
        "DocumentClassifierArn": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the document classifier. "
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the document classification job completed."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "The input data configuration that you supplied when you created the document classification job."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier assigned to the document classification job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name that you assigned to the document classification job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The current status of the document classification job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "A description of the status of the job."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "The output data configuration that you supplied when you created the document classification job."
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the document classification job was submitted for processing."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": " Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your document classification job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentClassificationJobPropertiesList": {
      "items": {
        "$ref": "#/definitions/DocumentClassificationJobProperties"
      },
      "type": "array"
    },
    "DocumentClassifierArn": {
      "maxLength": 256,
      "pattern": "arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
      "type": "string"
    },
    "DocumentClassifierAugmentedManifestsList": {
      "items": {
        "$ref": "#/definitions/AugmentedManifestsListItem"
      },
      "type": "array"
    },
    "DocumentClassifierDataFormat": {
      "enum": [
        "COMPREHEND_CSV",
        "AUGMENTED_MANIFEST"
      ],
      "type": "string"
    },
    "DocumentClassifierEndpointArn": {
      "maxLength": 256,
      "pattern": "arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier-endpoint/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
      "type": "string"
    },
    "DocumentClassifierFilter": {
      "description": "Provides information for filtering a list of document classifiers. You can only specify one filtering parameter in a request. For more information, see the operation.",
      "properties": {
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelStatus"
            },
            {
              "description": "Filters the list of classifiers based on status."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted after the specified time. Classifiers are returned in descending order, newest to oldest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted before the specified time. Classifiers are returned in ascending order, oldest to newest."
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentClassifierInputDataConfig": {
      "description": "<p>The input properties for training a document classifier. </p> <p>For more information on how the input file is formatted, see <a>how-document-classification-training-data</a>. </p>",
      "properties": {
        "AugmentedManifests": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierAugmentedManifestsList"
            },
            {
              "description": "<p>A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.</p> <p>This parameter is required if you set <code>DataFormat</code> to <code>AUGMENTED_MANIFEST</code>.</p>"
            }
          ]
        },
        "DataFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierDataFormat"
            },
            {
              "description": "<p>The format of your training data:</p> <ul> <li> <p> <code>COMPREHEND_CSV</code>: A two-column CSV file, where labels are provided in the first column, and documents are provided in the second. If you use this value, you must provide the <code>S3Uri</code> parameter in your request.</p> </li> <li> <p> <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its associated labels. </p> <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter in your request.</p> </li> </ul> <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the default.</p>"
            }
          ]
        },
        "LabelDelimiter": {
          "allOf": [
            {
              "$ref": "#/definitions/LabelDelimiter"
            },
            {
              "description": "Indicates the delimiter used to separate each label for training a multi-label classifier. The default delimiter between labels is a pipe (|). You can use a different character as a delimiter (if it's an allowed character) by specifying it under Delimiter for labels. If the training documents use a delimiter other than the default or the delimiter you specify, the labels on that line will be combined to make a single unique label, such as LABELLABELLABEL."
            }
          ]
        },
        "S3Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Uri"
            },
            {
              "description": "<p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.</p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p> <p>This parameter is required if you set <code>DataFormat</code> to <code>COMPREHEND_CSV</code>.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentClassifierMode": {
      "enum": [
        "MULTI_CLASS",
        "MULTI_LABEL"
      ],
      "type": "string"
    },
    "DocumentClassifierOutputDataConfig": {
      "description": "Provides output results configuration parameters for custom classifier jobs. ",
      "properties": {
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job. The KmsKeyId can be one of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>KMS Key Alias: <code>\"alias/ExampleAlias\"</code> </p> </li> <li> <p>ARN of a KMS Key Alias: <code>\"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias\"</code> </p> </li> </ul>"
            }
          ]
        },
        "S3Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Uri"
            },
            {
              "description": "<p>When you use the <code>OutputDataConfig</code> object while creating a custom classifier, you specify the Amazon S3 location where you want to write the confusion matrix. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of this output file.</p> <p>When the custom classifier job is finished, the service creates the output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the confusion matrix.</p>"
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentClassifierProperties": {
      "description": "Provides information about a document classifier.",
      "properties": {
        "ClassifierMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/ClassifierMetadata"
            },
            {
              "description": "Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data."
            }
          ]
        },
        "DocumentClassifierArn": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the document classifier."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that training the document classifier completed."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierInputDataConfig"
            },
            {
              "description": "The input data configuration that you supplied when you created the document classifier for training."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language code for the language of the documents that the classifier was trained on."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "Additional information about the status of the classifier."
            }
          ]
        },
        "Mode": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierMode"
            },
            {
              "description": "Indicates the mode in which the specific classifier was trained. This also indicates the format of input documents and the format of the confusion matrix. Each classifier can only be trained in one mode and this cannot be changed once the classifier is trained."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierOutputDataConfig"
            },
            {
              "description": " Provides output results configuration parameters for custom classifier jobs."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelStatus"
            },
            {
              "description": "The status of the document classifier. If the status is <code>TRAINED</code> the classifier is ready to use. If the status is <code>FAILED</code> you can see additional information about why the classifier wasn't trained in the <code>Message</code> field."
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the document classifier was submitted for training."
            }
          ]
        },
        "TrainingEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime."
            }
          ]
        },
        "TrainingStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime. "
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": " Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your custom classifier. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DocumentClassifierPropertiesList": {
      "items": {
        "$ref": "#/definitions/DocumentClassifierProperties"
      },
      "type": "array"
    },
    "DocumentLabel": {
      "description": "Specifies one of the label or labels that categorize the document being analyzed.",
      "properties": {
        "Name": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The name of the label."
            }
          ]
        },
        "Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The confidence score that Amazon Comprehend has this label correctly attributed."
            }
          ]
        }
      },
      "type": "object"
    },
    "DominantLanguage": {
      "description": "Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.",
      "properties": {
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The RFC 5646 language code for the dominant language. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the <i>IETF Tools</i> web site."
            }
          ]
        },
        "Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection."
            }
          ]
        }
      },
      "type": "object"
    },
    "DominantLanguageDetectionJobFilter": {
      "description": "Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "Filters on the name of the job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest."
            }
          ]
        }
      },
      "type": "object"
    },
    "DominantLanguageDetectionJobProperties": {
      "description": "Provides information about a dominant language detection job.",
      "properties": {
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the dominant language detection job completed."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "The input data configuration that you supplied when you created the dominant language detection job."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier assigned to the dominant language detection job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name that you assigned to the dominant language detection job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The current status of the dominant language detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "A description for the status of a job."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "The output data configuration that you supplied when you created the dominant language detection job."
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the dominant language detection job was submitted for processing."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": " Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your dominant language detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "DominantLanguageDetectionJobPropertiesList": {
      "items": {
        "$ref": "#/definitions/DominantLanguageDetectionJobProperties"
      },
      "type": "array"
    },
    "Double": {
      "format": "double",
      "type": "number"
    },
    "EndpointFilter": {
      "description": "The filter used to determine which endpoints are returned. You can filter jobs on their name, model, status, or the date and time that they were created. You can only set one filter at a time. ",
      "properties": {
        "CreationTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Specifies a date after which the returned endpoint or endpoints were created."
            }
          ]
        },
        "CreationTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Specifies a date before which the returned endpoint or endpoints were created."
            }
          ]
        },
        "ModelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendModelArn"
            },
            {
              "description": "The Amazon Resource Number (ARN) of the model to which the endpoint is attached."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/EndpointStatus"
            },
            {
              "description": "Specifies the status of the endpoint being returned. Possible values are: Creating, Ready, Updating, Deleting, Failed."
            }
          ]
        }
      },
      "type": "object"
    },
    "EndpointProperties": {
      "description": "Specifies information about the specified endpoint.",
      "properties": {
        "CreationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The creation date and time of the endpoint."
            }
          ]
        },
        "CurrentInferenceUnits": {
          "allOf": [
            {
              "$ref": "#/definitions/InferenceUnitsInteger"
            },
            {
              "description": "The number of inference units currently used by the model using this endpoint."
            }
          ]
        },
        "DesiredInferenceUnits": {
          "allOf": [
            {
              "$ref": "#/definitions/InferenceUnitsInteger"
            },
            {
              "description": "The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second."
            }
          ]
        },
        "EndpointArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendEndpointArn"
            },
            {
              "description": "The Amazon Resource Number (ARN) of the endpoint."
            }
          ]
        },
        "LastModifiedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The date and time that the endpoint was last modified."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "Specifies a reason for failure in cases of <code>Failed</code> status."
            }
          ]
        },
        "ModelArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendModelArn"
            },
            {
              "description": "The Amazon Resource Number (ARN) of the model to which the endpoint is attached."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/EndpointStatus"
            },
            {
              "description": "Specifies the status of the endpoint. Because the endpoint updates and creation are asynchronous, so customers will need to wait for the endpoint to be <code>Ready</code> status before making inference requests."
            }
          ]
        }
      },
      "type": "object"
    },
    "EndpointPropertiesList": {
      "items": {
        "$ref": "#/definitions/EndpointProperties"
      },
      "type": "array"
    },
    "EndpointStatus": {
      "enum": [
        "CREATING",
        "DELETING",
        "FAILED",
        "IN_SERVICE",
        "UPDATING"
      ],
      "type": "string"
    },
    "EntitiesDetectionJobFilter": {
      "description": "Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "Filters on the name of the job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest."
            }
          ]
        }
      },
      "type": "object"
    },
    "EntitiesDetectionJobProperties": {
      "description": "Provides information about an entities detection job.",
      "properties": {
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the entities detection job completed"
            }
          ]
        },
        "EntityRecognizerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "The input data configuration that you supplied when you created the entities detection job."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier assigned to the entities detection job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name that you assigned the entities detection job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The current status of the entities detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language code of the input documents."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "A description of the status of a job."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "The output data configuration that you supplied when you created the entities detection job. "
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the entities detection job was submitted for processing."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": " Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your entity detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "EntitiesDetectionJobPropertiesList": {
      "items": {
        "$ref": "#/definitions/EntitiesDetectionJobProperties"
      },
      "type": "array"
    },
    "Entity": {
      "description": "<p>Provides information about an entity. </p> <p> </p>",
      "properties": {
        "BeginOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point."
            }
          ]
        },
        "EndOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. "
            }
          ]
        },
        "Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection."
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The text of the entity."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityType"
            },
            {
              "description": "The entity's type."
            }
          ]
        }
      },
      "type": "object"
    },
    "EntityRecognizerAnnotations": {
      "description": "Describes the annotations associated with a entity recognizer.",
      "properties": {
        "S3Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Uri"
            },
            {
              "description": " Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling."
            }
          ]
        }
      },
      "required": [
        "S3Uri"
      ],
      "type": "object"
    },
    "EntityRecognizerArn": {
      "maxLength": 256,
      "pattern": "arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
      "type": "string"
    },
    "EntityRecognizerAugmentedManifestsList": {
      "items": {
        "$ref": "#/definitions/AugmentedManifestsListItem"
      },
      "type": "array"
    },
    "EntityRecognizerDataFormat": {
      "enum": [
        "COMPREHEND_CSV",
        "AUGMENTED_MANIFEST"
      ],
      "type": "string"
    },
    "EntityRecognizerDocuments": {
      "description": "Describes the training documents submitted with an entity recognizer.",
      "properties": {
        "S3Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Uri"
            },
            {
              "description": " Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling."
            }
          ]
        }
      },
      "required": [
        "S3Uri"
      ],
      "type": "object"
    },
    "EntityRecognizerEndpointArn": {
      "maxLength": 256,
      "pattern": "arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer-endpoint/[a-zA-Z0-9](-*[a-zA-Z0-9])*",
      "type": "string"
    },
    "EntityRecognizerEntityList": {
      "description": "Describes the entity recognizer submitted with an entity recognizer.",
      "properties": {
        "S3Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Uri"
            },
            {
              "description": "Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling."
            }
          ]
        }
      },
      "required": [
        "S3Uri"
      ],
      "type": "object"
    },
    "EntityRecognizerEvaluationMetrics": {
      "description": "Detailed information about the accuracy of an entity recognizer. ",
      "properties": {
        "F1Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of how accurate the recognizer results are for the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. "
            }
          ]
        },
        "Precision": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. "
            }
          ]
        },
        "Recall": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results."
            }
          ]
        }
      },
      "type": "object"
    },
    "EntityRecognizerFilter": {
      "description": "Provides information for filtering a list of entity recognizers. You can only specify one filtering parameter in a request. For more information, see the operation./&gt;",
      "properties": {
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelStatus"
            },
            {
              "description": "The status of an entity recognizer."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest."
            }
          ]
        }
      },
      "type": "object"
    },
    "EntityRecognizerInputDataConfig": {
      "description": "Specifies the format and location of the input data.",
      "properties": {
        "Annotations": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerAnnotations"
            },
            {
              "description": "The S3 location of the CSV file that annotates your training documents."
            }
          ]
        },
        "AugmentedManifests": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerAugmentedManifestsList"
            },
            {
              "description": "<p>A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.</p> <p>This parameter is required if you set <code>DataFormat</code> to <code>AUGMENTED_MANIFEST</code>.</p>"
            }
          ]
        },
        "DataFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerDataFormat"
            },
            {
              "description": "<p>The format of your training data:</p> <ul> <li> <p> <code>COMPREHEND_CSV</code>: A CSV file that supplements your training documents. The CSV file contains information about the custom entities that your trained model will detect. The required format of the file depends on whether you are providing annotations or an entity list.</p> <p>If you use this value, you must provide your CSV file by using either the <code>Annotations</code> or <code>EntityList</code> parameters. You must provide your training documents by using the <code>Documents</code> parameter.</p> </li> <li> <p> <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its labels. Each label annotates a named entity in the training document. </p> <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter in your request.</p> </li> </ul> <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the default.</p>"
            }
          ]
        },
        "Documents": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerDocuments"
            },
            {
              "description": "<p>The S3 location of the folder that contains the training documents for your custom entity recognizer.</p> <p>This parameter is required if you set <code>DataFormat</code> to <code>COMPREHEND_CSV</code>.</p>"
            }
          ]
        },
        "EntityList": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerEntityList"
            },
            {
              "description": "The S3 location of the CSV file that has the entity list for your custom entity recognizer."
            }
          ]
        },
        "EntityTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityTypesList"
            },
            {
              "description": "<p>The entity types in the labeled training data that Amazon Comprehend uses to train the custom entity recognizer. Any entity types that you don't specify are ignored.</p> <p>A maximum of 25 entity types can be used at one time to train an entity recognizer. Entity types must not contain the following invalid characters: \\n (line break), \\\\n (escaped line break), \\r (carriage return), \\\\r (escaped carriage return), \\t (tab), \\\\t (escaped tab), space, and , (comma). </p>"
            }
          ]
        }
      },
      "required": [
        "EntityTypes"
      ],
      "type": "object"
    },
    "EntityRecognizerMetadata": {
      "description": "Detailed information about an entity recognizer.",
      "properties": {
        "EntityTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerMetadataEntityTypesList"
            },
            {
              "description": "Entity types from the metadata of an entity recognizer."
            }
          ]
        },
        "EvaluationMetrics": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerEvaluationMetrics"
            },
            {
              "description": "Detailed information about the accuracy of an entity recognizer."
            }
          ]
        },
        "NumberOfTestDocuments": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": " The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents."
            }
          ]
        },
        "NumberOfTrainedDocuments": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": " The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents."
            }
          ]
        }
      },
      "type": "object"
    },
    "EntityRecognizerMetadataEntityTypesList": {
      "items": {
        "$ref": "#/definitions/EntityRecognizerMetadataEntityTypesListItem"
      },
      "type": "array"
    },
    "EntityRecognizerMetadataEntityTypesListItem": {
      "description": "Individual item from the list of entity types in the metadata of an entity recognizer.",
      "properties": {
        "EvaluationMetrics": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityTypesEvaluationMetrics"
            },
            {
              "description": "Detailed information about the accuracy of the entity recognizer for a specific item on the list of entity types. "
            }
          ]
        },
        "NumberOfTrainMentions": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "Indicates the number of times the given entity type was seen in the training data. "
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "Type of entity from the list of entity types in the metadata of an entity recognizer. "
            }
          ]
        }
      },
      "type": "object"
    },
    "EntityRecognizerProperties": {
      "description": "Describes information about an entity recognizer.",
      "properties": {
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": " The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the recognizer creation completed."
            }
          ]
        },
        "EntityRecognizerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerInputDataConfig"
            },
            {
              "description": "The input data properties of an entity recognizer."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": " The language of the input documents. All documents must be in the same language. Only English (\"en\") is currently supported."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": " A description of the status of the recognizer."
            }
          ]
        },
        "RecognizerMetadata": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerMetadata"
            },
            {
              "description": " Provides information about an entity recognizer."
            }
          ]
        },
        "Status": {
          "allOf": [
            {
              "$ref": "#/definitions/ModelStatus"
            },
            {
              "description": "Provides the status of the entity recognizer."
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the recognizer was submitted for processing."
            }
          ]
        },
        "TrainingEndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that training of the entity recognizer was completed."
            }
          ]
        },
        "TrainingStartTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that training of the entity recognizer started."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": " Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your custom entity recognizer. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "EntityRecognizerPropertiesList": {
      "items": {
        "$ref": "#/definitions/EntityRecognizerProperties"
      },
      "type": "array"
    },
    "EntityType": {
      "enum": [
        "PERSON",
        "LOCATION",
        "ORGANIZATION",
        "COMMERCIAL_ITEM",
        "EVENT",
        "DATE",
        "QUANTITY",
        "TITLE",
        "OTHER"
      ],
      "type": "string"
    },
    "EntityTypeName": {
      "maxLength": 64,
      "pattern": "^(?:(?!\\\\n+|\\\\t+|\\\\r+|[\\r\\t\\n\\s,]).)+$",
      "type": "string"
    },
    "EntityTypesEvaluationMetrics": {
      "description": "Detailed information about the accuracy of an entity recognizer for a specific entity type. ",
      "properties": {
        "F1Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of how accurate the recognizer results are for a specific entity type in the test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and the worst score is 0. "
            }
          ]
        },
        "Precision": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of the usefulness of the recognizer results for a specific entity type in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. "
            }
          ]
        },
        "Recall": {
          "allOf": [
            {
              "$ref": "#/definitions/Double"
            },
            {
              "description": "A measure of how complete the recognizer results are for a specific entity type in the test data. High recall means that the recognizer returned most of the relevant results."
            }
          ]
        }
      },
      "type": "object"
    },
    "EntityTypesList": {
      "items": {
        "$ref": "#/definitions/EntityTypesListItem"
      },
      "type": "array"
    },
    "EntityTypesListItem": {
      "description": "An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer.",
      "properties": {
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityTypeName"
            },
            {
              "description": "<p>An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer.</p> <p>Entity types must not contain the following invalid characters: \\n (line break), \\\\n (escaped line break, \\r (carriage return), \\\\r (escaped carriage return), \\t (tab), \\\\t (escaped tab), space, and , (comma).</p>"
            }
          ]
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "EventTypeString": {
      "maxLength": 40,
      "minLength": 1,
      "pattern": "[A-Z_]*",
      "type": "string"
    },
    "EventsDetectionJobFilter": {
      "description": "Provides information for filtering a list of event detection jobs.",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "Filters on the name of the events detection job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventsDetectionJobProperties": {
      "description": "Provides information about an events detection job.",
      "properties": {
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identify and Access Management (IAM) role that grants Amazon Comprehend read access to your input data."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the events detection job completed."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "The input data configuration that you supplied when you created the events detection job."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier assigned to the events detection job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name you assigned the events detection job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The current status of the events detection job."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language code of the input documents."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "A description of the status of the events detection job."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "The output data configuration that you supplied when you created the events detection job."
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the events detection job was submitted for processing."
            }
          ]
        },
        "TargetEventTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetEventTypes"
            },
            {
              "description": "The types of events that are detected by the job."
            }
          ]
        }
      },
      "type": "object"
    },
    "EventsDetectionJobPropertiesList": {
      "items": {
        "$ref": "#/definitions/EventsDetectionJobProperties"
      },
      "type": "array"
    },
    "Float": {
      "format": "float",
      "type": "number"
    },
    "IamRoleArn": {
      "maxLength": 2048,
      "minLength": 20,
      "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
      "type": "string"
    },
    "InferenceUnitsInteger": {
      "minimum": 1,
      "type": "integer"
    },
    "InputDataConfig": {
      "description": "The input properties for a topic detection job.",
      "properties": {
        "InputFormat": {
          "allOf": [
            {
              "$ref": "#/definitions/InputFormat"
            },
            {
              "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>"
            }
          ]
        },
        "S3Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Uri"
            },
            {
              "description": "<p>The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>"
            }
          ]
        }
      },
      "required": [
        "S3Uri"
      ],
      "type": "object"
    },
    "InputFormat": {
      "enum": [
        "ONE_DOC_PER_FILE",
        "ONE_DOC_PER_LINE"
      ],
      "type": "string"
    },
    "Integer": {
      "type": "integer"
    },
    "InternalServerException": {},
    "InvalidFilterException": {},
    "InvalidRequestException": {},
    "JobId": {
      "maxLength": 32,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
      "type": "string"
    },
    "JobName": {
      "maxLength": 256,
      "minLength": 1,
      "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
      "type": "string"
    },
    "JobNotFoundException": {},
    "JobStatus": {
      "enum": [
        "SUBMITTED",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED",
        "STOP_REQUESTED",
        "STOPPED"
      ],
      "type": "string"
    },
    "KeyPhrase": {
      "description": "Describes a key noun phrase.",
      "properties": {
        "BeginOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point."
            }
          ]
        },
        "EndOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A <code>code point</code> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point."
            }
          ]
        },
        "Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection."
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The text of a key noun phrase."
            }
          ]
        }
      },
      "type": "object"
    },
    "KeyPhrasesDetectionJobFilter": {
      "description": "Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "Filters on the name of the job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest."
            }
          ]
        }
      },
      "type": "object"
    },
    "KeyPhrasesDetectionJobProperties": {
      "description": "Provides information about a key phrases detection job.",
      "properties": {
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the key phrases detection job completed."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "The input data configuration that you supplied when you created the key phrases detection job."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier assigned to the key phrases detection job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name that you assigned the key phrases detection job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The current status of the key phrases detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language code of the input documents."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "A description of the status of a job."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "The output data configuration that you supplied when you created the key phrases detection job."
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the key phrases detection job was submitted for processing."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": " Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your key phrases detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "KeyPhrasesDetectionJobPropertiesList": {
      "items": {
        "$ref": "#/definitions/KeyPhrasesDetectionJobProperties"
      },
      "type": "array"
    },
    "KmsKeyId": {
      "maxLength": 2048,
      "type": "string"
    },
    "KmsKeyValidationException": {},
    "LabelDelimiter": {
      "maxLength": 1,
      "minLength": 1,
      "pattern": "^[ ~!@#$%^*\\-_+=|\\\\:;\\t>?/]$",
      "type": "string"
    },
    "LanguageCode": {
      "enum": [
        "en",
        "es",
        "fr",
        "de",
        "it",
        "pt",
        "ar",
        "hi",
        "ja",
        "ko",
        "zh",
        "zh-TW"
      ],
      "type": "string"
    },
    "ListDocumentClassificationJobsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassificationJobFilter"
            },
            {
              "description": "Filters the jobs that are returned. You can filter jobs on their names, status, or the date and time that they were submitted. You can only set one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page. The default is 100."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListDocumentClassificationJobsRequest",
      "type": "object"
    },
    "ListDocumentClassificationJobsResponse": {
      "properties": {
        "DocumentClassificationJobPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassificationJobPropertiesList"
            },
            {
              "description": "A list containing the properties of each job returned."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDocumentClassifiersRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierFilter"
            },
            {
              "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page. The default is 100."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListDocumentClassifiersRequest",
      "type": "object"
    },
    "ListDocumentClassifiersResponse": {
      "properties": {
        "DocumentClassifierPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierPropertiesList"
            },
            {
              "description": "A list containing the properties of each job returned."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListDominantLanguageDetectionJobsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/DominantLanguageDetectionJobFilter"
            },
            {
              "description": "Filters that jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page. The default is 100."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListDominantLanguageDetectionJobsRequest",
      "type": "object"
    },
    "ListDominantLanguageDetectionJobsResponse": {
      "properties": {
        "DominantLanguageDetectionJobPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/DominantLanguageDetectionJobPropertiesList"
            },
            {
              "description": "A list containing the properties of each job that is returned."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListEndpointsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/EndpointFilter"
            },
            {
              "description": "Filters the endpoints that are returned. You can filter endpoints on their name, model, status, or the date and time that they were created. You can only set one filter at a time. "
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page. The default is 100."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListEndpointsRequest",
      "type": "object"
    },
    "ListEndpointsResponse": {
      "properties": {
        "EndpointPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/EndpointPropertiesList"
            },
            {
              "description": "Displays a list of endpoint properties being retrieved by the service in response to the request."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListEntitiesDetectionJobsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitiesDetectionJobFilter"
            },
            {
              "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page. The default is 100."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListEntitiesDetectionJobsRequest",
      "type": "object"
    },
    "ListEntitiesDetectionJobsResponse": {
      "properties": {
        "EntitiesDetectionJobPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/EntitiesDetectionJobPropertiesList"
            },
            {
              "description": "A list containing the properties of each job that is returned."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListEntityRecognizersRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerFilter"
            },
            {
              "description": "Filters the list of entities returned. You can filter on <code>Status</code>, <code>SubmitTimeBefore</code>, or <code>SubmitTimeAfter</code>. You can only set one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": " The maximum number of results to return on each page. The default is 100."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListEntityRecognizersRequest",
      "type": "object"
    },
    "ListEntityRecognizersResponse": {
      "properties": {
        "EntityRecognizerPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerPropertiesList"
            },
            {
              "description": "The list of properties of an entity recognizer."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListEventsDetectionJobsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/EventsDetectionJobFilter"
            },
            {
              "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListEventsDetectionJobsRequest",
      "type": "object"
    },
    "ListEventsDetectionJobsResponse": {
      "properties": {
        "EventsDetectionJobPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/EventsDetectionJobPropertiesList"
            },
            {
              "description": "A list containing the properties of each job that is returned."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListKeyPhrasesDetectionJobsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyPhrasesDetectionJobFilter"
            },
            {
              "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page. The default is 100."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListKeyPhrasesDetectionJobsRequest",
      "type": "object"
    },
    "ListKeyPhrasesDetectionJobsResponse": {
      "properties": {
        "KeyPhrasesDetectionJobPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyPhrasesDetectionJobPropertiesList"
            },
            {
              "description": "A list containing the properties of each job that is returned."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListOfClasses": {
      "items": {
        "$ref": "#/definitions/DocumentClass"
      },
      "type": "array"
    },
    "ListOfDetectDominantLanguageResult": {
      "items": {
        "$ref": "#/definitions/BatchDetectDominantLanguageItemResult"
      },
      "type": "array"
    },
    "ListOfDetectEntitiesResult": {
      "items": {
        "$ref": "#/definitions/BatchDetectEntitiesItemResult"
      },
      "type": "array"
    },
    "ListOfDetectKeyPhrasesResult": {
      "items": {
        "$ref": "#/definitions/BatchDetectKeyPhrasesItemResult"
      },
      "type": "array"
    },
    "ListOfDetectSentimentResult": {
      "items": {
        "$ref": "#/definitions/BatchDetectSentimentItemResult"
      },
      "type": "array"
    },
    "ListOfDetectSyntaxResult": {
      "items": {
        "$ref": "#/definitions/BatchDetectSyntaxItemResult"
      },
      "type": "array"
    },
    "ListOfDominantLanguages": {
      "items": {
        "$ref": "#/definitions/DominantLanguage"
      },
      "type": "array"
    },
    "ListOfEntities": {
      "items": {
        "$ref": "#/definitions/Entity"
      },
      "type": "array"
    },
    "ListOfKeyPhrases": {
      "items": {
        "$ref": "#/definitions/KeyPhrase"
      },
      "type": "array"
    },
    "ListOfLabels": {
      "items": {
        "$ref": "#/definitions/DocumentLabel"
      },
      "type": "array"
    },
    "ListOfPiiEntities": {
      "items": {
        "$ref": "#/definitions/PiiEntity"
      },
      "type": "array"
    },
    "ListOfPiiEntityTypes": {
      "items": {
        "$ref": "#/definitions/PiiEntityType"
      },
      "type": "array"
    },
    "ListOfSyntaxTokens": {
      "items": {
        "$ref": "#/definitions/SyntaxToken"
      },
      "type": "array"
    },
    "ListPiiEntitiesDetectionJobsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/PiiEntitiesDetectionJobFilter"
            },
            {
              "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListPiiEntitiesDetectionJobsRequest",
      "type": "object"
    },
    "ListPiiEntitiesDetectionJobsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        },
        "PiiEntitiesDetectionJobPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/PiiEntitiesDetectionJobPropertiesList"
            },
            {
              "description": "A list containing the properties of each job that is returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListSentimentDetectionJobsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/SentimentDetectionJobFilter"
            },
            {
              "description": "Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page. The default is 100."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListSentimentDetectionJobsRequest",
      "type": "object"
    },
    "ListSentimentDetectionJobsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        },
        "SentimentDetectionJobPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/SentimentDetectionJobPropertiesList"
            },
            {
              "description": "A list containing the properties of each job that is returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are querying. "
            }
          ]
        }
      },
      "required": [
        "ResourceArn"
      ],
      "title": "ListTagsForResourceRequest",
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are querying."
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Tags associated with the Amazon Comprehend resource being queried. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with \"Sales\" as the key might be added to a resource to indicate its use by the sales department. "
            }
          ]
        }
      },
      "type": "object"
    },
    "ListTopicsDetectionJobsRequest": {
      "properties": {
        "Filter": {
          "allOf": [
            {
              "$ref": "#/definitions/TopicsDetectionJobFilter"
            },
            {
              "description": "Filters the jobs that are returned. Jobs can be filtered on their name, status, or the date and time that they were submitted. You can set only one filter at a time."
            }
          ]
        },
        "MaxResults": {
          "allOf": [
            {
              "$ref": "#/definitions/MaxResultsInteger"
            },
            {
              "description": "The maximum number of results to return in each page. The default is 100."
            }
          ]
        },
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        }
      },
      "title": "ListTopicsDetectionJobsRequest",
      "type": "object"
    },
    "ListTopicsDetectionJobsResponse": {
      "properties": {
        "NextToken": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "Identifies the next page of results to return."
            }
          ]
        },
        "TopicsDetectionJobPropertiesList": {
          "allOf": [
            {
              "$ref": "#/definitions/TopicsDetectionJobPropertiesList"
            },
            {
              "description": "A list containing the properties of each job that is returned."
            }
          ]
        }
      },
      "type": "object"
    },
    "MaskCharacter": {
      "maxLength": 1,
      "minLength": 1,
      "pattern": "[!@#$%&*]",
      "type": "string"
    },
    "MaxResultsInteger": {
      "maximum": 500,
      "minimum": 1,
      "type": "integer"
    },
    "ModelStatus": {
      "enum": [
        "SUBMITTED",
        "TRAINING",
        "DELETING",
        "STOP_REQUESTED",
        "STOPPED",
        "IN_ERROR",
        "TRAINED"
      ],
      "type": "string"
    },
    "NumberOfTopicsInteger": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer"
    },
    "OutputDataConfig": {
      "description": "<p>Provides configuration parameters for the output of topic detection jobs.</p> <p/>",
      "properties": {
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job. The KmsKeyId can be one of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>KMS Key Alias: <code>\"alias/ExampleAlias\"</code> </p> </li> <li> <p>ARN of a KMS Key Alias: <code>\"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias\"</code> </p> </li> </ul>"
            }
          ]
        },
        "S3Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Uri"
            },
            {
              "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p>"
            }
          ]
        }
      },
      "required": [
        "S3Uri"
      ],
      "type": "object"
    },
    "PartOfSpeechTag": {
      "description": "Identifies the part of speech represented by the token and gives the confidence that Amazon Comprehend has that the part of speech was correctly identified. For more information about the parts of speech that Amazon Comprehend can identify, see <a>how-syntax</a>.",
      "properties": {
        "Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The confidence that Amazon Comprehend has that the part of speech was correctly identified."
            }
          ]
        },
        "Tag": {
          "allOf": [
            {
              "$ref": "#/definitions/PartOfSpeechTagType"
            },
            {
              "description": "Identifies the part of speech that the token represents."
            }
          ]
        }
      },
      "type": "object"
    },
    "PartOfSpeechTagType": {
      "enum": [
        "ADJ",
        "ADP",
        "ADV",
        "AUX",
        "CONJ",
        "CCONJ",
        "DET",
        "INTJ",
        "NOUN",
        "NUM",
        "O",
        "PART",
        "PRON",
        "PROPN",
        "PUNCT",
        "SCONJ",
        "SYM",
        "VERB"
      ],
      "type": "string"
    },
    "PiiEntitiesDetectionJobFilter": {
      "description": "Provides information for filtering a list of PII entity detection jobs.",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "Filters on the name of the job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest."
            }
          ]
        }
      },
      "type": "object"
    },
    "PiiEntitiesDetectionJobProperties": {
      "description": "Provides information about a PII entities detection job.",
      "properties": {
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the PII entities detection job completed."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "The input properties for a PII entities detection job."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier assigned to the PII entities detection job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name that you assigned the PII entities detection job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The current status of the PII entities detection job. If the status is <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language code of the input documents"
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "A description of the status of a job."
            }
          ]
        },
        "Mode": {
          "allOf": [
            {
              "$ref": "#/definitions/PiiEntitiesDetectionMode"
            },
            {
              "description": "Specifies whether the output provides the locations (offsets) of PII entities or a file in which PII entities are redacted."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/PiiOutputDataConfig"
            },
            {
              "description": "The output data configuration that you supplied when you created the PII entities detection job."
            }
          ]
        },
        "RedactionConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/RedactionConfig"
            },
            {
              "description": "<p>Provides configuration parameters for PII entity redaction.</p> <p>This parameter is required if you set the <code>Mode</code> parameter to <code>ONLY_REDACTION</code>. In that case, you must provide a <code>RedactionConfig</code> definition that includes the <code>PiiEntityTypes</code> parameter.</p>"
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the PII entities detection job was submitted for processing."
            }
          ]
        }
      },
      "type": "object"
    },
    "PiiEntitiesDetectionJobPropertiesList": {
      "items": {
        "$ref": "#/definitions/PiiEntitiesDetectionJobProperties"
      },
      "type": "array"
    },
    "PiiEntitiesDetectionMaskMode": {
      "enum": [
        "MASK",
        "REPLACE_WITH_PII_ENTITY_TYPE"
      ],
      "type": "string"
    },
    "PiiEntitiesDetectionMode": {
      "enum": [
        "ONLY_REDACTION",
        "ONLY_OFFSETS"
      ],
      "type": "string"
    },
    "PiiEntity": {
      "description": "Provides information about a PII entity.",
      "properties": {
        "BeginOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "A character offset in the input text that shows where the PII entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point."
            }
          ]
        },
        "EndOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "A character offset in the input text that shows where the PII entity ends. The offset returns the position of each UTF-8 code point in the string. A <i>code point</i> is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point."
            }
          ]
        },
        "Score": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The level of confidence that Amazon Comprehend has in the accuracy of the detection."
            }
          ]
        },
        "Type": {
          "allOf": [
            {
              "$ref": "#/definitions/PiiEntityType"
            },
            {
              "description": "The entity's type."
            }
          ]
        }
      },
      "type": "object"
    },
    "PiiEntityType": {
      "enum": [
        "BANK_ACCOUNT_NUMBER",
        "BANK_ROUTING",
        "CREDIT_DEBIT_NUMBER",
        "CREDIT_DEBIT_CVV",
        "CREDIT_DEBIT_EXPIRY",
        "PIN",
        "EMAIL",
        "ADDRESS",
        "NAME",
        "PHONE",
        "SSN",
        "DATE_TIME",
        "PASSPORT_NUMBER",
        "DRIVER_ID",
        "URL",
        "AGE",
        "USERNAME",
        "PASSWORD",
        "AWS_ACCESS_KEY",
        "AWS_SECRET_KEY",
        "IP_ADDRESS",
        "MAC_ADDRESS",
        "ALL"
      ],
      "type": "string"
    },
    "PiiOutputDataConfig": {
      "description": "Provides configuration parameters for the output of PII entity detection jobs.",
      "properties": {
        "KmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job."
            }
          ]
        },
        "S3Uri": {
          "allOf": [
            {
              "$ref": "#/definitions/S3Uri"
            },
            {
              "description": "When you use the <code>PiiOutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. "
            }
          ]
        }
      },
      "required": [
        "S3Uri"
      ],
      "type": "object"
    },
    "RedactionConfig": {
      "description": "Provides configuration parameters for PII entity redaction.",
      "properties": {
        "MaskCharacter": {
          "allOf": [
            {
              "$ref": "#/definitions/MaskCharacter"
            },
            {
              "description": "A character that replaces each character in the redacted PII entity."
            }
          ]
        },
        "MaskMode": {
          "allOf": [
            {
              "$ref": "#/definitions/PiiEntitiesDetectionMaskMode"
            },
            {
              "description": "Specifies whether the PII entity is redacted with the mask character or the entity type."
            }
          ]
        },
        "PiiEntityTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/ListOfPiiEntityTypes"
            },
            {
              "description": "An array of the types of PII entities that Amazon Comprehend detects in the input text for your request."
            }
          ]
        }
      },
      "type": "object"
    },
    "ResourceInUseException": {},
    "ResourceLimitExceededException": {},
    "ResourceNotFoundException": {},
    "ResourceUnavailableException": {},
    "S3Uri": {
      "maxLength": 1024,
      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
      "type": "string"
    },
    "SecurityGroupId": {
      "maxLength": 32,
      "minLength": 1,
      "pattern": "[-0-9a-zA-Z]+",
      "type": "string"
    },
    "SecurityGroupIds": {
      "items": {
        "$ref": "#/definitions/SecurityGroupId"
      },
      "maxItems": 5,
      "minItems": 1,
      "type": "array"
    },
    "SentimentDetectionJobFilter": {
      "description": "Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "Filters on the name of the job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Filters the list of jobs based on job status. Returns only jobs with the specified status."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest."
            }
          ]
        }
      },
      "type": "object"
    },
    "SentimentDetectionJobProperties": {
      "description": "Provides information about a sentiment detection job.",
      "properties": {
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data."
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the sentiment detection job ended."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "The input data configuration that you supplied when you created the sentiment detection job."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier assigned to the sentiment detection job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name that you assigned to the sentiment detection job"
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The current status of the sentiment detection job. If the status is <code>FAILED</code>, the <code>Messages</code> field shows the reason for the failure."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language code of the input documents."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "A description of the status of a job."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "The output data configuration that you supplied when you created the sentiment detection job."
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the sentiment detection job was submitted for processing."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": " Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your sentiment detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "SentimentDetectionJobPropertiesList": {
      "items": {
        "$ref": "#/definitions/SentimentDetectionJobProperties"
      },
      "type": "array"
    },
    "SentimentScore": {
      "description": "Describes the level of confidence that Amazon Comprehend has in the accuracy of its detection of sentiments.",
      "properties": {
        "Mixed": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment."
            }
          ]
        },
        "Negative": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment."
            }
          ]
        },
        "Neutral": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment."
            }
          ]
        },
        "Positive": {
          "allOf": [
            {
              "$ref": "#/definitions/Float"
            },
            {
              "description": "The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment."
            }
          ]
        }
      },
      "type": "object"
    },
    "SentimentType": {
      "enum": [
        "POSITIVE",
        "NEGATIVE",
        "NEUTRAL",
        "MIXED"
      ],
      "type": "string"
    },
    "StartDocumentClassificationJobRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data."
            }
          ]
        },
        "DocumentClassifierArn": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the document classifier to use to process the job."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "Specifies the format and location of the input data for the job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The identifier of the job."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "Specifies where to send the output files."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your document classification job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "required": [
        "DocumentClassifierArn",
        "InputDataConfig",
        "OutputDataConfig",
        "DataAccessRoleArn"
      ],
      "title": "StartDocumentClassificationJobRequest",
      "type": "object"
    },
    "StartDocumentClassificationJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier generated for the job. To get the status of the job, use this identifier with the operation."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "<p>The status of the job:</p> <ul> <li> <p>SUBMITTED - The job has been received and queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. For details, use the operation.</p> </li> <li> <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.</p> </li> <li> <p>STOPPED - The job was successfully stopped without completing.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "StartDominantLanguageDetectionJobRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "Specifies the format and location of the input data for the job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "An identifier for the job."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "Specifies where to send the output files."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your dominant language detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "required": [
        "InputDataConfig",
        "OutputDataConfig",
        "DataAccessRoleArn"
      ],
      "title": "StartDominantLanguageDetectionJobRequest",
      "type": "object"
    },
    "StartDominantLanguageDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier generated for the job. To get the status of a job, use this identifier with the operation."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "StartEntitiesDetectionJobRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>."
            }
          ]
        },
        "EntityRecognizerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the specific entity recognizer to be used by the <code>StartEntitiesDetectionJob</code>. This ARN is optional and is only used for a custom entity recognition job."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "Specifies the format and location of the input data for the job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The identifier of the job."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents. All documents must be in the same language. You can specify any of the languages supported by Amazon Comprehend. If custom entities recognition is used, this parameter is ignored and the language used for training the model is used instead."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "Specifies where to send the output files."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your entity detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "required": [
        "InputDataConfig",
        "OutputDataConfig",
        "DataAccessRoleArn",
        "LanguageCode"
      ],
      "title": "StartEntitiesDetectionJobRequest",
      "type": "object"
    },
    "StartEntitiesDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier generated for the job. To get the status of job, use this identifier with the operation."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> <li> <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.</p> </li> <li> <p>STOPPED - The job was successfully stopped without completing.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "StartEventsDetectionJobRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "An unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "Specifies the format and location of the input data for the job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The identifier of the events detection job."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language code of the input documents."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "Specifies where to send the output files."
            }
          ]
        },
        "TargetEventTypes": {
          "allOf": [
            {
              "$ref": "#/definitions/TargetEventTypes"
            },
            {
              "description": "The types of events to detect in the input documents."
            }
          ]
        }
      },
      "required": [
        "InputDataConfig",
        "OutputDataConfig",
        "DataAccessRoleArn",
        "LanguageCode",
        "TargetEventTypes"
      ],
      "title": "StartEventsDetectionJobRequest",
      "type": "object"
    },
    "StartEventsDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "An unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The status of the events detection job."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartKeyPhrasesDetectionJobRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "Specifies the format and location of the input data for the job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The identifier of the job."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "Specifies where to send the output files."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": " Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your key phrases detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "required": [
        "InputDataConfig",
        "OutputDataConfig",
        "DataAccessRoleArn",
        "LanguageCode"
      ],
      "title": "StartKeyPhrasesDetectionJobRequest",
      "type": "object"
    },
    "StartKeyPhrasesDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier generated for the job. To get the status of a job, use this identifier with the operation."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "StartPiiEntitiesDetectionJobRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "The input properties for a PII entities detection job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The identifier of the job."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents."
            }
          ]
        },
        "Mode": {
          "allOf": [
            {
              "$ref": "#/definitions/PiiEntitiesDetectionMode"
            },
            {
              "description": "Specifies whether the output provides the locations (offsets) of PII entities or a file in which PII entities are redacted."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "Provides conﬁguration parameters for the output of PII entity detection jobs."
            }
          ]
        },
        "RedactionConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/RedactionConfig"
            },
            {
              "description": "<p>Provides configuration parameters for PII entity redaction.</p> <p>This parameter is required if you set the <code>Mode</code> parameter to <code>ONLY_REDACTION</code>. In that case, you must provide a <code>RedactionConfig</code> definition that includes the <code>PiiEntityTypes</code> parameter.</p>"
            }
          ]
        }
      },
      "required": [
        "InputDataConfig",
        "OutputDataConfig",
        "Mode",
        "DataAccessRoleArn",
        "LanguageCode"
      ],
      "title": "StartPiiEntitiesDetectionJobRequest",
      "type": "object"
    },
    "StartPiiEntitiesDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier generated for the job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The status of the job."
            }
          ]
        }
      },
      "type": "object"
    },
    "StartSentimentDetectionJobRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "Specifies the format and location of the input data for the job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The identifier of the job."
            }
          ]
        },
        "LanguageCode": {
          "allOf": [
            {
              "$ref": "#/definitions/LanguageCode"
            },
            {
              "description": "The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "Specifies where to send the output files. "
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your sentiment detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "required": [
        "InputDataConfig",
        "OutputDataConfig",
        "DataAccessRoleArn",
        "LanguageCode"
      ],
      "title": "StartSentimentDetectionJobRequest",
      "type": "object"
    },
    "StartSentimentDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier generated for the job. To get the status of a job, use this identifier with the operation."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "<p>The status of the job. </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the operation.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "StartTopicsDetectionJobRequest": {
      "properties": {
        "ClientRequestToken": {
          "allOf": [
            {
              "$ref": "#/definitions/ClientRequestTokenString"
            },
            {
              "description": "A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one."
            }
          ]
        },
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "Specifies the format and location of the input data for the job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The identifier of the job."
            }
          ]
        },
        "NumberOfTopics": {
          "allOf": [
            {
              "$ref": "#/definitions/NumberOfTopicsInteger"
            },
            {
              "description": "The number of topics to detect."
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "Specifies where to send the output files. The output is a compressed archive with two files, <code>topic-terms.csv</code> that lists the terms associated with each topic, and <code>doc-topics.csv</code> that lists the documents associated with each topic"
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your topic detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "required": [
        "InputDataConfig",
        "OutputDataConfig",
        "DataAccessRoleArn"
      ],
      "title": "StartTopicsDetectionJobRequest",
      "type": "object"
    },
    "StartTopicsDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier generated for the job. To get the status of the job, use this identifier with the <code>DescribeTopicDetectionJob</code> operation."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "<p>The status of the job: </p> <ul> <li> <p>SUBMITTED - The job has been received and is queued for processing.</p> </li> <li> <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p> </li> <li> <p>COMPLETED - The job was successfully completed and the output is available.</p> </li> <li> <p>FAILED - The job did not complete. To get details, use the <code>DescribeTopicDetectionJob</code> operation.</p> </li> </ul>"
            }
          ]
        }
      },
      "type": "object"
    },
    "StopDominantLanguageDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the dominant language detection job to stop."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "StopDominantLanguageDetectionJobRequest",
      "type": "object"
    },
    "StopDominantLanguageDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the dominant language detection job to stop."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopDominantLanguageDetectionJob</code> operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopEntitiesDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the entities detection job to stop."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "StopEntitiesDetectionJobRequest",
      "type": "object"
    },
    "StopEntitiesDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the entities detection job to stop."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopEntitiesDetectionJob</code> operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopEventsDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the events detection job to stop."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "StopEventsDetectionJobRequest",
      "type": "object"
    },
    "StopEventsDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the events detection job to stop."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The status of the events detection job."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopKeyPhrasesDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the key phrases detection job to stop."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "StopKeyPhrasesDetectionJobRequest",
      "type": "object"
    },
    "StopKeyPhrasesDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the key phrases detection job to stop."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopKeyPhrasesDetectionJob</code> operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopPiiEntitiesDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the PII entities detection job to stop."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "StopPiiEntitiesDetectionJobRequest",
      "type": "object"
    },
    "StopPiiEntitiesDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the PII entities detection job to stop."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The status of the PII entities detection job."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopSentimentDetectionJobRequest": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the sentiment detection job to stop."
            }
          ]
        }
      },
      "required": [
        "JobId"
      ],
      "title": "StopSentimentDetectionJobRequest",
      "type": "object"
    },
    "StopSentimentDetectionJobResponse": {
      "properties": {
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier of the sentiment detection job to stop."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Either <code>STOP_REQUESTED</code> if the job is currently running, or <code>STOPPED</code> if the job was previously stopped with the <code>StopSentimentDetectionJob</code> operation."
            }
          ]
        }
      },
      "type": "object"
    },
    "StopTrainingDocumentClassifierRequest": {
      "properties": {
        "DocumentClassifierArn": {
          "allOf": [
            {
              "$ref": "#/definitions/DocumentClassifierArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the document classifier currently being trained."
            }
          ]
        }
      },
      "required": [
        "DocumentClassifierArn"
      ],
      "title": "StopTrainingDocumentClassifierRequest",
      "type": "object"
    },
    "StopTrainingDocumentClassifierResponse": {
      "properties": {},
      "type": "object"
    },
    "StopTrainingEntityRecognizerRequest": {
      "properties": {
        "EntityRecognizerArn": {
          "allOf": [
            {
              "$ref": "#/definitions/EntityRecognizerArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) that identifies the entity recognizer currently being trained."
            }
          ]
        }
      },
      "required": [
        "EntityRecognizerArn"
      ],
      "title": "StopTrainingEntityRecognizerRequest",
      "type": "object"
    },
    "StopTrainingEntityRecognizerResponse": {
      "properties": {},
      "type": "object"
    },
    "String": {
      "minLength": 1,
      "type": "string"
    },
    "SubnetId": {
      "maxLength": 32,
      "minLength": 1,
      "pattern": "[-0-9a-zA-Z]+",
      "type": "string"
    },
    "Subnets": {
      "items": {
        "$ref": "#/definitions/SubnetId"
      },
      "maxItems": 16,
      "minItems": 1,
      "type": "array"
    },
    "SyntaxLanguageCode": {
      "enum": [
        "en",
        "es",
        "fr",
        "de",
        "it",
        "pt"
      ],
      "type": "string"
    },
    "SyntaxToken": {
      "description": "Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.",
      "properties": {
        "BeginOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The zero-based offset from the beginning of the source text to the first character in the word."
            }
          ]
        },
        "EndOffset": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The zero-based offset from the beginning of the source text to the last character in the word."
            }
          ]
        },
        "PartOfSpeech": {
          "allOf": [
            {
              "$ref": "#/definitions/PartOfSpeechTag"
            },
            {
              "description": "Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see <a>how-syntax</a>."
            }
          ]
        },
        "Text": {
          "allOf": [
            {
              "$ref": "#/definitions/String"
            },
            {
              "description": "The word that was recognized in the source text."
            }
          ]
        },
        "TokenId": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "A unique identifier for a token."
            }
          ]
        }
      },
      "type": "object"
    },
    "Tag": {
      "description": "A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by a particular department. ",
      "properties": {
        "Key": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKey"
            },
            {
              "description": "The initial part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use “Department” as the key portion of the pair, with multiple possible values such as “sales,” “legal,” and “administration.” "
            }
          ]
        },
        "Value": {
          "allOf": [
            {
              "$ref": "#/definitions/TagValue"
            },
            {
              "description": " The second part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use “Department” as the initial (key) portion of the pair, with a value of “sales” to indicate the sales department. "
            }
          ]
        }
      },
      "required": [
        "Key"
      ],
      "type": "object"
    },
    "TagKey": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the given Amazon Comprehend resource to which you want to associate the tags. "
            }
          ]
        },
        "Tags": {
          "allOf": [
            {
              "$ref": "#/definitions/TagList"
            },
            {
              "description": "Tags being associated with a specific Amazon Comprehend resource. There can be a maximum of 50 tags (both existing and pending) associated with a specific resource. "
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "title": "TagResourceRequest",
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string"
    },
    "TargetEventTypes": {
      "items": {
        "$ref": "#/definitions/EventTypeString"
      },
      "minItems": 1,
      "type": "array"
    },
    "TextSizeLimitExceededException": {},
    "Timestamp": {
      "format": "date-time",
      "type": "string"
    },
    "TooManyRequestsException": {},
    "TooManyTagKeysException": {},
    "TooManyTagsException": {},
    "TopicsDetectionJobFilter": {
      "description": "Provides information for filtering topic detection jobs. For more information, see .",
      "properties": {
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "<p/>"
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "Filters the list of topic detection jobs based on job status. Returns only jobs with the specified status."
            }
          ]
        },
        "SubmitTimeAfter": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest."
            }
          ]
        },
        "SubmitTimeBefore": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest."
            }
          ]
        }
      },
      "type": "object"
    },
    "TopicsDetectionJobProperties": {
      "description": "Provides information about a topic detection job.",
      "properties": {
        "DataAccessRoleArn": {
          "allOf": [
            {
              "$ref": "#/definitions/IamRoleArn"
            },
            {
              "description": "The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your job data. "
            }
          ]
        },
        "EndTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the topic detection job was completed."
            }
          ]
        },
        "InputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/InputDataConfig"
            },
            {
              "description": "The input data configuration supplied when you created the topic detection job."
            }
          ]
        },
        "JobId": {
          "allOf": [
            {
              "$ref": "#/definitions/JobId"
            },
            {
              "description": "The identifier assigned to the topic detection job."
            }
          ]
        },
        "JobName": {
          "allOf": [
            {
              "$ref": "#/definitions/JobName"
            },
            {
              "description": "The name of the topic detection job."
            }
          ]
        },
        "JobStatus": {
          "allOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "description": "The current status of the topic detection job. If the status is <code>Failed</code>, the reason for the failure is shown in the <code>Message</code> field."
            }
          ]
        },
        "Message": {
          "allOf": [
            {
              "$ref": "#/definitions/AnyLengthString"
            },
            {
              "description": "A description for the status of a job."
            }
          ]
        },
        "NumberOfTopics": {
          "allOf": [
            {
              "$ref": "#/definitions/Integer"
            },
            {
              "description": "The number of topics to detect supplied when you created the topic detection job. The default is 10. "
            }
          ]
        },
        "OutputDataConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/OutputDataConfig"
            },
            {
              "description": "The output data configuration supplied when you created the topic detection job."
            }
          ]
        },
        "SubmitTime": {
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "description": "The time that the topic detection job was submitted for processing."
            }
          ]
        },
        "VolumeKmsKeyId": {
          "allOf": [
            {
              "$ref": "#/definitions/KmsKeyId"
            },
            {
              "description": "<p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
            }
          ]
        },
        "VpcConfig": {
          "allOf": [
            {
              "$ref": "#/definitions/VpcConfig"
            },
            {
              "description": "Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your topic detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
            }
          ]
        }
      },
      "type": "object"
    },
    "TopicsDetectionJobPropertiesList": {
      "items": {
        "$ref": "#/definitions/TopicsDetectionJobProperties"
      },
      "type": "array"
    },
    "UnsupportedLanguageException": {},
    "UntagResourceRequest": {
      "properties": {
        "ResourceArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendArn"
            },
            {
              "description": " The Amazon Resource Name (ARN) of the given Amazon Comprehend resource from which you want to remove the tags. "
            }
          ]
        },
        "TagKeys": {
          "allOf": [
            {
              "$ref": "#/definitions/TagKeyList"
            },
            {
              "description": "The initial part of a key-value pair that forms a tag being removed from a given resource. For example, a tag with \"Sales\" as the key might be added to a resource to indicate its use by the sales department. Keys must be unique and cannot be duplicated for a particular resource. "
            }
          ]
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "title": "UntagResourceRequest",
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateEndpointRequest": {
      "properties": {
        "DesiredInferenceUnits": {
          "allOf": [
            {
              "$ref": "#/definitions/InferenceUnitsInteger"
            },
            {
              "description": " The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second."
            }
          ]
        },
        "EndpointArn": {
          "allOf": [
            {
              "$ref": "#/definitions/ComprehendEndpointArn"
            },
            {
              "description": "The Amazon Resource Number (ARN) of the endpoint being updated."
            }
          ]
        }
      },
      "required": [
        "EndpointArn",
        "DesiredInferenceUnits"
      ],
      "title": "UpdateEndpointRequest",
      "type": "object"
    },
    "UpdateEndpointResponse": {
      "properties": {},
      "type": "object"
    },
    "VpcConfig": {
      "description": " Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. ",
      "properties": {
        "SecurityGroupIds": {
          "allOf": [
            {
              "$ref": "#/definitions/SecurityGroupIds"
            },
            {
              "description": "The ID number for a security group on an instance of your private VPC. Security groups on your VPC function serve as a virtual firewall to control inbound and outbound traffic and provides security for the resources that you’ll be accessing on the VPC. This ID number is preceded by \"sg-\", for instance: \"sg-03b388029b0a285ea\". For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">Security Groups for your VPC</a>. "
            }
          ]
        },
        "Subnets": {
          "allOf": [
            {
              "$ref": "#/definitions/Subnets"
            },
            {
              "description": "The ID for each subnet being used in your private VPC. This subnet is a subset of the a range of IPv4 addresses used by the VPC and is specific to a given availability zone in the VPC’s region. This ID number is preceded by \"subnet-\", for instance: \"subnet-04ccf456919e69055\". For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">VPCs and Subnets</a>. "
            }
          ]
        }
      },
      "required": [
        "SecurityGroupIds",
        "Subnets"
      ],
      "type": "object"
    }
  },
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/comprehend/"
  },
  "x-components": {
    "parameters": {
      "X-Amz-Algorithm": {
        "in": "header",
        "name": "X-Amz-Algorithm",
        "required": false,
        "type": "string"
      },
      "X-Amz-Content-Sha256": {
        "in": "header",
        "name": "X-Amz-Content-Sha256",
        "required": false,
        "type": "string"
      },
      "X-Amz-Credential": {
        "in": "header",
        "name": "X-Amz-Credential",
        "required": false,
        "type": "string"
      },
      "X-Amz-Date": {
        "in": "header",
        "name": "X-Amz-Date",
        "required": false,
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "in": "header",
        "name": "X-Amz-Security-Token",
        "required": false,
        "type": "string"
      },
      "X-Amz-Signature": {
        "in": "header",
        "name": "X-Amz-Signature",
        "required": false,
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "in": "header",
        "name": "X-Amz-SignedHeaders",
        "required": false,
        "type": "string"
      }
    }
  },
  "x-hasEquivalentPaths": true
}